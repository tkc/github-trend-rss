<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for javascript - JavaScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for javascript.</description>
        <lastBuildDate>Mon, 06 Oct 2025 00:05:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[meshery/meshery]]></title>
            <link>https://github.com/meshery/meshery</link>
            <guid>https://github.com/meshery/meshery</guid>
            <pubDate>Mon, 06 Oct 2025 00:05:00 GMT</pubDate>
            <description><![CDATA[Meshery, the cloud native manager]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/meshery/meshery">meshery/meshery</a></h1>
            <p>Meshery, the cloud native manager</p>
            <p>Language: JavaScript</p>
            <p>Stars: 8,541</p>
            <p>Forks: 2,675</p>
            <p>Stars today: 440 stars today</p>
            <h2>README</h2><pre>
&lt;p style=&quot;text-align:center;&quot; align=&quot;center&quot;&gt;&lt;a href=&quot;https://meshery.io&quot;&gt;&lt;picture&gt;
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-light-text-side.svg&quot;&gt;
 &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&quot;
alt=&quot;Meshery Logo&quot; width=&quot;70%&quot; /&gt;&lt;/picture&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://hub.docker.com/r/meshery/meshery&quot; alt=&quot;Docker pulls&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/docker/pulls/meshery/meshery.svg&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/issues?q=is%3Aopen%20is%3Aissue%20archived%3Afalse%20(org%3Ameshery%20OR%20org%3Aservice-mesh-performance%20OR%20org%3Aservice-mesh-patterns%20OR%20org%3Ameshery-extensions)%20label%3A%22help%20wanted%22%20&quot; alt=&quot;GitHub issues by-label&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/issues/meshery/meshery/help%20wanted.svg?color=informational&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/meshery/meshery/blob/master/LICENSE&quot; alt=&quot;LICENSE&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/license/meshery/meshery?color=brightgreen&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://artifacthub.io/packages/helm/meshery/meshery&quot; alt=&quot;Artifact Hub Meshery&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/endpoint?color=brightgreen&amp;label=Helm%20Chart&amp;style=plastic&amp;url=https%3A%2F%2Fartifacthub.io%2Fbadge%2Frepository%2Fartifact-hub&quot; /&gt;&lt;/a&gt;  
&lt;a href=&quot;https://goreportcard.com/report/github.com/meshery/meshery&quot; alt=&quot;Go Report Card&quot;&gt;
  &lt;img src=&quot;https://goreportcard.com/badge/github.com/meshery/meshery&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/meshery/meshery/actions&quot; alt=&quot;Build Status&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/meshery/meshery/release-drafter.yml&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/3564&quot; alt=&quot;CLI Best Practices&quot;&gt;
  &lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/3564/badge&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://meshery.io/community#discussion-forums&quot; alt=&quot;Discussion Forum&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/discourse/users?label=discuss&amp;logo=discourse&amp;server=https%3A%2F%2Fmeshery.io/community&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://slack.meshery.io&quot; alt=&quot;Join Slack&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/badge/Slack-@meshery.svg?logo=slack&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=mesheryio&quot; alt=&quot;Twitter Follow&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/twitter/follow/mesheryio.svg?label=Follow+Meshery&amp;style=social&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/meshery/meshery/releases&quot; alt=&quot;Meshery Downloads&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/downloads/meshery/meshery/total&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://scorecard.dev/viewer/?uri=github.com/meshery/meshery&quot; alt=&quot;OpenSSF Scorecard&quot;&gt;
  &lt;img src=&quot;https://api.scorecard.dev/projects/github.com/meshery/meshery/badge&quot; /&gt;&lt;/a&gt; 
&lt;a href=&quot;https://trendshift.io/repositories/888&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/888&quot; alt=&quot;meshery%2Fmeshery | Trendshift&quot; style=&quot;width: 150px;&quot; width=&quot;150px&quot; /&gt;&lt;/a&gt;
&lt;!-- &lt;a href=&quot;https://app.fossa.com/projects/git%2Bgithub.com%2Fmeshery%2Fmeshery?ref=badge_shield&quot; alt=&quot;License Scan Report&quot;&gt;
  &lt;img src=&quot;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fmeshery%2Fmeshery.svg?type=shield&quot;/&gt;&lt;/a&gt;  
  --&gt;
&lt;/p&gt;

&lt;h5&gt;&lt;p align=&quot;center&quot;&gt;&lt;i&gt;If you like Meshery, please &lt;a href=&quot;https://github.com/meshery/meshery/stargazers&quot;&gt;★&lt;/a&gt; this repository to show your support! 🤩&lt;/i&gt;&lt;/p&gt;&lt;/h5&gt;
&lt;p align=&quot;center&quot; &gt;
MESHERY IS A CLOUD NATIVE COMPUTING FOUNDATION PROJECT
&lt;/p&gt;

&lt;div align=&quot;center&quot; width=&quot;100%&quot;&gt;
&lt;img src=&quot;.github/assets/images/readme/cncf-white.svg#gh-dark-mode-only&quot; width=&quot;30%&quot; align=&quot;center&quot; /&gt;
&lt;img src=&quot;.github/assets/images/readme/cncf-black.svg#gh-light-mode-only&quot; width=&quot;30%&quot; align=&quot;center&quot; /&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;p align=&quot;center&quot;&gt;
A self-service engineering platform, &lt;a href=&quot;https://meshery.io&quot;&gt;Meshery&lt;/a&gt;, is the open source, cloud native manager that enables the design and management of all Kubernetes-based infrastructure and applications (multi-cloud). Among other features,  As an extensible platform, Meshery offers visual and collaborative GitOps, freeing you from the chains of YAML while managing Kubernetes multi-cluster deployments.
&lt;/p&gt;
&lt;br /&gt;

&lt;div align=&quot;center&quot; width=&quot;100%&quot;&gt;
&lt;img src=&quot;.github/assets/images/readme/meshery-dashboard-hero-image.png&quot; width=&quot;800px&quot; /&gt;
 &lt;br /&gt;Try Meshery in your browser using the &lt;a href=&quot;https://play.meshery.io&quot;&gt;Cloud Native Playground&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=034nVaQUyME&amp;list=PL3A-A6hPO2IO_yzN83wSJJUNQActzCJvO&amp;index=9&quot;&gt;teaser video&lt;/a&gt;)
&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;h4 align=&quot;center&quot;&gt;Open Meshery extension, Kanvas, in your browser: https://kanvas.new&lt;/h4&gt;
&lt;/p&gt;
&lt;br /&gt;
&lt;!--
- [Functionality](#functionality)
  - [Meshery Architecture](#meshery-architecture)
  - [Join the Meshery community!](#join-the-meshery-community)
  - [Contributing](#contributing)
    - [Stargazers](#stargazers)
    - [License](#license)
--&gt;
&lt;!-- &lt;p style=&quot;clear:both;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;a href=&quot;https://meshery.io&quot;&gt;&lt;picture&gt;
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-light-text-side.svg&quot;&gt;
  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&quot;&gt;
  &lt;img alt=&quot;Meshery - the Cloud Native Manager&quot; src=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&quot; align=&quot;left&quot; width=&quot;45%&quot;&gt;
  &lt;/picture&gt;&lt;/a&gt; 
&lt;a href=&quot;https://meshery.io&quot;&gt;
&lt;h3 style=&quot;margin:auto;&quot;&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;a href=&quot;https://docs.google.com/presentation/d/14kxjwYSJ_FyE3K_6CDEd6oq2kqwn0OSE8RDJ4H-KlKU/edit?usp=sharing&quot;&gt;&lt;center&gt;&lt;i&gt;Project Overview Presentation&lt;/i&gt;&lt;/center&gt;&lt;/a&gt;
  &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/h3&gt; --&gt;

&lt;p style=&quot;clear:both;&quot;&gt;&amp;nbsp;&lt;/p&gt;

# Functionality

## Infrastructure Lifecycle Management

Meshery manages the configuration, deployment, and operation of your Cloud services and Kubernetes clusters while supporting hundreds of different types of cloud native infrastructure integrations. Meshery supports [300+ integrations](https://meshery.io/integrations).

&lt;!--
&lt;a href=&quot;https://www.youtube.com/watch?v=034nVaQUyME&quot;&gt;&lt;img alt=&quot;Meshery cloud native management&quot; src=&quot;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshmap.gif&quot;  style=&quot;margin-left:10px; margin-bottom:10px;&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;--&gt;
&lt;/p&gt;

&lt;a href=&quot;.github/assets/images/readme/cloud-native-integrations.png&quot;&gt;&lt;img alt=&quot;Meshery Integrations&quot; src=&quot;.github/assets/images/readme/cloud-native-integrations.png&quot;  style=&quot;margin-right:10px;margin-bottom:10px;&quot; width=&quot;100%&quot; align=&quot;center&quot;/&gt;&lt;/a&gt;

Find infrastructure configuration patterns in Meshery&#039;s &lt;a href=&quot;https://meshery.io/catalog&quot;&gt;catalog of curated design templates&lt;/a&gt; filled with configuration best practices.

### Multiple Kubernetes Clusters and Multiple Clouds

&lt;img src =&quot;https://meshery.io/assets/images/screens/multi-cluster-management.gif&quot; width=&quot;50%&quot; alt=&quot;Multi-cluster Kubernetes Manager&quot; loading=&quot;lazy&quot; align=&quot;center&quot; /&gt;&lt;br /&gt;

Meshery provides a single pane of glass to manage multiple Kubernetes clusters across any infrastructure, including various cloud providers. Meshery enables consistent configuration, operation, and observability across your entire Kubernetes landscape.

&lt;details&gt;&lt;summary&gt;&lt;h4&gt;Dry-run your deployments&lt;/h4&gt;&lt;/summary&gt;
Meshery leverages Kubernetes&#039; built-in dry-run capabilities to allow you to simulate deployments without actually applying the changes to your cluster. This enables you to:

- Validate configurations: Ensure your deployment specifications (e.g., YAML manifests, Helm charts, Meshery Designs) are syntactically correct and will be accepted by the Kubernetes API server.   
- Identify potential issues: Detect errors in your configurations, such as invalid resource definitions, missing fields, or API version mismatches, before they impact your live environment.
- Preview changes: Understand the objects that Kubernetes would create or modify during a real deployment.
- Integrate with CI/CD: Incorporate dry-run as a step in your continuous integration and continuous delivery pipelines to automate pre-deployment checks and prevent faulty deployments.

By providing this dry-run functionality, Meshery helps you increase the reliability and stability of your Kubernetes deployments by catching potential problems early in the development and deployment process.
&lt;!-- 
Assess your cloud native infrastructure configuration against deployment and operational best practices with Meshery&#039;s configuration validator. Manage your workloads with confidence. Check your Kubernetes configuration for anti-patterns and avoid common pitfalls. --&gt;

&lt;/details&gt;

### Visually and collaboratively manage your infrastructure

Using a GitOps-centric approach, visually and collaboratively design and manage your infrastructure and microservices. Meshery intelligently infers the manner in which each resource [interrelates](https://docs.meshery.io/concepts/logical/relationships) with each other. Meshery supports a broad variety of built-in relationships between components, which you can use to create your own custom relationships.

&lt;img src=&quot;.github/assets/images/readme/edge_mount_relationship_pod_persistent_volume.svg&quot; width=&quot;50%&quot; alt=&quot;Multi-cluster Kubernetes Manager&quot; align=&quot;center&quot; /&gt;

&lt;details&gt;&lt;summary&gt;&lt;img alt=&quot;OPA Logo&quot; src=&quot;.github/assets/images/readme/opa-logo.svg&quot; style=&quot;margin-right:10px;&quot; width=&quot;25px&quot; align=&quot;left&quot; /&gt;&lt;h4&gt;Context-Aware Policies For Applications&lt;/h4&gt;&lt;/summary&gt;
&lt;img alt=&quot;Meshery and Open Policy Agent Integration&quot; src=&quot;.github/assets/images/readme/meshery-policies-2.png&quot; style=&quot;margin:auto;text-align:center&quot; width=&quot;50%&quot; /&gt;
&lt;p&gt;Leverage built-in relationships to enforce configuration best practices consistently from code to Kubernetes. Customize Configure your infrastructure with confidence without needing to know or write Open Policy Agent&#039;s Rego query language.&lt;/p&gt;
&lt;/details&gt;

## Workspaces: Your team&#039;s Google Drive for cloud native projects

&lt;img src=&quot;.github/assets/images/readme/workspace.gif&quot; width=&quot;50%&quot; alt=&quot;Multi-cluster Kubernetes Manager&quot; loading=&quot;lazy&quot; /&gt;

Workspaces let you organize your work and serve as the central point of collaboration for you and your teams and point of access control to Environments and their resources.

&lt;details&gt;&lt;summary&gt;&lt;h4&gt;Manage your connections with Environments&lt;/h4&gt;&lt;/summary&gt;

&lt;img src=&quot;.github/assets/images/readme/environments.gif&quot; width=&quot;50%&quot; alt=&quot;Multi-cluster Kubernetes Manager&quot; loading=&quot;lazy&quot; /&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.meshery.io/concepts/logical/environments&quot;&gt;Environments&lt;/a&gt;  make it easier for you to manage, share, and work with a collection of resources as a group, instead of dealing with all your Connections and Credentials on an individual basis.&lt;/p&gt;
&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;&lt;h4&gt;See changes to your infra before you merge&lt;/h4&gt;&lt;/summary&gt;

&lt;img src=&quot;.github/assets/images/readme/meshery-snapshot.png&quot; width=&quot;50%&quot; alt=&quot;Multi-cluster Kubernetes Manager&quot; loading=&quot;lazy&quot; align=&quot;center&quot; /&gt;

Get snapshots of your infrastructure directly in your PRs. Preview your deployment, view changes pull request-to-pull request and get infrastructure snapshots within your PRs by connecting Kanvas to your GitHub repositories.
&lt;/details&gt;

&lt;!-- &lt;h3&gt;Operate with configuration best practices&lt;/h3&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;Assess your configurations against deployment and operational best practices with Meshery&#039;s configuration validator.&lt;/p&gt;
&lt;br /&gt;&lt;br /&gt;

&lt;h3&gt;Control all of your infrastructure with mesheryctl&lt;/h3&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;Whether managing multiple Meshery deployments, importing designs, discoverying Kubernetes clusters, do so with ease using Meshery CLI in your terminal.&lt;/p&gt;
&lt;br /&gt;&lt;br /&gt; --&gt;

## Platform Engineering with Meshery&#039;s Extension Points

Extend Meshery as your self-service engineering platform by taking advantage of its [vast set of extensibility features](https://docs.meshery.io/extensibility), including gRPC adapters, hot-loadable Reactjs packages and Golang plugins, subscriptions on NATS topics, consumable _and_ extendable API interfaces via REST and GraphQL.The great number of extension points in Meshery make it ideal as the foundation of your internal developer platform.

&lt;details&gt;&lt;summary&gt;&lt;h4&gt;Access the Cloud Native Patterns for Kubernetes&lt;/h4&gt;&lt;/summary&gt;

&lt;p&gt;Design and manage all of your cloud native infrastructure using the design configurator in Meshery or start from a template using the patterns from the &lt;a href=&quot;https://meshery.io/catalog&quot;&gt;catalog&lt;/a&gt;.
&lt;/details&gt;

Meshery offers robust capabilities for managing multiple tenants within a shared Kubernetes infrastructure. Meshery provides the tools and integrations necessary to create a secure, isolated, and manageable multi-tenant environments, allowing multiple teams or organizations with granular control over their role-based access controls.

Meshery&#039;s &quot;multi-player&quot; functionality refers to its collaborative features that enable multiple users to interact with and manage cloud native infrastructure simultaneously. This is primarily facilitated through Kanvas, a Meshery extension visual designer and management interface.

## Performance Management

Meshery offers load generation and performance characterization to help you assess and optimize the performance of your applications and infrastructure.

&lt;img src=&quot;.github/assets/images/readme/performance-metrics.gif&quot; alt=&quot;Multi-cluster Kubernetes Manager&quot; width=&quot;50%&quot; /&gt;

&lt;p&gt;Create and reuse performance profiles for consistent characterization of the configuration of your infrastructure in context of how it performs.&lt;/p&gt;

&lt;details&gt;
&lt;summary&gt;&lt;h4&gt; Manage the performance of your infrastructure and its workloads&lt;/h4&gt;&lt;/summary&gt;

&lt;img src = &quot;.github/assets/images/readme/meshery-performance.gif&quot;&gt;

Baseline and track your cloud native performance from release to release.

- Use performance profiles to track the historical performance of your workloads.
- Track your application performance from version to version.
- Understand behavioral differences between cloud native network functions.
- Compare performance across infrastructure deployments.

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;h4&gt;Load Generation and Microservice Performance Characteristization&lt;/h4&gt;&lt;/summary&gt;

&lt;picture align=&quot;left&quot;&gt;
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/layer5io/layer5/master/src/assets/images/service-mesh-performance/stacked/smp-light-text.svg&quot;  width=&quot;18%&quot; align=&quot;left&quot; style=&quot;margin-left:10px;&quot; /&gt;
  &lt;img alt=&quot;Shows an illustrated light mode meshery logo in light color mode and a dark mode meshery logo dark color mode.&quot; src=&quot;https://raw.githubusercontent.com/layer5io/layer5/master/src/assets/images/service-mesh-performance/stacked/smp-light-text.svg&quot; width=&quot;18%&quot; align=&quot;left&quot; style=&quot;margin-left:10px;&quot; /&gt;
&lt;/picture&gt;

- **Multiple Load Generators:** Meshery supports various load generators, including Fortio, Wrk2, and Nighthawk, allowing users to choose the tool that best suits your needs.
- **Configurable Performance Profiles:** Meshery provides a highly configurable set of load profiles with tunable facets, enabling users to generate TCP, gRPC, and HTTP load. You can customize parameters such as duration, concurrent threads, concurrent generators, and load generator type. 
- **Statistical Analysis:** Meshery performs statistical analysis on the results of performance tests, presenting data in the form of histograms with latency buckets. Understand the distribution of response times and identify potential bottlenecks.
- **Comparison of Test Results:** Meshery enables you to compare the difference in request performance (latency and throughput) between independent performance tests. Save your load test configurations as Performance Profiles, making it easy to rerun tests with the same settings and track performance variations over time.
- **Kubernetes Cluster and Workload Metrics:** - Meshery connects to one or more Prometheus servers to gather both cluster and application metrics. Meshery also integrates with Grafana, allowing you to import your existing dashboards and visualize performance data.

&lt;p&gt;In an effort to produce infrastructure agnostic tooling, Meshery uses the &lt;a href=&quot;https://smp-spec.io&quot;&gt;Cloud Native Performance&lt;/a&gt; specification as a common format to capture and measure your infrastructure&#039;s performance against a universal cloud native performance index. Meshery participates in advancing cloud native infrastructure adoption through the standardization of APIs. Meshery enables you to measure the value provided by Docker, Kubernetes, or other cloud native infrastructure in the context of the overhead incurred.&lt;/p&gt;

&lt;!-- 

SCREENSHOT / GIF NEEDED HERE

--&gt;

&lt;/details&gt;

&lt;h2&gt;&lt;a name=&quot;running&quot;&gt;&lt;/a&gt;Get Started with Meshery&lt;/h2&gt;
&lt;p style=&quot;clear:both;&quot;&gt;&lt;/p&gt;
&lt;!-- &lt;img alt=&quot;Control Kubernetes and your workloads with mesheryctl&quot; src=&quot;.github/assets/images/readme/mesheryctl.png&quot;  style=&quot;margin-left:10px; margin-bottom:10px;&quot; width=&quot;50%&quot; align=&quot;right&quot; /&gt; --&gt;
&lt;h3&gt;Using `mesheryctl`&lt;/h3&gt;
&lt;p&gt;Meshery runs as a set of containers inside or outside of your Kubernetes clusters.&lt;/p&gt;
&lt;pre&gt;curl -L https://meshery.io/install | bash -&lt;/pre&gt;
&lt;p&gt;Use the &lt;a href=&quot;https://docs.meshery.io/installation/quick-start&quot;&gt;quick start&lt;/a&gt; guide.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;&lt;strong&gt;See all supported platforms&lt;/strong&gt;&lt;/summary&gt;

See the [getting started](https://meshery.io/#getting-started) section to quickly deploy Meshery on any of these supported platforms:

| Platform                                                                                                                                                                                                                             | Supported?  |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :---------: |
| &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/docker.svg&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Docker](https://docs.meshery.io/installation/docker)                                                           |      ✔️      |
| &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/docker.svg&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Docker - Docker App](https://docs.meshery.io/installation/docker)                           |      ✔️      |
| &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/docker.svg&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Docker - Docker Extension](https://docs.meshery.io/installation/docker/docker-extensiongit) |      ✔️      |
| &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/kubernetes.svg&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Kubernetes](https://docs.meshery.io/installation/kubernetes)                                               |      ✔️      |
| &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/aks.svg&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Kubernetes - AKS](https://docs.meshery.io/installation/kubernetes/aks)                         |      ✔️      |
| &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/docker.svg&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Kubernetes - Docker Desktop](https://docs.meshery.io/installation#mac-or-linux)             |      ✔️      |
| &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&quot;https://docs.meshery.io/assets/img/platforms/eks.png&quot; width=&quot;20&quot; height=&quot;20&quot; vertical-align=&quot;middle&quot; /&gt; [Kubernetes - E

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[Stremio/stremio-web]]></title>
            <link>https://github.com/Stremio/stremio-web</link>
            <guid>https://github.com/Stremio/stremio-web</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:59 GMT</pubDate>
            <description><![CDATA[Stremio - Freedom to Stream]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Stremio/stremio-web">Stremio/stremio-web</a></h1>
            <p>Stremio - Freedom to Stream</p>
            <p>Language: JavaScript</p>
            <p>Stars: 2,121</p>
            <p>Forks: 420</p>
            <p>Stars today: 225 stars today</p>
            <h2>README</h2><pre># Stremio - Freedom to Stream

![Build](https://github.com/stremio/stremio-web/workflows/Build/badge.svg?branch=development)
[![Netlify](https://api.netlify.com/api/v1/badges/ac26d7ae-d08b-4cc4-a14d-a83ba7c3e8ca/deploy-status)](https://stremio-development.netlify.app)

Stremio is a modern media center that&#039;s a one-stop solution for your video entertainment. You discover, watch and organize video content from easy to install addons.

## Build

### Prerequisites

* Node.js 12 or higher
* npm 6 or higher

### Install dependencies

```bash
npm install
```

### Start development server

```bash
npm start
```

### Production build

```bash
npm run build
```

## Screenshots

### Board

![Board](/screenshots/board.png)

### Discover

![Discover](/screenshots/discover.png)

### Meta Details

![Meta Details](/screenshots/metadetails.png)

## License

Stremio is copyright 2017-2022 Smart code and available under GPLv2 license. See the [LICENSE](/LICENSE.md) file in the project for more information.
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[aandrew-me/ytDownloader]]></title>
            <link>https://github.com/aandrew-me/ytDownloader</link>
            <guid>https://github.com/aandrew-me/ytDownloader</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:58 GMT</pubDate>
            <description><![CDATA[Desktop App for downloading Videos and Audios from hundreds of sites]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/aandrew-me/ytDownloader">aandrew-me/ytDownloader</a></h1>
            <p>Desktop App for downloading Videos and Audios from hundreds of sites</p>
            <p>Language: JavaScript</p>
            <p>Stars: 2,251</p>
            <p>Forks: 193</p>
            <p>Stars today: 275 stars today</p>
            <h2>README</h2><pre>&lt;img src=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/66430340/238887646-33b4cba9-3c45-4042-83d1-b79e94a3a769.png&quot; style=&quot;width:80px;&quot;&gt;

# ytDownloader

[![Flathub](https://img.shields.io/flathub/downloads/io.github.aandrew_me.ytdn?label=Flathub%20downloads)](https://flathub.org/apps/details/me.aandrew.ytdownloader)
[![GitHub downloads](https://img.shields.io/github/downloads/aandrew-me/ytdownloader/total?label=Github%20downloads)](https://github.com/aandrew-me/ytDownloader/releases)
[![GitHub release (latest by date)](https://img.shields.io/github/v/release/aandrew-me/ytdownloader?label=latest%20release)](https://github.com/aandrew-me/ytDownloader/releases/latest)
[![Flathub](https://img.shields.io/flathub/v/io.github.aandrew_me.ytdn)](https://flathub.org/apps/io.github.aandrew_me.ytdn)
[![Snapcraft](https://badgen.net/snapcraft/v/ytdownloader)](https://snapcraft.io/ytdownloader)
![Chocolatey Version](https://img.shields.io/chocolatey/v/ytdownloader)
![WinGet Package Version](https://img.shields.io/winget/v/aandrew-me.ytDownloader)

A modern GUI video and audio downloader supporting [hundreds of sites](https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md)


[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-black.svg)](https://snapcraft.io/ytdownloader)
[![Get AppImage](https://raw.githubusercontent.com/srevinsaju/get-appimage/master/static/badges/get-appimage-branding-blue.png)](https://github.com/aandrew-me/ytDownloader/releases/latest/download/YTDownloader_Linux.AppImage)
&lt;a href=&quot;https://flathub.org/apps/io.github.aandrew_me.ytdn&quot;&gt;&lt;img src=&quot;https://flathub.org/assets/badges/flathub-badge-en.svg&quot; style=&quot;width:180px;&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/aandrew-me/ytDownloader/releases/latest/download/YTDownloader_Win.exe
&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/66430340/187172806-a8edd12a-ef58-4a05-96a3-99d7490b42f6.png&quot; style=&quot;width:190px;&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/aandrew-me/ytDownloader/releases/latest/download/YTDownloader_Mac_arm64.dmg&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/aandrew-me/badges/download_mac_apple_silicon.png&quot; style=&quot;width:200px;&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/aandrew-me/ytDownloader/releases/latest/download/YTDownloader_Mac_x64.dmg&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/aandrew-me/badges/download_mac_intel.png&quot; style=&quot;width:200px;&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://community.chocolatey.org/packages/ytdownloader&quot;&gt;&lt;img style=&quot;width:200px;&quot; src=&quot;https://github-production-user-asset-6210df.s3.amazonaws.com/66430340/238886537-7b2769fe-bd62-4921-a0eb-edf2eb06216d.png&quot; alt=&quot;Chocolatey&quot;&gt;&lt;/a&gt;

## Features 🚀


✅ Supports hundreds of sites including Youtube, Facebook, Instagram, Tiktok, Twitter and so on.

✅ Multiple themes

✅ Video Compressor with Hardware Acceleration

✅ Advanced options like Range Selection, Subtitles

✅ Download playlists

✅ Available on Linux, Windows &amp; macOS

✅ Fast download speeds

✅ And of-course no trackers or ads

## Screenshots

&lt;!-- ![dark](https://user-images.githubusercontent.com/66430340/196022794-885e5b90-40d2-4b58-a8fa-74f10c6e470e.png) --&gt;
&lt;!-- ![light](https://user-images.githubusercontent.com/66430340/196022796-1215038d-bafb-4450-82b1-7baddd60c0e8.png) --&gt;


&lt;!-- ![ytdownloader_dark](https://github.com/aandrew-me/ytDownloader/assets/66430340/62efbca0-28b8-4016-bcf2-1a14bcaa782c) --&gt;
&lt;!-- ![ytdownloader_light](https://github.com/aandrew-me/ytDownloader/assets/66430340/34f5270f-bdea-460e-8622-6459cd147b73) --&gt;
![ss_dark](https://github.com/user-attachments/assets/0e810d71-6e8e-428f-9cca-9af71b5d7c16)

![ss_prefs](https://github.com/user-attachments/assets/12097005-b41c-44a3-a579-61b8e990432f)

![ss_compressor](https://github.com/user-attachments/assets/b366aa8e-a004-4697-873f-965f51752f15)


&lt;!-- ![ytdownloader_dark](https://github.com/aandrew-me/ytDownloader/assets/66430340/2f6695e7-6ca0-4f7c-91a0-0ad735c1e3af) --&gt;
&lt;!-- ![ytdownloader_light](https://github.com/aandrew-me/ytDownloader/assets/66430340/3c974ab0-8257-4b8a-88ec-ee6bd119751e) --&gt;

# Installation

## Windows 🪟

-   **Traditional way**

    Download and install the exe or msi file. Exe file lets you choose custom download location, msi file doesn&#039;t ask for location. Windows defender may show a popup saying **Windows Protected Your PC**. Just click on **More info** and click on **Run Anyway**

-   **Chocolatey**
    App can be installed from [Chocolatey](https://community.chocolatey.org/packages/ytdownloader) using the following command
    ```
    choco install ytdownloader
    ```
-   **Scoop**
    App can be installed with [Scoop](https://scoop.sh) using the following command
    ```
    scoop install https://raw.githubusercontent.com/aandrew-me/ytDownloader/main/ytdownloader.json
    ```
-   **Winget**

    App can be installed with [Winget](https://github.com/microsoft/winget-cli) using the following command
    ```
    winget install aandrew-me.ytDownloader
    ```
## Linux 🐧

Linux has several options available - Flatpak, AppImage and Snap.
Flatpak is recommended. For arm processors, download from flathub.

-   ### AppImage

    **AppImage** format is supported on most Linux distros and has Auto-Update support.
    It just needs to be executed after downloading. See more about [AppImages here](https://appimage.org/).

    [AppImageLauncher](https://github.com/TheAssassin/AppImageLauncher) is recommended for integrating AppImages.

-   ### Flatpak
    ```
    flatpak install flathub io.github.aandrew_me.ytdn
    ```
-   ### Snapcraft
    ```
    sudo snap install ytdownloader
    ```

## macOS 🍎

Since the app is not signed, when you will try to open the app, macOS will not allow you to open it. 

You need to open terminal and execute:
```
sudo xattr -r -d com.apple.quarantine /Applications/YTDownloader.app 
```

You will also need to install `yt-dlp` with [homebrew](https://brew.sh/)
```
brew install yt-dlp
```

## Internationalization (Localization) 🌍

Translations into other languages would be highly appreciated. If you want to help translating the app to other languages, you can join from [here](https://crwd.in/ytdownloader). Open a new issue and that language will be added to Crowdin. Please don&#039;t make pull requests with json files, instead use Crowdin.

[![Crowdin](https://badges.crowdin.net/ytdownloader/localized.svg)](https://crowdin.com/project/ytdownloader)

### ✅ Available languages

| Name                | Status |
| ------------------- | ------ |
| Arabic              | ✔️     |
| English             | ✔️     |
| Simplified Chinese  | ✔️     |
| Finnish             | ✔️     |
| French              | ✔️     |
| German              | ✔️     |
| Greek               | ✔️     |
| Hungarian           | ✔️     |
| Italian             | ✔️     |
| Japanese            | ✔️     |
| Persian             | ✔️     |
| Polish              | ✔️     |
| Portuguese (Brazil) | ✔️     |
| Russian             | ✔️     |
| Spanish             | ✔️     |
| Turkish             | ✔️     |
| Ukrainian           | ✔️     |
| Vietnamese          | ✔️     |

Thanks to [nxjosephofficial](https://github.com/nxjosephofficial), [LINUX-SAUNA](https://t.me/linuxsauna), [Proxycon](https://github.com/proxycon), [albanobattistella](https://github.com/albanobattistella), [TheBlueQuasar](https://github.com/TheBlueQuasar), [MrQuerter](https://github.com/MrQuerter), [KotoWhiskas](https://github.com/KotoWhiskas), [André](https://github.com/andre1828), [haggen88](https://github.com/haggen88), [XfedeX](https://github.com/XfedeX), [Jok3r](https://github.com/th3knv), [TitouanReal](https://github.com/TitouanReal), [soredake](https://github.com/soredake), [yoi](https://github.com/thiennguyenqn), [HowlingWerewolf](https://github.com/HowlingWerewolf), [Kum](https://github.com/kum4423), [Mohammed Bakry](https://crowdin.com/profile/m7md_b4kry), [Huang Bingfeng](https://github.com/jackiotyu) and others for helping.

## Used technologies

-   [yt-dlp](https://github.com/yt-dlp/yt-dlp)
-   [Electron](https://www.electronjs.org/)
-   [ffmpeg](https://ffmpeg.org/)
-   [nodeJS](https://nodejs.org/en/)
-   [flaticon](https://www.flaticon.com/)

## For building or running from source code

[Nodejs](https://nodejs.org/) (along with npm) needs to be installed.

Required commands to get started.

```
git clone https://github.com/aandrew-me/ytDownloader.git
cd ytDownloader
npm i
```

To run with [Electron](https://www.electronjs.org/) :

```
npm start
```

You need to download ffmpeg and put it in the root directory of the project. If you don&#039;t need to build for arm processor, you can download ffmpeg by executing any of the files - linux.sh / mac.sh / windows.sh depending on the platform. Otherwise you need to download ffmpeg from [here](https://github.com/yt-dlp/FFmpeg-Builds/releases) for windows/linux and from [here](http://www.osxexperts.net/) for mac (not tested)

To build for Linux (It will create packages as specified in package.json). The builds are stored in **release** folder.
```
npm run linux
```

To build for Windows

```
npm run windows
```

To build for macOS

```
npm run mac
```
If you only want to build for one format, you can do
```
npx electron-builder -l appimage
```
It will just create a linux appimage build.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[expressjs/express]]></title>
            <link>https://github.com/expressjs/express</link>
            <guid>https://github.com/expressjs/express</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:57 GMT</pubDate>
            <description><![CDATA[Fast, unopinionated, minimalist web framework for node.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/expressjs/express">expressjs/express</a></h1>
            <p>Fast, unopinionated, minimalist web framework for node.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 67,852</p>
            <p>Forks: 21,040</p>
            <p>Stars today: 18 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[sohzm/cheating-daddy]]></title>
            <link>https://github.com/sohzm/cheating-daddy</link>
            <guid>https://github.com/sohzm/cheating-daddy</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:56 GMT</pubDate>
            <description><![CDATA[a free and opensource app that lets you gain an unfair advantage]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/sohzm/cheating-daddy">sohzm/cheating-daddy</a></h1>
            <p>a free and opensource app that lets you gain an unfair advantage</p>
            <p>Language: JavaScript</p>
            <p>Stars: 4,456</p>
            <p>Forks: 653</p>
            <p>Stars today: 8 stars today</p>
            <h2>README</h2><pre>&lt;img width=&quot;1299&quot; height=&quot;424&quot; alt=&quot;cd (1)&quot; src=&quot;https://github.com/user-attachments/assets/b25fff4d-043d-4f38-9985-f832ae0d0f6e&quot; /&gt;

## Recall.ai - API for desktop recording

If you’re looking for a hosted desktop recording API, consider checking out [Recall.ai](https://www.recall.ai/product/desktop-recording-sdk/?utm_source=github&amp;utm_medium=sponsorship&amp;utm_campaign=sohzm-cheating-daddy), an API that records Zoom, Google Meet, Microsoft Teams, in-person meetings, and more.

This project is sponsored by Recall.ai.

---

&gt; [!NOTE]  
&gt; Use latest MacOS and Windows version, older versions have limited support

&gt; [!NOTE]  
&gt; During testing it wont answer if you ask something, you need to simulate interviewer asking question, which it will answer

A real-time AI assistant that provides contextual help during video calls, interviews, presentations, and meetings using screen capture and audio analysis.

## Features

- **Live AI Assistance**: Real-time help powered by Google Gemini 2.0 Flash Live
- **Screen &amp; Audio Capture**: Analyzes what you see and hear for contextual responses
- **Multiple Profiles**: Interview, Sales Call, Business Meeting, Presentation, Negotiation
- **Transparent Overlay**: Always-on-top window that can be positioned anywhere
- **Click-through Mode**: Make window transparent to clicks when needed
- **Cross-platform**: Works on macOS, Windows, and Linux (kinda, dont use, just for testing rn)

## Setup

1. **Get a Gemini API Key**: Visit [Google AI Studio](https://aistudio.google.com/apikey)
2. **Install Dependencies**: `npm install`
3. **Run the App**: `npm start`

## Usage

1. Enter your Gemini API key in the main window
2. Choose your profile and language in settings
3. Click &quot;Start Session&quot; to begin
4. Position the window using keyboard shortcuts
5. The AI will provide real-time assistance based on your screen and what interview asks

## Keyboard Shortcuts

- **Window Movement**: `Ctrl/Cmd + Arrow Keys` - Move window
- **Click-through**: `Ctrl/Cmd + M` - Toggle mouse events
- **Close/Back**: `Ctrl/Cmd + \` - Close window or go back
- **Send Message**: `Enter` - Send text to AI

## Audio Capture

- **macOS**: [SystemAudioDump](https://github.com/Mohammed-Yasin-Mulla/Sound) for system audio
- **Windows**: Loopback audio capture
- **Linux**: Microphone input

## Requirements

- Electron-compatible OS (macOS, Windows, Linux)
- Gemini API key
- Screen recording permissions
- Microphone/audio permissions
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[CodeWithHarry/Sigma-Web-Dev-Course]]></title>
            <link>https://github.com/CodeWithHarry/Sigma-Web-Dev-Course</link>
            <guid>https://github.com/CodeWithHarry/Sigma-Web-Dev-Course</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:55 GMT</pubDate>
            <description><![CDATA[Source Code for Sigma Web Development Course]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/CodeWithHarry/Sigma-Web-Dev-Course">CodeWithHarry/Sigma-Web-Dev-Course</a></h1>
            <p>Source Code for Sigma Web Development Course</p>
            <p>Language: JavaScript</p>
            <p>Stars: 10,280</p>
            <p>Forks: 2,925</p>
            <p>Stars today: 13 stars today</p>
            <h2>README</h2><pre># Welcome to Sigma&#039;s Web Development Course - Hindi Web Development Tutorials! 🚀

## What&#039;s Inside:

If you&#039;ve been itching to dive into the world of web development but feel lost in a sea of English tutorials, you&#039;re in the right place! Our course is exclusively in Hindi and is crafted to guide you from being an absolute beginner to a seasoned pro, one step at a time.

## Who Can Benefit?

### This course is a perfect fit for:

1. Beginners eager to start their web development journey
2. Intermediate developers looking to refine their skills
3. Individuals who prefer learning in Hindi

## What You&#039;ll Master:

### During this course, you&#039;ll delve into:

1. The fundamentals of HTML, CSS, and JavaScript
2. Both front-end and back-end development
3. How to seamlessly integrate databases
4. Real-world project implementation
5. And a whole lot more!

## The Schedule:

We&#039;re committed to your growth. Expect fresh source code additions nearly every day. Keep up the pace with our schedule and watch your skills soar! 📅

Get ready to embark on an exciting coding journey! 👨‍💻🌟

Ready to start? [Click here](https://www.youtube.com/playlist?list=PLu0W_9lII9agq5TrH9XLIKQvv0iaF2X3w) to access the complete YouTube playlist.
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[SillyTavern/SillyTavern]]></title>
            <link>https://github.com/SillyTavern/SillyTavern</link>
            <guid>https://github.com/SillyTavern/SillyTavern</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:54 GMT</pubDate>
            <description><![CDATA[LLM Frontend for Power Users.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/SillyTavern/SillyTavern">SillyTavern/SillyTavern</a></h1>
            <p>LLM Frontend for Power Users.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 18,939</p>
            <p>Forks: 4,049</p>
            <p>Stars today: 27 stars today</p>
            <h2>README</h2><pre># SillyTavern

LLM Frontend for Power Users

## Resources

- GitHub: &lt;https://github.com/SillyTavern/SillyTavern&gt;
- Docs: &lt;https://docs.sillytavern.app/&gt;
- Discord: &lt;https://discord.gg/sillytavern&gt;
- Reddit: &lt;https://reddit.com/r/SillyTavernAI&gt;

## License

AGPL-3.0
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[leonardomso/33-js-concepts]]></title>
            <link>https://github.com/leonardomso/33-js-concepts</link>
            <guid>https://github.com/leonardomso/33-js-concepts</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:53 GMT</pubDate>
            <description><![CDATA[📜 33 JavaScript concepts every developer should know.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/leonardomso/33-js-concepts">leonardomso/33-js-concepts</a></h1>
            <p>📜 33 JavaScript concepts every developer should know.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 65,718</p>
            <p>Forks: 9,145</p>
            <p>Stars today: 11 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot;&gt;
&lt;br&gt;
  &lt;a href=&quot;https://github.com/leonardomso/33&quot;&gt;&lt;img src=&quot;github-image.png&quot; alt=&quot;33 Concepts Every JS Developer Should Know&quot;&gt;&lt;/a&gt;
  &lt;br&gt;
    &lt;br&gt;
  &lt;strong&gt;33 Concepts Every JavaScript Developer Should Know&lt;/strong&gt;
  &lt;br&gt;&lt;br&gt;
&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt; •
    &lt;a href=&quot;#community&quot;&gt;Community&lt;/a&gt; •
    &lt;a href=&quot;#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt; •
    &lt;a href=&quot;#license&quot;&gt;License&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;strong&gt;🚀 Considered by GitHub as one of the &lt;a href=&quot;https://blog.github.com/2018-12-13-new-open-source-projects/&quot;&gt;top open source projects of 2018!&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

## Introduction 

This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by Stephen Curtis and you can read it [here](https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1).

## Community

Feel free to submit a PR by adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.

All the translations for this repo will be listed below:

- [اَلْعَرَبِيَّةُ‎ (Arabic)](https://github.com/amrsekilly/33-js-concepts) — Amr Elsekilly
- [Български (Bulgarian)](https://github.com/thewebmasterp/33-js-concepts) - thewebmasterp
- [汉语 (Chinese)](https://github.com/stephentian/33-js-concepts) — Re Tian
- [Português do Brasil (Brazilian Portuguese)](https://github.com/tiagoboeing/33-js-concepts) — Tiago Boeing
- [한국어 (Korean)](https://github.com/yjs03057/33-js-concepts.git) — Suin Lee
- [Español (Spanish)](https://github.com/adonismendozaperez/33-js-conceptos) — Adonis Mendoza
- [Türkçe (Turkish)](https://github.com/ilker0/33-js-concepts) — İlker Demir
- [русский язык (Russian)](https://github.com/gumennii/33-js-concepts) — Mihail Gumennii
- [Tiếng Việt (Vietnamese)](https://github.com/nguyentranchung/33-js-concepts) — Nguyễn Trần Chung
- [Polski (Polish)](https://github.com/lip3k/33-js-concepts) — Dawid Lipinski
- [فارسی (Persian)](https://github.com/majidalavizadeh/33-js-concepts) — Majid Alavizadeh
- [Bahasa Indonesia (Indonesian)](https://github.com/rijdz/33-js-concepts) — Rijdzuan Sampoerna
- [Français (French)](https://github.com/robinmetral/33-concepts-js) — Robin Métral
- [हिन्दी (Hindi)](https://github.com/vikaschauhan/33-js-concepts) — Vikas Chauhan
- [Ελληνικά (Greek)](https://github.com/DimitrisZx/33-js-concepts) — Dimitris Zarachanis
- [日本語 (Japanese)](https://github.com/oimo23/33-js-concepts) — oimo23
- [Deutsch (German)](https://github.com/burhannn/33-js-concepts) — burhannn
- [украї́нська мо́ва (Ukrainian)](https://github.com/AndrewSavetchuk/33-js-concepts-ukrainian-translation) — Andrew Savetchuk
- [සිංහල (Sinhala)](https://github.com/ududsha/33-js-concepts) — Udaya Shamendra
- [Italiano (Italian)](https://github.com/Donearm/33-js-concepts) — Gianluca Fiore
- [Latviešu (Latvian)](https://github.com/ANormalStick/33-js-concepts) - Jānis Īvāns
- [Afaan Oromoo (Oromo)](https://github.com/Amandagne/33-js-concepts) - Amanuel Dagnachew
- [ภาษาไทย (Thai)](https://github.com/ninearif/33-js-concepts) — Arif Waram
- [Català (Catalan)](https://github.com/marioestradaf/33-js-concepts) — Mario Estrada
- [Svenska (Swedish)](https://github.com/FenixHongell/33-js-concepts/) — Fenix Hongell
- [ខ្មែរ (Khmer)](https://github.com/Chhunneng/33-js-concepts) — Chrea Chanchhunneng
- [አማርኛ (Ethiopian)](https://github.com/hmhard/33-js-concepts) - Miniyahil Kebede(ምንያህል ከበደ)
- [Беларуская мова (Belarussian)](https://github.com/Yafimau/33-js-concepts) — Dzianis Yafimau
- [O&#039;zbekcha (Uzbek)](https://github.com/smnv-shokh/33-js-concepts) — Shokhrukh Usmonov
- [Urdu (اردو)](https://github.com/sudoyasir/33-js-concepts) — Yasir Nawaz
- [हिन्दी (Hindi)](https://github.com/milostivyy/33-js-concepts) — Mahima Chauhan
- [বাংলা (Bengali)](https://github.com/Jisan-mia/33-js-concepts) — Jisan Mia
- [ગુજરાતી (Gujarati)](https://github.com/VatsalBhuva11/33-js-concepts) — Vatsal Bhuva
- [سنڌي (Sindhi)](https://github.com/Sunny-unik/33-js-concepts) — Sunny Gandhwani
- [भोजपुरी (Bhojpuri)](https://github.com/debnath003/33-js-concepts) — Pronay Debnath
- [ਪੰਜਾਬੀ (Punjabi)](https://github.com/Harshdev098/33-js-concepts) — Harsh Dev Pathak
- [Latin (Latin)](https://github.com/Harshdev098/33-js-concepts) — Harsh Dev Pathak
- [മലയാളം (Malayalam)](https://github.com/Stark-Akshay/33-js-concepts) — Akshay Manoj
- [Yorùbá (Yoruba)](https://github.com/ayobaj/33-js-concepts) - Ayomide Bajulaye
- [עברית‎ (Hebrew)](https://github.com/rafyzg/33-js-concepts) — Refael Yzgea
- [Nederlands (Dutch)](https://github.com/dlvisser/33-js-concepts) — Dave Visser
- [தமிழ் (Tamil)] (https://github.com/UdayaKrishnanM/33-js-concepts) - Udaya Krishnan M

&lt;hr&gt;

## &lt;img align=&quot;center&quot; width=&quot;35&quot; height=&quot;35&quot; src=&quot;https://media4.giphy.com/media/3hoLIVAJYkz6T0Ichp/giphy.gif&quot;&gt; &lt;a id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;

1. [**Call Stack**](#1-call-stack)
2. [**Primitive Types**](#2-primitive-types)
3. [**Value Types and Reference Types**](#3-value-types-and-reference-types)
4. [**Implicit, Explicit, Nominal, Structuring and Duck Typing**](#4-implicit-explicit-nominal-structuring-and-duck-typing)
5. [**== vs === vs typeof**](#5--vs--vs-typeof)
6. [**Function Scope, Block Scope and Lexical Scope**](#6-function-scope-block-scope-and-lexical-scope)
7. [**Expression vs Statement**](#7-expression-vs-statement)
8. [**IIFE, Modules and Namespaces**](#8-iife-modules-and-namespaces)
9. [**Message Queue and Event Loop**](#9-message-queue-and-event-loop)
10. [**setTimeout, setInterval and requestAnimationFrame**](#10-settimeout-setinterval-and-requestanimationframe)
11. [**JavaScript Engines**](#11-javascript-engines)
12. [**Bitwise Operators, Type Arrays and Array Buffers**](#12-bitwise-operators-type-arrays-and-array-buffers)
13. [**DOM and Layout Trees**](#13-dom-and-layout-trees)
14. [**Factories and Classes**](#14-factories-and-classes)
15. [**this, call, apply and bind**](#15-this-call-apply-and-bind)
16. [**new, Constructor, instanceof and Instances**](#16-new-constructor-instanceof-and-instances)
17. [**Prototype Inheritance and Prototype Chain**](#17-prototype-inheritance-and-prototype-chain)
18. [**Object.create and Object.assign**](#18-objectcreate-and-objectassign)
19. [**map, reduce, filter**](#19-map-reduce-filter)
20. [**Pure Functions, Side Effects, State Mutation and Event Propagation**](#20-pure-functions-side-effects-state-mutation-and-event-propagation)
21. [**Closures**](#21-closures)
22. [**High Order Functions**](#22-high-order-functions)
23. [**Recursion**](#23-recursion)
24. [**Collections and Generators**](#24-collections-and-generators)
25. [**Promises**](#25-promises)
26. [**async/await**](#26-asyncawait)
27. [**Data Structures**](#27-data-structures)
28. [**Expensive Operation and Big O Notation**](#28-expensive-operation-and-big-o-notation)
29. [**Algorithms**](#29-algorithms)
30. [**Inheritance, Polymorphism and Code Reuse**](#30-inheritance-polymorphism-and-code-reuse)
31. [**Design Patterns**](#31-design-patterns)
32. [**Partial Applications, Currying, Compose and Pipe**](#32-partial-applications-currying-compose-and-pipe)
33. [**Clean Code**](#33-clean-code)

&lt;hr&gt;

## 1. Call Stack

&lt;p&gt;The call stack is a mechanism that the JavaScript interpreter uses to keep track of function execution within a program. In JavaScript, functions are executed in the order they are called. The call stack follows the Last In, First Out (LIFO) principle, meaning that the last function pushed onto the stack is the first one to be executed.&lt;/p&gt;

&lt;p&gt;According to the ECMAScript specification, the call stack is defined as part of the execution context. Whenever a function is called, a new execution context is created and placed at the top of the stack. Once the function completes, its execution context is removed from the stack, and control returns to the previous context. This helps manage synchronous code execution, as each function call must complete before the next one can begin.&lt;/p&gt;

### Reference

-  [Call Stack — MDN](https://developer.mozilla.org/en-US/docs/Glossary/Call_stack)

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://cdn-icons-png.flaticon.com/512/1945/1945940.png&quot;&gt; Articles

-  [Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia](https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec)
-  [Understanding the JavaScript Call Stack — Charles Freeborn](https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4)
-  [Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi](https://medium.com/@valentinog/javascript-what-is-the-execution-context-what-is-the-call-stack-bd23c78f10d1)
-  [What is the JS Event Loop and Call Stack? — Jess Telford](https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0)
-  [Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora](https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0)
-  [How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack — Bipin Rajbhar](https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o)
-  [The JS Call stack Explained in 9 minutes](https://www.youtube.com/watch?v=W8AeMrVtFLY) - Colt Steel (YouTube)

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://img.icons8.com/dusk/64/video.png&quot; alt=&quot;video&quot;/&gt;  Videos

-  [Javascript: the Call Stack explained — Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)
-  [The JS Call Stack Explained In 9 Minutes — Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)
-  [What is the Call Stack? — Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)
-  [The Call Stack — Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)
-  [Understanding JavaScript Execution — Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)
-  [What the heck is the event loop anyway? — Philip Roberts](https://www.youtube.com/watch?v=8aGhZQkoFbQ)
-  [How JavaScript Code is executed? ❤️&amp; Call Stack — Akshay Saini](https://www.youtube.com/watch?v=iLWTnMzWtj4&amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP)
-  [Call Stacks - CS50](https://www.youtube.com/watch?v=aCPkszeKRa4)
-  [Learn the JavaScript Call Stack - codecupdev](https://www.youtube.com/watch?v=HXqXPGS96rw)
-  [JavaScript Functions and the Call Stack | How does the Call stack work - Chidre&#039;sTechTutorials](https://www.youtube.com/watch?v=P6H-T4cUDR4)
    
**[⬆ Back to Top](#table-of-contents)**

---

## 2. Primitive Types

&lt;p&gt;According to the ECMAScript specification, JavaScript has six primitive data types: string, number, bigint, boolean, undefined, and symbol. These types are immutable, meaning their values cannot be altered. There is also a special primitive type called null, which represents the intentional absence of any object value.&lt;/p&gt;

&lt;p&gt;Primitive values are directly assigned to a variable, and when you manipulate a primitive type, you&#039;re working directly on the value. Unlike objects, primitives do not have properties or methods, but JavaScript automatically wraps primitive values with object counterparts when necessary (e.g., when calling methods on strings).&lt;/p&gt;

### Reference

-  [JavaScript data types and data structures — MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://cdn-icons-png.flaticon.com/512/1945/1945940.png&quot;&gt; Articles

-  [Primitive and Non-primitive data-types in JavaScript - GeeksforGeeks](https://www.geeksforgeeks.org/primitive-and-non-primitive-data-types-in-javascript)
-  [How numbers are encoded in JavaScript — Dr. Axel Rauschmayer](http://2ality.com/2012/04/number-encoding.html)
-  [What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy](https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/)
-  [The Secret Life of JavaScript Primitives — Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)
-  [Primitive Types — Flow](https://flow.org/en/docs/types/primitives/)
-  [(Not) Everything in JavaScript is an Object — Daniel Li](https://dev.to/d4nyll/not-everything-in-javascript-is-an-object)
-  [JavaScript data types and data structures — MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)
-  [Diving Deeper in JavaScripts Objects — Arfat Salman](https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12)
-  [The differences between Object.freeze() vs Const in JavaScript — Bolaji Ayodeji](https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c)
-  [Object to primitive conversion — JavaScript.Info](https://javascript.info/object-toprimitive)
- [Methods of primitives - Javascript.info](https://javascript.info/primitives-methods)

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://img.icons8.com/dusk/64/video.png&quot; alt=&quot;video&quot;/&gt;  Videos

- [JavaScript Reference vs Primitive Types — Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)
- [JavaScript Primitive Types — Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)
- [Value Types and Reference Types in JavaScript — Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)
- [JavaScript Primitive Data Types — Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)
- [Everything you never wanted to know about JavaScript numbers — Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)
- [What are variables in Javascript? — JS For Everyone](https://www.youtube.com/watch?v=B4Bbmei_thw)
- [TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del Código](https://www.youtube.com/watch?v=cC65D2q5f8I)
- [Data Type in JavaScript - ScholarHat](https://www.youtube.com/watch?v=aFDvBjVjCh8)

**[⬆ Back to Top](#table-of-contents)**

---

## 3. Value Types and Reference Types

&lt;p&gt;According to the ECMAScript specification, value types are stored directly in the location that the variable accesses. These include types like number, string, boolean, undefined, bigint, symbol, and null. When you assign a value type to a variable, the value itself is stored.&lt;/p&gt;

&lt;p&gt;Reference types, on the other hand, are objects stored in the heap. Variables assigned to reference types actually store references (pointers) to the objects, not the objects themselves. When you assign a reference type to another variable, both variables reference the same object in memory.&lt;/p&gt;

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://cdn-icons-png.flaticon.com/512/1945/1945940.png&quot;&gt; Articles

-  [Explaining Value vs. Reference in Javascript — Arnav Aggarwal](https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0)
-  [Primitive Types &amp; Reference Types in JavaScript — Bran van der Meer](https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c)
-  [Value Types, Reference Types and Scope in JavaScript — Ben Aston](https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851)
-  [Back to roots: JavaScript Value vs Reference — Miro Koczka](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)
-  [Grasp &quot;By Value&quot; and &quot;By Reference&quot; in JavaScript — Léna Faure](https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293)
-  [JavaScript Reference and Copy Variables — Vítor Capretz](https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0)
-  [JavaScript Primitive vs Reference Values](http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/)
-  [JavaScript by Reference vs. by Value — nrabinowitz](https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value)
-  [JavaScript Interview Prep: Primitive vs. Reference Types — Mike Cronin](https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f)
-  [JavaScript map vs. forEach: When to Use Each One - Sajal Soni](https://code.tutsplus.com/tutorials/javascript-map-vs-foreach-when-to-use-each-one--cms-38365)

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://img.icons8.com/dusk/64/video.png&quot; alt=&quot;video&quot;/&gt;  Videos

- [Javascript Pass by Value vs Pass by Reference — techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)
- [JavaScript Value vs Reference Types — Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)
- [VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del Código](https://www.youtube.com/watch?v=AvkyOrWkuQc)
- [JavaScript - Reference vs Primitive Values/ Types - Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)
- [Value Types and Reference Types in JavaScript - Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)

**[⬆ Back to Top](#table-of-contents)**

---

## 4. Implicit, Explicit, Nominal, Structuring and Duck Typing

&lt;p&gt;The ECMAScript specification defines JavaScript as a dynamically typed language, meaning that types are associated with values rather than variables, and type checking occurs at runtime. There are various ways JavaScript manages types:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implicit Typing (or Type Coercion):&lt;/strong&gt; This occurs when JavaScript automatically converts one data type to another when required. For instance, JavaScript might convert a string to a number during an arithmetic operation. While this can simplify some code, it can also lead to unexpected results if not handled carefully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explicit Typing:&lt;/strong&gt; Unlike implicit typing, explicit typing involves manually converting a value from one type to another using functions like Number(), String(), or Boolean().&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nominal Typing:&lt;/strong&gt; JavaScript doesn&#039;t natively support nominal typing, where types are explicitly declared and checked. However, TypeScript, a superset of JavaScript, brings this feature to help catch type errors during development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structural Typing:&lt;/strong&gt; In this type system, types are based on the structure or properties of the data. JavaScript is a structurally typed language where objects are compatible if they share the same structure (i.e., the same set of properties and methods).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duck Typing:&lt;/strong&gt; This is a concept where an object&#039;s suitability is determined by the presence of certain properties and methods, rather than by the actual type of the object. JavaScript relies heavily on duck typing, where behavior is inferred from an object&#039;s properties rather than its declared type.&lt;/p&gt;

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://cdn-icons-png.flaticon.com/512/1945/1945940.png&quot;&gt; Articles

-  [What you need to know about Javascript&#039;s Implicit Coercion — Promise Tochi](https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23)
-  [JavaScript Type Coercion Explained — Alexey Samoshkin](https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839)
-  [Javascript Coercion Explained — Ben Garrison](https://hackernoon.com/javascript-coercion-explained-545c895213d3)
-  [What exactly is Type Coercion in Javascript? - Stack Overflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)

### &lt;img align=&quot;center&quot; width=&quot;30&quot; height=&quot;30&quot; src=&quot;https://img.icons8.com/dusk/64/video.png&quot; alt=&quot;video&quot;/&gt;  Videos

- [== ? === ??? ...#@^% - Shirmung Bielefeld](https://www.youtube.com/watch?v=qGyqzN0bjhc&amp;t)
- [Coercion in Javascript - Hitesh Choudhary](https://www.youtube.com/watch?v=b04Q_vyqEG8)
- [JavaScript Questions: What is Coer

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[blackmatrix7/ios_rule_script]]></title>
            <link>https://github.com/blackmatrix7/ios_rule_script</link>
            <guid>https://github.com/blackmatrix7/ios_rule_script</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:52 GMT</pubDate>
            <description><![CDATA[分流规则、重写写规则及脚本。]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/blackmatrix7/ios_rule_script">blackmatrix7/ios_rule_script</a></h1>
            <p>分流规则、重写写规则及脚本。</p>
            <p>Language: JavaScript</p>
            <p>Stars: 22,707</p>
            <p>Forks: 3,655</p>
            <p>Stars today: 7 stars today</p>
            <h2>README</h2><pre># Rules And Scripts

## 前言

各平台的分流规则、复写规则及自动化脚本。

## 特别声明

1. 本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。
2. 编写本项目主要目的为学习和研究ES6，无法保证项目内容的合法性、准确性、完整性和有效性。
3. 本项目涉及的数据由使用的个人或组织自行填写，本项目不对数据内容负责，包括但不限于数据的真实性、准确性、合法性。使用本项目所造成的一切后果，与本项目的所有贡献者无关，由使用的个人或组织完全承担。
4. 本项目中涉及的第三方硬件、软件等，与本项目没有任何直接或间接的关系。本项目仅对部署和使用过程进行客观描述，不代表支持使用任何第三方硬件、软件。使用任何第三方硬件、软件，所造成的一切后果由使用的个人或组织承担，与本项目无关。
5. 本项目中所有内容只供学习和研究使用，不得将本项目中任何内容用于违反国家/地区/组织等的法律法规或相关规定的其他用途。
6. 所有基于本项目源代码，进行的任何修改，为其他个人或组织的自发行为，与本项目没有任何直接或间接的关系，所造成的一切后果亦与本项目无关。
7. 所有直接或间接使用本项目的个人和组织，应24小时内完成学习和研究，并及时删除本项目中的所有内容。如对本项目的功能有需求，应自行开发相关功能。
8. 本项目保留随时对免责声明进行补充或更改的权利，直接或间接使用本项目内容的个人或组织，视为接受本项目的特别声明。

## 规则

**我们并不生产规则，我们只是开源规则的搬运工。**

分流规则

https://github.com/blackmatrix7/ios_rule_script/tree/master/rule

复写规则

https://github.com/blackmatrix7/ios_rule_script/tree/master/rewrite

所有规则数据都来自互联网，感谢开源规则项目作者的辛勤付出。

## 脚本

### 脚本说明

| 脚本                                                         | 介绍                                 | 框架        | 维护状态 |
| ------------------------------------------------------------ | ------------------------------------ | ----------- | -------- |
| [什么值得买](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/smzdm) | 什么值得买任务和去广告               | MagicJS 2/3 | 正常     |
| [百度贴吧](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/tieba) | 带重试功能的贴吧签到，提高签到成功率 | MagicJS 3   | 正常     |
| [开屏去广告](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/startup) | 通过脚本去除缓存到本地的APP开屏广告  | MagicJS 3   | 正常     |
| [慢慢买](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/manmanbuy) | 每日自动签到                         | MagicJS 2   | 正常     |
| [叮咚买菜](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/dingdong) | 每日自动签到                         | MagicJS 3   | 正常     |
| [Fa米家](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/famijia) | 每日自动签到                         | MagicJS 2   | 正常     |
| [Luka](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/luka) | 每日自动签到                         | MagicJS 2   | 正常     |
| [哲也同学](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/zheye) | 之乎者也                             | MagicJS 3   | 正常     |
| [Synology](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/synology) | 群晖Download Station资源离线下载     | MagicJS 3   | 正常     |
| [AppleStore](https://github.com/blackmatrix7/ios_rule_script/tree/master/script/applestore) | AppleStore 商品库存监控              | MagicJS 3   | 暂停     |

#### Quantumult X Gallery

部分脚本已配置为Quantumult X Gallery。

地址： https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/script/gallery.json

#### BoxJS

感谢 [@chouchoui](https://github.com/chouchoui) 为本项目添加BoxJS的订阅。

地址：https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/script/boxjs.json

### 外部资源

项目中资源来自互联网上其他开源项目（具体以不同目录的说明为准），这里主要进行一些整合和备份。对于此类资源，无法对使用过程中出现的任何问题进行解答，您需要联系原作者。

地址：https://github.com/blackmatrix7/ios_rule_script/tree/master/external

# 感谢

以下排名不分先后

[@BaileyZyp](https://github.com/BaileyZyp)   [@Mazeorz](https://github.com/Mazeorz)   [@LuzMasonj](https://github.com/LuzMasonj)  [@chouchoui](https://github.com/chouchoui)  [@ypannnn](https://github.com/ypannnn)  [@echizenryoma](https://github.com/echizenryoma)  [@zirawell](https://github.com/zirawell)  [@urzz](https://github.com/urzz)  [@ASD-max](https://github.com/ASD-max)

</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[trueadm/ripple]]></title>
            <link>https://github.com/trueadm/ripple</link>
            <guid>https://github.com/trueadm/ripple</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:51 GMT</pubDate>
            <description><![CDATA[the elegant TypeScript UI framework]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/trueadm/ripple">trueadm/ripple</a></h1>
            <p>the elegant TypeScript UI framework</p>
            <p>Language: JavaScript</p>
            <p>Stars: 5,536</p>
            <p>Forks: 216</p>
            <p>Stars today: 22 stars today</p>
            <h2>README</h2><pre>&lt;a href=&quot;https://ripplejs.com&quot;&gt;
  &lt;picture&gt;
    &lt;source media=&quot;(min-width: 768px)&quot; srcset=&quot;assets/ripple-desktop.png&quot;&gt;
    &lt;img src=&quot;assets/ripple-mobile.png&quot; alt=&quot;Ripple - the elegant TypeScript UI framework&quot; /&gt;
  &lt;/picture&gt;
&lt;/a&gt;

[![CI](https://github.com/trueadm/ripple/actions/workflows/ci.yml/badge.svg)](https://github.com/trueadm/ripple/actions/workflows/ci.yml)
[![Discord](https://img.shields.io/badge/Discord-Join%20Server-7289da?logo=discord&amp;logoColor=white)](https://discord.gg/JBF2ySrh2W)
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz_small.svg)](https://stackblitz.com/github/trueadm/ripple/tree/main/templates/basic)

# What is RippleJS?

&gt; Currently, this project is still in early development, and should not be used in production.

Ripple is a TypeScript UI framework that takes the best parts of React, Solid and Svelte and combines them into one package.

I wrote Ripple as a love letter for frontend web.

Personally, I ([@trueadm](https://github.com/trueadm)) have been involved in some truly amazing frontend frameworks along their journeys – from [Inferno](https://github.com/infernojs/inferno), where it all began, to [React](https://github.com/facebook/react) and the journey of React Hooks, to creating [Lexical](https://github.com/facebook/lexical), to [Svelte 5](https://github.com/sveltejs/svelte) and its new compiler and signal-based reactivity runtime. Along that journey, I collected ideas, and intriguing thoughts that may or may not pay off. Given my time between roles, I decided it was the best opportunity to try them out, and for open source to see what I was cooking.

Ripple was designed to be a JS/TS-first framework, rather than HTML-first. Ripple modules have their own `.ripple` extension, and these modules
fully support TypeScript. By introducing a new extension, it allows Ripple to invent its own superset language, which plays really nicely with
TypeScript and JSX, but with a few interesting touches. In my experience, this has led to better DX not only for humans, but also for LLMs.

## Features

- **Reactive Primitives**: Built-in reactivity with `track` and `@` reactive syntax on primitives
- **Reactive Objects**: You can create fully reactive arrays/objects using shorthand syntax `#[]` `#{}`
- **Component-Based Architecture**: Clean, reusable components with props and children
- **JSX-like Syntax**: Familiar templating with Ripple-specific enhancements
- **Performance**: Fine-grain rendering, with industry-leading performance, bundle-size and memory usage
- **TypeScript Support**: Full TypeScript integration with type checking
- **VSCode Integration**: Rich editor support with diagnostics, syntax highlighting, and IntelliSense
- **Prettier Support**: Full Prettier formatting support for `.ripple` modules

## Missing Features

- **SSR**: Ripple is currently an SPA only. It will have SSR soon! Hydration to follow after.

## Getting Started

### Try Ripple

&gt; We&#039;re working hard on getting an online playground available. Watch this space!

You can try Ripple now by using our basic Vite template either via [StackBlitz](https://stackblitz.com/github/trueadm/ripple/tree/main/templates/basic), or by running these commands in your terminal:

```bash
npx degit trueadm/ripple/templates/basic my-app
cd my-app
npm i # or yarn or pnpm
npm run dev # or yarn or pnpm
```

or use create-ripple interactive CLI tool for creating new Ripple applications with features like Tailwind CSS or Bootstrap setup.

```
npx create-ripple  # or yarn create ripple or pnpm create ripple

```

If you want to install the RippleJS package directly, it is `ripple` on npm:

```bash
npm i --save ripple # or yarn or pnpm
```

## VSCode Extension

The [Ripple VSCode extension](https://marketplace.visualstudio.com/items?itemName=ripplejs.ripple-vscode-plugin) provides:

- **Syntax Highlighting** for `.ripple` files
- **Real-time Diagnostics** for compilation errors
- **TypeScript Integration** for type checking
- **IntelliSense** for autocompletion

You can find the extension on the VS Code Marketplace as [`Ripple for VS Code`](https://marketplace.visualstudio.com/items?itemName=ripplejs.ripple-vscode-plugin).

You can also [manually install the extension](https://github.com/trueadm/ripple/raw/refs/heads/main/packages/ripple-vscode-plugin/published/ripple-vscode-plugin.vsix) `.vsix` that have been manually packaged.

### Mounting your app

You can use the `mount` API from the `ripple` package to render your Ripple component, using the `target`
option to specify what DOM element you want to render the component.

```ts
// index.ts
import { mount } from &#039;ripple&#039;;
import { App } from &#039;/App.ripple&#039;;

mount(App, {
  props: {
    title: &#039;Hello world!&#039;,
  },
  target: document.getElementById(&#039;root&#039;),
});
```

## Key Concepts

### Components

Define reusable components with the `component` keyword. These are similar to functions in that they have `props`, but crucially,
they allow for a JSX-like syntax to be defined alongside standard TypeScript. That means you do not _return JSX_ like in other frameworks,
but you instead use it like a JavaScript statement, as shown:

```jsx
component Button(props: { text: string, onClick: () =&gt; void }) {
  &lt;button onClick={props.onClick}&gt;
    {props.text}
  &lt;/button&gt;
}

// Usage
export component App() {
  &lt;Button text=&quot;Click me&quot; onClick={() =&gt; console.log(&quot;Clicked!&quot;)} /&gt;
}
```

Ripple&#039;s templating language also supports shorthands and object spreads too:

```svelte
// you can do a normal prop
&lt;div onClick={onClick}&gt;{text}&lt;/div&gt;

// or using the shorthand prop
&lt;div {onClick}&gt;{text}&lt;/div&gt;

// and you can spread props
&lt;div {...properties}&gt;{text}&lt;/div&gt;
```

### Reactivity

You use `track` to create a single tracked value. The `track` function will created a boxed `Tracked&lt;V&gt;` object that
is not accessible from the outside, and instead you must use `@` to unbox the `Tracked&lt;V&gt;` object to read or write its underlying value. You can pass the `Tracked&lt;V&gt;` object between components, functions and context
to read and write to the value in different parts of your codebase.

```ts
import { track } from &#039;ripple&#039;;

let name = track(&#039;World&#039;);
let count = track(0);

// Updates automatically trigger re-renders
@count++;
```

Objects can also contain tracked values with `@` to access the reactive object property:

```ts
import { track } from &#039;ripple&#039;;

let counter = { current: track(0) };

// Updates automatically trigger re-renders
counter.@current++;
```

Tracked derived values are also `Tracked&lt;V&gt;` objects, except you pass a function to `track` rather than a value:

```ts
let count = track(0);
let double = track(() =&gt; @count * 2);
let quadruple = track(() =&gt; @double * 2);

console.log(@quadruple);
```

If you want to use a tracked value inside a reactive context, such as an effect but you don&#039;t want that value to be a tracked dependency, you can use `untrack`:

```ts
let count = track(0);
let double = track(() =&gt; @count * 2);
let quadruple = track(() =&gt; @double * 2);

effect(() =&gt; {
  // This effect will never fire again, as we&#039;ve untracked the only dependency it has
  console.log(untrack(() =&gt; @quadruple));
})
```

&gt; Note: you cannot create `Tracked` objects in module/global scope, they have to be created on access from an active component context.

#### track with get / set

The optional get and set parameters of the `track` function let you customize how a tracked value is read or written, similar to property accessors but expressed as pure functions. The get function receives the current stored value and its return value is exposed when the tracked value is accessed / unboxed with `@`. The set function should return the value that will actually be stored and receives two parameters: the first is the one being assigned and the second with the previous value. The get and set functions may be useful for tasks such as logging, validating, or transforming values before they are exposed or stored.

```jsx
import { track } from &#039;ripple&#039;;

export component App() {
  let count = track(0,
    (current) =&gt; {
      console.log(current);
      return current;
    },
    (next, prev) =&gt; {
      console.log(prev);
      if (typeof next === &#039;string&#039;) {
        next = Number(next);
      }

      return next;
    }
  );
}
```

&gt; Note: If no value is returned from either `get` or `set`, `undefined` is either exposed (for get) or stored (for set). Also, if only supplying the `set`, the `get` parameter must be set to `undefined`.

#### trackSplit Function

The `trackSplit` &quot;splits&quot; a plain object — such as component props — into specified tracked variables and an extra `rest` property containing the remaining unspecified object properties.

```jsx
const [children, count, rest] = trackSplit(props, [&#039;children&#039;, &#039;count&#039;]);
```

When working with component props, destructuring is often useful — both for direct use as variables and for collecting remaining properties into a `rest` object (which can be named arbitrarily). If destructuring happens in the component argument, e.g. `component Child({ children, value, ...rest })`, Ripple automatically links variable access to the original props — for example, `value` is compiled to `props.value`, preserving reactivity.

However, destructuring inside the component body, e.g. `const { children, value, ...rest } = props`, for read-only reactive props, does not preserve reactivity (too complicated to implement due to many edge cases). To ensure destructured read-only reactive props remain reactive in this case, use the `trackSplit` function.

&gt; Note: boxed / wrapped Tracked objects are always reactive since they cross function boundaries by reference. Props that were not declared with `track()` are never reactive and always render the same value that was initially passed in.

A full example utilizing various Ripple constructs demonstrates the `split` option usage:

```jsx
import { track, trackSplit } from &#039;ripple&#039;;
import type { PropsWithChildren, Tracked } from &#039;ripple&#039;;

component Child(props: PropsWithChildren&lt;{ count: Tracked&lt;number&gt;, className: string }&gt;) {
  // children, count are always reactive
  // but className is passed in as a read-only reactive value
  const [children, count, className, rest] = trackSplit(props, [&#039;children&#039;, &#039;count&#039;, &#039;class&#039;]);

  &lt;button class={@className} {...@rest}&gt;&lt;@children /&gt;&lt;/button&gt;
  &lt;pre&gt;{`Count is: ${@count}`}&lt;/pre&gt;
  &lt;button onClick={() =&gt; @count++}&gt;{&#039;Increment Count&#039;}&lt;/button&gt;
}

export component App() {
    let count = track(0,
    (current) =&gt; {
      console.log(&#039;getter&#039;, current);
      return current;
    },
    (next) =&gt; {
      console.log(&#039;setter&#039;, next);
      return next;
    }
  );
  let className = track(&#039;shadow&#039;);
  let name = track(&#039;Click Me&#039;);

  function buttonRef(el) {
    console.log(&#039;ref called with&#039;, el);
    return () =&gt; {
      console.log(&#039;cleanup ref for&#039;, el);
    };
  }

  &lt;Child
    class={@className}
    onClick={() =&gt; { @name === &#039;Click Me&#039; ? @name = &#039;Clicked&#039; : @name = &#039;Click Me&#039;; @className = &#039;&#039;}}
    {count}
    {ref buttonRef}
  &gt;{@name}&lt;/Child&gt;;
}
```

With the regular destructuring, such as the one below, the `class` property would lose its reactivity:

```jsx
// ❌ WRONG class / className reactivity would be lost
let { children, count, class: className, ...rest } = props;
```

&gt; Note: Make sure the resulting `rest`, if it&#039;s going to be spread onto a dom element, does not contain `Tracked` values. Otherwise, you&#039;d be spreading not the actual values but the boxed ones, which are objects that will appear as `[object Object]` on the dom element.

#### Transporting Reactivity

Ripple doesn&#039;t constrain reactivity to components only. `Tracked&lt;V&gt;` objects can simply be passed by reference between boundaries:

```jsx
import { effect, track } from &#039;ripple&#039;;

function createDouble(count) {
  const double = track(() =&gt; @count * 2);

  effect(() =&gt; {
    console.log(&#039;Count:&#039;, @count)
  });

  return double;
}

export component App() {
  let count = track(0);

  const double = createDouble(count);

  &lt;div&gt;{&#039;Double: &#039; + @double}&lt;/div&gt;
  &lt;button onClick={() =&gt; { @count++; }}&gt;{&#039;Increment&#039;}&lt;/button&gt;
}
```

#### Dynamic Components

Ripple has built-in support for dynamic components, a way to render different components based on reactive state. Instead of hardcoding which component to show, you can store a component in a `Tracked` via `track()`, and update it at runtime. When the tracked value changes, Ripple automatically unmounts the previous component and mounts the new one. Dynamic components are written with the `&lt;@Component /&gt;` tag, where the @ both unwraps the tracked reference and tells the compiler that the component is dynamic. This makes it straightforward to pass components as props or swap them directly within a component, enabling flexible, state-driven UIs with minimal boilerplate.

```jsx
export component App() {
  let swapMe = track(() =&gt; Child1);

  &lt;Child {swapMe} /&gt;

  &lt;button onClick={() =&gt; @swapMe = @swapMe === Child1 ? Child2 : Child1}&gt;{&#039;Swap Component&#039;}&lt;/button&gt;
}

component Child({ swapMe }: {swapMe: Tracked&lt;Component&gt;}) {
  &lt;@swapMe /&gt;
}

component Child1(props) {
  &lt;pre&gt;{&#039;I am child 1&#039;}&lt;/pre&gt;
}

component Child2(props) {
  &lt;pre&gt;{&#039;I am child 2&#039;}&lt;/pre&gt;
}
```

#### Simple Reactive Arrays

Just like objects, you can use the `Tracked&lt;V&gt;` objects in any standard JavaScript object, like arrays:

```js
let first = track(0);
let second = track(0);
const arr = [first, second];

const total = track(() =&gt; arr.reduce((a, b) =&gt; a + @b, 0));

console.log(@total);
```

Like shown in the above example, you can compose normal arrays with reactivity and pass them through props or boundaries.

However, if you need the entire array to be fully reactive, including when new elements get added, you should use the reactive array that Ripple provides.

#### Fully Reactive Array

`TrackedArray` class from Ripple extends the standard JS `Array` class, and supports all of its methods and properties. Import it from the `&#039;ripple&#039;` namespace or use the provided syntactic sugar for a quick creation via the bracketed notation. All elements existing or new of the `TrackedArray` are reactive and respond to the various array operations such as push, pop, shift, unshift, etc. Even if you reference a non-existent element, once it added, the original reference will react to the change. You do NOT need to use the unboxing `@` with the elements of the array.

```jsx
import { TrackedArray } from &#039;ripple&#039;;

// using syntactic sugar `#`
const arr = #[1, 2, 3];

// using the new constructor
const arr = new TrackedArray(1, 2, 3);

// using static from method
const arr = TrackedArray.from([1, 2, 3]);

// using static of method
const arr = TrackedArray.of(1, 2, 3);
```

Usage Example:

```jsx
export component App() {
  const items = #[1, 2, 3];

  &lt;div&gt;
    &lt;p&gt;{&quot;Length: &quot;}{items.length}&lt;/p&gt;  // Reactive length
    for (const item of items) {
      &lt;div&gt;{item}&lt;/div&gt;
    }
    &lt;button onClick={() =&gt; items.push(items.length + 1)}&gt;{&quot;Add&quot;}&lt;/button&gt;
  &lt;/div&gt;
}
```

#### Reactive Object

`TrackedObject` class extends the standard JS `Object` class, and supports all of its methods and properties. Import it from the `&#039;ripple&#039;` namespace or use the provided syntactic sugar for a quick creation via the curly brace notation. `TrackedObject` fully supports shallow reactivity and any property on the root level is reactive. You can even reference non-existent properties and once added the original reference reacts to the change. You do NOT need to use the unboxing `@` with the properties of the `TrackedObject`.

```jsx
import { TrackedObject } from &#039;ripple&#039;;

// using syntactic sugar `#`
const arr = #{a: 1, b: 2, c: 3};

// using the new constructor
const arr = new TrackedObject({a: 1, b: 2, c: 3});
```

Usage Example:

```jsx
export component App() {
  const obj = #{a: 0}

  obj.a = 0;

  &lt;pre&gt;{&#039;obj.a is: &#039;}{obj.a}&lt;/pre&gt;
  &lt;pre&gt;{&#039;obj.b is: &#039;}{obj.b}&lt;/pre&gt;
  &lt;button onClick={() =&gt; { obj.a++; obj.b = obj.b ?? 5; obj.b++; }}&gt;{&#039;Increment&#039;}&lt;/button&gt;
}
```

#### Reactive Set

The `TrackedSet` extends the standard JS `Set` class, and supports all of its methods and properties.

```js
import { TrackedSet } from &#039;ripple&#039;;

const set = new TrackedSet([1, 2, 3]);
```

TrackedSet&#039;s reactive methods or properties can be used directly or assigned to reactive variables.

```jsx
import { TrackedSet, track } from &#039;ripple&#039;;

export component App() {
  const set = new TrackedSet([1, 2, 3]);

  // direct usage
  &lt;p&gt;{&quot;Direct usage: set contains 2: &quot;}{set.has(2)}&lt;/p&gt;

  // reactive assignment
  let has = track(() =&gt; set.has(2));
  &lt;p&gt;{&quot;Assigned usage: set contains 2: &quot;}{@has}&lt;/p&gt;

  &lt;button onClick={() =&gt; set.delete(2)}&gt;{&quot;Delete 2&quot;}&lt;/button&gt;
  &lt;button onClick={() =&gt; set.add(2)}&gt;{&quot;Add 2&quot;}&lt;/button&gt;
}
```

#### Reactive Map

The `TrackedMap` extends the standard JS `Map` class, and supports all of its methods and properties.

&lt;!-- prettier-ignore --&gt;
```js
import { TrackedMap, track } from &#039;ripple&#039;;

const map = new TrackedMap([[1,1], [2,2], [3,3], [4,4]]);
```

TrackedMap&#039;s reactive methods or properties can be used directly or assigned to reactive variables.

```jsx
import { TrackedMap, track } from &#039;ripple&#039;;

export component App() {
  const map = new TrackedMap([[1,1], [2,2], [3,3], [4,4]]);

  // direct usage
  &lt;p&gt;{&quot;Direct usage: map has an item with key 2: &quot;}{map.has(2)}&lt;/p&gt;

  // reactive assignment
  let has = track(() =&gt; map.has(2));
  &lt;p&gt;{&quot;Assigned usage: map has an item with key 2: &quot;}{@has}&lt;/p&gt;

  &lt;button onClick={() =&gt; map.delete(2)}&gt;{&quot;Delete item with key 2&quot;}&lt;/button&gt;
  &lt;button onClick={() =&gt; map.set(2, 2)}&gt;{&quot;Add key 2 with value 2&quot;}&lt;/button&gt;
}
```

#### Reactive Date

The `TrackedDate` extends the standard JS `Date` class, and supports all of its methods and properties.

```js
import { TrackedDate } from &#039;ripple&#039;;

const date = new TrackedDate(2026, 0, 1); // January 1, 2026
```

TrackedDate&#039;s reactive methods or properties can be used directly or assigned to reactive variables. All getter methods (`getFullYear()`, `getMonth()`, `getDate()`, etc.) and formatting methods (`toISOString()`, `toDateString()`, etc.) are reactive and will update when the date is modified.

```jsx
import { TrackedDate, track } from &#039;ripple&#039;;

export component App() {
  const date = new TrackedDate(2025, 0, 1, 12, 0, 0);

  // direct usage
  &lt;p&gt;{&quot;Direct usage: Current year is &quot;}{date.getFullYear()}&lt;/p&gt;
  &lt;p&gt;{&quot;ISO String: &quot;}{date.toISOString()}&lt;/p&gt;

  // reactive assignment
  let year = track(() =&gt; date.getFullYear());
  let month = track(() =&gt; date.getMonth());
  &lt;p&gt;{&quot;Assigned usage: Year &quot;}{@year}{&quot;, Month &quot;}{@month}&lt;/p&gt;

  &lt;button onClick={() =&gt; date.setFullYear(2027)}&gt;{&quot;Change to 2026&quot;}&lt;/button&gt;
  &lt;button onClick={() =&gt; date.setMonth(11)}&gt;{&quot;Change to December&quot;}&lt;/button&gt;
}
```

### Effects

When dealing with reactive state, you might want to be able to create side-effects based upon changes that happen upon updates.
To do this, you can use `effect`:

```jsx
import { effect, track } from &#039;ripple&#039;;

export component App() {
  let count = track(0);

  effect(() =&gt; {
    console.log(@count);
  });

  &lt;button onClick={() =&gt; @count++}&gt;{&#039;Increment&#039;}&lt;/button&gt;
}
```

### After Update tick()

The `tick()` function returns a Promise that resolves after all pending reactive updates have been applied to the DOM. This is useful when you need to ensure that DOM changes are complete before executing subsequent code, similar to Vue&#039;s `nextTick()` or Svelte&#039;s `tick()`.

```jsx
import { effect, track, tick } from &#039;ripple&#039;;

export component App() {
  let count = track(0);

  effect(() =&gt; {
    @count;

    if (@count === 0) {
      console.log(&#039;initial run, skipping&#039;);
      return;
    }

    tick().then(() =&gt; {
      console.log(&#039;after the update&#039;);
    });
  });

  &lt;button onClick={() =&gt; @count++}&gt;{&#039;Increment&#039;}&lt;/button&gt;
}
```

### Control flow

The JSX-like syntax might take some time to get used to if you&#039;re coming from another framework. For one, templating in Ripple
can only occur _inside_ a `co

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[PrismarineJS/mineflayer]]></title>
            <link>https://github.com/PrismarineJS/mineflayer</link>
            <guid>https://github.com/PrismarineJS/mineflayer</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:50 GMT</pubDate>
            <description><![CDATA[Create Minecraft bots with a powerful, stable, and high level JavaScript API.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/PrismarineJS/mineflayer">PrismarineJS/mineflayer</a></h1>
            <p>Create Minecraft bots with a powerful, stable, and high level JavaScript API.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 6,190</p>
            <p>Forks: 1,101</p>
            <p>Stars today: 3 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[mrdoob/three.js]]></title>
            <link>https://github.com/mrdoob/three.js</link>
            <guid>https://github.com/mrdoob/three.js</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:49 GMT</pubDate>
            <description><![CDATA[JavaScript 3D Library.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/mrdoob/three.js">mrdoob/three.js</a></h1>
            <p>JavaScript 3D Library.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 108,840</p>
            <p>Forks: 36,028</p>
            <p>Stars today: 16 stars today</p>
            <h2>README</h2><pre># three.js

[![NPM Package][npm]][npm-url]
[![Build Size][build-size]][build-size-url]
[![NPM Downloads][npm-downloads]][npmtrends-url]
[![Discord][discord]][discord-url]
[![DeepWiki][deepwiki]][deepwiki-url]

#### JavaScript 3D library

The aim of the project is to create an easy-to-use, lightweight, cross-browser, general-purpose 3D library. The current builds only include WebGL and WebGPU renderers but SVG and CSS3D renderers are also available as addons.

[Examples](https://threejs.org/examples/) &amp;mdash;
[Docs](https://threejs.org/docs/) &amp;mdash;
[Manual](https://threejs.org/manual/) &amp;mdash;
[Wiki](https://github.com/mrdoob/three.js/wiki) &amp;mdash;
[Migrating](https://github.com/mrdoob/three.js/wiki/Migration-Guide) &amp;mdash;
[Questions](https://stackoverflow.com/questions/tagged/three.js) &amp;mdash;
[Forum](https://discourse.threejs.org/) &amp;mdash;
[Discord](https://discord.gg/56GBJwAnUS)

### Usage

This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a `WebGL` renderer for the scene and camera, and it adds that viewport to the `document.body` element. Finally, it animates the cube within the scene for the camera.

```javascript
import * as THREE from &#039;three&#039;;

const width = window.innerWidth, height = window.innerHeight;

// init

const camera = new THREE.PerspectiveCamera( 70, width / height, 0.01, 10 );
camera.position.z = 1;

const scene = new THREE.Scene();

const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
const material = new THREE.MeshNormalMaterial();

const mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );

const renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setSize( width, height );
renderer.setAnimationLoop( animate );
document.body.appendChild( renderer.domElement );

// animation

function animate( time ) {

	mesh.rotation.x = time / 2000;
	mesh.rotation.y = time / 1000;

	renderer.render( scene, camera );

}
```

If everything goes well, you should see [this](https://jsfiddle.net/w43x5Lgh/).

### Cloning this repository

Cloning the repo with all its history results in a ~2 GB download. If you don&#039;t need the whole history you can use the `depth` parameter to significantly reduce download size.

```sh
git clone --depth=1 https://github.com/mrdoob/three.js.git
```

### Change log

[Releases](https://github.com/mrdoob/three.js/releases)


[npm]: https://img.shields.io/npm/v/three
[npm-url]: https://www.npmjs.com/package/three
[build-size]: https://badgen.net/bundlephobia/minzip/three
[build-size-url]: https://bundlephobia.com/result?p=three
[npm-downloads]: https://img.shields.io/npm/dw/three
[npmtrends-url]: https://www.npmtrends.com/three
[discord]: https://img.shields.io/discord/685241246557667386
[discord-url]: https://discord.gg/56GBJwAnUS
[deepwiki]: https://deepwiki.com/badge.svg
[deepwiki-url]: https://deepwiki.com/mrdoob/three.js

</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[paperwm/PaperWM]]></title>
            <link>https://github.com/paperwm/PaperWM</link>
            <guid>https://github.com/paperwm/PaperWM</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:48 GMT</pubDate>
            <description><![CDATA[Tiled scrollable window management for GNOME Shell]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/paperwm/PaperWM">paperwm/PaperWM</a></h1>
            <p>Tiled scrollable window management for GNOME Shell</p>
            <p>Language: JavaScript</p>
            <p>Stars: 3,709</p>
            <p>Forks: 146</p>
            <p>Stars today: 5 stars today</p>
            <h2>README</h2><pre># PaperWM #

[![project chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://paperwm.zulipchat.com)

PaperWM is an experimental [Gnome Shell](https://wiki.gnome.org/Projects/GnomeShell) extension providing scrollable tiling of windows and per monitor workspaces. It&#039;s inspired by paper notebooks and tiling window managers.

Supports Gnome Shell from 3.28 to 3.38 on X11 and wayland.

While technically an [extension](https://wiki.gnome.org/Projects/GnomeShell/Extensions) it&#039;s to a large extent built on top of the Gnome desktop rather than merely extending it.

We hang out on [zulip](https://paperwm.zulipchat.com).

## Installation

Clone the repo and run the
[`install.sh`](https://github.com/paperwm/PaperWM/blob/master/install.sh) script
from the repository. The installer will create a link to the repo in
`$XDG_DATA_HOME/gnome-shell/extensions/`. It will then ask if you want to apply
the recommended settings (see [Recommended
Settings](#recommended-gnome-shell-settings)) and lastly it will ask to enable PaperWM.
```bash
./install.sh # install, load and enable paperwm
```

To uninstall simply run `./uninstall.sh`.

You&#039;ll by default follow the
[develop](https://github.com/paperwm/PaperWM/tree/develop) branch. If you want a
possibly more stable experience you can follow the releases by checking out the
[master](https://github.com/paperwm/PaperWM/tree/master) branch.

Cloning the repo directly into `$XDG_DATA_HOME` also works (you can then run
`install.sh` to enable PaperWM):
```bash
git clone &#039;https://github.com/paperwm/PaperWM.git&#039; \
    &quot;${XDG_DATA_HOME:-$HOME/.local/share}/gnome-shell/extensions/paperwm@hedning:matrix.org&quot;
```

Running the extension will automatically install a user config file as described in [Development &amp; user configuration](#development--user-configuration).

### Note for Ubuntu users ###

There&#039;s three different gnome-desktop variants in Ubuntu:
- [`ubuntu-desktop`](https://packages.ubuntu.com/focal/ubuntu-desktop): the default
- [`ubuntu-gnome-desktop`](https://packages.ubuntu.com/focal/ubuntu-gnome-desktop):
  adds plain gnome sessions to the default
- [`vanilla-gnome-desktop`](https://packages.ubuntu.com/focal/vanilla-gnome-desktop):
  a «plain» variant

The default `ubuntu-desktop` ships with `desktop-icons` which doesn&#039;t work
correctly with PaperWM ([#145](https://github.com/paperwm/PaperWM/issues/145),
[#218](https://github.com/paperwm/PaperWM/issues/218)). Turning the extension
off in gnome-tweaks [should work in
19.10](https://github.com/paperwm/PaperWM/issues/218#issuecomment-572250654),
but there&#039;s [reports of this not
working](https://github.com/paperwm/PaperWM/issues/145#issuecomment-508620154)
in 19.04, so your milage my vary.

For the easiest out of the box experience we reccommend `ubuntu-gnome-desktop`.
`vanilla-gnome-desktop` adds some keybindings which plays badly with PaperWM
([#233](https://github.com/paperwm/PaperWM/issues/233)), making it unsuitable at
the moment.

## Usage ##

Most functionality is available using a mouse, eg. activating a window at the edge of the monitor by clicking on it. In wayland its possible to navigate with 3-finger swipes on the trackpad. But the primary focus is making an environment which works well with a keyboard.

All keybindings start with the &lt;kbd&gt;Super&lt;/kbd&gt; modifier. On most keyboards it&#039;s the Windows key, on mac keyboards it&#039;s the Command key. It&#039;s possible to modify the keyboard layout so that &lt;kbd&gt;Super&lt;/kbd&gt; is switched with &lt;kbd&gt;Alt&lt;/kbd&gt; making all the keybindings easier to reach. This can be done through Gnome Tweaks under `Keybard &amp; Mouse` ⟶ `Additional Layout Options` ⟶ `Alt/Win key behavior` ⟶ `Left Alt is swapped with Left Win`.

Most keybindings will grab the keyboard while &lt;kbd&gt;Super&lt;/kbd&gt; is held down, only switching focus when &lt;kbd&gt;Super&lt;/kbd&gt; is released. &lt;kbd&gt;Escape&lt;/kbd&gt; will abort the navigation taking you back to the previously active window.

Adding &lt;kbd&gt;Ctrl&lt;/kbd&gt; to a keybinding will take the current window with you when navigating.

Window management and navigation is based around the three following concepts.

### Scrollable window tiling ###

![The window tiling with the minimap shown](https://github.com/paperwm/media/blob/master/tiling.png)

New windows are automatically tiled to the right of the active window, taking up as much height as possible. &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Return&lt;/kbd&gt; will open a new window of the same type as the active window.

Activating a window will ensure it&#039;s fully visible, scrolling the tiling if necessary. Pressing &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;.&lt;/kbd&gt; activates the window to the right. &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;,&lt;/kbd&gt; activates the window to the left. On a US keyboard these keys are intuitively marked by &lt;kbd&gt;&lt;&lt;/kbd&gt; and &lt;kbd&gt;&gt;&lt;/kbd&gt;, they are also ordered the same way on almost all keyboard layouts. A minimap will be shown when &lt;kbd&gt;Super&lt;/kbd&gt; is continually being pressed, as can be seen in the above screenshot.

Pressing &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;I&lt;/kbd&gt; will move the window to the right below the active window, tiling them vertically in a column. &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;O&lt;/kbd&gt; will do the opposite, pushing the bottom window out of the current column.

Swiping the trackpad horizontally with three fingers will scroll the tiling (only available in Wayland).

&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt; is of course also available.

PaperWM doesn&#039;t handle attached modal dialogs very well, so it&#039;s best to turn it off in Gnome Tweaks (under Windows).

| Keybindings                                                                                       |                                                        |
| ------                                                                                            | -------                                                |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;,&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;.&lt;/kbd&gt;                                      | Activate the next or previous window                   |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Left&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Right&lt;/kbd&gt;                               | Activate the window to the left or right               |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Up&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;                                  | Activate the window above or below                     |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Home&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;End&lt;/kbd&gt;                                 | Activate the first or last window                      |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;,&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;.&lt;/kbd&gt;        | Move the current window to the left or right           |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Left&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Right&lt;/kbd&gt; | Move the current window to the left or right           |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Up&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;    | Move the current window up or down                     |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt;                                                                      | Take the window, placing it when finished navigating   |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;                                    | Cycle through the most recently used windows           |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt; or &lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;    | Cycle backwards through the most recently used windows |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;C&lt;/kbd&gt;                                                                      | Center the active window horizontally                  |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;R&lt;/kbd&gt;                                                                      | Resize the window (cycles through useful widths)       |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;R&lt;/kbd&gt;                                                      | Resize the window (cycles through useful heights)      |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt;                                                                      | Maximize the width of a window                         |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;F&lt;/kbd&gt;                                                      | Toggle fullscreen                                      |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Return&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;N&lt;/kbd&gt;                                 | Create a new window from the active application        |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Backspace&lt;/kbd&gt;                                                              | Close the active window                                |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;I&lt;/kbd&gt;                                                                      | Absorb the window to the right into the active column  |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;O&lt;/kbd&gt;                                                                      | Expel the bottom window out to the right               |


### The workspace stack &amp; monitors ###

Pressing &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt; will slide the active workspace down revealing the stack as shown in the above screenshot. You can then flip through the most recently used workspaces with repeated &lt;kbd&gt;Above_Tab&lt;/kbd&gt; presses while holding &lt;kbd&gt;Super&lt;/kbd&gt; down. &lt;kbd&gt;Above_Tab&lt;/kbd&gt; is the key above &lt;kbd&gt;Tab&lt;/kbd&gt; (&lt;kbd&gt;\`&lt;/kbd&gt; in a US qwerty layout). Like alt-tab &lt;kbd&gt;Shift&lt;/kbd&gt; is added to move in reverse order:

![The most recently used workspace stack](https://github.com/paperwm/media/blob/master/stack.png)

Pressing &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Page_Down&lt;/kbd&gt; and &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Page_Up&lt;/kbd&gt; will slide between workspaces sequentially:

![Sequential workspace navigation](https://github.com/paperwm/media/blob/master/sequence.png)

The workspace name is shown in the top left corner replacing the `Activities` button adding a few enhancements. Scrolling on the name will let you browse the workspace stack just like &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt;. Right clicking the name lets you access and change the workspace name and the background color:

![The workspace menu](https://github.com/paperwm/media/blob/master/menu.png)

Swiping the trackpad vertically with three fingers lets you navigate the workspace stack (only available in Wayland).

There&#039;s a single scrollable tiling per workspace. Adding another monitor simply makes it possible to have another workspace visible. The workspace stack is shared among all the monitors, windows being resized vertically as necessary when workspace is displayed on another monitor.

PaperWM currently works best using the workspaces span monitors preference, this can be turned on with Gnome Tweaks under Workspaces. If you want to use workspaces only on primary you need to place the secondary monitor either below or above the primary (with the best result having it below).

| Workspace Keybindings                                                  |                                                                                   |
| ------                                                                 | -------                                                                           |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt;                                   | Cycle through the most recently used workspaces                                   |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt;                   | Cycle backwards through the most recently used workspaces                         |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt;                    | Cycle through the most recently used, taking the active window with you           |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt;    | Cycle backwards through the most recently used, taking the active window with you |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Page_Down&lt;/kbd&gt;/&lt;kbd&gt;Page_Up&lt;/kbd&gt;                | Cycle sequentially through workspaces                                             |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Page_Down&lt;/kbd&gt;/&lt;kbd&gt;Page_Up&lt;/kbd&gt; | Cycle sequentially through workspaces, taking the active window with you          |


| Monitor Keybindings                                                 |                                            |
| ------                                                              | -------                                    |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Arrow_key&lt;/kbd&gt;                | Select neighbouring monitor                |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Arrow_key&lt;/kbd&gt; | Move active window to neighbouring monitor |

### Scratch layer ###

![The floating scratch layer, with the alt tab menu open](https://github.com/paperwm/media/blob/master/scratch.png)

The scratch layer is an escape hatch to a familiar floating layout. This layer is intended to store windows that are globally useful like chat applications and in general serve as the kitchen sink.
When the scratch layer is active it will float above the tiled windows, when hidden the windows will be minimized.

Opening a window when the scratch layer is active will make it float automatically.

Pressing &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Escape&lt;/kbd&gt; toggles between showing and hiding the windows in the scratch layer.
Activating windows in the scratch layer is done using &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;, the floating windows having priority in the list while active.
When the tiling is active &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt; selects the most recently used scratch window.

&lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Escape&lt;/kbd&gt; will move a tiled window into the scratch layer or alternatively tile an already floating window. This functionality can also be accessed through the window context menu (&lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Space&lt;/kbd&gt;).

| Keybindings                                       |                                                                  |
| ------                                            | -------                                                          |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Escape&lt;/kbd&gt;                 | Toggle between showing and hiding the most recent scratch window |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;Escape&lt;/kbd&gt; | Toggle between showing and hiding the scratch windows            |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;kbd&gt;Escape&lt;/kbd&gt;  | Toggle between floating and tiling the current window            |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;                    | Cycle through the most recently used scratch windows             |
| &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;H&lt;/kbd&gt;                      | Minimize the current window                                      |

## Development &amp; user configuration ##

A default user configuration, `user.js`, is created in `~/.config/paperwm/` with three functions `init`, `enable` and `disable`. `init` will run only once on startup, `enable` and `disable` will be run whenever extensions are being told to disable and enable themselves. Eg. when locking the screen with &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;.

We also made an emacs package, [gnome-shell-mode](https://github.com/paperwm/gnome-shell-mode), to make hacking on the config and writing extensions a more pleasant experience. To support this out of the box we also install a `metadata.json` so gnome-shell-mode will pick up the correct file context, giving you completion and interactive evaluation ala. looking glass straight in emacs.

Pressing &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Insert&lt;/kbd&gt; will assign the active window to a global variable `metaWindow`, its [window actor](https://developer.gnome.org/meta/stable/MetaWindowActor.html) to `actor`, its [workspace](https://developer.gnome.org/meta/stable/MetaWorkspace.html) to `workspace` and its PaperWM style workspace to `space`. This makes it easy to inspect state and test things out.

#### Using dconf-editor to modify settings

```shell
GSETTINGS_SCHEMA_DIR=$HOME/.local/share/gnome-shell/extensions/paperwm@hedning:matrix.org/schemas dconf-editor /org/gnome/shell/extensions/paperwm/
```

### Winprops

It&#039;s possible to create simple rules for placing new windows. Currently most useful when a window should be placed in the scratch layer automatically. An example, best placed in the `init` part of `user.js`:

```javascript
    Tiling.defwinprop({
        wm_class: &quot;Spotify&quot;,
        scratch_layer: true,
    });
```

The `wm_class` of a window can be found by using looking glass: &lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;F2&lt;/kbd&gt; `lg` &lt;kbd&gt;Return&lt;/kbd&gt; Go to the &quot;Windows&quot; section at the top right and find the window. X11 users can also use the `xprop` command line tool.

### New Window Handlers

If opening a new application window with &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Return&lt;/kbd&gt; isn&#039;t doing exactly what you want you can create custom functions to fit your needs. Say you want new emacs windows to open the current buffer by default, or have new terminals inherit the current directory:

```javascript
    let App = Extension.imports.app;
    App.customHandlers[&#039;emacs.desktop&#039;] =
        () =&gt; imports.misc.util.spawn([&#039;emacsclient&#039;, &#039;--eval&#039;, &#039;(make-frame)&#039;]);
    App.customHandlers[&#039;org.gnome.Terminal.desktop&#039;] =
        (metaWindow, app) =&gt; app.action_group.activate_action(
          &quot;win.new-terminal&quot;,
          new imports.gi.GLib.Variant(&quot;(ss)&quot;, [&quot;window&quot;, &quot;current&quot;]));
```

The app id of a window can be looked up like this:

```javascript
var Shell = imports.gi.Shell;
var Tracker = Shell.WindowTracker.get_default();
var app = Tracker.get_window_app(metaWindow);
app.get_id();
```

Available application actions can be listed like this:
```javascript
app.action_group.list_actions();
```

### Keybindings

Due to limitations in the mutter keybinding API we need to steal some built in Gnome Shell actions by default. Eg. the builtin action `switch-group` with the default &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt; keybinding is overridden to cycle through recently used workspaces. If an overridden action has several keybindings they will unfortunately all activate the override, so for instance because &lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt; is also bound to `switch-group` it will be overridden by default. If you want to avoid this, eg. you want &lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt; to use the builtin behavior simply remove the conflicts (ie. &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Tab&lt;/kbd&gt; and &lt;kbd&gt;Super&lt;/kbd&gt;&lt;kbd&gt;Above_Tab&lt;/kbd&gt; and their &lt;kbd&gt;Shift&lt;/kbd&gt; variants) from `/org/gnome/desktop/wm/keybindings/switch-group` (no restarts required).

#### User defined keybindings

`Extension.imports.keybindings.bindkey(keystr, name, handler, options)`

Option              | Values              | Meaning
--------------------|---------------------|------------------------------------
`activeInNavigator` | `true`, **`false`** | The keybinding is active when the minimap/navigator is open
`opensMinimap`    | `true`, **`false`** | The minimap will open when the keybinding is invoked

```javascript
let Keybindings = Extension.imports.keybindings;
Keybindings.bindkey(&quot;&lt;Super&gt;j&quot;, &quot;my-favorite-width&quot;,
                    (metaWindow) =&gt; {
                        let f = metaWindow.get_frame_rect();
                        metaWindow.move_resize_frame(true, f.x, f.y, 500, f.h);
                    },
                    { activeInNavigator: true });
```

See `examples/keybindings.js` for more examples.

## Fixed Window Size ##

Currently it is not possible to have a default fixed window size.
Please check the following issues for progress / info:

* https://github.com/paperwm/PaperWM/issues/304
* https://github.com/paperwm/PaperWM/pull/189
* https://github.com/paperwm/PaperWM/issues/311

## Recommended Gnome Shell Settings ##

There&#039;s a few Gnome Shell settings which works poorly with PaperWM. Namely
- `workspaces-only-on-primary`: Multi monitor support require workspaces
  spanning all monitors
- `edge-tiling`: We don&#039;t support the native half tiled windows
- `attach-modal-dialogs`: Attached modal dialogs can cause visual glitching

To use the recommended settings run
[`set-recommended-gnome-shell-settings.sh`](https://github.com/paperwm/PaperWM/blob/master/set-recommended-gnome-shell-settings.sh). A &quot;restore previous settings&quot; script 

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[meteor/meteor]]></title>
            <link>https://github.com/meteor/meteor</link>
            <guid>https://github.com/meteor/meteor</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:47 GMT</pubDate>
            <description><![CDATA[Meteor, the JavaScript App Platform]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/meteor/meteor">meteor/meteor</a></h1>
            <p>Meteor, the JavaScript App Platform</p>
            <p>Language: JavaScript</p>
            <p>Stars: 44,711</p>
            <p>Forks: 5,242</p>
            <p>Stars today: 3 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.meteor.com&quot; target=&quot;_blank&quot;&gt;
    &lt;img align=&quot;center&quot; width=&quot;225&quot; src=&quot;https://user-images.githubusercontent.com/841294/26841702-0902bbee-4af3-11e7-9805-0618da66a246.png&quot;&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;br&gt;

&lt;div align=&quot;center&quot;&gt;

[![Travis CI Status](https://api.travis-ci.com/meteor/meteor.svg?branch=devel)](https://app.travis-ci.com/github/meteor/meteor)
[![CircleCI Status](https://circleci.com/gh/meteor/meteor.svg?style=svg)](https://app.circleci.com/pipelines/github/meteor/meteor?branch=devel)
[![built with Meteor](https://img.shields.io/badge/Meteor-3.0.1-green?logo=meteor&amp;logoColor=white)](https://meteor.com)


&lt;/div&gt;

&lt;hr&gt;

Meteor is an **ultra-simple** environment for building **modern** web applications.

&lt;hr&gt;

- [Official Website](https://www.meteor.com)
- [Installation](https://www.meteor.com/developers/install)
- [Documentation](https://docs.meteor.com/#/full/)

&lt;hr&gt;

### 📚 **Create your applications using modern JavaScript**

Benefit from the latest technology updates to rapidly prototype and develop your applications.

&lt;hr&gt;

### ✨ **Integrate technologies you already use**

Use popular frameworks and tools right out-of-the-box. Focus on building features instead of configuring disparate components yourself.

&lt;hr&gt;

### 💻 **Build apps for any device**

Use the same code whether you’re developing for web, iOS, Android, or desktop for a seamless update experience for your users.

&lt;hr&gt;

# 🔥 Getting Started

How about trying a tutorial to get started with your favorite technology?

| [&lt;img align=&quot;left&quot; width=&quot;25&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg&quot;&gt; React](https://react-tutorial.meteor.com/) |
| - |
| [&lt;img align=&quot;left&quot; width=&quot;25&quot; src=&quot;https://progsoft.net/images/blaze-css-icon-3e80acb3996047afd09f1150f53fcd78e98c1e1b.png&quot;&gt; Blaze](https://blaze-tutorial.meteor.com/) |
| [&lt;img align=&quot;left&quot; width=&quot;25&quot; src=&quot;https://vuejs.org/images/logo.png&quot;&gt; Vue](https://vue-tutorial.meteor.com/) |
| [&lt;img align=&quot;left&quot; width=&quot;25&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Svelte_Logo.svg/1200px-Svelte_Logo.svg.png&quot;&gt; Svelte](https://svelte-tutorial.meteor.com/) |

Next, read the [documentation](https://docs.meteor.com/) and get some [examples](https://github.com/meteor/examples).

# 🚀 Quick Start

On your platform, use this line:

```shell
&gt; npm install -g meteor
```
 
🚀 To create a project:

```shell
&gt; meteor create my-app
```

☄️ Run it:

```shell
cd my-app
meteor
```

# 🧱 Developer Resources

**Building an application with Meteor?**

* Deploy on [Meteor Cloud](https://www.meteor.com/cloud)
* Discuss on [Forums](https://forums.meteor.com/)
* Join the Meteor community Slack by clicking this [invite link](https://join.slack.com/t/meteor-community/shared_invite/enQtODA0NTU2Nzk5MTA3LWY5NGMxMWRjZDgzYWMyMTEyYTQ3MTcwZmU2YjM5MTY3MjJkZjQ0NWRjOGZlYmIxZjFlYTA5Mjg4OTk3ODRiOTc).
* Announcement list. Subscribe in the [footer](https://www.meteor.com/).


Interested in helping or contributing to Meteor?  These resources will help:

* [Core development guide](DEVELOPMENT.md)
* [Contribution guidelines](CONTRIBUTING.md)
* [Feature requests](https://github.com/meteor/meteor/discussions/)
* [Issue tracker](https://github.com/meteor/meteor/issues)

To uninstall Meteor: 
  - If installed via npm, run:
      ```shell
      meteor-installer uninstall
      ```
  - If installed via curl, run:
    ```shell
    rm -rf ~/.meteor 
    sudo rm /usr/local/bin/meteor
    ```
To find more information about installation, [read here](https://docs.meteor.com/install.html#uninstall).
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[nodejs/node]]></title>
            <link>https://github.com/nodejs/node</link>
            <guid>https://github.com/nodejs/node</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:46 GMT</pubDate>
            <description><![CDATA[Node.js JavaScript runtime ✨🐢🚀✨]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/nodejs/node">nodejs/node</a></h1>
            <p>Node.js JavaScript runtime ✨🐢🚀✨</p>
            <p>Language: JavaScript</p>
            <p>Stars: 113,578</p>
            <p>Forks: 33,352</p>
            <p>Stars today: 30 stars today</p>
            <h2>README</h2><pre># Node.js

Node.js is an open-source, cross-platform JavaScript runtime environment.

For information on using Node.js, see the [Node.js website][].

The Node.js project uses an [open governance model](./GOVERNANCE.md). The
[OpenJS Foundation][] provides support for the project.

Contributors are expected to act in a collaborative manner to move
the project forward. We encourage the constructive exchange of contrary
opinions and compromise. The [TSC](./GOVERNANCE.md#technical-steering-committee)
reserves the right to limit or block contributors who repeatedly act in ways
that discourage, exhaust, or otherwise negatively affect other participants.

**This project has a [Code of Conduct][].**

## Table of contents

* [Support](#support)
* [Release types](#release-types)
  * [Download](#download)
    * [Current and LTS releases](#current-and-lts-releases)
    * [Nightly releases](#nightly-releases)
    * [API documentation](#api-documentation)
  * [Verifying binaries](#verifying-binaries)
* [Building Node.js](#building-nodejs)
* [Security](#security)
* [Contributing to Node.js](#contributing-to-nodejs)
* [Current project team members](#current-project-team-members)
  * [TSC (Technical Steering Committee)](#tsc-technical-steering-committee)
  * [Collaborators](#collaborators)
  * [Triagers](#triagers)
  * [Release keys](#release-keys)
* [License](#license)

## Support

Looking for help? Check out the
[instructions for getting support](.github/SUPPORT.md).

## Release types

* **Current**: Under active development. Code for the Current release is in the
  branch for its major version number (for example,
  [v22.x](https://github.com/nodejs/node/tree/v22.x)). Node.js releases a new
  major version every 6 months, allowing for breaking changes. This happens in
  April and October every year. Releases appearing each October have a support
  life of 8 months. Releases appearing each April convert to LTS (see below)
  each October.
* **LTS**: Releases that receive Long Term Support, with a focus on stability
  and security. Every even-numbered major version will become an LTS release.
  LTS releases receive 12 months of _Active LTS_ support and a further 18 months
  of _Maintenance_. LTS release lines have alphabetically-ordered code names,
  beginning with v4 Argon. There are no breaking changes or feature additions,
  except in some special circumstances.
* **Nightly**: Code from the Current branch built every 24-hours when there are
  changes. Use with caution.

Current and LTS releases follow [semantic versioning](https://semver.org). A
member of the Release Team [signs](#release-keys) each Current and LTS release.
For more information, see the
[Release README](https://github.com/nodejs/Release#readme).

### Download

Binaries, installers, and source tarballs are available at
&lt;https://nodejs.org/en/download/&gt;.

#### Current and LTS releases

&lt;https://nodejs.org/download/release/&gt;

The [latest](https://nodejs.org/download/release/latest/) directory is an
alias for the latest Current release. The latest-_codename_ directory is an
alias for the latest release from an LTS line. For example, the
[latest-hydrogen](https://nodejs.org/download/release/latest-hydrogen/)
directory contains the latest Hydrogen (Node.js 18) release.

#### Nightly releases

&lt;https://nodejs.org/download/nightly/&gt;

Each directory and filename includes the version (e.g., `v22.0.0`),
followed by the UTC date (e.g., `20240424` for April 24, 2024),
and the short commit SHA of the HEAD of the release (e.g., `ddd0a9e494`).
For instance, a full directory name might look like `v22.0.0-nightly20240424ddd0a9e494`.

#### API documentation

Documentation for the latest Current release is at &lt;https://nodejs.org/api/&gt;.
Version-specific documentation is available in each release directory in the
_docs_ subdirectory. Version-specific documentation is also at
&lt;https://nodejs.org/download/docs/&gt;.

### Verifying binaries

Download directories contain a `SHASUMS256.txt.asc` file with SHA checksums for the
files and the releaser PGP signature.

You can get a trusted keyring from nodejs/release-keys, e.g. using `curl`:

```bash
curl -fsLo &quot;/path/to/nodejs-keyring.kbx&quot; &quot;https://github.com/nodejs/release-keys/raw/HEAD/gpg/pubring.kbx&quot;
```

Alternatively, you can import the releaser keys in your default keyring, see
[Release keys](#release-keys) for commands to how to do that.

Then, you can verify the files you&#039;ve downloaded locally
(if you&#039;re using your default keyring, pass `--keyring=&quot;${GNUPGHOME:-~/.gnupg}/pubring.kbx&quot;`):

```bash
curl -fsO &quot;https://nodejs.org/dist/${VERSION}/SHASUMS256.txt.asc&quot; \
&amp;&amp; gpgv --keyring=&quot;/path/to/nodejs-keyring.kbx&quot; --output SHASUMS256.txt &lt; SHASUMS256.txt.asc \
&amp;&amp; shasum --check SHASUMS256.txt --ignore-missing
```

## Building Node.js

See [BUILDING.md](BUILDING.md) for instructions on how to build Node.js from
source and a list of supported platforms.

## Security

For information on reporting security vulnerabilities in Node.js, see
[SECURITY.md](./SECURITY.md).

## Contributing to Node.js

* [Contributing to the project][]
* [Working Groups][]
* [Strategic initiatives][]
* [Technical values and prioritization][]

## Current project team members

For information about the governance of the Node.js project, see
[GOVERNANCE.md](./GOVERNANCE.md).

&lt;!-- node-core-utils and find-inactive-tsc.mjs depend on the format of the TSC
     list. If the format changes, those utilities need to be tested and
     updated. --&gt;

### TSC (Technical Steering Committee)

#### TSC voting members

&lt;!--lint disable prohibited-strings--&gt;

* [aduh95](https://github.com/aduh95) -
  **Antoine du Hamel** &lt;&lt;duhamelantoine1995@gmail.com&gt;&gt; (he/him)
* [anonrig](https://github.com/anonrig) -
  **Yagiz Nizipli** &lt;&lt;yagiz@nizipli.com&gt;&gt; (he/him)
* [benjamingr](https://github.com/benjamingr) -
  **Benjamin Gruenbaum** &lt;&lt;benjamingr@gmail.com&gt;&gt;
* [BridgeAR](https://github.com/BridgeAR) -
  **Ruben Bridgewater** &lt;&lt;ruben@bridgewater.de&gt;&gt; (he/him)
* [gireeshpunathil](https://github.com/gireeshpunathil) -
  **Gireesh Punathil** &lt;&lt;gpunathi@in.ibm.com&gt;&gt; (he/him)
* [jasnell](https://github.com/jasnell) -
  **James M Snell** &lt;&lt;jasnell@gmail.com&gt;&gt; (he/him)
* [joyeecheung](https://github.com/joyeecheung) -
  **Joyee Cheung** &lt;&lt;joyeec9h3@gmail.com&gt;&gt; (she/her)
* [legendecas](https://github.com/legendecas) -
  **Chengzhong Wu** &lt;&lt;legendecas@gmail.com&gt;&gt; (he/him)
* [marco-ippolito](https://github.com/marco-ippolito) -
  **Marco Ippolito** &lt;&lt;marcoippolito54@gmail.com&gt;&gt; (he/him)
* [mcollina](https://github.com/mcollina) -
  **Matteo Collina** &lt;&lt;matteo.collina@gmail.com&gt;&gt; (he/him)
* [panva](https://github.com/panva) -
  **Filip Skokan** &lt;&lt;panva.ip@gmail.com&gt;&gt; (he/him)
* [RafaelGSS](https://github.com/RafaelGSS) -
  **Rafael Gonzaga** &lt;&lt;rafael.nunu@hotmail.com&gt;&gt; (he/him)
* [RaisinTen](https://github.com/RaisinTen) -
  **Darshan Sen** &lt;&lt;raisinten@gmail.com&gt;&gt; (he/him)
* [richardlau](https://github.com/richardlau) -
  **Richard Lau** &lt;&lt;richard.lau@ibm.com&gt;&gt;
* [ronag](https://github.com/ronag) -
  **Robert Nagy** &lt;&lt;ronagy@icloud.com&gt;&gt;
* [ruyadorno](https://github.com/ruyadorno) -
  **Ruy Adorno** &lt;&lt;ruy@vlt.sh&gt;&gt; (he/him)
* [ShogunPanda](https://github.com/ShogunPanda) -
  **Paolo Insogna** &lt;&lt;paolo@cowtech.it&gt;&gt; (he/him)
* [targos](https://github.com/targos) -
  **Michaël Zasso** &lt;&lt;targos@protonmail.com&gt;&gt; (he/him)
* [tniessen](https://github.com/tniessen) -
  **Tobias Nießen** &lt;&lt;tniessen@tnie.de&gt;&gt; (he/him)

#### TSC regular members

* [BethGriggs](https://github.com/BethGriggs) -
  **Beth Griggs** &lt;&lt;bethanyngriggs@gmail.com&gt;&gt; (she/her)
* [bnoordhuis](https://github.com/bnoordhuis) -
  **Ben Noordhuis** &lt;&lt;info@bnoordhuis.nl&gt;&gt;
* [cjihrig](https://github.com/cjihrig) -
  **Colin Ihrig** &lt;&lt;cjihrig@gmail.com&gt;&gt; (he/him)
* [codebytere](https://github.com/codebytere) -
  **Shelley Vohr** &lt;&lt;shelley.vohr@gmail.com&gt;&gt; (she/her)
* [GeoffreyBooth](https://github.com/GeoffreyBooth) -
  **Geoffrey Booth** &lt;&lt;webadmin@geoffreybooth.com&gt;&gt; (he/him)
* [MoLow](https://github.com/MoLow) -
  **Moshe Atlow** &lt;&lt;moshe@atlow.co.il&gt;&gt; (he/him)
* [Trott](https://github.com/Trott) -
  **Rich Trott** &lt;&lt;rtrott@gmail.com&gt;&gt; (he/him)

&lt;details&gt;

&lt;summary&gt;TSC emeriti members&lt;/summary&gt;

#### TSC emeriti members

* [addaleax](https://github.com/addaleax) -
  **Anna Henningsen** &lt;&lt;anna@addaleax.net&gt;&gt; (she/her)
* [apapirovski](https://github.com/apapirovski) -
  **Anatoli Papirovski** &lt;&lt;apapirovski@mac.com&gt;&gt; (he/him)
* [ChALkeR](https://github.com/ChALkeR) -
  **Сковорода Никита Андреевич** &lt;&lt;chalkerx@gmail.com&gt;&gt; (he/him)
* [chrisdickinson](https://github.com/chrisdickinson) -
  **Chris Dickinson** &lt;&lt;christopher.s.dickinson@gmail.com&gt;&gt;
* [danbev](https://github.com/danbev) -
  **Daniel Bevenius** &lt;&lt;daniel.bevenius@gmail.com&gt;&gt; (he/him)
* [danielleadams](https://github.com/danielleadams) -
  **Danielle Adams** &lt;&lt;adamzdanielle@gmail.com&gt;&gt; (she/her)
* [evanlucas](https://github.com/evanlucas) -
  **Evan Lucas** &lt;&lt;evanlucas@me.com&gt;&gt; (he/him)
* [fhinkel](https://github.com/fhinkel) -
  **Franziska Hinkelmann** &lt;&lt;franziska.hinkelmann@gmail.com&gt;&gt; (she/her)
* [Fishrock123](https://github.com/Fishrock123) -
  **Jeremiah Senkpiel** &lt;&lt;fishrock123@rocketmail.com&gt;&gt; (he/they)
* [gabrielschulhof](https://github.com/gabrielschulhof) -
  **Gabriel Schulhof** &lt;&lt;gabrielschulhof@gmail.com&gt;&gt;
* [gibfahn](https://github.com/gibfahn) -
  **Gibson Fahnestock** &lt;&lt;gibfahn@gmail.com&gt;&gt; (he/him)
* [indutny](https://github.com/indutny) -
  **Fedor Indutny** &lt;&lt;fedor@indutny.com&gt;&gt;
* [isaacs](https://github.com/isaacs) -
  **Isaac Z. Schlueter** &lt;&lt;i@izs.me&gt;&gt;
* [joshgav](https://github.com/joshgav) -
  **Josh Gavant** &lt;&lt;josh.gavant@outlook.com&gt;&gt;
* [mhdawson](https://github.com/mhdawson) -
  **Michael Dawson** &lt;&lt;midawson@redhat.com&gt;&gt; (he/him)
* [mmarchini](https://github.com/mmarchini) -
  **Mary Marchini** &lt;&lt;oss@mmarchini.me&gt;&gt; (she/her)
* [mscdex](https://github.com/mscdex) -
  **Brian White** &lt;&lt;mscdex@mscdex.net&gt;&gt;
* [MylesBorins](https://github.com/MylesBorins) -
  **Myles Borins** &lt;&lt;myles.borins@gmail.com&gt;&gt; (he/him)
* [nebrius](https://github.com/nebrius) -
  **Bryan Hughes** &lt;&lt;bryan@nebri.us&gt;&gt;
* [ofrobots](https://github.com/ofrobots) -
  **Ali Ijaz Sheikh** &lt;&lt;ofrobots@google.com&gt;&gt; (he/him)
* [orangemocha](https://github.com/orangemocha) -
  **Alexis Campailla** &lt;&lt;orangemocha@nodejs.org&gt;&gt;
* [piscisaureus](https://github.com/piscisaureus) -
  **Bert Belder** &lt;&lt;bertbelder@gmail.com&gt;&gt;
* [rvagg](https://github.com/rvagg) -
  **Rod Vagg** &lt;&lt;r@va.gg&gt;&gt;
* [sam-github](https://github.com/sam-github) -
  **Sam Roberts** &lt;&lt;vieuxtech@gmail.com&gt;&gt;
* [shigeki](https://github.com/shigeki) -
  **Shigeki Ohtsu** &lt;&lt;ohtsu@ohtsu.org&gt;&gt; (he/him)
* [thefourtheye](https://github.com/thefourtheye) -
  **Sakthipriyan Vairamani** &lt;&lt;thechargingvolcano@gmail.com&gt;&gt; (he/him)
* [TimothyGu](https://github.com/TimothyGu) -
  **Tiancheng &quot;Timothy&quot; Gu** &lt;&lt;timothygu99@gmail.com&gt;&gt; (he/him)
* [trevnorris](https://github.com/trevnorris) -
  **Trevor Norris** &lt;&lt;trev.norris@gmail.com&gt;&gt;

&lt;/details&gt;

&lt;!-- node-core-utils and find-inactive-collaborators.mjs depend on the format
     of the collaborator list. If the format changes, those utilities need to be
     tested and updated. --&gt;

### Collaborators

* [abmusse](https://github.com/abmusse) -
  **Abdirahim Musse** &lt;&lt;abdirahim.musse@ibm.com&gt;&gt;
* [addaleax](https://github.com/addaleax) -
  **Anna Henningsen** &lt;&lt;anna@addaleax.net&gt;&gt; (she/her)
* [Aditi-1400](https://github.com/Aditi-1400) -
  **Aditi Singh** &lt;&lt;aditisingh1400@gmail.com&gt;&gt; (she/her)
* [aduh95](https://github.com/aduh95) -
  **Antoine du Hamel** &lt;&lt;duhamelantoine1995@gmail.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/aduh95)
* [anonrig](https://github.com/anonrig) -
  **Yagiz Nizipli** &lt;&lt;yagiz@nizipli.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/anonrig)
* [atlowChemi](https://github.com/atlowChemi) -
  **Chemi Atlow** &lt;&lt;chemi@atlow.co.il&gt;&gt; (he/him)
* [Ayase-252](https://github.com/Ayase-252) -
  **Qingyu Deng** &lt;&lt;i@ayase-lab.com&gt;&gt;
* [bengl](https://github.com/bengl) -
  **Bryan English** &lt;&lt;bryan@bryanenglish.com&gt;&gt; (he/him)
* [benjamingr](https://github.com/benjamingr) -
  **Benjamin Gruenbaum** &lt;&lt;benjamingr@gmail.com&gt;&gt;
* [BethGriggs](https://github.com/BethGriggs) -
  **Beth Griggs** &lt;&lt;bethanyngriggs@gmail.com&gt;&gt; (she/her)
* [bnb](https://github.com/bnb) -
  **Tierney Cyren** &lt;&lt;hello@bnb.im&gt;&gt; (they/them)
* [bnoordhuis](https://github.com/bnoordhuis) -
  **Ben Noordhuis** &lt;&lt;info@bnoordhuis.nl&gt;&gt;
* [BridgeAR](https://github.com/BridgeAR) -
  **Ruben Bridgewater** &lt;&lt;ruben@bridgewater.de&gt;&gt; (he/him)
* [cclauss](https://github.com/cclauss) -
  **Christian Clauss** &lt;&lt;cclauss@me.com&gt;&gt; (he/him)
* [cjihrig](https://github.com/cjihrig) -
  **Colin Ihrig** &lt;&lt;cjihrig@gmail.com&gt;&gt; (he/him)
* [codebytere](https://github.com/codebytere) -
  **Shelley Vohr** &lt;&lt;shelley.vohr@gmail.com&gt;&gt; (she/her)
* [cola119](https://github.com/cola119) -
  **Kohei Ueno** &lt;&lt;kohei.ueno119@gmail.com&gt;&gt; (he/him)
* [daeyeon](https://github.com/daeyeon) -
  **Daeyeon Jeong** &lt;&lt;daeyeon.dev@gmail.com&gt;&gt; (he/him)
* [dario-piotrowicz](https://github.com/dario-piotrowicz) -
  **Dario Piotrowicz** &lt;&lt;dario.piotrowicz@gmail.com&gt;&gt; (he/him)
* [debadree25](https://github.com/debadree25) -
  **Debadree Chatterjee** &lt;&lt;debadree333@gmail.com&gt;&gt; (he/him)
* [deokjinkim](https://github.com/deokjinkim) -
  **Deokjin Kim** &lt;&lt;deokjin81.kim@gmail.com&gt;&gt; (he/him)
* [edsadr](https://github.com/edsadr) -
  **Adrian Estrada** &lt;&lt;edsadr@gmail.com&gt;&gt; (he/him)
* [ErickWendel](https://github.com/ErickWendel) -
  **Erick Wendel** &lt;&lt;erick.workspace@gmail.com&gt;&gt; (he/him)
* [Ethan-Arrowood](https://github.com/Ethan-Arrowood) -
  **Ethan Arrowood** &lt;&lt;ethan@arrowood.dev&gt;&gt; (he/him)
* [F3n67u](https://github.com/F3n67u) -
  **Feng Yu** &lt;&lt;F3n67u@outlook.com&gt;&gt; (he/him)
* [fhinkel](https://github.com/fhinkel) -
  **Franziska Hinkelmann** &lt;&lt;franziska.hinkelmann@gmail.com&gt;&gt; (she/her)
* [Flarna](https://github.com/Flarna) -
  **Gerhard Stöbich** &lt;&lt;deb2001-github@yahoo.de&gt;&gt; (he/they)
* [gabrielschulhof](https://github.com/gabrielschulhof) -
  **Gabriel Schulhof** &lt;&lt;gabrielschulhof@gmail.com&gt;&gt;
* [geeksilva97](https://github.com/geeksilva97) -
  **Edy Silva** &lt;&lt;edigleyssonsilva@gmail.com&gt;&gt; (he/him)
* [gengjiawen](https://github.com/gengjiawen) -
  **Jiawen Geng** &lt;&lt;technicalcute@gmail.com&gt;&gt;
* [GeoffreyBooth](https://github.com/GeoffreyBooth) -
  **Geoffrey Booth** &lt;&lt;webadmin@geoffreybooth.com&gt;&gt; (he/him)
* [gireeshpunathil](https://github.com/gireeshpunathil) -
  **Gireesh Punathil** &lt;&lt;gpunathi@in.ibm.com&gt;&gt; (he/him)
* [guybedford](https://github.com/guybedford) -
  **Guy Bedford** &lt;&lt;guybedford@gmail.com&gt;&gt; (he/him)
* [H4ad](https://github.com/H4ad) -
  **Vinícius Lourenço Claro Cardoso** &lt;&lt;contact@viniciusl.com.br&gt;&gt; (he/him)
* [HarshithaKP](https://github.com/HarshithaKP) -
  **Harshitha K P** &lt;&lt;harshitha014@gmail.com&gt;&gt; (she/her)
* [himself65](https://github.com/himself65) -
  **Zeyu &quot;Alex&quot; Yang** &lt;&lt;himself65@outlook.com&gt;&gt; (he/him)
* [IlyasShabi](https://github.com/IlyasShabi) -
  **Ilyas Shabi** &lt;&lt;ilyasshabi94@gmail.com&gt;&gt; (he/him)
* [islandryu](https://github.com/islandryu) -
  **Ryuhei Shima** &lt;&lt;shimaryuhei@gmail.com&gt;&gt; (he/him)
* [jakecastelli](https://github.com/jakecastelli) -
  **Jake Yuesong Li** &lt;&lt;jake.yuesong@gmail.com&gt;&gt; (he/him)
* [JakobJingleheimer](https://github.com/JakobJingleheimer) -
  **Jacob Smith** &lt;&lt;jacob@frende.me&gt;&gt; (he/him)
* [jasnell](https://github.com/jasnell) -
  **James M Snell** &lt;&lt;jasnell@gmail.com&gt;&gt; (he/him)
* [jazelly](https://github.com/jazelly) -
  **Jason Zhang** &lt;&lt;xzha4350@gmail.com&gt;&gt; (he/him)
* [jkrems](https://github.com/jkrems) -
  **Jan Martin** &lt;&lt;jan.krems@gmail.com&gt;&gt; (he/him)
* [JonasBa](https://github.com/JonasBa) -
  **Jonas Badalic** &lt;&lt;jonas.badalic@gmail.com&gt;&gt; (he/him)
* [joyeecheung](https://github.com/joyeecheung) -
  **Joyee Cheung** &lt;&lt;joyeec9h3@gmail.com&gt;&gt; (she/her)
* [juanarbol](https://github.com/juanarbol) -
  **Juan José Arboleda** &lt;&lt;soyjuanarbol@gmail.com&gt;&gt; (he/him)
* [JungMinu](https://github.com/JungMinu) -
  **Minwoo Jung** &lt;&lt;nodecorelab@gmail.com&gt;&gt; (he/him)
* [KhafraDev](https://github.com/KhafraDev) -
  **Matthew Aitken** &lt;&lt;maitken033380023@gmail.com&gt;&gt; (he/him)
* [legendecas](https://github.com/legendecas) -
  **Chengzhong Wu** &lt;&lt;legendecas@gmail.com&gt;&gt; (he/him)
* [lemire](https://github.com/lemire) -
  **Daniel Lemire** &lt;&lt;daniel@lemire.me&gt;&gt;
* [LiviaMedeiros](https://github.com/LiviaMedeiros) -
  **LiviaMedeiros** &lt;&lt;livia@cirno.name&gt;&gt;
* [ljharb](https://github.com/ljharb) -
  **Jordan Harband** &lt;&lt;ljharb@gmail.com&gt;&gt;
* [lpinca](https://github.com/lpinca) -
  **Luigi Pinca** &lt;&lt;luigipinca@gmail.com&gt;&gt; (he/him)
* [lukekarrys](https://github.com/lukekarrys) -
  **Luke Karrys** &lt;&lt;luke@lukekarrys.com&gt;&gt; (he/him)
* [Lxxyx](https://github.com/Lxxyx) -
  **Zijian Liu** &lt;&lt;lxxyxzj@gmail.com&gt;&gt; (he/him)
* [marco-ippolito](https://github.com/marco-ippolito) -
  **Marco Ippolito** &lt;&lt;marcoippolito54@gmail.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/marco-ippolito)
* [marsonya](https://github.com/marsonya) -
  **Akhil Marsonya** &lt;&lt;akhil.marsonya27@gmail.com&gt;&gt; (he/him)
* [MattiasBuelens](https://github.com/MattiasBuelens) -
  **Mattias Buelens** &lt;&lt;mattias@buelens.com&gt;&gt; (he/him)
* [mcollina](https://github.com/mcollina) -
  **Matteo Collina** &lt;&lt;matteo.collina@gmail.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/mcollina)
* [meixg](https://github.com/meixg) -
  **Xuguang Mei** &lt;&lt;meixuguang@gmail.com&gt;&gt; (he/him)
* [mhdawson](https://github.com/mhdawson) -
  **Michael Dawson** &lt;&lt;midawson@redhat.com&gt;&gt; (he/him)
* [MoLow](https://github.com/MoLow) -
  **Moshe Atlow** &lt;&lt;moshe@atlow.co.il&gt;&gt; (he/him)
* [MrJithil](https://github.com/MrJithil) -
  **Jithil P Ponnan** &lt;&lt;jithil@outlook.com&gt;&gt; (he/him)
* [ovflowd](https://github.com/ovflowd) -
  **Claudio Wunder** &lt;&lt;cwunder@gnome.org&gt;&gt; (he/they)
* [panva](https://github.com/panva) -
  **Filip Skokan** &lt;&lt;panva.ip@gmail.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/panva)
* [pimterry](https://github.com/pimterry) -
  **Tim Perry** &lt;&lt;pimterry@gmail.com&gt;&gt; (he/him)
* [pmarchini](https://github.com/pmarchini) -
  **Pietro Marchini** &lt;&lt;pietro.marchini94@gmail.com&gt;&gt; (he/him)
* [puskin](https://github.com/puskin) -
  **Giovanni Bucci** &lt;&lt;github@puskin.it&gt;&gt; (he/him)
* [Qard](https://github.com/Qard) -
  **Stephen Belanger** &lt;&lt;admin@stephenbelanger.com&gt;&gt; (he/him)
* [RafaelGSS](https://github.com/RafaelGSS) -
  **Rafael Gonzaga** &lt;&lt;rafael.nunu@hotmail.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/RafaelGSS)
* [RaisinTen](https://github.com/RaisinTen) -
  **Darshan Sen** &lt;&lt;raisinten@gmail.com&gt;&gt; (he/him) - [Support me](https://github.com/sponsors/RaisinTen)
* [richardlau](https://github.com/richardlau) -
  **Richard Lau** &lt;&lt;richard.lau@ibm.com&gt;&gt;
* [rluvaton](https://github.com/rluvaton) -
  **Raz Luvaton** &lt;&lt;rluvaton@gmail.com&gt;&gt; (he/him)
* [ronag](https://github.com/ronag) -
  **Robert Nagy** &lt;&lt;ronagy@icloud.com&gt;&gt;
* [ruyadorno](https://github.com/ruyadorno) -
  **Ruy Adorno** &lt;&lt;ruy@vlt.sh&gt;&gt; (he/him)
* [santigimeno](https://github.com/santigimeno) -
  **Santiago Gimeno** &lt;&lt;santiago.gimeno@gmail.com&gt;&gt;
* [ShogunPanda](https://github.com/ShogunPanda) -
  **Paolo Insogna** &lt;&lt;paolo@cowtech.it&gt;&gt; (he/him)
* [srl295](https://github.com/srl295) -
  **Steven R Loomis** &lt;&lt;srl295@gmail.com&gt;&gt;
* [StefanStojanovic](https://github.com/StefanStojanovic) -
  **Stefan Stojanovic** &lt;&lt;stefan.stojanovic@janeasystems.com&gt;&gt; (he/him)
* [sxa](https://github.com/sxa) -
  **Stewart X Addison** &lt;&lt;sxa@redhat.com&gt;&gt; (he/him)
* [targos](https://github.com/targos) -
  **Michaël Zasso** &lt;&lt;targos@protonmail.com&gt;&gt; (he/him)
* [theanarkh](https://github.com/theanarkh) -
  **theanarkh** &lt;&lt;theratliter@gmail.com&gt;&gt; (he/him)
* [tniessen](https://github.com/tniessen) -
  **Tobias Nießen** &lt;&lt;tniessen@tnie.de&gt;&gt; (he/him)
* [trivikr](https://github.com/trivikr) -
  **Trivikram Kamat** &lt;&lt;trivikr.dev@gmail.com&gt;&gt;
* [Trott](https://github.com/Trott) -
  **Rich Trott** &lt;&lt;rtrott@gmail.com&gt;&gt; (he/him)
* [UlisesGascon](https://github.com/Ulis

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[ruvnet/claude-flow]]></title>
            <link>https://github.com/ruvnet/claude-flow</link>
            <guid>https://github.com/ruvnet/claude-flow</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:45 GMT</pubDate>
            <description><![CDATA[🌊 The leading agent orchestration platform for Claude. Deploy intelligent multi-agent swarms, coordinate autonomous workflows, and build conversational AI systems. Features enterprise-grade architecture, distributed swarm intelligence, RAG integration, and native Claude Code support via MCP protocol. Ranked #1 in agent-based frameworks.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/ruvnet/claude-flow">ruvnet/claude-flow</a></h1>
            <p>🌊 The leading agent orchestration platform for Claude. Deploy intelligent multi-agent swarms, coordinate autonomous workflows, and build conversational AI systems. Features enterprise-grade architecture, distributed swarm intelligence, RAG integration, and native Claude Code support via MCP protocol. Ranked #1 in agent-based frameworks.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 8,592</p>
            <p>Forks: 1,156</p>
            <p>Stars today: 34 stars today</p>
            <h2>README</h2><pre># 🌊 Claude-Flow v2.5.0 Alpha 130: AI Orchestration Platform

&lt;div align=&quot;center&quot;&gt;

[![🌟 Star on GitHub](https://img.shields.io/github/stars/ruvnet/claude-flow?style=for-the-badge&amp;logo=github&amp;color=gold)](https://github.com/ruvnet/claude-flow)
[![📈 Downloads](https://img.shields.io/npm/dt/claude-flow?style=for-the-badge&amp;logo=npm&amp;color=blue&amp;label=Downloads)](https://www.npmjs.com/package/claude-flow)
[![📦 Latest Release](https://img.shields.io/npm/v/claude-flow?style=for-the-badge&amp;logo=npm&amp;color=green&amp;label=v2.5.0-alpha.130)](https://www.npmjs.com/package/claude-flow)
[![⚡ Claude Code](https://img.shields.io/badge/Claude%20Code-SDK%20Integrated-green?style=for-the-badge&amp;logo=anthropic)](https://github.com/ruvnet/claude-flow)
[![🏛️ Agentics Foundation](https://img.shields.io/badge/Agentics-Foundation-crimson?style=for-the-badge&amp;logo=openai)](https://discord.com/invite/dfxmpwkG2D)
[![🐝 Hive-Mind](https://img.shields.io/badge/Hive--Mind-AI%20Coordination-purple?style=for-the-badge&amp;logo=swarm)](https://github.com/ruvnet/claude-flow)
[![🧠 Neural](https://img.shields.io/badge/Neural-87%20MCP%20Tools-blue?style=for-the-badge&amp;logo=pytorch)](https://github.com/ruvnet/claude-flow)
[![🛡️ MIT License](https://img.shields.io/badge/License-MIT-yellow?style=for-the-badge&amp;logo=opensourceinitiative)](https://opensource.org/licenses/MIT)

&lt;/div&gt;
 
---

## 🌟 **Overview**

**Claude-Flow v2 Alpha** is an enterprise-grade AI orchestration platform that reimagines how developers build with AI. By combining **hive-mind swarm intelligence**, **neural pattern recognition**, and **87 advanced MCP tools**, Claude-Flow enables unprecedented AI-powered development workflows.

### 🎯 **Key Features**

- **🐝 Hive-Mind Intelligence**: Queen-led AI coordination with specialized worker agents
- **🧠 Neural Networks**: 27+ cognitive models with WASM SIMD acceleration
- **🔧 87 MCP Tools**: Comprehensive toolkit for swarm orchestration, memory, and automation
- **🔄 Dynamic Agent Architecture (DAA)**: Self-organizing agents with fault tolerance
- **💾 SQLite Memory System**: Persistent `.swarm/memory.db` with 12 specialized tables
- **🪝 Advanced Hooks System**: Automated workflows with pre/post operation hooks
- **📊 GitHub Integration**: 6 specialized modes for repository management
- **🌐 Flow Nexus Cloud Platform**: E2B sandboxes, AI swarms, challenges, and marketplace integration

&gt; 🔥 **Revolutionary AI Coordination**: Build faster, smarter, and more efficiently with AI-powered development orchestration

## 🌐 **Flow Nexus Cloud Platform**

**NEW**: Claude-Flow v2.0.0 now includes **Flow Nexus integration** - a cloud-powered AI development platform featuring:

- **E2B Sandboxes**: Secure isolated environments for Node.js, Python, React, Next.js
- **AI Swarms**: Deploy multi-agent systems in cloud infrastructure  
- **Neural Training**: Distributed machine learning with custom model deployment
- **Challenges &amp; Marketplace**: Coding challenges with rUv credit rewards and template marketplace
- **Workflow Automation**: Event-driven automation with message queue processing

&gt; 📚 **Complete documentation**: Visit [flow-nexus.ruv.io](https://flow-nexus.ruv.io) for comprehensive guides, tutorials, and API reference. Also see issue # https://github.com/ruvnet/claude-flow/issues/732

## ⚡ **Try v2.0.0 Alpha in 4 Commands**

### 📋 **Prerequisites**

- **Node.js 18+** (LTS recommended)
- **npm 9+** or equivalent package manager
- **Windows users**: See [Windows Installation Guide](https://github.com/ruvnet/claude-code-flow/blob/main/docs/windows-installation.md) for special instructions

⚠️ **IMPORTANT**: Claude Code must be installed first:

```bash
# 1. Install Claude Code globally
npm install -g @anthropic-ai/claude-code

# 2. (Optional) Skip permissions check for faster setup
# Only use if you understand the security implications
claude --dangerously-skip-permissions
```

💡 **Windows Note**: If you encounter SQLite errors, Claude Flow will automatically use in-memory storage. For persistent storage options, see our [Windows guide](https://github.com/ruvnet/claude-code-flow/blob/main/docs/windows-installation.md).

### 🎯 **Instant Alpha Testing**

```bash
# 1. Initialize Claude Flow with enhanced MCP setup (auto-configures permissions!)
npx claude-flow@alpha init --force

# 2. Explore all revolutionary capabilities  
npx claude-flow@alpha --help

# 3a. Quick AI coordination (recommended for most tasks)
npx claude-flow@alpha swarm &quot;build me a REST API&quot; --claude

# 3b. OR launch the full hive-mind system (for complex projects)
npx claude-flow@alpha hive-mind wizard
npx claude-flow@alpha hive-mind spawn &quot;build enterprise system&quot; --claude
```

### 🚀 **Quick Start with Flow Nexus**

```bash
# 1. Initialize Flow Nexus only (minimal setup)
npx claude-flow init --flow-nexus

# 2. Register and login (use MCP tools in Claude Code)
mcp__flow-nexus__user_register({ email: &quot;your@email.com&quot;, password: &quot;secure&quot; })
mcp__flow-nexus__user_login({ email: &quot;your@email.com&quot;, password: &quot;secure&quot; })

# 3. Deploy your first cloud swarm
mcp__flow-nexus__swarm_init({ topology: &quot;mesh&quot;, maxAgents: 5 })
mcp__flow-nexus__sandbox_create({ template: &quot;node&quot;, name: &quot;api-dev&quot; })
```

### 🤔 **Swarm vs Hive-Mind: Which to Use?**

| Feature | `swarm` Command | `hive-mind` Command |
|---------|----------------|-------------------|
| **Best For** | Quick tasks, single objectives | Complex projects, persistent sessions |
| **Setup** | Instant - no configuration needed | Interactive wizard setup |
| **Session** | Temporary coordination | Persistent with resume capability |
| **Memory** | Task-scoped | Project-wide with SQLite storage |
| **Agents** | Auto-spawned for task | Manual control with specializations |
| **Use When** | &quot;Build X&quot;, &quot;Fix Y&quot;, &quot;Analyze Z&quot; | Multi-feature projects, team coordination |

**Quick Rule:** Start with `swarm` for most tasks. Use `hive-mind` when you need persistent sessions or complex multi-agent coordination.

## 🎯 **Typical Workflows - Your &quot;Happy Path&quot; Guide**

### **New to Claude-Flow? Start Here!**

Confused about `.hive-mind` and `.swarm` directories? Not sure when to create new hives? Here are the most common workflow patterns:

#### **🚀 Pattern 1: Single Feature Development**
```bash
# Initialize once per feature/task
npx claude-flow@alpha init --force
npx claude-flow@alpha hive-mind spawn &quot;Implement user authentication&quot; --claude

# Continue working on SAME feature (reuse existing hive)
npx claude-flow@alpha hive-mind status
npx claude-flow@alpha memory query &quot;authentication&quot; --recent
npx claude-flow@alpha swarm &quot;Add password reset functionality&quot; --continue-session
```

#### **🏗️ Pattern 2: Multi-Feature Project**
```bash
# Project-level initialization (once per project)
npx claude-flow@alpha init --force --project-name &quot;my-app&quot;

# Feature 1: Authentication (new hive)
npx claude-flow@alpha hive-mind spawn &quot;auth-system&quot; --namespace auth --claude

# Feature 2: User management (separate hive)  
npx claude-flow@alpha hive-mind spawn &quot;user-management&quot; --namespace users --claude

# Resume Feature 1 later (use session ID from spawn output)
npx claude-flow@alpha hive-mind resume session-xxxxx-xxxxx
```

#### **🔍 Pattern 3: Research &amp; Analysis**
```bash
# Start research session
npx claude-flow@alpha hive-mind spawn &quot;Research microservices patterns&quot; --agents researcher,analyst --claude

# Continue research in SAME session
npx claude-flow@alpha memory stats  # See what&#039;s been learned
npx claude-flow@alpha swarm &quot;Deep dive into API gateway patterns&quot; --continue-session
```

### **🤔 When Should I Create a New Hive?**

| Situation | Action | Command |
|-----------|--------|---------|
| **Same objective/feature** | Continue existing hive | `npx claude-flow@alpha hive-mind resume &lt;session-id&gt;` |
| **New feature in same project** | Create new hive with namespace | `npx claude-flow@alpha hive-mind spawn &quot;new-feature&quot; --namespace feature-name` |
| **Completely different project** | New directory + init | `mkdir new-project &amp;&amp; cd new-project &amp;&amp; npx claude-flow@alpha init` |
| **Experimenting/testing** | Temporary hive | `npx claude-flow@alpha hive-mind spawn &quot;experiment&quot; --temp` |

### **📁 Understanding &quot;Empty&quot; Directories**

**Don&#039;t panic if directories seem empty!** Claude-Flow uses SQLite databases that may not show files in directory listings:

```bash
# Check what&#039;s actually stored (even if directories look empty)
npx claude-flow@alpha memory stats        # See memory data
npx claude-flow@alpha memory list         # List all namespaces  
npx claude-flow@alpha hive-mind status    # See active hives

# Your project structure after initialization:
# .hive-mind/     &lt;- Contains config.json + SQLite session data
# .swarm/         &lt;- Contains memory.db (SQLite database)
# memory/         &lt;- Agent-specific memories (created when agents spawn)
# coordination/   &lt;- Active workflow files (created during tasks)
```

### **🔄 Continuing Previous Work**

```bash
# See what you were working on
npx claude-flow@alpha hive-mind status
npx claude-flow@alpha memory query --recent --limit 5

# List all sessions to find the one you want
npx claude-flow@alpha hive-mind sessions

# Resume specific session by ID
npx claude-flow@alpha hive-mind resume session-xxxxx-xxxxx
```

---

## 🪝 **Advanced Hooks System**

### **Automated Workflow Enhancement**
Claude-Flow v2.0.0 introduces a powerful hooks system that automates coordination and enhances every operation:

```bash
# Hooks automatically trigger on operations
npx claude-flow@alpha init --force  # Auto-configures MCP servers &amp; hooks
```

### **Available Hooks**

#### **Pre-Operation Hooks**
- **`pre-task`**: Auto-assigns agents based on task complexity
- **`pre-search`**: Caches searches for improved performance  
- **`pre-edit`**: Validates files and prepares resources
- **`pre-command`**: Security validation before execution

#### **Post-Operation Hooks**
- **`post-edit`**: Auto-formats code using language-specific tools
- **`post-task`**: Trains neural patterns from successful operations
- **`post-command`**: Updates memory with operation context
- **`notification`**: Real-time progress updates

#### **Session Hooks**
- **`session-start`**: Restores previous context automatically
- **`session-end`**: Generates summaries and persists state
- **`session-restore`**: Loads memory from previous sessions

### **Hook Configuration**
```json
// .claude/settings.json (auto-configured)
{
  &quot;hooks&quot;: {
    &quot;preEditHook&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [&quot;claude-flow&quot;, &quot;hooks&quot;, &quot;pre-edit&quot;, &quot;--file&quot;, &quot;${file}&quot;, &quot;--auto-assign-agents&quot;, &quot;true&quot;],
      &quot;alwaysRun&quot;: false
    },
    &quot;postEditHook&quot;: {
      &quot;command&quot;: &quot;npx&quot;, 
      &quot;args&quot;: [&quot;claude-flow&quot;, &quot;hooks&quot;, &quot;post-edit&quot;, &quot;--file&quot;, &quot;${file}&quot;, &quot;--format&quot;, &quot;true&quot;],
      &quot;alwaysRun&quot;: true
    },
    &quot;sessionEndHook&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [&quot;claude-flow&quot;, &quot;hooks&quot;, &quot;session-end&quot;, &quot;--generate-summary&quot;, &quot;true&quot;],
      &quot;alwaysRun&quot;: true
    }
  }
}
```

---

## 📚 **Complete Documentation**

For detailed information about all features, advanced usage, and comprehensive guides, visit our **[GitHub Wiki](https://github.com/ruvnet/claude-flow/wiki)**:

### 🤖 **Core Features**
- **[Neural Module](https://github.com/ruvnet/claude-flow/wiki/Neural-Module)** - SAFLA self-learning systems with 4-tier memory architecture
- **[Goal Module](https://github.com/ruvnet/claude-flow/wiki/Goal-Module)** - GOAP intelligent planning with A* pathfinding
- **[Agent System Overview](https://github.com/ruvnet/claude-flow/wiki/Agent-System-Overview)** - Complete catalog of all 64 agents
- **[Hive-Mind Intelligence](https://github.com/ruvnet/claude-flow/wiki/Hive-Mind-Intelligence)** - Queen-led AI coordination patterns

### ⚡ **Advanced Topics**
- **[Memory System](https://github.com/ruvnet/claude-flow/wiki/Memory-System)** - SQLite-based persistent memory
- **[MCP Tools Reference](https://github.com/ruvnet/claude-flow/wiki/MCP-Tools)** - Complete guide to all 87 tools
- **[GitHub Integration](https://github.com/ruvnet/claude-flow/wiki/GitHub-Integration)** - Repository management automation
- **[Performance Benchmarking](https://github.com/ruvnet/claude-flow/wiki/Performance-Benchmarking)** - Optimization strategies

### 📋 **Configuration &amp; Templates**
- **[CLAUDE.md Templates](https://github.com/ruvnet/claude-flow/wiki/CLAUDE-MD-Templates)** - Project-specific configurations
- **[SPARC Methodology](https://github.com/ruvnet/claude-flow/wiki/SPARC-Methodology)** - Test-driven development patterns
- **[Development Patterns](https://github.com/ruvnet/claude-flow/wiki/Development-Patterns)** - Best practices

### 🛠️ **Setup &amp; Troubleshooting**
- **[Installation Guide](https://github.com/ruvnet/claude-flow/wiki/Installation-Guide)** - Detailed setup instructions
- **[Windows Installation](https://github.com/ruvnet/claude-flow/wiki/Windows-Installation)** - Windows-specific setup
- **[Troubleshooting](https://github.com/ruvnet/claude-flow/wiki/Troubleshooting)** - Common issues and solutions
- **[Non-Interactive Mode](https://github.com/ruvnet/claude-flow/wiki/Non-Interactive-Mode)** - CI/CD automation

---

## 🤝 **Community &amp; Support**

- **GitHub Issues**: [Report bugs or request features](https://github.com/ruvnet/claude-flow/issues)
- **Discord**: [Join the Agentics Foundation community](https://discord.com/invite/dfxmpwkG2D)
- **Wiki**: [Comprehensive documentation](https://github.com/ruvnet/claude-flow/wiki)
- **Examples**: [Real-world usage patterns](https://github.com/ruvnet/claude-flow/tree/main/examples)

---

## 📊 **Performance &amp; Stats**

- **84.8% SWE-Bench solve rate** - Industry-leading problem-solving capability
- **32.3% token reduction** - Efficient context management
- **2.8-4.4x speed improvement** - Parallel coordination strategies
- **64 specialized agents** - Complete development ecosystem
- **87 MCP tools** - Comprehensive automation toolkit

---

## Star History

&lt;a href=&quot;https://www.star-history.com/#ruvnet/claude-flow&amp;Date&quot;&gt;
 &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=ruvnet/claude-flow&amp;type=Date&amp;theme=dark&quot; /&gt;
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=ruvnet/claude-flow&amp;type=Date&quot; /&gt;
   &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=ruvnet/claude-flow&amp;type=Date&quot; /&gt;
 &lt;/picture&gt;
&lt;/a&gt;

---

**Built with ❤️ by [rUv](https://github.com/ruvnet) | Powered by Revolutionary AI**

*v2.0.0 Alpha - The Future of AI Orchestration*

&lt;/div&gt;
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[bgstaal/multipleWindow3dScene]]></title>
            <link>https://github.com/bgstaal/multipleWindow3dScene</link>
            <guid>https://github.com/bgstaal/multipleWindow3dScene</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:44 GMT</pubDate>
            <description><![CDATA[A quick example of how one can "synchronize" a 3d scene across multiple windows using three.js and localStorage]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/bgstaal/multipleWindow3dScene">bgstaal/multipleWindow3dScene</a></h1>
            <p>A quick example of how one can "synchronize" a 3d scene across multiple windows using three.js and localStorage</p>
            <p>Language: JavaScript</p>
            <p>Stars: 18,849</p>
            <p>Forks: 2,929</p>
            <p>Stars today: 10 stars today</p>
            <h2>README</h2><pre># Multiple Window 3D Scene using Three.js

## Introduction
This project demonstrates a unique approach to creating and managing a 3D scene across multiple browser windows using Three.js and localStorage. It&#039;s designed for developers interested in advanced web graphics and window management techniques.

## Features
- 3D scene creation and rendering with Three.js.
- Synchronization of 3D scenes across multiple browser windows.
- Dynamic window management and state synchronization using localStorage.

## Installation
Clone the repository and open `index.html` in your browser to start exploring the 3D scene.

```
git clone https://github.com/bgstaal/multipleWindow3dScene
```
## Usage
The main application logic is contained within `main.js` and `WindowManager.js`. The 3D scene is rendered in `index.html`, which serves as the entry point of the application.

## Structure and Components
- `index.html`: Entry point that sets up the HTML structure and includes the Three.js library and the main script.
- `WindowManager.js`: Core class managing window creation, synchronization, and state management across multiple windows.
- `main.js`: Contains the logic for initializing the 3D scene, handling window events, and rendering the scene.
- `three.r124.min.js`: Minified version of the Three.js library used for 3D graphics rendering.

## Detailed Functionality
- `WindowManager.js` handles the lifecycle of multiple browser windows, including creation, synchronization, and removal. It uses localStorage to maintain state across windows.
- `main.js` initializes the 3D scene using Three.js, manages the window&#039;s resize events, and updates the scene based on window interactions.

## Contributing
Contributions to enhance or expand the project are welcome. Feel free to fork the repository, make changes, and submit pull requests.

## License
This project is open-sourced under the MIT License.

## Acknowledgments
- The Three.js team for their comprehensive 3D library.
- x.com/didntdrinkwater for this readme.

## Contact
For more information and updates, follow [@_nonfigurativ_](https://twitter.com/_nonfigurativ_) on Twitter.
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[anuraghazra/github-readme-stats]]></title>
            <link>https://github.com/anuraghazra/github-readme-stats</link>
            <guid>https://github.com/anuraghazra/github-readme-stats</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:43 GMT</pubDate>
            <description><![CDATA[⚡ Dynamically generated stats for your github readmes]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/anuraghazra/github-readme-stats">anuraghazra/github-readme-stats</a></h1>
            <p>⚡ Dynamically generated stats for your github readmes</p>
            <p>Language: JavaScript</p>
            <p>Stars: 76,322</p>
            <p>Forks: 26,484</p>
            <p>Stars today: 19 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[facebook/react]]></title>
            <link>https://github.com/facebook/react</link>
            <guid>https://github.com/facebook/react</guid>
            <pubDate>Mon, 06 Oct 2025 00:04:42 GMT</pubDate>
            <description><![CDATA[The library for web and native user interfaces.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/facebook/react">facebook/react</a></h1>
            <p>The library for web and native user interfaces.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 239,490</p>
            <p>Forks: 49,474</p>
            <p>Stars today: 45 stars today</p>
            <h2>README</h2><pre># [React](https://react.dev/) &amp;middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![(Runtime) Build and Test](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg)](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml) [![(Compiler) TypeScript](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main)](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don&#039;t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using [Node](https://nodejs.org/en) and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://react.dev/learn).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Quick Start](https://react.dev/learn) to get a taste of React.
* [Add React to an Existing Project](https://react.dev/learn/add-react-to-an-existing-project) to use as little or as much React as you need.
* [Create a New React App](https://react.dev/learn/start-a-new-react-project) if you&#039;re looking for a powerful JavaScript toolchain.

## Documentation

You can find the React documentation [on the website](https://react.dev/).

Check out the [Getting Started](https://react.dev/learn) page for a quick overview.

The documentation is divided into several sections:

* [Quick Start](https://react.dev/learn)
* [Tutorial](https://react.dev/learn/tutorial-tic-tac-toe)
* [Thinking in React](https://react.dev/learn/thinking-in-react)
* [Installation](https://react.dev/learn/installation)
* [Describing the UI](https://react.dev/learn/describing-the-ui)
* [Adding Interactivity](https://react.dev/learn/adding-interactivity)
* [Managing State](https://react.dev/learn/managing-state)
* [Advanced Guides](https://react.dev/learn/escape-hatches)
* [API Reference](https://react.dev/reference/react)
* [Where to Get Support](https://react.dev/community)
* [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).

## Examples

We have several examples [on the website](https://react.dev/). Here is the first one to get you started:

```jsx
import { createRoot } from &#039;react-dom/client&#039;;

function HelloMessage({ name }) {
  return &lt;div&gt;Hello {name}&lt;/div&gt;;
}

const root = createRoot(document.getElementById(&#039;container&#039;));
root.render(&lt;HelloMessage name=&quot;Taylor&quot; /&gt;);
```

This example will render &quot;Hello Taylor&quot; into a container on the page.

You&#039;ll notice that we used an HTML-like syntax; [we call it JSX](https://react.dev/learn#writing-markup-with-jsx). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://legacy.reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### [Good First Issues](https://github.com/facebook/react/labels/good%20first%20issue)

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE).
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
    </channel>
</rss>