<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for javascript - JavaScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for javascript.</description>
        <lastBuildDate>Thu, 11 Sep 2025 00:04:54 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[debug-js/debug]]></title>
            <link>https://github.com/debug-js/debug</link>
            <guid>https://github.com/debug-js/debug</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:54 GMT</pubDate>
            <description><![CDATA[A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/debug-js/debug">debug-js/debug</a></h1>
            <p>A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers</p>
            <p>Language: JavaScript</p>
            <p>Stars: 11,353</p>
            <p>Forks: 958</p>
            <p>Stars today: 8 stars today</p>
            <h2>README</h2><pre># debug
[![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers)
[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)

&lt;img width=&quot;647&quot; src=&quot;https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png&quot;&gt;

A tiny JavaScript debugging utility modelled after Node.js core&#039;s debugging
technique. Works in Node.js and web browsers.

## Installation

```bash
$ npm install debug
```

## Usage

`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.

Example [_app.js_](./examples/node/app.js):

```js
var debug = require(&#039;debug&#039;)(&#039;http&#039;)
  , http = require(&#039;http&#039;)
  , name = &#039;My App&#039;;

// fake app

debug(&#039;booting %o&#039;, name);

http.createServer(function(req, res){
  debug(req.method + &#039; &#039; + req.url);
  res.end(&#039;hello\n&#039;);
}).listen(3000, function(){
  debug(&#039;listening&#039;);
});

// fake worker of some kind

require(&#039;./worker&#039;);
```

Example [_worker.js_](./examples/node/worker.js):

```js
var a = require(&#039;debug&#039;)(&#039;worker:a&#039;)
  , b = require(&#039;debug&#039;)(&#039;worker:b&#039;);

function work() {
  a(&#039;doing lots of uninteresting work&#039;);
  setTimeout(work, Math.random() * 1000);
}

work();

function workb() {
  b(&#039;doing some work&#039;);
  setTimeout(workb, Math.random() * 2000);
}

workb();
```

The `DEBUG` environment variable is then used to enable these based on space or
comma-delimited names.

Here are some examples:

&lt;img width=&quot;647&quot; alt=&quot;screen shot 2017-08-08 at 12 53 04 pm&quot; src=&quot;https://user-images.githubusercontent.com/71256/29091703-a6302cdc-7c38-11e7-8304-7c0b3bc600cd.png&quot;&gt;
&lt;img width=&quot;647&quot; alt=&quot;screen shot 2017-08-08 at 12 53 38 pm&quot; src=&quot;https://user-images.githubusercontent.com/71256/29091700-a62a6888-7c38-11e7-800b-db911291ca2b.png&quot;&gt;
&lt;img width=&quot;647&quot; alt=&quot;screen shot 2017-08-08 at 12 53 25 pm&quot; src=&quot;https://user-images.githubusercontent.com/71256/29091701-a62ea114-7c38-11e7-826a-2692bedca740.png&quot;&gt;

#### Windows command prompt notes

##### CMD

On Windows the environment variable is set using the `set` command.

```cmd
set DEBUG=*,-not_this
```

Example:

```cmd
set DEBUG=* &amp; node app.js
```

##### PowerShell (VS Code default)

PowerShell uses different syntax to set environment variables.

```cmd
$env:DEBUG = &quot;*,-not_this&quot;
```

Example:

```cmd
$env:DEBUG=&#039;app&#039;;node app.js
```

Then, run the program to be debugged as usual.

npm script example:
```js
  &quot;windowsDebug&quot;: &quot;@powershell -Command $env:DEBUG=&#039;*&#039;;node app.js&quot;,
```

## Namespace Colors

Every debug instance has a color generated for it based on its namespace name.
This helps when visually parsing the debug output to identify which debug instance
a debug line belongs to.

#### Node.js

In Node.js, colors are enabled when stderr is a TTY. You also _should_ install
the [`supports-color`](https://npmjs.org/supports-color) module alongside debug,
otherwise debug will only use a small handful of basic colors.

&lt;img width=&quot;521&quot; src=&quot;https://user-images.githubusercontent.com/71256/29092181-47f6a9e6-7c3a-11e7-9a14-1928d8a711cd.png&quot;&gt;

#### Web Browser

Colors are also enabled on &quot;Web Inspectors&quot; that understand the `%c` formatting
option. These are WebKit web inspectors, Firefox ([since version
31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))
and the Firebug plugin for Firefox (any version).

&lt;img width=&quot;524&quot; src=&quot;https://user-images.githubusercontent.com/71256/29092033-b65f9f2e-7c39-11e7-8e32-f6f0d8e865c1.png&quot;&gt;


## Millisecond diff

When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the &quot;+NNNms&quot; will show you how much time was spent between calls.

&lt;img width=&quot;647&quot; src=&quot;https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png&quot;&gt;

When stdout is not a TTY, `Date#toISOString()` is used, making it more useful for logging the debug information as shown below:

&lt;img width=&quot;647&quot; src=&quot;https://user-images.githubusercontent.com/71256/29091956-6bd78372-7c39-11e7-8c55-c948396d6edd.png&quot;&gt;


## Conventions

If you&#039;re using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use &quot;:&quot; to separate features. For example &quot;bodyParser&quot; from Connect would then be &quot;connect:bodyParser&quot;.  If you append a &quot;*&quot; to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable.  You can then use it for normal output as well as debug output.

## Wildcards

The `*` character may be used as a wildcard. Suppose for example your library has
debuggers named &quot;connect:bodyParser&quot;, &quot;connect:compress&quot;, &quot;connect:session&quot;,
instead of listing all three with
`DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do
`DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.

You can also exclude specific debuggers by prefixing them with a &quot;-&quot; character.
For example, `DEBUG=*,-connect:*` would include all debuggers except those
starting with &quot;connect:&quot;.

## Environment Variables

When running through Node.js, you can set a few environment variables that will
change the behavior of the debug logging:

| Name      | Purpose                                         |
|-----------|-------------------------------------------------|
| `DEBUG`   | Enables/disables specific debugging namespaces. |
| `DEBUG_HIDE_DATE` | Hide date from debug output (non-TTY).  |
| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |
| `DEBUG_DEPTH` | Object inspection depth.                    |
| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |


__Note:__ The environment variables beginning with `DEBUG_` end up being
converted into an Options object that gets used with `%o`/`%O` formatters.
See the Node.js documentation for
[`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)
for the complete list.

## Formatters

Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting.
Below are the officially supported formatters:

| Formatter | Representation |
|-----------|----------------|
| `%O`      | Pretty-print an Object on multiple lines. |
| `%o`      | Pretty-print an Object all on a single line. |
| `%s`      | String. |
| `%d`      | Number (both integer and float). |
| `%j`      | JSON. Replaced with the string &#039;[Circular]&#039; if the argument contains circular references. |
| `%%`      | Single percent sign (&#039;%&#039;). This does not consume an argument. |


### Custom formatters

You can add custom formatters by extending the `debug.formatters` object.
For example, if you wanted to add support for rendering a Buffer as hex with
`%h`, you could do something like:

```js
const createDebug = require(&#039;debug&#039;)
createDebug.formatters.h = (v) =&gt; {
  return v.toString(&#039;hex&#039;)
}

// …elsewhere
const debug = createDebug(&#039;foo&#039;)
debug(&#039;this is hex: %h&#039;, new Buffer(&#039;hello world&#039;))
//   foo this is hex: 68656c6c6f20776f726c6421 +0ms
```


## Browser Support

You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),
or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),
if you don&#039;t want to build it yourself.

Debug&#039;s enable state is currently persisted by `localStorage`.
Consider the situation shown below where you have `worker:a` and `worker:b`,
and wish to debug both. You can enable this using `localStorage.debug`:

```js
localStorage.debug = &#039;worker:*&#039;
```

And then refresh the page.

```js
a = debug(&#039;worker:a&#039;);
b = debug(&#039;worker:b&#039;);

setInterval(function(){
  a(&#039;doing some work&#039;);
}, 1000);

setInterval(function(){
  b(&#039;doing some work&#039;);
}, 1200);
```

In Chromium-based web browsers (e.g. Brave, Chrome, and Electron), the JavaScript console will—by default—only show messages logged by `debug` if the &quot;Verbose&quot; log level is _enabled_.

&lt;img width=&quot;647&quot; src=&quot;https://user-images.githubusercontent.com/7143133/152083257-29034707-c42c-4959-8add-3cee850e6fcf.png&quot;&gt;

## Output streams

  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:

Example [_stdout.js_](./examples/node/stdout.js):

```js
var debug = require(&#039;debug&#039;);
var error = debug(&#039;app:error&#039;);

// by default stderr is used
error(&#039;goes to stderr!&#039;);

var log = debug(&#039;app:log&#039;);
// set this namespace to log via console.log
log.log = console.log.bind(console); // don&#039;t forget to bind to console!
log(&#039;goes to stdout&#039;);
error(&#039;still goes to stderr!&#039;);

// set all output to go via console.info
// overrides all per-namespace log settings
debug.log = console.info.bind(console);
error(&#039;now goes to stdout via console.info&#039;);
log(&#039;still goes to stdout, but via console.info now&#039;);
```

## Extend
You can simply extend debugger 
```js
const log = require(&#039;debug&#039;)(&#039;auth&#039;);

//creates new debug instance with extended namespace
const logSign = log.extend(&#039;sign&#039;);
const logLogin = log.extend(&#039;login&#039;);

log(&#039;hello&#039;); // auth hello
logSign(&#039;hello&#039;); //auth:sign hello
logLogin(&#039;hello&#039;); //auth:login hello
```

## Set dynamically

You can also enable debug dynamically by calling the `enable()` method :

```js
let debug = require(&#039;debug&#039;);

console.log(1, debug.enabled(&#039;test&#039;));

debug.enable(&#039;test&#039;);
console.log(2, debug.enabled(&#039;test&#039;));

debug.disable();
console.log(3, debug.enabled(&#039;test&#039;));

```

print :   
```
1 false
2 true
3 false
```

Usage :  
`enable(namespaces)`  
`namespaces` can include modes separated by a colon and wildcards.
   
Note that calling `enable()` completely overrides previously set DEBUG variable : 

```
$ DEBUG=foo node -e &#039;var dbg = require(&quot;debug&quot;); dbg.enable(&quot;bar&quot;); console.log(dbg.enabled(&quot;foo&quot;))&#039;
=&gt; false
```

`disable()`

Will disable all namespaces. The functions returns the namespaces currently
enabled (and skipped). This can be useful if you want to disable debugging
temporarily without knowing what was enabled to begin with.

For example:

```js
let debug = require(&#039;debug&#039;);
debug.enable(&#039;foo:*,-foo:bar&#039;);
let namespaces = debug.disable();
debug.enable(namespaces);
```

Note: There is no guarantee that the string will be identical to the initial
enable string, but semantically they will be identical.

## Checking whether a debug target is enabled

After you&#039;ve created a debug instance, you can determine whether or not it is
enabled by checking the `enabled` property:

```javascript
const debug = require(&#039;debug&#039;)(&#039;http&#039;);

if (debug.enabled) {
  // do stuff...
}
```

You can also manually toggle this property to force the debug instance to be
enabled or disabled.

## Usage in child processes

Due to the way `debug` detects if the output is a TTY or not, colors are not shown in child processes when `stderr` is piped. A solution is to pass the `DEBUG_COLORS=1` environment variable to the child process.  
For example:

```javascript
worker = fork(WORKER_WRAP_PATH, [workerPath], {
  stdio: [
    /* stdin: */ 0,
    /* stdout: */ &#039;pipe&#039;,
    /* stderr: */ &#039;pipe&#039;,
    &#039;ipc&#039;,
  ],
  env: Object.assign({}, process.env, {
    DEBUG_COLORS: 1 // without this settings, colors won&#039;t be shown
  }),
});

worker.stderr.pipe(process.stderr, { end: false });
```


## Authors

 - TJ Holowaychuk
 - Nathan Rajlich
 - Andrew Rhyne
 - Josh Junon

## Backers

Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]

&lt;a href=&quot;https://opencollective.com/debug/backer/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/0/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/1/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/2/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/3/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/4/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/5/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/6/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/7/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/8/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/9/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/10/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/10/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/11/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/11/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/12/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/12/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/13/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/13/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/14/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/14/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/15/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/15/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/16/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/16/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/17/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/17/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/18/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/18/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/19/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/19/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/20/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/20/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/21/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/21/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/22/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/22/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/23/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/23/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/24/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/24/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/25/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/25/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/26/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/26/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/27/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/27/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/28/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/28/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/backer/29/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/backer/29/avatar.svg&quot;&gt;&lt;/a&gt;


## Sponsors

Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]

&lt;a href=&quot;https://opencollective.com/debug/sponsor/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/0/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/1/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/2/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/3/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/4/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/5/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/6/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/7/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/8/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/9/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/10/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/10/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/11/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/11/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/12/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/12/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/13/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/13/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/14/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/14/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/15/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/15/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/16/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/16/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/17/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/17/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/18/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/18/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/19/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/19/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/20/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/20/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/21/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/21/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/22/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/debug/sponsor/22/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/debug/sponsor/23/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;htt

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[NaiboWang/EasySpider]]></title>
            <link>https://github.com/NaiboWang/EasySpider</link>
            <guid>https://github.com/NaiboWang/EasySpider</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:53 GMT</pubDate>
            <description><![CDATA[A visual no-code/code-free web crawler/spider易采集：一个可视化浏览器自动化测试/数据采集/爬虫软件，可以无代码图形化的设计和执行爬虫任务。别名：ServiceWrapper面向Web应用的智能化服务封装系统。]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/NaiboWang/EasySpider">NaiboWang/EasySpider</a></h1>
            <p>A visual no-code/code-free web crawler/spider易采集：一个可视化浏览器自动化测试/数据采集/爬虫软件，可以无代码图形化的设计和执行爬虫任务。别名：ServiceWrapper面向Web应用的智能化服务封装系统。</p>
            <p>Language: JavaScript</p>
            <p>Stars: 42,279</p>
            <p>Forks: 5,173</p>
            <p>Stars today: 38 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[chartjs/Chart.js]]></title>
            <link>https://github.com/chartjs/Chart.js</link>
            <guid>https://github.com/chartjs/Chart.js</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:52 GMT</pubDate>
            <description><![CDATA[Simple HTML5 Charts using the <canvas> tag]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/chartjs/Chart.js">chartjs/Chart.js</a></h1>
            <p>Simple HTML5 Charts using the <canvas> tag</p>
            <p>Language: JavaScript</p>
            <p>Stars: 66,502</p>
            <p>Forks: 11,967</p>
            <p>Stars today: 11 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.chartjs.org/&quot; target=&quot;_blank&quot;&gt;
    &lt;img src=&quot;https://www.chartjs.org/media/logo-title.svg&quot; alt=&quot;https://www.chartjs.org/&quot;&gt;&lt;br/&gt;
  &lt;/a&gt;
    Simple yet flexible JavaScript charting for designers &amp; developers
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://www.chartjs.org/docs/latest/getting-started/installation.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/chartjs/Chart.js.svg?style=flat-square&amp;maxAge=600&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/chartjs/Chart.js/actions?query=workflow%3ACI+branch%3Amaster&quot;&gt;&lt;img alt=&quot;GitHub Workflow Status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/chartjs/Chart.js/ci.yml?branch=master&amp;style=flat-square&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://coveralls.io/github/chartjs/Chart.js?branch=master&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/chartjs/Chart.js.svg?style=flat-square&amp;maxAge=600&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/chartjs/awesome&quot;&gt;&lt;img src=&quot;https://awesome.re/badge-flat2.svg&quot; alt=&quot;Awesome&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://discord.gg/HxEguTK6av&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/discord-chartjs-blue?style=flat-square&amp;maxAge=3600&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

## Documentation

All the links point to the new version 4 of the lib.

* [Introduction](https://www.chartjs.org/docs/latest/)
* [Getting Started](https://www.chartjs.org/docs/latest/getting-started/index)
* [General](https://www.chartjs.org/docs/latest/general/data-structures)
* [Configuration](https://www.chartjs.org/docs/latest/configuration/index)
* [Charts](https://www.chartjs.org/docs/latest/charts/line)
* [Axes](https://www.chartjs.org/docs/latest/axes/index)
* [Developers](https://www.chartjs.org/docs/latest/developers/index)
* [Popular Extensions](https://github.com/chartjs/awesome)
* [Samples](https://www.chartjs.org/samples/)

In case you are looking for an older version of the docs, you will have to specify the specific version in the url like this: [https://www.chartjs.org/docs/2.9.4/](https://www.chartjs.org/docs/2.9.4/)

## Contributing

Instructions on building and testing Chart.js can be found in [the documentation](https://www.chartjs.org/docs/master/developers/contributing.html#building-and-testing). Before submitting an issue or a pull request, please take a moment to look over the [contributing guidelines](https://www.chartjs.org/docs/master/developers/contributing) first. For support, please post questions on [Stack Overflow](https://stackoverflow.com/questions/tagged/chart.js) with the `chart.js` tag.

## License

Chart.js is available under the [MIT license](LICENSE.md).
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[louislam/uptime-kuma]]></title>
            <link>https://github.com/louislam/uptime-kuma</link>
            <guid>https://github.com/louislam/uptime-kuma</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:51 GMT</pubDate>
            <description><![CDATA[A fancy self-hosted monitoring tool]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/louislam/uptime-kuma">louislam/uptime-kuma</a></h1>
            <p>A fancy self-hosted monitoring tool</p>
            <p>Language: JavaScript</p>
            <p>Stars: 74,863</p>
            <p>Forks: 6,628</p>
            <p>Stars today: 46 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot; width=&quot;100%&quot;&gt;
    &lt;img src=&quot;./public/icon.svg&quot; width=&quot;128&quot; alt=&quot;&quot; /&gt;
&lt;/div&gt;

# Uptime Kuma

Uptime Kuma is an easy-to-use self-hosted monitoring tool.

&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/louislam/uptime-kuma?style=flat&quot; /&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/louislam/uptime-kuma&quot; /&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/v/louislam/uptime-kuma/latest?label=docker%20image%20ver.&quot; /&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/louislam/uptime-kuma&quot; /&gt;&lt;/a&gt;  &lt;a target=&quot;_blank&quot; href=&quot;https://opencollective.com/uptime-kuma&quot;&gt;&lt;img src=&quot;https://opencollective.com/uptime-kuma/total/badge.svg?label=Open%20Collective%20Backers&amp;color=brightgreen&quot; /&gt;&lt;/a&gt;
[![GitHub Sponsors](https://img.shields.io/github/sponsors/louislam?label=GitHub%20Sponsors)](https://github.com/sponsors/louislam) &lt;a href=&quot;https://weblate.kuma.pet/projects/uptime-kuma/uptime-kuma/&quot;&gt;
&lt;img src=&quot;https://weblate.kuma.pet/widgets/uptime-kuma/-/svg-badge.svg&quot; alt=&quot;Translation status&quot; /&gt;
&lt;/a&gt;

&lt;img src=&quot;https://user-images.githubusercontent.com/1336778/212262296-e6205815-ad62-488c-83ec-a5b0d0689f7c.jpg&quot; width=&quot;700&quot; alt=&quot;&quot; /&gt;

## 🥔 Live Demo

Try it!

Demo Server (Location: Frankfurt - Germany): https://demo.kuma.pet/start-demo

It is a temporary live demo, all data will be deleted after 10 minutes. Sponsored by [Uptime Kuma Sponsors](https://github.com/louislam/uptime-kuma#%EF%B8%8F-sponsors).

## ⭐ Features

- Monitoring uptime for HTTP(s) / TCP / HTTP(s) Keyword / HTTP(s) Json Query / Ping / DNS Record / Push / Steam Game Server / Docker Containers
- Fancy, Reactive, Fast UI/UX
- Notifications via Telegram, Discord, Gotify, Slack, Pushover, Email (SMTP), and [90+ notification services, click here for the full list](https://github.com/louislam/uptime-kuma/tree/master/src/components/notifications)
- 20-second intervals
- [Multi Languages](https://github.com/louislam/uptime-kuma/tree/master/src/lang)
- Multiple status pages
- Map status pages to specific domains
- Ping chart
- Certificate info
- Proxy support
- 2FA support

## 🔧 How to Install

### 🐳 Docker

```bash
docker run -d --restart=always -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1
```

Uptime Kuma is now running on &lt;http://0.0.0.0:3001&gt;.

&gt; [!WARNING]
&gt; File Systems like **NFS** (Network File System) are **NOT** supported. Please map to a local directory or volume.

&gt; [!NOTE]
&gt; If you want to limit exposure to localhost (without exposing port for other users or to use a [reverse proxy](https://github.com/louislam/uptime-kuma/wiki/Reverse-Proxy)), you can expose the port like this:
&gt; 
&gt; ```bash
&gt; docker run -d --restart=always -p 127.0.0.1:3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1
&gt; ```

### 💪🏻 Non-Docker

Requirements:

- Platform
  - ✅ Major Linux distros such as Debian, Ubuntu, CentOS, Fedora and ArchLinux etc.
  - ✅ Windows 10 (x64), Windows Server 2012 R2 (x64) or higher
  - ❌ FreeBSD / OpenBSD / NetBSD
  - ❌ Replit / Heroku
- [Node.js](https://nodejs.org/en/download/) 18 / 20.4
- [npm](https://docs.npmjs.com/cli/) 9
- [Git](https://git-scm.com/downloads)
- [pm2](https://pm2.keymetrics.io/) - For running Uptime Kuma in the background

```bash
git clone https://github.com/louislam/uptime-kuma.git
cd uptime-kuma
npm run setup

# Option 1. Try it
node server/server.js

# (Recommended) Option 2. Run in the background using PM2
# Install PM2 if you don&#039;t have it:
npm install pm2 -g &amp;&amp; pm2 install pm2-logrotate

# Start Server
pm2 start server/server.js --name uptime-kuma
```

Uptime Kuma is now running on http://localhost:3001

More useful PM2 Commands

```bash
# If you want to see the current console output
pm2 monit

# If you want to add it to startup
pm2 save &amp;&amp; pm2 startup
```

### Advanced Installation

If you need more options or need to browse via a reverse proxy, please read:

https://github.com/louislam/uptime-kuma/wiki/%F0%9F%94%A7-How-to-Install

## 🆙 How to Update

Please read:

https://github.com/louislam/uptime-kuma/wiki/%F0%9F%86%99-How-to-Update

## 🆕 What&#039;s Next?

I will assign requests/issues to the next milestone.

https://github.com/louislam/uptime-kuma/milestones

## ❤️ Sponsors

Thank you so much! (GitHub Sponsors will be updated manually. OpenCollective sponsors will be updated automatically, the list will be cached by GitHub though. It may need some time to be updated)

&lt;img src=&quot;https://uptime.kuma.pet/sponsors?v=6&quot; alt /&gt;

## 🖼 More Screenshots

Light Mode:

&lt;img src=&quot;https://uptime.kuma.pet/img/light.jpg&quot; width=&quot;512&quot; alt=&quot;&quot; /&gt;

Status Page:

&lt;img src=&quot;https://user-images.githubusercontent.com/1336778/134628766-a3fe0981-0926-4285-ab46-891a21c3e4cb.png&quot; width=&quot;512&quot; alt=&quot;&quot; /&gt;

Settings Page:

&lt;img src=&quot;https://louislam.net/uptimekuma/2.jpg&quot; width=&quot;400&quot; alt=&quot;&quot; /&gt;

Telegram Notification Sample:

&lt;img src=&quot;https://louislam.net/uptimekuma/3.jpg&quot; width=&quot;400&quot; alt=&quot;&quot; /&gt;

## Motivation

- I was looking for a self-hosted monitoring tool like &quot;Uptime Robot&quot;, but it is hard to find a suitable one. One of the closest ones is statping. Unfortunately, it is not stable and no longer maintained.
- Wanted to build a fancy UI.
- Learn Vue 3 and vite.js.
- Show the power of Bootstrap 5.
- Try to use WebSocket with SPA instead of a REST API.
- Deploy my first Docker image to Docker Hub.

If you love this project, please consider giving it a ⭐.

## 🗣️ Discussion / Ask for Help

⚠️ For any general or technical questions, please don&#039;t send me an email, as I am unable to provide support in that manner. I will not respond if you ask questions there.

I recommend using Google, GitHub Issues, or Uptime Kuma&#039;s subreddit for finding answers to your question. If you cannot find the information you need, feel free to ask:

- [GitHub Issues](https://github.com/louislam/uptime-kuma/issues)
- [Subreddit (r/UptimeKuma)](https://www.reddit.com/r/UptimeKuma/)

My Reddit account: [u/louislamlam](https://reddit.com/u/louislamlam)
You can mention me if you ask a question on the subreddit.

## Contributions

### Create Pull Requests

We DO NOT accept all types of pull requests and do not want to waste your time. Please be sure that you have read and follow pull request rules:
[CONTRIBUTING.md#can-i-create-a-pull-request-for-uptime-kuma](https://github.com/louislam/uptime-kuma/blob/master/CONTRIBUTING.md#can-i-create-a-pull-request-for-uptime-kuma)

### Test Pull Requests

There are a lot of pull requests right now, but I don&#039;t have time to test them all.

If you want to help, you can check this:
https://github.com/louislam/uptime-kuma/wiki/Test-Pull-Requests

### Test Beta Version

Check out the latest beta release here: https://github.com/louislam/uptime-kuma/releases

### Bug Reports / Feature Requests

If you want to report a bug or request a new feature, feel free to open a [new issue](https://github.com/louislam/uptime-kuma/issues).

### Translations

If you want to translate Uptime Kuma into your language, please visit [Weblate Readme](https://github.com/louislam/uptime-kuma/blob/master/src/lang/README.md).

### Spelling &amp; Grammar

Feel free to correct the grammar in the documentation or code.
My mother language is not English and my grammar is not that great.


</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[docmirror/dev-sidecar]]></title>
            <link>https://github.com/docmirror/dev-sidecar</link>
            <guid>https://github.com/docmirror/dev-sidecar</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:50 GMT</pubDate>
            <description><![CDATA[开发者边车，github打不开，github加速，git clone加速，git release下载加速，stackoverflow加速]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/docmirror/dev-sidecar">docmirror/dev-sidecar</a></h1>
            <p>开发者边车，github打不开，github加速，git clone加速，git release下载加速，stackoverflow加速</p>
            <p>Language: JavaScript</p>
            <p>Stars: 19,326</p>
            <p>Forks: 2,345</p>
            <p>Stars today: 28 stars today</p>
            <h2>README</h2><pre># dev-sidecar

开发者边车，命名取自service-mesh的service-sidecar，意为为开发者打辅助的边车工具（以下简称ds）
通过本地代理的方式将https请求代理到一些国内的加速通道上

&lt;a href=&#039;https://github.com/docmirror/dev-sidecar&#039;&gt;&lt;img alt=&quot;GitHub stars&quot; src=&quot;https://img.shields.io/github/stars/docmirror/dev-sidecar?logo=github&quot;&gt;&lt;/a&gt;

&gt; Gitee上的同步项目已被封禁，此项目将不再更新与维护 【狗头保命】
&gt;
&gt; 我将继续奋战在开源一线，为社区贡献更多更好的开源项目。
&gt; 感兴趣的可以关注我的主页 [【github】](https://github.com/greper) [【gitee】](https://gitee.com/greper)

## 打个广告

&gt; [https://github.com/certd/certd](https://github.com/certd/certd)
&gt; 我的开源证书管理工具项目，全自动申请和部署证书，有需求的可以去试试，帮忙点个star

## 重要提醒

&gt; ------------------------------重要提醒1---------------------------------
&gt;
&gt; 注意：由于electron无法监听windows的关机事件，开着ds情况下直接重启电脑，会导致无法上网，你可以手动启动ds即可恢复网络，你也可以将ds设置为开机自启。
&gt;
&gt; 关于此问题的更多讨论请前往：[https://github.com/docmirror/dev-sidecar/issues/109](https://github.com/docmirror/dev-sidecar/issues/109)
&gt;
&gt; 注：此问题已在 `1.8.9` 版本中得到解决。

&gt; ------------------------------重要提醒2---------------------------------
&gt;
&gt; 注意：本应用启动会自动修改系统代理，所以会与其他代理软件有冲突，请务必不要一起使用。
&gt; 本应用主要目的在于直连访问github，如果你已经有飞机了，那建议还是不要用这个自行车（ds）了

## 一、 特性

### 1.1、 dns优选（解决\*\*\*污染问题）

- 根据网络状况智能解析最佳域名ip地址，获取最佳网络速度
- 解决一些网站和库无法访问或访问速度慢的问题
- 建议遇到打开比较慢的国外网站，可以优先尝试将该域名添加到dns设置中（注意：被\*\*\*封杀的无效）

### 1.2、 请求拦截

- 拦截打不开的网站，代理到加速镜像站点上去。
- 可配置多个镜像站作为备份
- 具备测速机制，当访问失败或超时之后，自动切换到备用站点，使得目标服务高可用

### 1.3、 github加速

- github 直连加速 (通过修改sni实现，感谢 [fastGithub](https://github.com/dotnetcore/FastGithub) 提供的思路)
- release、source、zip下载加速
- clone 加速
- 头像加速
- 解决readme中图片引用无法加载的问题
- gist.github.com 加速
- 解决git push 偶尔失败需要输入账号密码的问题（fatal: TaskCanceledException encountered / fatal: HttpRequestException encountered）
- raw/blame加速

&gt; 以上部分功能通过 `X.I.U` 的油猴脚本实现， 以下是仓库和脚本下载链接，大家可以去支持一下。
&gt;
&gt; - [https://github.com/XIU2/UserScript](https://github.com/XIU2/UserScript)
&gt; - [https://greasyfork.org/scripts/412245](https://greasyfork.org/scripts/412245)
&gt;
&gt; 由于此脚本在ds中是打包在本地的，更新会不及时，你可以直接通过浏览器安装油猴插件使用此脚本，从而获得最新更新（ds本地的可以通过 `加速服务-&gt;基本设置-&gt;启用脚本` 进行关闭）。

### 1.4、 Stack Overflow 加速

- 将ajax.google.com代理到加速CDN上
- recaptcha 图片验证码加速

### 1.5、 npm加速

- 支持开启npm代理
- 官方与淘宝npm registry一键切换
- 某些npm install的时候，并且使用cnpm也无法安装时，可以尝试开启npm代理再试

**_安全警告_**：

- 请勿使用来源不明的服务地址，有隐私和账号泄露风险
- 本应用及服务端承诺不收集任何信息。介意者请使用安全模式。

## 二、快速开始

支持windows、Mac、Linux(Ubuntu)

### 2.1、DevSidecar桌面应用

#### 1）下载安装包

- release下载
  [Github Release](https://github.com/docmirror/dev-sidecar/releases)

&gt; Windows: 请选择DevSidecar-x.x.x.exe
&gt; Mac: 请选择DevSidecar-x.x.x.dmg
&gt; Ubuntu: 请选择DevSidecar-x.x.x.deb
&gt; 其他linux: 请选择DevSidecar-x.x.x.AppImage (未做测试，不保证能用)

&gt; linux安装说明请参考 [linux安装文档](./doc/linux.md)

&gt; 注意：由于没有买应用证书，所以应用在下载安装时会有“未知发行者”等安全提示，选择保留即可。

#### 2）安装后打开

&gt; 注意：mac版安装需要在“系统偏好设置-&gt;安全性与隐私-&gt;通用”中解锁并允许应用安装

![](./doc/index.png)

#### 3）安装根证书

第一次打开会提示安装证书，根据提示操作即可

更多有关根证书的说明，请参考 [为什么要安装根证书?](./doc/caroot.md)

&gt; 根证书是本地随机生成的，所以不用担心根证书的安全问题（本应用不收集任何用户信息）
&gt; 你也可以在加速服务设置中自定义根证书（PEM格式的证书与私钥）

&gt; 火狐浏览器需要[手动安装证书](#3浏览器打开提示证书不受信任)

#### 4）开始加速吧

去试试打开github

### 2.2、开启前 vs 开启后

|          | 开启前                         | 开启后                                            |
| -------- | ------------------------------ | ------------------------------------------------- |
| 头像     | ![](./doc/avatar2.png)         | ![](./doc/avatar1.png)                            |
| clone    | ![](./doc/clone-before.png)    | ![](./doc/clone.png)                              |
| zip 下载 | ![](./doc/download-before.png) | ![](./doc/download.png)秒下的，实在截不到速度的图 |

## 三、模式说明

### 3.1、安全模式

- 此模式：关闭拦截、关闭增强、开启dns优选、开启测速
- 最安全，无需安装证书，可以在浏览器地址栏左侧查看域名证书
- 功能也最弱，只有特性1，相当于查询github的国外ip，手动改hosts一个意思。
- github的可访问性不稳定，取决于IP测速，如果有绿色ip存在，就 `有可能` 可以直连访问。
  ![](./doc/speed.png)

### 3.2、默认模式

- 此模式：开启拦截、关闭增强、开启dns优选、开启测速
- 需要安装证书，通过修改sni直连访问github
- 功能上包含特性1/2/3/4。

## 四、 最佳实践

- 把dev-sidecar一直开着就行了（注意windows下开着ds重启电脑，会无法上网，重新打开ds即可。）
- 建议遇到打开比较慢的国外网站，可以尝试将该域名添加到dns设置中（注意：被\*\*\*封杀的无效）

### 其他加速

#### 1）git clone 加速

- 方式1：快捷复制：

  &gt; 开启脚本支持，然后在复制clone链接下方，即可复制到加速链接

- 方式2：

  &gt; 1. 使用方式：用实际的名称替换 `{}` 的内容，即可加速clone [https://hub.fastgit.org/{username}/{reponame}.git](https://hub.fastgit.org/%7Busername%7D/%7Breponame%7D.git)
  &gt; 2. clone 出来的 remote &quot;origin&quot; 为fastgit的地址，需要手动改回来
  &gt; 3. 你也可以直接使用他们的clone加速工具 [fgit-go](https://github.com/FastGitORG/fgit-go)

#### 2）`github.com` 的镜像网站（注意：部分镜像网站不能登录）

&gt; 1. [hub.fastgit.org](https://hub.fastgit.org/) （2024/11/18：这个好像失效了？）
&gt; 2. [github.com.cnpmjs.org](https://github.com.cnpmjs.org/) 这个很容易超限（2024/11/18：这个好像失效了？）
&gt; 3. [dgithub.xyz](https://dgithub.xyz/)

## 五、api

### 5.1、拦截配置

没有配置域名的不会拦截，其他根据配置进行拦截处理

```js
const intercepts = {
  // 要拦截的域名
  &#039;github.com&#039;: {
    // 需要拦截url的正则表达式
    &#039;/.*/.*/releases/download/&#039;: {
      // 拦截类型
      // redirect: url,          // 临时重定向（url会变，一些下载资源可以通过此方式配置）
      // proxy: url,             // 代理（url不会变，没有跨域问题）
      // abort: true,            // 取消请求（适用于被***封锁的资源，找不到替代，直接取消请求，快速失败，节省时间）
      // success: true,          // 直接返回成功请求（某些请求不想发出去，可以伪装成功返回）
      // cacheDays: 1,           // GET请求的使用缓存，单位：天（常用于一些静态资源）
      // options: true,          // OPTIONS请求直接返回成功请求（该功能存在一定风险，请谨慎使用）
      // optionsMaxAge: 2592000, // OPTIONS请求缓存时间，默认：2592000（一个月）
      redirect: &#039;download.fastgit.org&#039;
    },
    &#039;.*&#039;: {
      proxy: &#039;github.com&#039;,
      sni: &#039;baidu.com&#039; // 修改sni，规避***握手拦截
    }
  },
  &#039;ajax.googleapis.com&#039;: {
    &#039;.*&#039;: {
      proxy: &#039;ajax.loli.net&#039;, // 代理请求，url不会变
      backup: [&#039;ajax.proxy.ustclug.org&#039;], // 备份，当前代理请求失败后，将会切换到备用地址
      test: &#039;ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&#039;,
      replace: &#039;/(.*)/xxx&#039;// 当加速地址的链接和原链接不是完全相同时，可以通过正则表达式replace，此时proxy通过$1$2来重组url， proxy:&#039;ajax.loli.net/xxx/$1&#039;
    }
  },
  &#039;clients*.google.com&#039;: {
    &#039;.*&#039;: {
      abort: true // 取消请求，被***封锁的资源，找不到替代，直接取消请求，快速失败，节省时间
    }
  }
}
```

### 5.2、DNS优选配置

某些域名解析出来的ip会无法访问，（比如api.github.com会被解析到新加坡的ip上，新加坡的服务器在上午挺好，到了晚上就卡死，基本不可用）
通过从dns上获取ip列表，切换不同的ip进行尝试，最终会挑选到一个最快的ip

```json
{
  &quot;dns&quot;: {
    &quot;mapping&quot;: {
      &quot;api.github.com&quot;: &quot;cloudflare&quot;, // &quot;解决push的时候需要输入密码的问题&quot;,
      &quot;gist.github.com&quot;: &quot;cloudflare&quot;, // 解决gist无法访问的问题
      &quot;*.githubusercontent.com&quot;: &quot;cloudflare&quot; // 解决github头像经常下载不到的问题
    }
  }
}
```

注意：暂时只支持IPv4的解析

## 六、问题排查

### 6.1、dev-sidecar的前两个开关没有处于打开状态

1. 尝试将开关按钮手动打开
2. 请尝试右键dev-sidecar图标，点退出。再重新打开
3. 如果还不行，请将日志发送给作者

如果是mac系统，可能是下面的原因

#### 1）Mac系统使用时，首页的系统代理开关无法打开

出现这个问题可能是没有开启系统代理命令的执行权限

```
networksetup -setwebproxy &#039;WiFi&#039; 127.0.0.1 31181
#看是否有如下错误提示
** Error: Command requires admin privileges.
```

如果有上面的错误提示，请尝试如下方法：

&gt; 取消访问偏好设置需要管理员密码
&gt; 系统偏好设置—&gt;安全性与隐私—&gt; 通用—&gt; 高级—&gt; 访问系统范围的偏好设置需要输入管理员密码（取消勾选）

### 6.2、没有加速效果

&gt; 本应用仅支持https加速，请务必确认你访问的网站地址是https开头的

1. 本应用仅支持https加速
   请务必确认你访问的地址是https开头的
   比如： [https://github.com/](https://github.com/)
2. 检查浏览器是否装了什么插件，与ds有冲突
3. 检查是否安装了其他代理软件，与ds有冲突
4. 请确认浏览器的代理设置为使用IE代理/或者使用系统代理状态
5. 可以尝试换个浏览器试试
6. 请确认网络代理设置处于勾选状态
   正常情况下ds在“系统代理”开关打开时，会自动设置系统代理。

### 6.3、浏览器打开提示证书不受信任

![](./doc/crt-error.png)
一般是证书安装位置不对，重新安装证书后，重启浏览器

#### 1）windows: 请确认证书已正确安装在“信任的根证书颁发机构”下

#### 2）mac: 请确认证书已经被安装并已经设置信任

#### 3）火狐浏览器：火狐浏览器不走系统的根证书，需要在选项中添加根证书

1. 火狐浏览器-&gt;选项-&gt;隐私与安全-&gt;证书-&gt;查看证书
2. 证书颁发机构-&gt;导入
3. 选择证书文件 `C:\Users(用户)\Administrator(你的账号)\.dev-sidecar\dev-sidecar.ca.crt`（Mac或linux为 `~/.dev-sidecar` 目录）
4. 勾选信任由此证书颁发机构来标识网站，确定即可

### 6.4、打开github显示连接超时

```html
DevSidecar Warning: Error: www.github.com:443, 代理请求超时
```

1. 检查测速界面github.com是否有ip ，如果没有ip，则可能是由于你的网络提供商封锁了dns服务商的ip（试试能否ping通：1.1.1.1 / 9.9.9.9 ）
2. 如果是安全模式，则是因为不稳定导致的，等一会再刷新试试
3. 如果是增强模式，则是由于访问人数过多，正常现象

### 6.5、查看日志是否有报错

如果还是不行，请在下方加作者好友，将服务日志发送给作者进行分析
日志打开方式：加速服务-&gt;右边日志按钮-&gt;打开日志文件夹

![](./doc/log.png)

### 6.6、某些原本可以打开的网站打不开了

1. 可以尝试关闭pac
2. 可以将域名加入白名单

### 6.7、应用意外关闭导致没有网络了

应用开启后会自动修改系统代理设置，正常退出会自动关闭系统代理
当应用意外关闭时，可能会因为没有将系统代理恢复，从而导致完全无法上网。

对于此问题有如下几种解决方案可供选择：

1. 重新打开应用即可（右键应用托盘图标可完全退出，将会正常关闭系统代理设置）
2. 如果应用被卸载了，此时需要[手动关闭系统代理设置](./doc/recover.md)
3. 如果你是因为开着ds的情况下重启电脑导致无法上网，你可以设置ds为开机自启

### 6.8、卸载应用后上不了网，git请求不了

如果你在卸载应用前，没有正常退出app，就有可能无法上网。请按如下步骤操作恢复您的网络：

1、关闭系统代理设置，参见：[手动关闭系统代理设置](./doc/recover.md)
2、执行下面的命令关闭git的代理设置（如果你开启过 `Git.exe代理` 的开关）

```shell
git config --global --unset http.proxy
git config --global --unset https.proxy
git config --global --unset http.sslVerify
```

3、执行下面的命令关闭npm的代理设置（如果你开启过npm加速的开关）

```shell
npm config delete proxy
npm config delete https-proxy
```

## 七、在其他程序使用

- [java程序使用](./doc/other.md#Java程序使用)

## 八、贡献代码

### 8.1、准备环境

#### 1）安装 `nodejs`

推荐安装 nodejs `22.x.x` 的版本，其他版本未做测试

#### 2）安装 `pnpm`

运行如下命令即可安装所需依赖：

```shell
npm install -g pnpm --registry=https://registry.npmmirror.com

```

### 8.2、开发调试模式启动

运行如下命令即可开发模式启动

```shell
# 拉取代码
git clone https://github.com/docmirror/dev-sidecar

cd dev-sidecar

# 注意不要使用 `npm install` 来安装依赖，因为 `pnpm` 会自动安装依赖
pnpm install

# 运行DevSidecar
cd packages/gui
npm run electron

```

&gt; 如果electron依赖包下载不动，可以开启ds的npm加速

### 8.3、打包成可执行文件

```shell
# 先执行上面的步骤，然后运行如下命令打包成可执行文件
npm run electron:build
```

### 8.4、提交pr

如果你想将你的修改贡献出来，请提交pr

## 九、联系作者

欢迎bug反馈，需求建议，技术交流等

1、 加群（请备注dev-sidecar，或简称DS）

- QQ 1群：390691483，人数：500 / 500（满）
- QQ 2群：[667666069](http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=n4nksr4sji93vZtD5e8YEHRT6qbh6VyQ&amp;authKey=XKBZnzmoiJrAFyOT4V%2BCrgX5c13ds59b84g%2FVRhXAIQd%2FlAiilsuwDRGWJct%2B570&amp;noverify=0&amp;group_code=667666069)，人数：447 / 500
- QQ 3群：419807815，人数：500 / 500（满）
- QQ 4群：[438148299](http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=i_NCBB5f_Bkm2JsEV1tLs2TkQ79UlCID&amp;authKey=nMsVJbJ6P%2FGNO7Q6vsVUadXRKnULUURwR8zvUZJnP3IgzhHYPhYdcBCHvoOh8vYr&amp;noverify=0&amp;group_code=438148299)，人数：203 / 1000
- QQ 5群：[767622917](http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=nAWi_Rxj7mM4Unp5LMiatmUWhGimtbcB&amp;authKey=aswmlWGjbt3GIWXtvjB2GJqqAKuv7hWjk6UBs3MTb%2Biyvr%2Fsbb1kA9CjF6sK7Hgg&amp;noverify=0&amp;group_code=767622917)，人数：016 / 200（new）

## 十、求star

我的其他项目求star

- [fast-crud](https://github.com/fast-crud/fast-crud) : 开发crud快如闪电
- [certd](https://github.com/certd/certd) : 让你的证书永不过期
- [trident-sync](https://github.com/handsfree-work/trident-sync) : 二次开发项目同步升级工具

## 十一、感谢

本项目使用lerna包管理工具

[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)

本项目参考如下开源项目

- [node-mitmproxy](https://github.com/wuchangming/node-mitmproxy)
- [ReplaceGoogleCDN](https://github.com/justjavac/ReplaceGoogleCDN)

特别感谢

- [github增强油猴脚本](https://greasyfork.org/zh-CN/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD) 本项目部分加速功能完全复制该脚本。
- [中国域名白名单](https://github.com/pluwen/china-domain-allowlist)，本项目的系统代理排除域名功能中，使用了该白名单。

本项目部分加速资源由如下组织提供

- [FastGit UK](https://fastgit.org/)
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[Asabeneh/30-Days-Of-JavaScript]]></title>
            <link>https://github.com/Asabeneh/30-Days-Of-JavaScript</link>
            <guid>https://github.com/Asabeneh/30-Days-Of-JavaScript</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:49 GMT</pubDate>
            <description><![CDATA[30 days of JavaScript programming challenge is a step-by-step guide to learn JavaScript programming language in 30 days. This challenge may take more than 100 days, please just follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Asabeneh/30-Days-Of-JavaScript">Asabeneh/30-Days-Of-JavaScript</a></h1>
            <p>30 days of JavaScript programming challenge is a step-by-step guide to learn JavaScript programming language in 30 days. This challenge may take more than 100 days, please just follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw</p>
            <p>Language: JavaScript</p>
            <p>Stars: 45,103</p>
            <p>Forks: 10,313</p>
            <p>Stars today: 9 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[algorithm-visualizer/algorithm-visualizer]]></title>
            <link>https://github.com/algorithm-visualizer/algorithm-visualizer</link>
            <guid>https://github.com/algorithm-visualizer/algorithm-visualizer</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:48 GMT</pubDate>
            <description><![CDATA[🎆Interactive Online Platform that Visualizes Algorithms from Code]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">algorithm-visualizer/algorithm-visualizer</a></h1>
            <p>🎆Interactive Online Platform that Visualizes Algorithms from Code</p>
            <p>Language: JavaScript</p>
            <p>Stars: 47,776</p>
            <p>Forks: 7,433</p>
            <p>Stars today: 21 stars today</p>
            <h2>README</h2><pre># Algorithm Visualizer

## Introduction
Welcome to Algorithm Visualizer, an interactive online platform designed to bring algorithms to life through visualization. Whether you&#039;re a student, teacher, or professional, our platform provides an engaging way to explore and understand various algorithms.

[![GitHub contributors](https://img.shields.io/github/contributors/algorithm-visualizer/algorithm-visualizer.svg?style=flat-square)](https://github.com/algorithm-visualizer/algorithm-visualizer/graphs/contributors)
[![GitHub license](https://img.shields.io/github/license/algorithm-visualizer/algorithm-visualizer.svg?style=flat-square)](https://github.com/algorithm-visualizer/algorithm-visualizer/blob/master/LICENSE)

## Languages and Frameworks Used
[![Languages](https://skillicons.dev/icons?i=html,css,js,react,nodejs,redux)](https://skillicons.dev)


## Key Features
&lt;ul&gt; 
&lt;li&gt;

### Visualize algorithms from code:
Algorithm Visualizer allows you to witness algorithms in action by visualizing code written in various programming languages. This visual approach facilitates a better understanding of algorithmic behavior..&lt;/li&gt;
&lt;li&gt;

### Learn about Algorithms:
Explore our collection of tutorials, articles, and videos that serve as valuable resources for learning about algorithms.
&lt;/li&gt;
&lt;/ul&gt;

## algorithms
In this repository, you&#039;ll find visualizations of algorithms showcased in the website&#039;s side menu. Contributions here directly impact the educational content available on the platform.   https://github.com/algorithm-visualizer/algorithms&lt;/li&gt;
&lt;/ul&gt;


## tracers
Explore the various visualization libraries in different programming languages. These libraries extract visualization commands from code.
https://github.com/search?q=topic%3Avisualization-library+org%3Aalgorithm-visualizer&amp;type=Repositories&lt;/li&gt;
&lt;/ul&gt;

## Live Demo
Learning an algorithm gets much easier with visualizing it. Don&#039;t get what we mean? Check it out:

[**algorithm-visualizer.org**![Screenshot](https://raw.githubusercontent.com/algorithm-visualizer/algorithm-visualizer/master/branding/screenshot.png)](https://algorithm-visualizer.org/)

## Contributing

Our project consists of multiple repositories, each playing a crucial role in the Algorithm Visualizer ecosystem. If you&#039;re interested in contributing, check out the guidelines for the specific repository:


- [**`algorithm-visualizer`**](https://github.com/algorithm-visualizer/algorithm-visualizer) is a web app written in React. It contains UI components and interprets commands into visualizations. Check out [the contributing guidelines](CONTRIBUTING.md).

- [**`server`**](https://github.com/algorithm-visualizer/server) serves the web app and provides APIs that it needs on the fly. (e.g., GitHub sign in, compiling/running code, etc.)

- [**`algorithms`**](https://github.com/algorithm-visualizer/algorithms) contains visualizations of algorithms shown on the side menu of the website.

- [**`tracers.*`**](https://github.com/search?q=topic%3Avisualization-library+org%3Aalgorithm-visualizer&amp;type=Repositories) are visualization libraries written in each supported language. They extract visualizing commands from code.

Ready to contribute? Explore the repositories and become part of the Algorithm Visualizer community!</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[appium/appium]]></title>
            <link>https://github.com/appium/appium</link>
            <guid>https://github.com/appium/appium</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:47 GMT</pubDate>
            <description><![CDATA[Cross-platform automation framework for all kinds of apps, built on top of the W3C WebDriver protocol]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/appium/appium">appium/appium</a></h1>
            <p>Cross-platform automation framework for all kinds of apps, built on top of the W3C WebDriver protocol</p>
            <p>Language: JavaScript</p>
            <p>Stars: 20,388</p>
            <p>Forks: 6,218</p>
            <p>Stars today: 11 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
   &lt;a href=&quot;https://appium.io/&quot;&gt;
      &lt;img alt=&quot;Appium&quot; src=&quot;https://raw.githubusercontent.com/appium/appium/master/packages/appium/docs/overrides/assets/images/appium-logo-horiz.png&quot; width=&quot;500&quot;&gt;
   &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
   Cross-platform test automation for native, hybrid, mobile web and desktop apps.
&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;

[![NPM version](https://badge.fury.io/js/appium.svg)](https://npmjs.org/package/appium)
[![Monthly Downloads](https://img.shields.io/npm/dm/appium.svg)](https://npmjs.org/package/appium)
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=shield)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_shield)
[![StandWithUkraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://github.com/vshymanskyy/StandWithUkraine/)
[![CeasefireInGaza](https://img.shields.io/badge/Ceasefire_Now-%F0%9F%87%B5%F0%9F%87%B8-red?style=flat)](https://www.unrwa.org/)

&lt;/div&gt;

***

&lt;p align=&quot;center&quot;&gt;&lt;b&gt;
   &lt;a href=&quot;https://appium.io&quot;&gt;Documentation&lt;/a&gt; |
   &lt;a href=&quot;https://appium.io/docs/en/latest/intro/&quot;&gt;Get Started&lt;/a&gt; |
   &lt;a href=&quot;https://appium.io/docs/en/latest/ecosystem/&quot;&gt;Ecosystem&lt;/a&gt; |
   &lt;a href=&quot;https://github.com/appium/appium/blob/master/packages/appium/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt; |
   &lt;a href=&quot;https://appium.io/docs/en/latest/contributing/&quot;&gt;Contributing Guide&lt;/a&gt; |
   &lt;a href=&quot;https://discuss.appium.io&quot;&gt;Discussion Forum&lt;/a&gt;
&lt;/b&gt;&lt;/p&gt;

***

Appium is an open-source automation framework that provides
[WebDriver](https://www.w3.org/TR/webdriver/)-based automation possibilities for a wide range of
different mobile, desktop and IoT platforms. Appium is modular and extensible, and supports multiple
programming languages, which means there is an entire ecosystem of related software:
* [__Drivers__](#drivers) add support for automating specific platforms
* [__Clients__](#clients) allow writing Appium tests in your programming language of choice
* [__Plugins__](#plugins) allow to further extend Appium functionality

## Upgrading From Older Versions

The Appium team only provides support for the most recent version of Appium. If you wish to upgrade from
an older major Appium version, please refer to the migration guides:

* [Appium v2 to v3](https://appium.io/docs/en/latest/guides/migrating-2-to-3/)
* [Appium v1 to v2](https://appium.io/docs/en/latest/guides/migrating-1-to-2/)

## Installation

Appium can be installed using `npm` (other package managers are not currently supported). Please
check the [installation docs](http://appium.io/docs/en/latest/quickstart/install/) for the
system requirements and further information.

If upgrading from Appium 1, make sure Appium 1 is fully uninstalled (`npm uninstall -g appium`).
Unexpected errors might appear if this has not been done.

```bash
npm i -g appium
```

Note that this will only install the core Appium server, which cannot automate anything on its own.
Please install [drivers](#drivers) for your target platforms in order to automate them.

## Drivers

Appium supports app automation across a variety of platforms, like iOS, Android, macOS, Windows,
and more. Each platform is supported by one or more &quot;drivers&quot;, which know how to automate that
particular platform. You can find a full list of officially-supported and third-party drivers in
[Appium Ecosystem&#039;s Drivers page](http://appium.io/docs/en/latest/ecosystem/drivers/).

Driver management is done using [Appium&#039;s Extension command-line interface](http://appium.io/docs/en/latest/cli/extensions/):

```bash
# Install an official driver from npm (see documentation for a list of such drivers)
appium driver install &lt;driver-name&gt;
# Install any driver from npm
appium driver install --source=npm &lt;driver-name&gt;
# See documentation for installation from other sources

# List already installed drivers
appium driver list --installed
# Update a driver (it must be already installed)
# This will NOT update the major version, in order to prevent breaking changes
appium driver update &lt;driver-name&gt;
# Update a driver to the most recent version (may include breaking changes)
appium driver update &lt;driver-name&gt; --unsafe
# Uninstall a driver (it won&#039;t last forever, will it?)
appium driver uninstall &lt;driver-name&gt;
```

## Clients

Client libraries enable writing Appium tests in different programming languages. There are
officially-supported clients for Java, Python, Ruby, and .NET C#, as well as third-party clients
for other languages. You can find a full list of clients in
[Appium Ecosystem&#039;s Clients page](http://appium.io/docs/en/latest/ecosystem/clients/).

## Plugins

Plugins allow you to extend server functionality without changing the server code. The main
difference between drivers and plugins is that the latter must be explicitly enabled on
Appium server startup (all installed drivers are enabled by default):

```bash
appium --use-plugins=&lt;plugin-name&gt;
```

You can find a full list of officially-supported and third-party plugins in
[Appium Ecosystem&#039;s Plugins page](http://appium.io/docs/en/latest/ecosystem/plugins/).

Similarly to drivers, plugin management is also done using
[Appium&#039;s Extension command-line interface](http://appium.io/docs/en/latest/cli/extensions/):

```bash
# Install an official plugin from npm (see documentation for a list of such plugins)
appium plugin install &lt;plugin-name&gt;
# Install any plugin from npm
appium plugin install --source=npm &lt;plugin-name&gt;
# See documentation for installation from other sources

# List already installed plugins
appium plugin list --installed
# Update a plugin (it must be already installed)
# This will NOT update the major version, in order to prevent breaking changes
appium plugin update &lt;plugin-name&gt;
# Update a plugin to the most recent version (may include breaking changes)
appium plugin update &lt;plugin-name&gt; --unsafe
# Uninstall a plugin
appium plugin uninstall &lt;plugin-name&gt;
```

## Server Command Line Interface

In order to start sending commands to the Appium server, it must be running on the URL and port
where your client library expects it to listen. [Appium&#039;s command-line interface](http://appium.io/docs/en/latest/cli/server/)
is used to launch and configure the server:

```bash
# Start the server on the default host (0.0.0.0) and port (4723)
appium server
# You can also omit the &#039;server&#039; subcommand
appium
# Start the server on the given host, port and use a custom base path prefix (the default prefix is &#039;/&#039;)
appium --address 127.0.0.1 --port 9000 --base-path /wd/hub
```

Appium supports execution of parallel server processes, as well as parallel driver sessions within a
single server process. Refer the corresponding driver documentations regarding which mode is optimal
for the particular driver or whether it supports parallel sessions.

## Why Appium?

1. You usually don&#039;t have to recompile your app or modify it in any way, due to the use of standard
   automation APIs on all platforms.
2. You can write tests with your favorite dev tools using any WebDriver-compatible language such as
   Java, Python, Ruby and C#. There are also third party client implementations for other languages.
3. You can use any testing framework.
4. Some drivers like `xcuitest` and `uiautomator2` have built-in mobile web and hybrid app support.
   Within the same script, you can switch seamlessly between native app automation and webview
   automation, all using the WebDriver model that&#039;s already the standard for web automation.
5. You can run your automated tests locally and in a cloud. There are multiple cloud providers that
   support various Appium drivers (mostly targeting iOS and Android mobile automation).
6. [Appium Inspector](https://github.com/appium/appium-inspector) can be used to visually inspect
   the page source of applications across different platforms, facilitating easier test development.

Investing in the [WebDriver](https://w3c.github.io/webdriver/webdriver-spec.html) protocol means you
are betting on a single, free, and open protocol for testing that has become a web standard. Don&#039;t
lock yourself into a proprietary stack.

For example, if you use Apple&#039;s XCUITest library without Appium, you can only write tests using
Obj-C/Swift, and you can only run tests through Xcode. Similarly, with Google&#039;s UiAutomator or
Espresso, you can only write tests in Java/Kotlin. Appium opens up the possibility of true
cross-platform native app automation, for mobile and beyond!

If you are looking for a more comprehensive description of what this is all about, please read our
documentation on [How Does Appium Work?](https://appium.io/docs/en/latest/intro/appium/).

## Sponsors

Appium has a [Sponsorship Program](GOVERNANCE.md#sponsorship)! If you or your company uses Appium
and wants to give back financially to the project, we use these funds to [encourage development and
contributions](GOVERNANCE.md#compensation-scheme), as well as support other open source projects we
rely on. [Become a sponsor](https://opencollective.com/appium) via our OpenCollective page.

### Development and Strategic Partners

Appium is incredibly grateful to our Development and Strategic Partners for their sustained
contribution of project development and leadership!

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.browserstack.com/browserstack-appium?utm_campaigncode=701OW00000AoUTQYA3&amp;utm_medium=partnered&amp;utm_source=appium&quot;&gt;
    &lt;picture&gt;
      &lt;source srcset=&quot;packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;/&gt;
      &lt;source srcset=&quot;packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-light.png&quot; media=&quot;(prefers-color-scheme: light)&quot;/&gt;
      &lt;img src=&quot;packages/appium/docs/overrides/assets/images/sponsor-logo-browserstack-dark.png&quot; width=&quot;300&quot; alt=&quot;Browserstack&quot;/&gt;
    &lt;/picture&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://lambdatest.com/?utm_source=appium.io&amp;utm_medium=organic&amp;utm_campaign=june_25&amp;utm_term=sk&amp;utm_content=webpage&quot;&gt;
    &lt;picture&gt;
      &lt;source srcset=&quot;packages/appium/docs/overrides/assets/images/sponsor-logo-lambdatest-dark.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;/&gt;
      &lt;source srcset=&quot;packages/appium/docs/overrides/assets/images/sponsor-logo-lambdatest-light.png&quot; media=&quot;(prefers-color-scheme: light)&quot;/&gt;
      &lt;img src=&quot;packages/appium/docs/overrides/assets/images/sponsor-logo-lambdatest-dark.png&quot; width=&quot;300&quot; alt=&quot;LambdaTest&quot;/&gt;
    &lt;/picture&gt;
  &lt;/a&gt;
&lt;/p&gt;

### Other Sponsors

A full list of sponsors is available at our [Sponsors page](https://appium.io/docs/en/latest/sponsors/).

## License

[Apache-2.0](./LICENSE)

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=large)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_large)

`@appium/logger` package is under [ISC](./packages/logger/LICENSE) License.
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[mrdoob/three.js]]></title>
            <link>https://github.com/mrdoob/three.js</link>
            <guid>https://github.com/mrdoob/three.js</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:46 GMT</pubDate>
            <description><![CDATA[JavaScript 3D Library.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/mrdoob/three.js">mrdoob/three.js</a></h1>
            <p>JavaScript 3D Library.</p>
            <p>Language: JavaScript</p>
            <p>Stars: 108,508</p>
            <p>Forks: 36,002</p>
            <p>Stars today: 31 stars today</p>
            <h2>README</h2><pre># three.js

[![NPM Package][npm]][npm-url]
[![Build Size][build-size]][build-size-url]
[![NPM Downloads][npm-downloads]][npmtrends-url]
[![Discord][discord]][discord-url]
[![DeepWiki][deepwiki]][deepwiki-url]

#### JavaScript 3D library

The aim of the project is to create an easy-to-use, lightweight, cross-browser, general-purpose 3D library. The current builds only include WebGL and WebGPU renderers but SVG and CSS3D renderers are also available as addons.

[Examples](https://threejs.org/examples/) &amp;mdash;
[Docs](https://threejs.org/docs/) &amp;mdash;
[Manual](https://threejs.org/manual/) &amp;mdash;
[Wiki](https://github.com/mrdoob/three.js/wiki) &amp;mdash;
[Migrating](https://github.com/mrdoob/three.js/wiki/Migration-Guide) &amp;mdash;
[Questions](https://stackoverflow.com/questions/tagged/three.js) &amp;mdash;
[Forum](https://discourse.threejs.org/) &amp;mdash;
[Discord](https://discord.gg/56GBJwAnUS)

### Usage

This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a `WebGL` renderer for the scene and camera, and it adds that viewport to the `document.body` element. Finally, it animates the cube within the scene for the camera.

```javascript
import * as THREE from &#039;three&#039;;

const width = window.innerWidth, height = window.innerHeight;

// init

const camera = new THREE.PerspectiveCamera( 70, width / height, 0.01, 10 );
camera.position.z = 1;

const scene = new THREE.Scene();

const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
const material = new THREE.MeshNormalMaterial();

const mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );

const renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setSize( width, height );
renderer.setAnimationLoop( animate );
document.body.appendChild( renderer.domElement );

// animation

function animate( time ) {

	mesh.rotation.x = time / 2000;
	mesh.rotation.y = time / 1000;

	renderer.render( scene, camera );

}
```

If everything goes well, you should see [this](https://jsfiddle.net/w43x5Lgh/).

### Cloning this repository

Cloning the repo with all its history results in a ~2 GB download. If you don&#039;t need the whole history you can use the `depth` parameter to significantly reduce download size.

```sh
git clone --depth=1 https://github.com/mrdoob/three.js.git
```

### Change log

[Releases](https://github.com/mrdoob/three.js/releases)


[npm]: https://img.shields.io/npm/v/three
[npm-url]: https://www.npmjs.com/package/three
[build-size]: https://badgen.net/bundlephobia/minzip/three
[build-size-url]: https://bundlephobia.com/result?p=three
[npm-downloads]: https://img.shields.io/npm/dw/three
[npmtrends-url]: https://www.npmtrends.com/three
[discord]: https://img.shields.io/discord/685241246557667386
[discord-url]: https://discord.gg/56GBJwAnUS
[deepwiki]: https://deepwiki.com/badge.svg
[deepwiki-url]: https://deepwiki.com/mrdoob/three.js

</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[usebruno/bruno]]></title>
            <link>https://github.com/usebruno/bruno</link>
            <guid>https://github.com/usebruno/bruno</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:45 GMT</pubDate>
            <description><![CDATA[Opensource IDE For Exploring and Testing API's (lightweight alternative to Postman/Insomnia)]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/usebruno/bruno">usebruno/bruno</a></h1>
            <p>Opensource IDE For Exploring and Testing API's (lightweight alternative to Postman/Insomnia)</p>
            <p>Language: JavaScript</p>
            <p>Stars: 36,819</p>
            <p>Forks: 1,835</p>
            <p>Stars today: 47 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[jquery/jquery]]></title>
            <link>https://github.com/jquery/jquery</link>
            <guid>https://github.com/jquery/jquery</guid>
            <pubDate>Thu, 11 Sep 2025 00:04:44 GMT</pubDate>
            <description><![CDATA[jQuery JavaScript Library]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/jquery/jquery">jquery/jquery</a></h1>
            <p>jQuery JavaScript Library</p>
            <p>Language: JavaScript</p>
            <p>Stars: 59,556</p>
            <p>Forks: 20,545</p>
            <p>Stars today: 6 stars today</p>
            <h2>README</h2><pre># [jQuery](https://jquery.com/) — New Wave JavaScript

Meetings are currently held on the [matrix.org platform](https://matrix.to/#/#jquery_meeting:gitter.im).

Meeting minutes can be found at [meetings.jquery.org](https://meetings.jquery.org/category/core/).

The latest version of jQuery is available at [https://jquery.com/download/](https://jquery.com/download/).

## Version support

| Version | Branch     | Status   |
| ------- | ---------- | -------- |
| 4.x     | main       | Beta     |
| 3.x     | 3.x-stable | Active   |
| 2.x     | 2.x-stable | Inactive |
| 1.x     | 1.x-stable | Inactive |

Once 4.0.0 final is released, the 3.x branch will continue to receive updates for a limited time. The 2.x and 1.x branches are no longer supported.

Commercial support for inactive versions is available from [HeroDevs](https://herodevs.com/support/jquery-nes).

Learn more about our [version support](https://jquery.com/support/).

## Contribution Guides

In the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:

1. [Getting Involved](https://contribute.jquery.org/)
2. [Core Style Guide](https://contribute.jquery.org/style-guide/js/)
3. [Writing Code for jQuery Projects](https://contribute.jquery.org/code/)

### References to issues/PRs

GitHub issues/PRs are usually referenced via `gh-NUMBER`, where `NUMBER` is the numerical ID of the issue/PR. You can find such an issue/PR under `https://github.com/jquery/jquery/issues/NUMBER`.

jQuery has used a different bug tracker - based on Trac - in the past, available under [bugs.jquery.com](https://bugs.jquery.com/). It is being kept in read only mode so that referring to past discussions is possible. When jQuery source references one of those issues, it uses the pattern `trac-NUMBER`, where `NUMBER` is the numerical ID of the issue. You can find such an issue under `https://bugs.jquery.com/ticket/NUMBER`.

## Environments in which to use jQuery

- [Browser support](https://jquery.com/browser-support/)
- jQuery also supports Node, browser extensions, and other non-browser environments.

## What you need to build your own jQuery

To build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.

For Windows, you have to download and install [git](https://git-scm.com/downloads) and [Node.js](https://nodejs.org/en/download/).

macOS users should install [Homebrew](https://brew.sh/). Once Homebrew is installed, run `brew install git` to install git,
and `brew install node` to install Node.js.

Linux/BSD users should use their appropriate package managers to install git and Node.js, or build from source
if you swing that way. Easy-peasy.

## How to build your own jQuery

First, [clone the jQuery git repo](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository).

Then, enter the jquery directory, install dependencies, and run the build script:

```bash
cd jquery
npm install
npm run build
```

The built version of jQuery will be placed in the `dist/` directory, along with a minified copy and associated map file.

## Build all jQuery release files

To build all variants of jQuery, run the following command:

```bash
npm run build:all
```

This will create all of the variants that jQuery includes in a release, including `jquery.js`, `jquery.slim.js`, `jquery.module.js`, and `jquery.slim.module.js` along their associated minified files and sourcemaps.

`jquery.module.js` and `jquery.slim.module.js` are [ECMAScript modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) that export `jQuery` and `$` as named exports are placed in the `dist-module/` directory rather than the `dist/` directory.

## Building a Custom jQuery

The build script can be used to create a custom version of jQuery that includes only the modules you need.

Any module may be excluded except for `core`. When excluding `selector`, it is not removed but replaced with a small wrapper around native `querySelectorAll` (see below for more information).

### Build Script Help

To see the full list of available options for the build script, run the following:

```bash
npm run build -- --help
```

### Modules

To exclude a module, pass its path relative to the `src` folder (without the `.js` extension) to the `--exclude` option. When using the `--include` option, the default includes are dropped and a build is created with only those modules.

Some example modules that can be excluded or included are:

- **ajax**: All AJAX functionality: `$.ajax()`, `$.get()`, `$.post()`, `$.ajaxSetup()`, `.load()`, transports, and ajax event shorthands such as `.ajaxStart()`.
- **ajax/xhr**: The XMLHTTPRequest AJAX transport only.
- **ajax/script**: The `&lt;script&gt;` AJAX transport only; used to retrieve scripts.
- **ajax/jsonp**: The JSONP AJAX transport only; depends on the ajax/script transport.
- **css**: The `.css()` method. Also removes **all** modules depending on css (including **effects**, **dimensions**, and **offset**).
- **css/showHide**: Non-animated `.show()`, `.hide()` and `.toggle()`; can be excluded if you use classes or explicit `.css()` calls to set the `display` property. Also removes the **effects** module.
- **deprecated**: Methods documented as deprecated but not yet removed.
- **dimensions**: The `.width()` and `.height()` methods, including `inner-` and `outer-` variations.
- **effects**: The `.animate()` method and its shorthands such as `.slideUp()` or `.hide(&quot;slow&quot;)`.
- **event**: The `.on()` and `.off()` methods and all event functionality.
- **event/trigger**: The `.trigger()` and `.triggerHandler()` methods.
- **offset**: The `.offset()`, `.position()`, `.offsetParent()`, `.scrollLeft()`, and `.scrollTop()` methods.
- **wrap**: The `.wrap()`, `.wrapAll()`, `.wrapInner()`, and `.unwrap()` methods.
- **core/ready**: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with `jQuery()` will simply be called immediately. However, `jQuery(document).ready()` will not be a function and `.on(&quot;ready&quot;, ...)` or similar will not be triggered.
- **deferred**: Exclude jQuery.Deferred. This also excludes all modules that rely on Deferred, including **ajax**, **effects**, and **queue**, but replaces **core/ready** with **core/ready-no-deferred**.
- **exports/global**: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.
- **exports/amd**: Exclude the AMD definition.

- **selector**: The full jQuery selector engine. When this module is excluded, it is replaced with a rudimentary selector engine based on the browser&#039;s `querySelectorAll` method that does not support jQuery selector extensions or enhanced semantics. See the [selector-native.js](https://github.com/jquery/jquery/blob/main/src/selector-native.js) file for details.

*Note*: Excluding the full `selector` module will also exclude all jQuery selector extensions (such as `effects/animatedSelector` and `css/hiddenVisibleSelectors`).

##### AMD name

You can set the module name for jQuery&#039;s AMD definition. By default, it is set to &quot;jquery&quot;, which plays nicely with plugins and third-party libraries, but there may be cases where you&#039;d like to change this. Pass it to the `--amd` parameter:

```bash
npm run build -- --amd=&quot;custom-name&quot;
```

Or, to define anonymously, leave the name blank.

```bash
npm run build -- --amd
```

##### File name and directory

The default name for the built jQuery file is `jquery.js`; it is placed under the `dist/` directory. It&#039;s possible to change the file name using `--filename` and the directory using `--dir`. `--dir` is relative to the project root.

```bash
npm run build -- --slim --filename=&quot;jquery.slim.js&quot; --dir=&quot;/tmp&quot;
```

This would create a slim version of jQuery and place it under `tmp/jquery.slim.js`.

##### ECMAScript Module (ESM) mode

By default, jQuery generates a regular script JavaScript file. You can also generate an ECMAScript module exporting `jQuery` as the default export using the `--esm` parameter:

```bash
npm run build -- --filename=jquery.module.js --esm
```

##### Factory mode

By default, jQuery depends on a global `window`. For environments that don&#039;t have one, you can generate a factory build that exposes a function accepting `window` as a parameter that you can provide externally (see [`README` of the published package](build/fixtures/README.md) for usage instructions). You can generate such a factory using the `--factory` parameter:

```bash
npm run build -- --filename=jquery.factory.js --factory
```

This option can be mixed with others like `--esm` or `--slim`:

```bash
npm run build -- --filename=jquery.factory.slim.module.js --factory --esm --slim --dir=&quot;/dist-module&quot;
```

#### Custom Build Examples

Create a custom build using `npm run build`, listing the modules to be excluded. Excluding a top-level module also excludes its corresponding directory of modules.

Exclude all **ajax** functionality:

```bash
npm run build -- --exclude=ajax
```

Excluding **css** removes modules depending on CSS: **effects**, **offset**, **dimensions**.

```bash
npm run build -- --exclude=css
```

Exclude a bunch of modules (`-e` is an alias for `--exclude`):

```bash
npm run build -- -e ajax/jsonp -e css -e deprecated -e dimensions -e effects -e offset -e wrap
```

There is a special alias to generate a build with the same configuration as the official jQuery Slim build:

```bash
npm run build -- --filename=jquery.slim.js --slim
```

Or, to create the slim build as an esm module:

```bash
npm run build -- --filename=jquery.slim.module.js --slim --esm
```

*Non-official custom builds are not regularly tested. Use them at your own risk.*

## Running the Unit Tests

Make sure you have the necessary dependencies:

```bash
npm install
```

Start `npm start` to auto-build jQuery as you work:

```bash
npm start
```

Run the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the &quot;test&quot; directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:

- Windows: [WAMP download](https://www.wampserver.com/en/)
- Mac: [MAMP download](https://www.mamp.info/en/downloads/)
- Linux: [Setting up LAMP](https://www.linux.com/training-tutorials/easy-lamp-server-installation/)
- [Mongoose (most platforms)](https://code.google.com/p/mongoose/)

## Essential Git

As the source code is handled by the Git version control system, it&#039;s useful to know some features used.

### Cleaning

If you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you&#039;ve worked on is gone after these):

```bash
git reset --hard upstream/main
git clean -fdx
```

### Rebasing

For feature/topic branches, you should always use the `--rebase` flag to `git pull`, or if you are usually handling many temporary &quot;to be in a github pull request&quot; branches, run the following to automate this:

```bash
git config branch.autosetuprebase local
```

(see `man git-config` for more information)

### Handling merge conflicts

If you&#039;re getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature
`git mergetool`. Even though the default tool `xxdiff` looks awful/old, it&#039;s rather useful.

The following are some commands that can be used there:

- `Ctrl + Alt + M` - automerge as much as possible
- `b` - jump to next merge conflict
- `s` - change the order of the conflicted lines
- `u` - undo a merge
- `left mouse button` - mark a block to be the winner
- `middle mouse button` - mark a line to be the winner
- `Ctrl + S` - save
- `Ctrl + Q` - quit

## [QUnit](https://api.qunitjs.com) Reference

### Test methods

```js
expect( numAssertions );
stop();
start();
```

*Note*: QUnit&#039;s eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.

### Test assertions

```js
ok( value, [message] );
equal( actual, expected, [message] );
notEqual( actual, expected, [message] );
deepEqual( actual, expected, [message] );
notDeepEqual( actual, expected, [message] );
strictEqual( actual, expected, [message] );
notStrictEqual( actual, expected, [message] );
throws( block, [expected], [message] );
```

## Test Suite Convenience Methods Reference

See [test/data/testinit.js](https://github.com/jquery/jquery/blob/main/test/data/testinit.js).

### Returns an array of elements with the given IDs

```js
q( ... );
```

Example:

```js
q( &quot;main&quot;, &quot;foo&quot;, &quot;bar&quot; );

=&gt; [ div#main, span#foo, input#bar ]
```

### Asserts that a selection matches the given IDs

```js
t( testName, selector, [ &quot;array&quot;, &quot;of&quot;, &quot;ids&quot; ] );
```

Example:

```js
t(&quot;Check for something&quot;, &quot;//[a]&quot;, [&quot;foo&quot;, &quot;bar&quot;]);
```

### Fires a native DOM event without going through jQuery

```js
fireNative( node, eventType );
```

Example:

```js
fireNative( jQuery( &quot;#elem&quot; )[ 0 ], &quot;click&quot; );
```

### Add random number to url to stop caching

```js
url( &quot;some/url&quot; );
```

Example:

```js
url( &quot;index.html&quot; );

=&gt; &quot;data/index.html?10538358428943&quot;


url( &quot;mock.php?foo=bar&quot; );

=&gt; &quot;data/mock.php?foo=bar&amp;10538358345554&quot;
```

### Run tests in an iframe

Some tests may require a document other than the standard test fixture, and
these can be run in a separate iframe. The actual test code and assertions
remain in jQuery&#039;s main test files; only the minimal test fixture markup
and setup code should be placed in the iframe file.

```js
testIframe( testName, fileName,
  function testCallback(
      assert, jQuery, window, document,
	  [ additional args ] ) {
	...
  } );
```

This loads a page, constructing a url with fileName `&quot;./data/&quot; + fileName`.
The iframed page determines when the callback occurs in the test by
including the &quot;/test/data/iframeTest.js&quot; script and calling
`startIframeTest( [ additional args ] )` when appropriate. Often this
will be after either document ready or `window.onload` fires.

The `testCallback` receives the QUnit `assert` object created by `testIframe`
for this test, followed by the global `jQuery`, `window`, and `document` from
the iframe. If the iframe code passes any arguments to `startIframeTest`,
they follow the `document` argument.

## Questions?

If you have any questions, please feel free to ask on the
[Developing jQuery Core forum](https://forum.jquery.com/developing-jquery-core) or in #jquery on [libera](https://web.libera.chat/).
</pre>
          ]]></content:encoded>
            <category>JavaScript</category>
        </item>
    </channel>
</rss>