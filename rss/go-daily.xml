<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for go - Go Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for go.</description>
        <lastBuildDate>Mon, 27 Oct 2025 00:05:47 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[go-gitea/gitea]]></title>
            <link>https://github.com/go-gitea/gitea</link>
            <guid>https://github.com/go-gitea/gitea</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:47 GMT</pubDate>
            <description><![CDATA[Git with a cup of tea! Painless self-hosted all-in-one software development service, including Git hosting, code review, team collaboration, package registry and CI/CD]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/go-gitea/gitea">go-gitea/gitea</a></h1>
            <p>Git with a cup of tea! Painless self-hosted all-in-one software development service, including Git hosting, code review, team collaboration, package registry and CI/CD</p>
            <p>Language: Go</p>
            <p>Stars: 51,503</p>
            <p>Forks: 6,173</p>
            <p>Stars today: 30 stars today</p>
            <h2>README</h2><pre># Gitea

[![](https://github.com/go-gitea/gitea/actions/workflows/release-nightly.yml/badge.svg?branch=main)](https://github.com/go-gitea/gitea/actions/workflows/release-nightly.yml?query=branch%3Amain &quot;Release Nightly&quot;)
[![](https://img.shields.io/discord/322538954119184384.svg?logo=discord&amp;logoColor=white&amp;label=Discord&amp;color=5865F2)](https://discord.gg/Gitea &quot;Join the Discord chat at https://discord.gg/Gitea&quot;)
[![](https://goreportcard.com/badge/code.gitea.io/gitea)](https://goreportcard.com/report/code.gitea.io/gitea &quot;Go Report Card&quot;)
[![](https://pkg.go.dev/badge/code.gitea.io/gitea?status.svg)](https://pkg.go.dev/code.gitea.io/gitea &quot;GoDoc&quot;)
[![](https://img.shields.io/github/release/go-gitea/gitea.svg)](https://github.com/go-gitea/gitea/releases/latest &quot;GitHub release&quot;)
[![](https://www.codetriage.com/go-gitea/gitea/badges/users.svg)](https://www.codetriage.com/go-gitea/gitea &quot;Help Contribute to Open Source&quot;)
[![](https://opencollective.com/gitea/tiers/backers/badge.svg?label=backers&amp;color=brightgreen)](https://opencollective.com/gitea &quot;Become a backer/sponsor of gitea&quot;)
[![](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT &quot;License: MIT&quot;)
[![Contribute with Gitpod](https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod&amp;color=green)](https://gitpod.io/#https://github.com/go-gitea/gitea)
[![](https://badges.crowdin.net/gitea/localized.svg)](https://translate.gitea.com &quot;Crowdin&quot;)

[ÁπÅÈ´î‰∏≠Êñá](./README.zh-tw.md) | [ÁÆÄ‰Ωì‰∏≠Êñá](./README.zh-cn.md)

## Purpose

The goal of this project is to make the easiest, fastest, and most
painless way of setting up a self-hosted Git service.

As Gitea is written in Go, it works across **all** the platforms and
architectures that are supported by Go, including Linux, macOS, and
Windows on x86, amd64, ARM and PowerPC architectures.
This project has been
[forked](https://blog.gitea.com/welcome-to-gitea/) from
[Gogs](https://gogs.io) since November of 2016, but a lot has changed.

For online demonstrations, you can visit [demo.gitea.com](https://demo.gitea.com).

For accessing free Gitea service (with a limited number of repositories), you can visit [gitea.com](https://gitea.com/user/login).

To quickly deploy your own dedicated Gitea instance on Gitea Cloud, you can start a free trial at [cloud.gitea.com](https://cloud.gitea.com).

## Documentation

You can find comprehensive documentation on our official [documentation website](https://docs.gitea.com/).

It includes installation, administration, usage, development, contributing guides, and more to help you get started and explore all features effectively.

If you have any suggestions or would like to contribute to it, you can visit the [documentation repository](https://gitea.com/gitea/docs)

## Building

From the root of the source tree, run:

    TAGS=&quot;bindata&quot; make build

or if SQLite support is required:

    TAGS=&quot;bindata sqlite sqlite_unlock_notify&quot; make build

The `build` target is split into two sub-targets:

- `make backend` which requires [Go Stable](https://go.dev/dl/), the required version is defined in [go.mod](/go.mod).
- `make frontend` which requires [Node.js LTS](https://nodejs.org/en/download/) or greater and [pnpm](https://pnpm.io/installation).

Internet connectivity is required to download the go and npm modules. When building from the official source tarballs which include pre-built frontend files, the `frontend` target will not be triggered, making it possible to build without Node.js.

More info: https://docs.gitea.com/installation/install-from-source

## Using

After building, a binary file named `gitea` will be generated in the root of the source tree by default. To run it, use:

    ./gitea web

&gt; [!NOTE]
&gt; If you&#039;re interested in using our APIs, we have experimental support with [documentation](https://docs.gitea.com/api).

## Contributing

Expected workflow is: Fork -&gt; Patch -&gt; Push -&gt; Pull Request

&gt; [!NOTE]
&gt;
&gt; 1. **YOU MUST READ THE [CONTRIBUTORS GUIDE](CONTRIBUTING.md) BEFORE STARTING TO WORK ON A PULL REQUEST.**
&gt; 2. If you have found a vulnerability in the project, please write privately to **security@gitea.io**. Thanks!

## Translating

[![Crowdin](https://badges.crowdin.net/gitea/localized.svg)](https://translate.gitea.com)

Translations are done through [Crowdin](https://translate.gitea.com). If you want to translate to a new language, ask one of the managers in the Crowdin project to add a new language there.

You can also just create an issue for adding a language or ask on Discord on the #translation channel. If you need context or find some translation issues, you can leave a comment on the string or ask on Discord. For general translation questions there is a section in the docs. Currently a bit empty, but we hope to fill it as questions pop up.

Get more information from [documentation](https://docs.gitea.com/contributing/localization).

## Official and Third-Party Projects

We provide an official [go-sdk](https://gitea.com/gitea/go-sdk), a CLI tool called [tea](https://gitea.com/gitea/tea) and an [action runner](https://gitea.com/gitea/act_runner) for Gitea Action.

We maintain a list of Gitea-related projects at [gitea/awesome-gitea](https://gitea.com/gitea/awesome-gitea), where you can discover more third-party projects, including SDKs, plugins, themes, and more.

## Communication

[![](https://img.shields.io/discord/322538954119184384.svg?logo=discord&amp;logoColor=white&amp;label=Discord&amp;color=5865F2)](https://discord.gg/Gitea &quot;Join the Discord chat at https://discord.gg/Gitea&quot;)

If you have questions that are not covered by the [documentation](https://docs.gitea.com/), you can get in contact with us on our [Discord server](https://discord.gg/Gitea) or create a post in the [discourse forum](https://forum.gitea.com/).

## Authors

- [Maintainers](https://github.com/orgs/go-gitea/people)
- [Contributors](https://github.com/go-gitea/gitea/graphs/contributors)
- [Translators](options/locale/TRANSLATORS)

## Backers

Thank you to all our backers! üôè [[Become a backer](https://opencollective.com/gitea#backer)]

&lt;a href=&quot;https://opencollective.com/gitea#backers&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/backers.svg?width=890&quot;&gt;&lt;/a&gt;

## Sponsors

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/gitea#sponsor)]

&lt;a href=&quot;https://opencollective.com/gitea/sponsor/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/0/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/1/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/2/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/3/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/4/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/5/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/6/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/7/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/8/avatar.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/gitea/sponsor/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/gitea/sponsor/9/avatar.svg&quot;&gt;&lt;/a&gt;

## FAQ

**How do you pronounce Gitea?**

Gitea is pronounced [/…°…™‚Äôti:/](https://youtu.be/EM71-2uDAoY) as in &quot;gi-tea&quot; with a hard g.

**Why is this not hosted on a Gitea instance?**

We&#039;re [working on it](https://github.com/go-gitea/gitea/issues/1029).

**Where can I find the security patches?**

In the [release log](https://github.com/go-gitea/gitea/releases) or the [change log](https://github.com/go-gitea/gitea/blob/main/CHANGELOG.md), search for the keyword `SECURITY` to find the security patches.

## License

This project is licensed under the MIT License.
See the [LICENSE](https://github.com/go-gitea/gitea/blob/main/LICENSE) file
for the full license text.

## Further information

&lt;details&gt;
&lt;summary&gt;Looking for an overview of the interface? Check it out!&lt;/summary&gt;

### Login/Register Page

![Login](https://dl.gitea.com/screenshots/login.png)
![Register](https://dl.gitea.com/screenshots/register.png)

### User Dashboard

![Home](https://dl.gitea.com/screenshots/home.png)
![Issues](https://dl.gitea.com/screenshots/issues.png)
![Pull Requests](https://dl.gitea.com/screenshots/pull_requests.png)
![Milestones](https://dl.gitea.com/screenshots/milestones.png)

### User Profile

![Profile](https://dl.gitea.com/screenshots/user_profile.png)

### Explore

![Repos](https://dl.gitea.com/screenshots/explore_repos.png)
![Users](https://dl.gitea.com/screenshots/explore_users.png)
![Orgs](https://dl.gitea.com/screenshots/explore_orgs.png)

### Repository

![Home](https://dl.gitea.com/screenshots/repo_home.png)
![Commits](https://dl.gitea.com/screenshots/repo_commits.png)
![Branches](https://dl.gitea.com/screenshots/repo_branches.png)
![Labels](https://dl.gitea.com/screenshots/repo_labels.png)
![Milestones](https://dl.gitea.com/screenshots/repo_milestones.png)
![Releases](https://dl.gitea.com/screenshots/repo_releases.png)
![Tags](https://dl.gitea.com/screenshots/repo_tags.png)

#### Repository Issue

![List](https://dl.gitea.com/screenshots/repo_issues.png)
![Issue](https://dl.gitea.com/screenshots/repo_issue.png)

#### Repository Pull Requests

![List](https://dl.gitea.com/screenshots/repo_pull_requests.png)
![Pull Request](https://dl.gitea.com/screenshots/repo_pull_request.png)
![File](https://dl.gitea.com/screenshots/repo_pull_request_file.png)
![Commits](https://dl.gitea.com/screenshots/repo_pull_request_commits.png)

#### Repository Actions

![List](https://dl.gitea.com/screenshots/repo_actions.png)
![Details](https://dl.gitea.com/screenshots/repo_actions_run.png)

#### Repository Activity

![Activity](https://dl.gitea.com/screenshots/repo_activity.png)
![Contributors](https://dl.gitea.com/screenshots/repo_contributors.png)
![Code Frequency](https://dl.gitea.com/screenshots/repo_code_frequency.png)
![Recent Commits](https://dl.gitea.com/screenshots/repo_recent_commits.png)

### Organization

![Home](https://dl.gitea.com/screenshots/org_home.png)

&lt;/details&gt;
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[navidrome/navidrome]]></title>
            <link>https://github.com/navidrome/navidrome</link>
            <guid>https://github.com/navidrome/navidrome</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:46 GMT</pubDate>
            <description><![CDATA[üéß‚òÅÔ∏è Your Personal Streaming Service]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/navidrome/navidrome">navidrome/navidrome</a></h1>
            <p>üéß‚òÅÔ∏è Your Personal Streaming Service</p>
            <p>Language: Go</p>
            <p>Stars: 17,090</p>
            <p>Forks: 1,213</p>
            <p>Stars today: 17 stars today</p>
            <h2>README</h2><pre>&lt;a href=&quot;https://www.navidrome.org&quot;&gt;&lt;img src=&quot;resources/logo-192x192.png&quot; alt=&quot;Navidrome logo&quot; title=&quot;navidrome&quot; align=&quot;right&quot; height=&quot;60px&quot; /&gt;&lt;/a&gt;

# Navidrome Music Server &amp;nbsp;[![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Tired%20of%20paying%20for%20music%20subscriptions%2C%20and%20not%20finding%20what%20you%20really%20like%3F%20Roll%20your%20own%20streaming%20service%21&amp;url=https://navidrome.org&amp;via=navidrome)

[![Last Release](https://img.shields.io/github/v/release/navidrome/navidrome?logo=github&amp;label=latest&amp;style=flat-square)](https://github.com/navidrome/navidrome/releases)
[![Build](https://img.shields.io/github/actions/workflow/status/navidrome/navidrome/pipeline.yml?branch=master&amp;logo=github&amp;style=flat-square)](https://nightly.link/navidrome/navidrome/workflows/pipeline/master)
[![Downloads](https://img.shields.io/github/downloads/navidrome/navidrome/total?logo=github&amp;style=flat-square)](https://github.com/navidrome/navidrome/releases/latest)
[![Docker Pulls](https://img.shields.io/docker/pulls/deluan/navidrome?logo=docker&amp;label=pulls&amp;style=flat-square)](https://hub.docker.com/r/deluan/navidrome)
[![Dev Chat](https://img.shields.io/discord/671335427726114836?logo=discord&amp;label=discord&amp;style=flat-square)](https://discord.gg/xh7j7yF)
[![Subreddit](https://img.shields.io/reddit/subreddit-subscribers/navidrome?logo=reddit&amp;label=/r/navidrome&amp;style=flat-square)](https://www.reddit.com/r/navidrome/)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0-ff69b4.svg?style=flat-square)](CODE_OF_CONDUCT.md)
[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20Navidrome%20Guru-006BFF?style=flat-square)](https://gurubase.io/g/navidrome)

Navidrome is an open source web-based music collection server and streamer. It gives you freedom to listen to your
music collection from any browser or mobile device. It&#039;s like your personal Spotify!


**Note**: The `master` branch may be in an unstable or even broken state during development. 
Please use [releases](https://github.com/navidrome/navidrome/releases) instead of 
the `master` branch in order to get a stable set of binaries.

## [Check out our Live Demo!](https://www.navidrome.org/demo/)

__Any feedback is welcome!__ If you need/want a new feature, find a bug or think of any way to improve Navidrome, 
please file a [GitHub issue](https://github.com/navidrome/navidrome/issues) or join the discussion in our 
[Subreddit](https://www.reddit.com/r/navidrome/). If you want to contribute to the project in any other way 
([ui/backend dev](https://www.navidrome.org/docs/developers/), 
[translations](https://www.navidrome.org/docs/developers/translations/), 
[themes](https://www.navidrome.org/docs/developers/creating-themes)), please join the chat in our 
[Discord server](https://discord.gg/xh7j7yF). 

## Installation

See instructions on the [project&#039;s website](https://www.navidrome.org/docs/installation/)

## Cloud Hosting

[PikaPods](https://www.pikapods.com) has partnered with us to offer you an 
[officially supported, cloud-hosted solution](https://www.navidrome.org/docs/installation/managed/#pikapods). 
A share of the revenue helps fund the development of Navidrome at no additional cost for you.

[![PikaPods](https://www.pikapods.com/static/run-button.svg)](https://www.pikapods.com/pods?run=navidrome)

## Features
 
 - Handles very **large music collections**
 - Streams virtually **any audio format** available
 - Reads and uses all your beautifully curated **metadata**
 - Great support for **compilations** (Various Artists albums) and **box sets** (multi-disc albums)
 - **Multi-user**, each user has their own play counts, playlists, favourites, etc...
 - Very **low resource usage**
 - **Multi-platform**, runs on macOS, Linux and Windows. **Docker** images are also provided
 - Ready to use binaries for all major platforms, including **Raspberry Pi**
 - Automatically **monitors your library** for changes, importing new files and reloading new metadata 
 - **Themeable**, modern and responsive **Web interface** based on [Material UI](https://material-ui.com)
 - **Compatible** with all Subsonic/Madsonic/Airsonic [clients](https://www.navidrome.org/docs/overview/#apps)
 - **Transcoding** on the fly. Can be set per user/player. **Opus encoding is supported**
 - Translated to **various languages**

## Translations

Navidrome uses [POEditor](https://poeditor.com/) for translations, and we are always looking 
for [more contributors](https://www.navidrome.org/docs/developers/translations/)

&lt;a href=&quot;https://poeditor.com/&quot;&gt; 
&lt;img height=&quot;32&quot; src=&quot;https://github.com/user-attachments/assets/c19b1d2b-01e1-4682-a007-12356c42147c&quot;&gt;
&lt;/a&gt;

## Documentation
All documentation can be found in the project&#039;s website: https://www.navidrome.org/docs. 
Here are some useful direct links:

- [Overview](https://www.navidrome.org/docs/overview/)
- [Installation](https://www.navidrome.org/docs/installation/)
  - [Docker](https://www.navidrome.org/docs/installation/docker/)
  - [Binaries](https://www.navidrome.org/docs/installation/pre-built-binaries/)
  - [Build from source](https://www.navidrome.org/docs/installation/build-from-source/)
- [Development](https://www.navidrome.org/docs/developers/)
- [Subsonic API Compatibility](https://www.navidrome.org/docs/developers/subsonic-api/)

## Screenshots

&lt;p align=&quot;left&quot;&gt;
    &lt;img height=&quot;550&quot; src=&quot;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-mobile-login.png&quot;&gt;
    &lt;img height=&quot;550&quot; src=&quot;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-mobile-player.png&quot;&gt;
    &lt;img height=&quot;550&quot; src=&quot;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-mobile-album-view.png&quot;&gt;
    &lt;img width=&quot;550&quot; src=&quot;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-desktop-player.png&quot;&gt;
&lt;/p&gt;
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[XTLS/Xray-core]]></title>
            <link>https://github.com/XTLS/Xray-core</link>
            <guid>https://github.com/XTLS/Xray-core</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:45 GMT</pubDate>
            <description><![CDATA[Xray, Penetrates Everything. Also the best v2ray-core. Where the magic happens. An open platform for various uses.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/XTLS/Xray-core">XTLS/Xray-core</a></h1>
            <p>Xray, Penetrates Everything. Also the best v2ray-core. Where the magic happens. An open platform for various uses.</p>
            <p>Language: Go</p>
            <p>Stars: 32,055</p>
            <p>Forks: 4,646</p>
            <p>Stars today: 51 stars today</p>
            <h2>README</h2><pre># Project X

[Project X](https://github.com/XTLS) originates from XTLS protocol, providing a set of network tools such as [Xray-core](https://github.com/XTLS/Xray-core) and [REALITY](https://github.com/XTLS/REALITY).

[README](https://github.com/XTLS/Xray-core#readme) is open, so feel free to submit your project [here](https://github.com/XTLS/Xray-core/pulls).

## Donation &amp; NFTs

### [Collect a Project X NFT to support the development of Project X!](https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1)

[&lt;img alt=&quot;Project X NFT&quot; width=&quot;150px&quot; src=&quot;https://raw2.seadn.io/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/7fa9ce900fb39b44226348db330e32/8b7fa9ce900fb39b44226348db330e32.svg&quot; /&gt;](https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1)

- **ETH/USDT/USDC: `0xDc3Fe44F0f25D13CACb1C4896CD0D321df3146Ee`**
- **Project X NFT: https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/1**
- **VLESS NFT: https://opensea.io/collection/vless**
- **REALITY NFT: https://opensea.io/item/ethereum/0x5ee362866001613093361eb8569d59c4141b76d1/2**
- **Related links: [VLESS Post-Quantum Encryption](https://github.com/XTLS/Xray-core/pull/5067), [XHTTP: Beyond REALITY](https://github.com/XTLS/Xray-core/discussions/4113), [Announcement of NFTs by Project X](https://github.com/XTLS/Xray-core/discussions/3633)**

## License

[Mozilla Public License Version 2.0](https://github.com/XTLS/Xray-core/blob/main/LICENSE)

## Documentation

[Project X Official Website](https://xtls.github.io)

## Telegram

[Project X](https://t.me/projectXray)

[Project X Channel](https://t.me/projectXtls)

[Project VLESS](https://t.me/projectVless) (–†—É—Å—Å–∫–∏–π)

[Project XHTTP](https://t.me/projectXhttp) (Persian)

## Installation

- Linux Script
  - [XTLS/Xray-install](https://github.com/XTLS/Xray-install) (**Official**)
  - [tempest](https://github.com/team-cloudchaser/tempest) (supports [`systemd`](https://systemd.io) and [OpenRC](https://github.com/OpenRC/openrc); Linux-only)
- Docker
  - [ghcr.io/xtls/xray-core](https://ghcr.io/xtls/xray-core) (**Official**)
  - [teddysun/xray](https://hub.docker.com/r/teddysun/xray)
  - [wulabing/xray_docker](https://github.com/wulabing/xray_docker)
- Web Panel - **WARNING: Please DO NOT USE plain HTTP panels like 3X-UI**, as they are believed to be bribed by Iran GFW for supporting plain HTTP by default and refused to change (https://github.com/XTLS/Xray-core/pull/3884#issuecomment-2439595331), which has already put many users&#039; data security in danger in the past few years. **If you are already using 3X-UI, please switch to the following panels, which are verified to support HTTPS and SSH port forwarding only:**
  - [X-Panel](https://github.com/xeefei/X-Panel)
  - [PasarGuard](https://github.com/PasarGuard/panel)
  - [Remnawave](https://github.com/remnawave/panel)
  - [Marzban](https://github.com/Gozargah/Marzban)
  - [Xray-UI](https://github.com/qist/xray-ui)
  - [Hiddify](https://github.com/hiddify/Hiddify-Manager)
- One Click
  - [Xray-REALITY](https://github.com/zxcvos/Xray-script), [xray-reality](https://github.com/sajjaddg/xray-reality), [reality-ezpz](https://github.com/aleskxyz/reality-ezpz)
  - [Xray_bash_onekey](https://github.com/hello-yunshu/Xray_bash_onekey), [XTool](https://github.com/LordPenguin666/XTool), [VPainLess](https://github.com/vpainless/vpainless)
  - [v2ray-agent](https://github.com/mack-a/v2ray-agent), [Xray_onekey](https://github.com/wulabing/Xray_onekey), [ProxySU](https://github.com/proxysu/ProxySU)
- Magisk
  - [Xray4Magisk](https://github.com/Asterisk4Magisk/Xray4Magisk)
  - [Xray_For_Magisk](https://github.com/E7KMbb/Xray_For_Magisk)
- Homebrew
  - `brew install xray`

## Usage

- Example
  - [VLESS-XTLS-uTLS-REALITY](https://github.com/XTLS/REALITY#readme)
  - [VLESS-TCP-XTLS-Vision](https://github.com/XTLS/Xray-examples/tree/main/VLESS-TCP-XTLS-Vision)
  - [All-in-One-fallbacks-Nginx](https://github.com/XTLS/Xray-examples/tree/main/All-in-One-fallbacks-Nginx)
- Xray-examples
  - [XTLS/Xray-examples](https://github.com/XTLS/Xray-examples)
  - [chika0801/Xray-examples](https://github.com/chika0801/Xray-examples)
  - [lxhao61/integrated-examples](https://github.com/lxhao61/integrated-examples)
- Tutorial
  - [XTLS Vision](https://github.com/chika0801/Xray-install)
  - [REALITY (English)](https://cscot.pages.dev/2023/03/02/Xray-REALITY-tutorial/)
  - [XTLS-Iran-Reality (English)](https://github.com/SasukeFreestyle/XTLS-Iran-Reality)
  - [Xray REALITY with &#039;steal oneself&#039; (English)](https://computerscot.github.io/vless-xtls-utls-reality-steal-oneself.html)
  - [Xray with WireGuard inbound (English)](https://g800.pages.dev/wireguard)

## GUI Clients

- OpenWrt
  - [PassWall](https://github.com/xiaorouji/openwrt-passwall), [PassWall 2](https://github.com/xiaorouji/openwrt-passwall2)
  - [ShadowSocksR Plus+](https://github.com/fw876/helloworld)
  - [luci-app-xray](https://github.com/yichya/luci-app-xray) ([openwrt-xray](https://github.com/yichya/openwrt-xray))
- Asuswrt-Merlin
  - [XRAYUI](https://github.com/DanielLavrushin/asuswrt-merlin-xrayui)
- Windows
  - [v2rayN](https://github.com/2dust/v2rayN)
  - [Furious](https://github.com/LorenEteval/Furious)
  - [Invisible Man - Xray](https://github.com/InvisibleManVPN/InvisibleMan-XRayClient)
  - [AnyPortal](https://github.com/AnyPortal/AnyPortal)
- Android
  - [v2rayNG](https://github.com/2dust/v2rayNG)
  - [X-flutter](https://github.com/XTLS/X-flutter)
  - [SaeedDev94/Xray](https://github.com/SaeedDev94/Xray)
  - [SimpleXray](https://github.com/lhear/SimpleXray)
  - [AnyPortal](https://github.com/AnyPortal/AnyPortal)
- iOS &amp; macOS arm64 &amp; tvOS
  - [Happ](https://apps.apple.com/app/happ-proxy-utility/id6504287215) ([tvOS](https://apps.apple.com/us/app/happ-proxy-utility-for-tv/id6748297274))
  - [Streisand](https://apps.apple.com/app/streisand/id6450534064)
  - [OneXray](https://github.com/OneXray/OneXray)
- macOS arm64 &amp; x64
  - [Happ](https://apps.apple.com/app/happ-proxy-utility/id6504287215)
  - [V2rayU](https://github.com/yanue/V2rayU)
  - [V2RayXS](https://github.com/tzmax/V2RayXS)
  - [Furious](https://github.com/LorenEteval/Furious)
  - [OneXray](https://github.com/OneXray/OneXray)
  - [GoXRay](https://github.com/goxray/desktop)
  - [AnyPortal](https://github.com/AnyPortal/AnyPortal)
- Linux
  - [v2rayA](https://github.com/v2rayA/v2rayA)
  - [Furious](https://github.com/LorenEteval/Furious)
  - [GorzRay](https://github.com/ketetefid/GorzRay)
  - [GoXRay](https://github.com/goxray/desktop)
  - [AnyPortal](https://github.com/AnyPortal/AnyPortal)

## Others that support VLESS, XTLS, REALITY, XUDP, PLUX...

- iOS &amp; macOS arm64 &amp; tvOS
  - [Shadowrocket](https://apps.apple.com/app/shadowrocket/id932747118)
  - [Loon](https://apps.apple.com/us/app/loon/id1373567447)
- Xray Tools
  - [xray-knife](https://github.com/lilendian0x00/xray-knife)
  - [xray-checker](https://github.com/kutovoys/xray-checker)
- Xray Wrapper
  - [XTLS/libXray](https://github.com/XTLS/libXray)
  - [xtls-sdk](https://github.com/remnawave/xtls-sdk)
  - [xtlsapi](https://github.com/hiddify/xtlsapi)
  - [AndroidLibXrayLite](https://github.com/2dust/AndroidLibXrayLite)
  - [Xray-core-python](https://github.com/LorenEteval/Xray-core-python)
  - [xray-api](https://github.com/XVGuardian/xray-api)
- [XrayR](https://github.com/XrayR-project/XrayR)
  - [XrayR-release](https://github.com/XrayR-project/XrayR-release)
  - [XrayR-V2Board](https://github.com/missuo/XrayR-V2Board)
- Cores
  - [Amnezia VPN](https://github.com/amnezia-vpn)
  - [mihomo](https://github.com/MetaCubeX/mihomo)
  - [sing-box](https://github.com/SagerNet/sing-box)

## Contributing

[Code of Conduct](https://github.com/XTLS/Xray-core/blob/main/CODE_OF_CONDUCT.md)

[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/XTLS/Xray-core)

## Credits

- [Xray-core v1.0.0](https://github.com/XTLS/Xray-core/releases/tag/v1.0.0) was forked from [v2fly-core 9a03cc5](https://github.com/v2fly/v2ray-core/commit/9a03cc5c98d04cc28320fcee26dbc236b3291256), and we have made &amp; accumulated a huge number of enhancements over time, check [the release notes for each version](https://github.com/XTLS/Xray-core/releases).
- For third-party projects used in [Xray-core](https://github.com/XTLS/Xray-core), check your local or [the latest go.mod](https://github.com/XTLS/Xray-core/blob/main/go.mod).

## One-line Compilation

### Windows (PowerShell)

```powershell
$env:CGO_ENABLED=0
go build -o xray.exe -trimpath -buildvcs=false -ldflags=&quot;-s -w -buildid=&quot; -v ./main
```

### Linux / macOS

```bash
CGO_ENABLED=0 go build -o xray -trimpath -buildvcs=false -ldflags=&quot;-s -w -buildid=&quot; -v ./main
```

### Reproducible Releases

Make sure that you are using the same Go version, and remember to set the git commit id (7 bytes):

```bash
CGO_ENABLED=0 go build -o xray -trimpath -buildvcs=false -gcflags=&quot;all=-l=4&quot; -ldflags=&quot;-X github.com/xtls/xray-core/core.build=REPLACE -s -w -buildid=&quot; -v ./main
```

If you are compiling a 32-bit MIPS/MIPSLE target, use this command instead:

```bash
CGO_ENABLED=0 go build -o xray -trimpath -buildvcs=false -gcflags=&quot;-l=4&quot; -ldflags=&quot;-X github.com/xtls/xray-core/core.build=REPLACE -s -w -buildid=&quot; -v ./main
```

## Stargazers over time

[![Stargazers over time](https://starchart.cc/XTLS/Xray-core.svg)](https://starchart.cc/XTLS/Xray-core)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[Notifuse/notifuse]]></title>
            <link>https://github.com/Notifuse/notifuse</link>
            <guid>https://github.com/Notifuse/notifuse</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:44 GMT</pubDate>
            <description><![CDATA[Notifuse is an open-source & modern emailing platform]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Notifuse/notifuse">Notifuse/notifuse</a></h1>
            <p>Notifuse is an open-source & modern emailing platform</p>
            <p>Language: Go</p>
            <p>Stars: 1,021</p>
            <p>Forks: 80</p>
            <p>Stars today: 132 stars today</p>
            <h2>README</h2><pre># Notifuse

[![Go Report Card](https://img.shields.io/badge/go%20report-A+-brightgreen.svg?style=flat)](https://goreportcard.com/report/github.com/Notifuse/notifuse)
[![Go](https://github.com/Notifuse/notifuse/actions/workflows/go.yml/badge.svg)](https://github.com/Notifuse/notifuse/actions/workflows/go.yml)
[![codecov](https://codecov.io/gh/Notifuse/notifuse/graph/badge.svg?token=VZ0HBEM9OZ)](https://codecov.io/gh/Notifuse/notifuse)

**[üéØ Try the Live Demo](https://demo.notifuse.com/signin?email=demo@notifuse.com)**

**The open-source alternative to Mailchimp, Brevo, Mailjet, Listmonk, Mailerlite, and Klaviyo, Loop.so, etc.**

Notifuse is a modern, self-hosted emailing platform that allows you to send newsletters and transactional emails at a fraction of the cost. Built with Go and React, it provides enterprise-grade features with the flexibility of open-source software.

&lt;img src=&quot;https://www.notifuse.com/_astro/email_editor.CGyLoCOD.png&quot; alt=&quot;Email Editor&quot;&gt;

## üöÄ Key Features

### üìß Email Marketing

- **Visual Email Builder**: Drag-and-drop editor with MJML components and real-time preview
- **Campaign Management**: Create, schedule, and send targeted email campaigns
- **A/B Testing**: Optimize campaigns with built-in testing for subject lines, content, and send times
- **List Management**: Advanced subscriber segmentation and list organization
- **Contact Profiles**: Rich contact management with custom fields and detailed profiles

### üîß Developer-Friendly

- **Easy Setup**: Interactive setup wizard for quick deployment and configuration
- **Transactional API**: Powerful REST API for automated email delivery
- **Webhook Integration**: Real-time event notifications and integrations
- **Liquid Templating**: Dynamic content with variables like `{{ contact.first_name }}`
- **Multi-Provider Support**: Connect with Amazon SES, Mailgun, Postmark, Mailjet, SparkPost, and SMTP

### üìä Analytics &amp; Insights

- **Open &amp; Click Tracking**: Detailed engagement metrics and campaign performance
- **Real-time Analytics**: Monitor delivery rates, opens, clicks, and conversions
- **Campaign Reports**: Comprehensive reporting and analytics dashboard

### üé® Advanced Features

- **S3 File Manager**: Integrated file management with CDN delivery
- **Notification Center**: Centralized notification system for your applications
- **Responsive Templates**: Mobile-optimized email templates
- **Custom Fields**: Flexible contact data management
- **Workspace Management**: Multi-tenant support for teams and agencies

## üèóÔ∏è Architecture

Notifuse follows clean architecture principles with clear separation of concerns:

### Backend (Go)

- **Domain Layer**: Core business logic and entities (`internal/domain/`)
- **Service Layer**: Business logic implementation (`internal/service/`)
- **Repository Layer**: Data access and storage (`internal/repository/`)
- **HTTP Layer**: API handlers and middleware (`internal/http/`)

### Frontend (React)

- **Console**: Admin interface built with React, Ant Design, and TypeScript (`console/`)
- **Notification Center**: Embeddable widget for customer notifications (`notification_center/`)

### Database

- **PostgreSQL**: Primary data storage with Squirrel query builder

## üìÅ Project Structure

```
‚îú‚îÄ‚îÄ cmd/                    # Application entry points
‚îú‚îÄ‚îÄ internal/               # Private application code
‚îÇ   ‚îú‚îÄ‚îÄ domain/            # Business entities and logic
‚îÇ   ‚îú‚îÄ‚îÄ service/           # Business logic implementation
‚îÇ   ‚îú‚îÄ‚îÄ repository/        # Data access layer
‚îÇ   ‚îú‚îÄ‚îÄ http/              # HTTP handlers and middleware
‚îÇ   ‚îî‚îÄ‚îÄ database/          # Database configuration
‚îú‚îÄ‚îÄ console/               # React-based admin interface
‚îú‚îÄ‚îÄ notification_center/   # Embeddable notification widget
‚îú‚îÄ‚îÄ pkg/                   # Public packages
‚îî‚îÄ‚îÄ config/                # Configuration files
```

## üöÄ Getting Started

### One-click deployment

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/deploy/aBzOMu?referralCode=73Ps3m)

### Quick Start with Docker Compose

1. **Clone the repository**:

   ```bash
   git clone https://github.com/Notifuse/notifuse.git
   cd notifuse
   ```

2. **Configure required environment variables**:

   ```bash
   cp env.example .env
   # Edit .env with database credentials and SECRET_KEY
   ```

   **Minimum required variables**: `DB_HOST`, `DB_PORT`, `DB_USER`, `DB_PASSWORD`, `SECRET_KEY`

3. **Start the services**:

   ```bash
   docker-compose up -d
   ```

4. **Access the application and complete setup**:
   - Open http://localhost:8080
   - Follow the interactive **Setup Wizard** to configure:
     - Root administrator email
     - API endpoint
     - SMTP settings
     - PASETO keys (automatically generated)
   - Save the generated keys securely!

**Alternative**: You can skip the setup wizard by pre-configuring all environment variables in your `.env` file. Generate PASETO keys at [paseto.notifuse.com](https://paseto.notifuse.com) or use `make keygen`.

### Environment Configuration

**‚ö†Ô∏è Important**: The included `docker-compose.yml` is designed for **testing and development only**. For production deployments:

- **Use a separate PostgreSQL database** (managed service recommended)
- **Configure external storage** for file uploads
- **Set up proper SSL/TLS termination**
- **Use a reverse proxy** (nginx, Traefik, etc.)

#### Development Setup

The docker-compose includes a PostgreSQL container for quick testing. Simply run `docker-compose up -d` to get started, then complete the setup wizard in your browser.

#### Production Setup

**Required Environment Variables:**

- `DB_HOST`, `DB_PORT`, `DB_USER`, `DB_PASSWORD` - External PostgreSQL database
- `SECRET_KEY` - Secret key for encrypting sensitive data (or `PASETO_PRIVATE_KEY` as fallback)
- `DB_SSLMODE=require` - For secure database connections

**Optional (can be configured via Setup Wizard or environment variables):**

- `ROOT_EMAIL` - Root administrator email
- `API_ENDPOINT` - Public API endpoint URL
- `PASETO_PRIVATE_KEY`, `PASETO_PUBLIC_KEY` - Authentication keys (auto-generated in wizard)
- `SMTP_HOST`, `SMTP_PORT`, `SMTP_USERNAME`, `SMTP_PASSWORD` - Email provider settings
- `SMTP_FROM_EMAIL`, `SMTP_FROM_NAME` - From address and name

**Note:** Environment variables always take precedence over database settings configured via the setup wizard.

For detailed installation instructions, configuration options, and setup guides, visit **[docs.notifuse.com](https://docs.notifuse.com)**.

## üìö Documentation

- **[Complete Documentation](https://docs.notifuse.com)** - Comprehensive guides and tutorials

## ü§ù Contributing

We welcome contributions!

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## üìÑ License

Notifuse is released under the [GNU Affero General Public License v3.0](LICENSE).

## üÜò Support

- **Documentation**: [docs.notifuse.com](https://docs.notifuse.com)
- **Email Support**: [hello@notifuse.com](mailto:hello@notifuse.com)
- **GitHub Issues**: [Report bugs or request features](https://github.com/Notifuse/notifuse/issues)

## üåü Why Choose Notifuse?

- **üí∞ Cost-Effective**: Self-hosted solution with no per-email pricing
- **üîí Privacy-First**: Your data stays on your infrastructure
- **üõ†Ô∏è Customizable**: Open-source with extensive customization options
- **üìà Scalable**: Built to handle millions of emails
- **üöÄ Modern**: Built with modern technologies and best practices
- **üîß Developer-Friendly**: Comprehensive API and webhook support

---

**Ready to get started?** [Try the live demo](https://demo.notifuse.com/signin?email=demo@notifuse.com) or [deploy your own instance](https://docs.notifuse.com) in minutes.
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[fish2018/pansou]]></title>
            <link>https://github.com/fish2018/pansou</link>
            <guid>https://github.com/fish2018/pansou</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:43 GMT</pubDate>
            <description><![CDATA[PanSouÊòØ‰∏ÄÊ¨æÈ´òÊÄßËÉΩÁöÑÁΩëÁõòËµÑÊ∫êÊêúÁ¥¢APIÊúçÂä°ÔºåÊîØÊåÅTGÈ¢ëÈÅìÂíåÊèí‰ª∂ÊêúÁ¥¢„ÄÇÁ≥ªÁªüËÆæËÆ°‰ª•ÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄß‰∏∫Ê†∏ÂøÉÔºåÊîØÊåÅÂ§öÈ¢ëÈÅìÂ§öÊèí‰ª∂Âπ∂ÂèëÊêúÁ¥¢„ÄÅÁªìÊûúÊô∫ËÉΩÊéíÂ∫èÂíåÁΩëÁõòÁ±ªÂûãÂàÜÁ±ª„ÄÇdockerÈõÜÊàêÂâçÂêéÁ´ØÔºå‰∏ÄÈîÆÂêØÂä®ÔºåÂºÄÁÆ±Âç≥Áî®„ÄÇ https://so.252035.xyz/]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/fish2018/pansou">fish2018/pansou</a></h1>
            <p>PanSouÊòØ‰∏ÄÊ¨æÈ´òÊÄßËÉΩÁöÑÁΩëÁõòËµÑÊ∫êÊêúÁ¥¢APIÊúçÂä°ÔºåÊîØÊåÅTGÈ¢ëÈÅìÂíåÊèí‰ª∂ÊêúÁ¥¢„ÄÇÁ≥ªÁªüËÆæËÆ°‰ª•ÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄß‰∏∫Ê†∏ÂøÉÔºåÊîØÊåÅÂ§öÈ¢ëÈÅìÂ§öÊèí‰ª∂Âπ∂ÂèëÊêúÁ¥¢„ÄÅÁªìÊûúÊô∫ËÉΩÊéíÂ∫èÂíåÁΩëÁõòÁ±ªÂûãÂàÜÁ±ª„ÄÇdockerÈõÜÊàêÂâçÂêéÁ´ØÔºå‰∏ÄÈîÆÂêØÂä®ÔºåÂºÄÁÆ±Âç≥Áî®„ÄÇ https://so.252035.xyz/</p>
            <p>Language: Go</p>
            <p>Stars: 7,963</p>
            <p>Forks: 1,818</p>
            <p>Stars today: 47 stars today</p>
            <h2>README</h2><pre># PanSou ÁΩëÁõòÊêúÁ¥¢API

PanSouÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩÁöÑÁΩëÁõòËµÑÊ∫êÊêúÁ¥¢APIÊúçÂä°ÔºåÊîØÊåÅTGÊêúÁ¥¢ÂíåËá™ÂÆö‰πâÊèí‰ª∂ÊêúÁ¥¢„ÄÇÁ≥ªÁªüËÆæËÆ°‰ª•ÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄß‰∏∫Ê†∏ÂøÉÔºåÊîØÊåÅÂπ∂ÂèëÊêúÁ¥¢„ÄÅÁªìÊûúÊô∫ËÉΩÊéíÂ∫èÂíåÁΩëÁõòÁ±ªÂûãÂàÜÁ±ª„ÄÇ

[//]: # (MCPÊúçÂä°ÊñáÊ°£: [MCP-SERVICE.md]&amp;#40;docs/MCP-SERVICE.md&amp;#41;)


## ÁâπÊÄßÔºà[ËØ¶ËßÅÁ≥ªÁªüËÆæËÆ°ÊñáÊ°£](docs/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.md)Ôºâ

- **È´òÊÄßËÉΩÊêúÁ¥¢**ÔºöÂπ∂ÂèëÊâßË°åÂ§ö‰∏™TGÈ¢ëÈÅìÂèäÂºÇÊ≠•Êèí‰ª∂ÊêúÁ¥¢ÔºåÊòæËëóÊèêÂçáÊêúÁ¥¢ÈÄüÂ∫¶ÔºõÂ∑•‰ΩúÊ±†ËÆæËÆ°ÔºåÈ´òÊïàÁÆ°ÁêÜÂπ∂Âèë‰ªªÂä°
- **ÁΩëÁõòÁ±ªÂûãÂàÜÁ±ª**ÔºöËá™Âä®ËØÜÂà´Â§öÁßçÁΩëÁõòÈìæÊé•ÔºåÊåâÁ±ªÂûãÂΩíÁ±ªÂ±ïÁ§∫
- **Êô∫ËÉΩÊéíÂ∫è**ÔºöÂü∫‰∫éÊèí‰ª∂Á≠âÁ∫ß„ÄÅÊó∂Èó¥Êñ∞È≤úÂ∫¶Âíå‰ºòÂÖàÂÖ≥ÈîÆËØçÁöÑÂ§öÁª¥Â∫¶ÁªºÂêàÊéíÂ∫èÁÆóÊ≥ï
- **ÂºÇÊ≠•Êèí‰ª∂Á≥ªÁªü**ÔºöÊîØÊåÅÈÄöËøáÊèí‰ª∂Êâ©Â±ïÊêúÁ¥¢Êù•Ê∫êÔºåÊîØÊåÅ&quot;Â∞ΩÂø´ÂìçÂ∫îÔºåÊåÅÁª≠Â§ÑÁêÜ&quot;ÁöÑÂºÇÊ≠•ÊêúÁ¥¢Ê®°ÂºèÔºåËß£ÂÜ≥‰∫ÜÊüê‰∫õÊêúÁ¥¢Ê∫êÂìçÂ∫îÊó∂Èó¥ÈïøÁöÑÈóÆÈ¢ò„ÄÇËØ¶ÊÉÖÂèÇËÄÉ[**Êèí‰ª∂ÂºÄÂèëÊåáÂçó**](docs/Êèí‰ª∂ÂºÄÂèëÊåáÂçó.md)
- **‰∫åÁ∫ßÁºìÂ≠ò**ÔºöÂàÜÁâáÂÜÖÂ≠ò+ÂàÜÁâáÁ£ÅÁõòÁºìÂ≠òÊú∫Âà∂ÔºåÂ§ßÂπÖÊèêÂçáÈáçÂ§çÊü•ËØ¢ÈÄüÂ∫¶ÂíåÂπ∂ÂèëÊÄßËÉΩ  

## MCP ÊúçÂä°

PanSou ËøòÊèê‰æõ‰∫Ü‰∏Ä‰∏™Âü∫‰∫é [Model Context Protocol (MCP)](https://modelcontextprotocol.io) ÁöÑÊúçÂä°ÔºåÂèØ‰ª•Â∞ÜÊêúÁ¥¢ÂäüËÉΩÈõÜÊàêÂà∞ Claude Desktop Á≠âÊîØÊåÅ MCP ÁöÑÂ∫îÁî®‰∏≠„ÄÇËØ¶ÊÉÖËØ∑ÂèÇÈòÖ [MCP ÊúçÂä°ÊñáÊ°£](docs/MCP-SERVICE.md)„ÄÇ

## ÊîØÊåÅÁöÑÁΩëÁõòÁ±ªÂûã

ÁôæÂ∫¶ÁΩëÁõò (`baidu`)„ÄÅÈòøÈáå‰∫ëÁõò (`aliyun`)„ÄÅÂ§∏ÂÖãÁΩëÁõò (`quark`)„ÄÅÂ§©Áøº‰∫ëÁõò (`tianyi`)„ÄÅUCÁΩëÁõò (`uc`)„ÄÅÁßªÂä®‰∫ëÁõò (`mobile`)„ÄÅ115ÁΩëÁõò (`115`)„ÄÅPikPak (`pikpak`)„ÄÅËøÖÈõ∑ÁΩëÁõò (`xunlei`)„ÄÅ123ÁΩëÁõò (`123`)„ÄÅÁ£ÅÂäõÈìæÊé• (`magnet`)„ÄÅÁîµÈ©¥ÈìæÊé• (`ed2k`)„ÄÅÂÖ∂‰ªñ (`others`)

## Âø´ÈÄüÂºÄÂßã

Âú® Github ‰∏äÂÖà[![Fork me on GitHub](https://raw.githubusercontent.com/fishforks/fish2018/refs/heads/main/forkme.png)](https://github.com/fish2018/pansou/fork)
Êú¨È°πÁõÆÔºåÂπ∂ÁÇπ‰∏ä Star !!!

### ‰ΩøÁî®DockerÈÉ®ÁΩ≤
[Â∏∏ËßÅÈóÆÈ¢òÊÄªÁªì](https://github.com/fish2018/pansou/issues/46)  

[TGËµÑÊ∫êÈ¢ëÈÅìÂàóË°®](https://github.com/fish2018/pansou/issues/4)
&lt;details&gt;
&lt;summary&gt;Êèí‰ª∂ÂàóË°®ÔºàËØ∑Âä°ÂøÖÊåâÈúÄÂä†ËΩΩÔºâ&lt;/summary&gt;
&lt;pre&gt;
export ENABLED_PLUGINS=hunhepan,jikepan,panwiki,pansearch,panta,qupansou,
susu,thepiratebay,wanou,xuexizhinan,panyq,zhizhen,labi,muou,ouge,shandian,
duoduo,huban,cyg,erxiao,miaoso,fox4k,pianku,clmao,wuji,cldi,xiaozhang,
libvio,leijing,xb6v,xys,ddys,hdmoli,yuhuage,u3c3,javdb,clxiong,jutoushe,
sdso,xiaoji,xdyh,haisou,bixin,djgou,nyaa,xinjuc,aikanzy,qupanshe,xdpan,
discourse,yunsou
&lt;/pre&gt;
&lt;/details&gt;

#### **1„ÄÅÂâçÂêéÁ´ØÈõÜÊàêÁâà**

##### Áõ¥Êé•‰ΩøÁî®DockerÂëΩ‰ª§

‰∏ÄÈîÆÂêØÂä®ÔºåÂºÄÁÆ±Âç≥Áî®

```
docker run -d --name pansou -p 80:80 -e ENABLED_PLUGINS=&quot;labi,zhizhen,shandian,duoduo,muou,wanou&quot; ghcr.io/fish2018/pansou-web
```

##### ‰ΩøÁî®Docker ComposeÔºàÊé®ËçêÔºâ
```
# ‰∏ãËΩΩÈÖçÁΩÆÊñá‰ª∂
curl -o docker-compose.yml https://raw.githubusercontent.com/fish2018/pansou-web/refs/heads/main/docker-compose.yml

# ÂêØÂä®ÊúçÂä°
docker-compose up -d

# Êü•ÁúãÊó•Âøó
docker-compose logs -f
```

#### **2„ÄÅÁ∫ØÂêéÁ´ØAPIÁâà**

##### Áõ¥Êé•‰ΩøÁî®DockerÂëΩ‰ª§

```bash
docker run -d --name pansou -p 8888:8888 -v pansou-cache:/app/cache -e CHANNELS=&quot;tgsearchers3,xxx&quot; -e ENABLED_PLUGINS=&quot;labi,zhizhen,shandian,duoduo,muou,wanou&quot; ghcr.io/fish2018/pansou:latest
```

##### ‰ΩøÁî®Docker ComposeÔºàÊé®ËçêÔºâ

```bash
# ‰∏ãËΩΩÈÖçÁΩÆÊñá‰ª∂
curl -o docker-compose.yml  https://raw.githubusercontent.com/fish2018/pansou/refs/heads/main/docker-compose.yml

# ÂêØÂä®ÊúçÂä°
docker-compose up -d

# ËÆøÈóÆÊúçÂä°
http://localhost:8888
```

### ‰ªéÊ∫êÁ†ÅÂÆâË£Ö

#### ÁéØÂ¢ÉË¶ÅÊ±Ç

- Go 1.18+
- ÂèØÈÄâÔºöSOCKS5‰ª£ÁêÜÔºàÁî®‰∫éËÆøÈóÆÂèóÈôêÂú∞Âå∫ÁöÑTelegramÁ´ôÁÇπÔºâ

1. ÂÖãÈöÜ‰ªìÂ∫ì

```bash
git clone https://github.com/fish2018/pansou.git
cd pansou
```

2. ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáèÔºàÂèØÈÄâÔºâ

#### Âü∫Á°ÄÈÖçÁΩÆ

| ÁéØÂ¢ÉÂèòÈáè | ÊèèËø∞ | ÈªòËÆ§ÂÄº | ËØ¥Êòé |
|----------|------|--------|------|
| **PORT** | ÊúçÂä°Á´ØÂè£ | `8888` | ‰øÆÊîπÊúçÂä°ÁõëÂê¨Á´ØÂè£ |
| **PROXY** | SOCKS5‰ª£ÁêÜ | Êó† | Â¶ÇÔºö`socks5://127.0.0.1:1080` |
| **CHANNELS** | ÈªòËÆ§ÊêúÁ¥¢ÁöÑTGÈ¢ëÈÅì | `tgsearchers3` | Â§ö‰∏™È¢ëÈÅìÁî®ÈÄóÂè∑ÂàÜÈöî |
| **ENABLED_PLUGINS** | ÊåáÂÆöÂêØÁî®Êèí‰ª∂ÔºåÂ§ö‰∏™Êèí‰ª∂Áî®ÈÄóÂè∑ÂàÜÈöî | Êó† | ÂøÖÈ°ªÊòæÂºèÊåáÂÆö |

#### ËÆ§ËØÅÈÖçÁΩÆÔºàÂèØÈÄâÔºâ

PanSouÊîØÊåÅÂèØÈÄâÁöÑÂÆâÂÖ®ËÆ§ËØÅÂäüËÉΩÔºåÈªòËÆ§ÂÖ≥Èó≠„ÄÇÂºÄÂêØÂêéÔºåÊâÄÊúâAPIÊé•Âè£ÔºàÈô§ÁôªÂΩïÊé•Âè£Â§ñÔºâÈÉΩÈúÄË¶ÅÊèê‰æõÊúâÊïàÁöÑJWT Token„ÄÇËØ¶ËßÅ[ËÆ§ËØÅÁ≥ªÁªüËÆæËÆ°ÊñáÊ°£](docs/ËÆ§ËØÅÁ≥ªÁªüËÆæËÆ°.md)„ÄÇ

| ÁéØÂ¢ÉÂèòÈáè | ÊèèËø∞ | ÈªòËÆ§ÂÄº | ËØ¥Êòé |
|----------|------|--------|------|
| **AUTH_ENABLED** | ÊòØÂê¶ÂêØÁî®ËÆ§ËØÅ | `false` | ËÆæÁΩÆ‰∏∫`true`ÂêØÁî®ËÆ§ËØÅÂäüËÉΩ |
| **AUTH_USERS** | Áî®Êà∑Ë¥¶Âè∑ÈÖçÁΩÆ | Êó† | Ê†ºÂºèÔºö`user1:pass1,user2:pass2` |
| **AUTH_TOKEN_EXPIRY** | TokenÊúâÊïàÊúüÔºàÂ∞èÊó∂Ôºâ | `24` | JWT TokenÁöÑÊúâÊïàÊó∂Èïø |
| **AUTH_JWT_SECRET** | JWTÁ≠æÂêçÂØÜÈí• | Ëá™Âä®ÁîüÊàê | Áî®‰∫éÁ≠æÂêçTokenÔºåÂª∫ËÆÆÊâãÂä®ËÆæÁΩÆ |

**ËÆ§ËØÅÈÖçÁΩÆÁ§∫‰æãÔºö**

```bash
# ÂêØÁî®ËÆ§ËØÅÂπ∂ÈÖçÁΩÆÂçï‰∏™Áî®Êà∑
docker run -d --name pansou -p 8888:8888 \
  -e AUTH_ENABLED=true \
  -e AUTH_USERS=admin:admin123 \
  -e AUTH_TOKEN_EXPIRY=24 \
  ghcr.io/fish2018/pansou:latest

# ÈÖçÁΩÆÂ§ö‰∏™Áî®Êà∑
docker run -d --name pansou -p 8888:8888 \
  -e AUTH_ENABLED=true \
  -e AUTH_USERS=admin:pass123,user1:pass456,user2:pass789 \
  ghcr.io/fish2018/pansou:latest
```

**ËÆ§ËØÅAPIÊé•Âè£Ôºö**

- `POST /api/auth/login` - Áî®Êà∑ÁôªÂΩïÔºåËé∑ÂèñToken
- `POST /api/auth/verify` - È™åËØÅTokenÊúâÊïàÊÄß
- `POST /api/auth/logout` - ÈÄÄÂá∫ÁôªÂΩïÔºàÂÆ¢Êà∑Á´ØÂà†Èô§TokenÔºâ

**‰ΩøÁî®TokenË∞ÉÁî®APIÔºö**

```bash
# 1. ÁôªÂΩïËé∑ÂèñToken
curl -X POST http://localhost:8888/api/auth/login \
  -H &quot;Content-Type: application/json&quot; \
  -d &#039;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin123&quot;}&#039;

# ÂìçÂ∫îÔºö{&quot;token&quot;:&quot;eyJhbGc...&quot;,&quot;expires_at&quot;:1234567890,&quot;username&quot;:&quot;admin&quot;}

# 2. ‰ΩøÁî®TokenË∞ÉÁî®ÊêúÁ¥¢API
curl -X POST http://localhost:8888/api/search \
  -H &quot;Authorization: Bearer eyJhbGc...&quot; \
  -H &quot;Content-Type: application/json&quot; \
  -d &#039;{&quot;kw&quot;:&quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&quot;}&#039;
```

#### È´òÁ∫ßÈÖçÁΩÆÔºàÈªòËÆ§ÂÄºÂç≥ÂèØÔºâ

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÂ±ïÂºÄÈ´òÁ∫ßÈÖçÁΩÆÈÄâÈ°πÔºàÈÄöÂ∏∏‰∏çÈúÄË¶Å‰øÆÊîπÔºâ&lt;/summary&gt;

| ÁéØÂ¢ÉÂèòÈáè | ÊèèËø∞ | ÈªòËÆ§ÂÄº |
|----------|------|--------|
| CONCURRENCY | Âπ∂ÂèëÊêúÁ¥¢Êï∞ | Ëá™Âä®ËÆ°ÁÆó |
| CACHE_TTL | ÁºìÂ≠òÊúâÊïàÊúüÔºàÂàÜÈíüÔºâ | `60` |
| CACHE_MAX_SIZE | ÊúÄÂ§ßÁºìÂ≠òÂ§ßÂ∞è(MB) | `100` |
| PLUGIN_TIMEOUT | Êèí‰ª∂Ë∂ÖÊó∂Êó∂Èó¥(Áßí) | `30` |
| ASYNC_RESPONSE_TIMEOUT | Âø´ÈÄüÂìçÂ∫îË∂ÖÊó∂(Áßí) | `4` |
| ASYNC_LOG_ENABLED | ÂºÇÊ≠•Êèí‰ª∂ËØ¶ÁªÜÊó•Âøó | `true` | 
| CACHE_PATH | ÁºìÂ≠òÊñá‰ª∂Ë∑ØÂæÑ | `./cache` |
| SHARD_COUNT | ÁºìÂ≠òÂàÜÁâáÊï∞Èáè | `8` |
| CACHE_WRITE_STRATEGY | ÁºìÂ≠òÂÜôÂÖ•Á≠ñÁï•(immediate/hybrid) | `hybrid` |
| ENABLE_COMPRESSION | ÊòØÂê¶ÂêØÁî®ÂéãÁº© | `false` |
| MIN_SIZE_TO_COMPRESS | ÊúÄÂ∞èÂéãÁº©ÈòàÂÄº(Â≠óËäÇ) | `1024` |
| GC_PERCENT | Go GCËß¶ÂèëÁôæÂàÜÊØî | `50` |
| ASYNC_MAX_BACKGROUND_WORKERS | ÊúÄÂ§ßÂêéÂè∞Â∑•‰ΩúËÄÖÊï∞Èáè | CPUÊ†∏ÂøÉÊï∞√ó5 |
| ASYNC_MAX_BACKGROUND_TASKS | ÊúÄÂ§ßÂêéÂè∞‰ªªÂä°Êï∞Èáè | Â∑•‰ΩúËÄÖÊï∞√ó5 |
| ASYNC_CACHE_TTL_HOURS | ÂºÇÊ≠•ÁºìÂ≠òÊúâÊïàÊúü(Â∞èÊó∂) | `1` |
| ASYNC_PLUGIN_ENABLED | ÂºÇÊ≠•Êèí‰ª∂ÊòØÂê¶ÂêØÁî® | `true` |
| HTTP_READ_TIMEOUT | HTTPËØªÂèñË∂ÖÊó∂(Áßí) | Ëá™Âä®ËÆ°ÁÆó |
| HTTP_WRITE_TIMEOUT | HTTPÂÜôÂÖ•Ë∂ÖÊó∂(Áßí) | Ëá™Âä®ËÆ°ÁÆó |
| HTTP_IDLE_TIMEOUT | HTTPÁ©∫Èó≤Ë∂ÖÊó∂(Áßí) | `120` |
| HTTP_MAX_CONNS | HTTPÊúÄÂ§ßËøûÊé•Êï∞ | Ëá™Âä®ËÆ°ÁÆó |

&lt;/details&gt;

3. ÊûÑÂª∫

```linux
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=&quot;-s -w -extldflags &#039;-static&#039;&quot; -o pansou .
```

4. ËøêË°å

```bash
./pansou
```

### ÂÖ∂‰ªñÈÖçÁΩÆÂèÇËÄÉ

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÂ±ïÂºÄ supervisor ÈÖçÁΩÆÂèÇËÄÉ&lt;/summary&gt;

```
[program:pansou]
environment=PORT=8888,CHANNELS=&quot;tgsearchers3,Aliyun_4K_Movies,bdbdndn11,yunpanx,bsbdbfjfjff,yp123pan,sbsbsnsqq,yunpanxunlei,tianyifc,BaiduCloudDisk,txtyzy,peccxinpd,gotopan,PanjClub,kkxlzy,baicaoZY,MCPH01,bdwpzhpd,ysxb48,jdjdn1111,yggpan,MCPH086,zaihuayun,Q66Share,Oscar_4Kmovies,ucwpzy,shareAliyun,alyp_1,dianyingshare,Quark_Movies,XiangxiuNBB,ydypzyfx,ucquark,xx123pan,yingshifenxiang123,zyfb123,tyypzhpd,tianyirigeng,cloudtianyi,hdhhd21,Lsp115,oneonefivewpfx,qixingzhenren,taoxgzy,Channel_Shares_115,tyysypzypd,vip115hot,wp123zy,yunpan139,yunpan189,yunpanuc,yydf_hzl,leoziyuan,pikpakpan,Q_dongman,yoyokuakeduanju&quot;,ENABLED_PLUGINS=&quot;labi,zhizhen,shandian,duoduo,muou&quot;
command=/home/work/pansou/pansou
directory=/home/work/pansou
autostart=true
autorestart=true
startsecs=5
startretries=3
exitcodes=0
stopwaitsecs=10
stopasgroup=true
killasgroup=true
```

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÂ±ïÂºÄ nginx ÈÖçÁΩÆÂèÇËÄÉ&lt;/summary&gt;

```
server {
    listen 80;
    server_name pansou.252035.xyz;

    # Â∞Ü HTTP ÈáçÂÆöÂêëÂà∞ HTTPS
    return 301 https://$host$request_uri;
}

limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;

server {
    listen 443 ssl http2;
    server_name pansou.252035.xyz;

    access_log /home/work/logs/pansou.log;

    # ËØÅ‰π¶ÂíåÂØÜÈí•Ë∑ØÂæÑ
    ssl_certificate /etc/letsencrypt/live/252035.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/252035.xyz/privkey.pem;

    # Â¢ûÂº∫ SSL ÂÆâÂÖ®ÊÄß
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
    ssl_prefer_server_ciphers on;

    # ÂêéÁ´Ø‰ª£ÁêÜÔºåÂ∫îÁî®ÈôêÊµÅ
    location / {
        # Â∫îÁî®ÈôêÊµÅËßÑÂàô
        limit_req zone=api_limit burst=10 nodelay;
        # ÂΩìË∂ÖËøáÈôêÂà∂Êó∂ËøîÂõû 429 Áä∂ÊÄÅÁ†Å
        limit_req_status 429;

        proxy_pass http://127.0.0.1:8888;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

&lt;/details&gt;

## APIÊñáÊ°£

### ËÆ§ËØÅËØ¥Êòé

ÂΩìÂêØÁî®ËÆ§ËØÅÂäüËÉΩÔºà`AUTH_ENABLED=true`ÔºâÊó∂ÔºåÈô§ÁôªÂΩïÂíåÂÅ•Â∫∑Ê£ÄÊµãÊé•Âè£Â§ñÁöÑÊâÄÊúâAPIÊé•Âè£ÈÉΩÈúÄË¶ÅÊèê‰æõÊúâÊïàÁöÑJWT Token„ÄÇ

**ËØ∑Ê±ÇÂ§¥Ê†ºÂºè**Ôºö
```
Authorization: Bearer &lt;your-jwt-token&gt;
```

**Ëé∑ÂèñToken**Ôºö

1. Ë∞ÉÁî®ÁôªÂΩïÊé•Âè£Ëé∑ÂèñTokenÔºàËØ¶ËßÅ‰∏ãÊñπ[ËÆ§ËØÅAPI](#ËÆ§ËØÅAPI)Ôºâ
2. Âú®ÂêéÁª≠ÊâÄÊúâAPIËØ∑Ê±ÇÁöÑHeader‰∏≠Ê∑ªÂä†`Authorization: Bearer &lt;token&gt;`
3. TokenËøáÊúüÂêéÈúÄË¶ÅÈáçÊñ∞ÁôªÂΩïËé∑ÂèñÊñ∞Token

**Á§∫‰æã**Ôºö
```bash
# Êú™ÂêØÁî®ËÆ§ËØÅÊó∂
curl -X POST http://localhost:8888/api/search \
  -H &quot;Content-Type: application/json&quot; \
  -d &#039;{&quot;kw&quot;:&quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&quot;}&#039;

# ÂêØÁî®ËÆ§ËØÅÊó∂
curl -X POST http://localhost:8888/api/search \
  -H &quot;Content-Type: application/json&quot; \
  -H &quot;Authorization: Bearer eyJhbGc...&quot; \
  -d &#039;{&quot;kw&quot;:&quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&quot;}&#039;
```

### ËÆ§ËØÅAPI

#### Áî®Êà∑ÁôªÂΩï

Ëé∑ÂèñJWT TokenÁî®‰∫éÂêéÁª≠APIË∞ÉÁî®„ÄÇ

**Êé•Âè£Âú∞ÂùÄ**Ôºö`/api/auth/login`  
**ËØ∑Ê±ÇÊñπÊ≥ï**Ôºö`POST`  
**Content-Type**Ôºö`application/json`  
**ÊòØÂê¶ÈúÄË¶ÅËÆ§ËØÅ**ÔºöÂê¶

**ËØ∑Ê±ÇÂèÇÊï∞**Ôºö

| ÂèÇÊï∞Âêç | Á±ªÂûã | ÂøÖÂ°´ | ÊèèËø∞ |
|--------|------|------|------|
| username | string | ÊòØ | Áî®Êà∑Âêç |
| password | string | ÊòØ | ÂØÜÁ†Å |

**ËØ∑Ê±ÇÁ§∫‰æã**Ôºö
```bash
curl -X POST http://localhost:8888/api/auth/login \
  -H &quot;Content-Type: application/json&quot; \
  -d &#039;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin123&quot;}&#039;
```

**ÊàêÂäüÂìçÂ∫î**Ôºö
```json
{
  &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;,
  &quot;expires_at&quot;: 1234567890,
  &quot;username&quot;: &quot;admin&quot;
}
```

**ÈîôËØØÂìçÂ∫î**Ôºö
```json
{
  &quot;error&quot;: &quot;Áî®Êà∑ÂêçÊàñÂØÜÁ†ÅÈîôËØØ&quot;
}
```

#### È™åËØÅToken

È™åËØÅÂΩìÂâçTokenÊòØÂê¶ÊúâÊïà„ÄÇ

**Êé•Âè£Âú∞ÂùÄ**Ôºö`/api/auth/verify`  
**ËØ∑Ê±ÇÊñπÊ≥ï**Ôºö`POST`  
**ÊòØÂê¶ÈúÄË¶ÅËÆ§ËØÅ**ÔºöÊòØ

**ËØ∑Ê±ÇÁ§∫‰æã**Ôºö
```bash
curl -X POST http://localhost:8888/api/auth/verify \
  -H &quot;Authorization: Bearer eyJhbGc...&quot;
```

**ÊàêÂäüÂìçÂ∫î**Ôºö
```json
{
  &quot;valid&quot;: true,
  &quot;username&quot;: &quot;admin&quot;
}
```

#### ÈÄÄÂá∫ÁôªÂΩï

ÈÄÄÂá∫ÂΩìÂâçÁôªÂΩïÔºàÂÆ¢Êà∑Á´ØÂà†Èô§TokenÂç≥ÂèØÔºâ„ÄÇ

**Êé•Âè£Âú∞ÂùÄ**Ôºö`/api/auth/logout`  
**ËØ∑Ê±ÇÊñπÊ≥ï**Ôºö`POST`  
**ÊòØÂê¶ÈúÄË¶ÅËÆ§ËØÅ**ÔºöÂê¶

**ËØ∑Ê±ÇÁ§∫‰æã**Ôºö
```bash
curl -X POST http://localhost:8888/api/auth/logout
```

**ÊàêÂäüÂìçÂ∫î**Ôºö
```json
{
  &quot;message&quot;: &quot;ÈÄÄÂá∫ÊàêÂäü&quot;
}
```

### ÊêúÁ¥¢API

ÊêúÁ¥¢ÁΩëÁõòËµÑÊ∫ê„ÄÇ

**Êé•Âè£Âú∞ÂùÄ**Ôºö`/api/search`  
**ËØ∑Ê±ÇÊñπÊ≥ï**Ôºö`POST` Êàñ `GET`  
**Content-Type**Ôºö`application/json`ÔºàPOSTÊñπÊ≥ïÔºâ  
**ÊòØÂê¶ÈúÄË¶ÅËÆ§ËØÅ**ÔºöÂèñÂÜ≥‰∫é`AUTH_ENABLED`ÈÖçÁΩÆ

**POSTËØ∑Ê±ÇÂèÇÊï∞**Ôºö

| ÂèÇÊï∞Âêç | Á±ªÂûã | ÂøÖÂ°´ | ÊèèËø∞ |
|--------|------|------|------|
| kw | string | ÊòØ | ÊêúÁ¥¢ÂÖ≥ÈîÆËØç |
| channels | string[] | Âê¶ | ÊêúÁ¥¢ÁöÑÈ¢ëÈÅìÂàóË°®Ôºå‰∏çÊèê‰æõÂàô‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ |
| conc | number | Âê¶ | Âπ∂ÂèëÊêúÁ¥¢Êï∞ÈáèÔºå‰∏çÊèê‰æõÂàôËá™Âä®ËÆæÁΩÆ‰∏∫È¢ëÈÅìÊï∞+Êèí‰ª∂Êï∞+10 |
| refresh | boolean | Âê¶ | Âº∫Âà∂Âà∑Êñ∞Ôºå‰∏ç‰ΩøÁî®ÁºìÂ≠òÔºå‰æø‰∫éË∞ÉËØïÂíåËé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ |
| res | string | Âê¶ | ÁªìÊûúÁ±ªÂûãÔºöall(ËøîÂõûÊâÄÊúâÁªìÊûú)„ÄÅresults(‰ªÖËøîÂõûresults)„ÄÅmerge(‰ªÖËøîÂõûmerged_by_type)ÔºåÈªòËÆ§‰∏∫merge |
| src | string | Âê¶ | Êï∞ÊçÆÊù•Ê∫êÁ±ªÂûãÔºöall(ÈªòËÆ§ÔºåÂÖ®ÈÉ®Êù•Ê∫ê)„ÄÅtg(‰ªÖTelegram)„ÄÅplugin(‰ªÖÊèí‰ª∂) |
| plugins | string[] | Âê¶ | ÊåáÂÆöÊêúÁ¥¢ÁöÑÊèí‰ª∂ÂàóË°®Ôºå‰∏çÊåáÂÆöÂàôÊêúÁ¥¢ÂÖ®ÈÉ®Êèí‰ª∂ |
| cloud_types | string[] | Âê¶ | ÊåáÂÆöËøîÂõûÁöÑÁΩëÁõòÁ±ªÂûãÂàóË°®ÔºåÊîØÊåÅÔºöbaidu„ÄÅaliyun„ÄÅquark„ÄÅtianyi„ÄÅuc„ÄÅmobile„ÄÅ115„ÄÅpikpak„ÄÅxunlei„ÄÅ123„ÄÅmagnet„ÄÅed2kÔºå‰∏çÊåáÂÆöÂàôËøîÂõûÊâÄÊúâÁ±ªÂûã |
| ext | object | Âê¶ | Êâ©Â±ïÂèÇÊï∞ÔºåÁî®‰∫é‰º†ÈÄíÁªôÊèí‰ª∂ÁöÑËá™ÂÆö‰πâÂèÇÊï∞ÔºåÂ¶Ç{&quot;title_en&quot;:&quot;English Title&quot;, &quot;is_all&quot;:true} |

**GETËØ∑Ê±ÇÂèÇÊï∞**Ôºö

| ÂèÇÊï∞Âêç | Á±ªÂûã | ÂøÖÂ°´ | ÊèèËø∞ |
|--------|------|------|------|
| kw | string | ÊòØ | ÊêúÁ¥¢ÂÖ≥ÈîÆËØç |
| channels | string | Âê¶ | ÊêúÁ¥¢ÁöÑÈ¢ëÈÅìÂàóË°®Ôºå‰ΩøÁî®Ëã±ÊñáÈÄóÂè∑ÂàÜÈöîÂ§ö‰∏™È¢ëÈÅìÔºå‰∏çÊèê‰æõÂàô‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ |
| conc | number | Âê¶ | Âπ∂ÂèëÊêúÁ¥¢Êï∞ÈáèÔºå‰∏çÊèê‰æõÂàôËá™Âä®ËÆæÁΩÆ‰∏∫È¢ëÈÅìÊï∞+Êèí‰ª∂Êï∞+10 |
| refresh | boolean | Âê¶ | Âº∫Âà∂Âà∑Êñ∞ÔºåËÆæÁΩÆ‰∏∫&quot;true&quot;Ë°®Á§∫‰∏ç‰ΩøÁî®ÁºìÂ≠ò |
| res | string | Âê¶ | ÁªìÊûúÁ±ªÂûãÔºöall(ËøîÂõûÊâÄÊúâÁªìÊûú)„ÄÅresults(‰ªÖËøîÂõûresults)„ÄÅmerge(‰ªÖËøîÂõûmerged_by_type)ÔºåÈªòËÆ§‰∏∫merge |
| src | string | Âê¶ | Êï∞ÊçÆÊù•Ê∫êÁ±ªÂûãÔºöall(ÈªòËÆ§ÔºåÂÖ®ÈÉ®Êù•Ê∫ê)„ÄÅtg(‰ªÖTelegram)„ÄÅplugin(‰ªÖÊèí‰ª∂) |
| plugins | string | Âê¶ | ÊåáÂÆöÊêúÁ¥¢ÁöÑÊèí‰ª∂ÂàóË°®Ôºå‰ΩøÁî®Ëã±ÊñáÈÄóÂè∑ÂàÜÈöîÂ§ö‰∏™Êèí‰ª∂ÂêçÔºå‰∏çÊåáÂÆöÂàôÊêúÁ¥¢ÂÖ®ÈÉ®Êèí‰ª∂ |
| cloud_types | string | Âê¶ | ÊåáÂÆöËøîÂõûÁöÑÁΩëÁõòÁ±ªÂûãÂàóË°®Ôºå‰ΩøÁî®Ëã±ÊñáÈÄóÂè∑ÂàÜÈöîÂ§ö‰∏™Á±ªÂûãÔºåÊîØÊåÅÔºöbaidu„ÄÅaliyun„ÄÅquark„ÄÅtianyi„ÄÅuc„ÄÅmobile„ÄÅ115„ÄÅpikpak„ÄÅxunlei„ÄÅ123„ÄÅmagnet„ÄÅed2kÔºå‰∏çÊåáÂÆöÂàôËøîÂõûÊâÄÊúâÁ±ªÂûã |
| ext | string | Âê¶ | JSONÊ†ºÂºèÁöÑÊâ©Â±ïÂèÇÊï∞ÔºåÁî®‰∫é‰º†ÈÄíÁªôÊèí‰ª∂ÁöÑËá™ÂÆö‰πâÂèÇÊï∞ÔºåÂ¶Ç{&quot;title_en&quot;:&quot;English Title&quot;, &quot;is_all&quot;:true} |

**POSTËØ∑Ê±ÇÁ§∫‰æã**Ôºö

```bash
# Êú™ÂêØÁî®ËÆ§ËØÅ
curl -X POST http://localhost:8888/api/search \
  -H &quot;Content-Type: application/json&quot; \
  -d &#039;{
    &quot;kw&quot;: &quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&quot;,
    &quot;channels&quot;: [&quot;tgsearchers3&quot;, &quot;xxx&quot;],
    &quot;conc&quot;: 2,
    &quot;refresh&quot;: true,
    &quot;res&quot;: &quot;merge&quot;,
    &quot;src&quot;: &quot;all&quot;,
    &quot;plugins&quot;: [&quot;jikepan&quot;],
    &quot;cloud_types&quot;: [&quot;baidu&quot;, &quot;quark&quot;],
    &quot;ext&quot;: {
      &quot;title_en&quot;: &quot;Fast and Furious&quot;,
      &quot;is_all&quot;: true
    }
  }&#039;

# ÂêØÁî®ËÆ§ËØÅÊó∂ÔºàÈúÄË¶ÅÊ∑ªÂä†AuthorizationÂ§¥Ôºâ
curl -X POST http://localhost:8888/api/search \
  -H &quot;Content-Type: application/json&quot; \
  -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot; \
  -d &#039;{
    &quot;kw&quot;: &quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&quot;,
    &quot;res&quot;: &quot;merge&quot;
  }&#039;
```

**GETËØ∑Ê±ÇÁ§∫‰æã**Ôºö

```bash
# Êú™ÂêØÁî®ËÆ§ËØÅ
curl &quot;http://localhost:8888/api/search?kw=ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&amp;res=merge&amp;src=tg&quot;

# ÂêØÁî®ËÆ§ËØÅÊó∂ÔºàÈúÄË¶ÅÊ∑ªÂä†AuthorizationÂ§¥Ôºâ
curl &quot;http://localhost:8888/api/search?kw=ÈÄüÂ∫¶‰∏éÊøÄÊÉÖ&amp;res=merge&quot; \
  -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;
```

**ÊàêÂäüÂìçÂ∫î**Ôºö

```json
{
  &quot;total&quot;: 15,
  &quot;results&quot;: [
    {
      &quot;message_id&quot;: &quot;12345&quot;,
      &quot;unique_id&quot;: &quot;channel-12345&quot;,
      &quot;channel&quot;: &quot;tgsearchers3&quot;,
      &quot;datetime&quot;: &quot;2023-06-10T14:23:45Z&quot;,
      &quot;title&quot;: &quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖÂÖ®ÈõÜ1-10&quot;,
      &quot;content&quot;: &quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖÁ≥ªÂàóÂÖ®ÈõÜÔºå1080PÈ´òÊ∏Ö...&quot;,
      &quot;links&quot;: [
        {
          &quot;type&quot;: &quot;baidu&quot;,
          &quot;url&quot;: &quot;https://pan.baidu.com/s/1abcdef&quot;,
          &quot;password&quot;: &quot;1234&quot;
        }
      ],
      &quot;tags&quot;: [&quot;ÁîµÂΩ±&quot;, &quot;ÂêàÈõÜ&quot;],
      &quot;images&quot;: [
        &quot;https://cdn1.cdn-telegram.org/file/xxx.jpg&quot;
      ]
    },
    // Êõ¥Â§öÁªìÊûú...
  ],
  &quot;merged_by_type&quot;: {
    &quot;baidu&quot;: [
      {
        &quot;url&quot;: &quot;https://pan.baidu.com/s/1abcdef&quot;,
        &quot;password&quot;: &quot;1234&quot;,
        &quot;note&quot;: &quot;ÈÄüÂ∫¶‰∏éÊøÄÊÉÖÂÖ®ÈõÜ1-10&quot;,
        &quot;datetime&quot;: &quot;2023-06-10T14:23:45Z&quot;,
        &quot;source&quot;: &quot;tg:È¢ëÈÅìÂêçÁß∞&quot;,
        &quot;images&quot;: [
          &quot;https://cdn1.cdn-telegram.org/file/xxx.jpg&quot;
        ]
      },
      // Êõ¥Â§öÁôæÂ∫¶ÁΩëÁõòÈìæÊé•...
    ],
    &quot;quark&quot;: [
      {
        &quot;url&quot;: &quot;https://pan.quark.cn/s/xxxx&quot;,
        &quot;password&quot;: &quot;&quot;,
        &quot;note&quot;: &quot;Âá°‰∫∫‰øÆ‰ªô‰º†&quot;,
        &quot;datetime&quot;: &quot;2023-06-10T15:30:22Z&quot;,
        &quot;source&quot;: &quot;plugin:Êèí‰ª∂Âêç&quot;,
        &quot;images&quot;: []
      }
    ],
    &quot;aliyun&quot;: [
      // ÈòøÈáå‰∫ëÁõòÈìæÊé•...
    ]
    // Êõ¥Â§öÁΩëÁõòÁ±ªÂûã...
  }
}
```

**Â≠óÊÆµËØ¥Êòé**Ôºö

- `source`: Êï∞ÊçÆÊù•Ê∫êÊ†áËØÜ
  - `tg:È¢ëÈÅìÂêçÁß∞`: Êù•Ëá™TelegramÈ¢ëÈÅì
  - `plugin:Êèí‰ª∂Âêç`: Êù•Ëá™ÊåáÂÆöÊèí‰ª∂
  - `unknown`: Êú™Áü•Êù•Ê∫ê
- `images`: TGÊ∂àÊÅØ‰∏≠ÁöÑÂõæÁâáÈìæÊé•Êï∞ÁªÑÔºàÂèØÈÄâÂ≠óÊÆµÔºâ
  - ‰ªÖÂú®Êù•Ê∫ê‰∏∫TelegramÈ¢ëÈÅì‰∏îÊ∂àÊÅØÂåÖÂê´ÂõæÁâáÊó∂Âá∫Áé∞


**ÈîôËØØÂìçÂ∫î**Ôºö

```json
// ÂèÇÊï∞ÈîôËØØ
{
  &quot;code&quot;: 400,
  &quot;message&quot;: &quot;ÂÖ≥ÈîÆËØç‰∏çËÉΩ‰∏∫Á©∫&quot;
}

// Êú™ÊéàÊùÉÔºàÂêØÁî®ËÆ§ËØÅ‰ΩÜÊú™Êèê‰æõTokenÔºâ
{
  &quot;error&quot;: &quot;Êú™ÊéàÊùÉÔºöÁº∫Â∞ëËÆ§ËØÅ‰ª§Áâå&quot;,
  &quot;code&quot;: &quot;AUTH_TOKEN_MISSING&quot;
}

// TokenÊó†ÊïàÊàñËøáÊúü
{
  &quot;error&quot;: &quot;Êú™ÊéàÊùÉÔºö‰ª§ÁâåÊó†ÊïàÊàñÂ∑≤ËøáÊúü&quot;,
  &quot;code&quot;: &quot;AUTH_TOKEN_INVALID&quot;
}
```

### ÂÅ•Â∫∑Ê£ÄÊü•

Ê£ÄÊü•APIÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å„ÄÇ

**Êé•Âè£Âú∞ÂùÄ**Ôºö`/api/health`  
**ËØ∑Ê±ÇÊñπÊ≥ï**Ôºö`GET`  
**ÊòØÂê¶ÈúÄË¶ÅËÆ§ËØÅ**ÔºöÂê¶ÔºàÂÖ¨ÂºÄÊé•Âè£Ôºâ

**ËØ∑Ê±ÇÁ§∫‰æã**Ôºö
```bash
curl http://localhost:8888/api/health
```

**ÊàêÂäüÂìçÂ∫î**Ôºö

```json
{
  &quot;status&quot;: &quot;ok&quot;,
  &quot;auth_enabled&quot;: true,
  &quot;plugins_enabled&quot;: true,
  &quot;plugin_count&quot;: 16,
  &quot;plugins&quot;: [
    &quot;pansearch&quot;,
    &quot;panta&quot;, 
    &quot;qupansou&quot;,
    &quot;hunhepan&quot;,
    &quot;jikepan&quot;,
    &quot;pan666&quot;,
    &quot;panyq&quot;,
    &quot;susu&quot;,
    &quot;xuexizhinan&quot;,
    &quot;hdr4k&quot;,
    &quot;labi&quot;,
    &quot;shandian&quot;,
    &quot;duoduo&quot;,
    &quot;muou&quot;,
    &quot;wanou&quot;,
    &quot;ouge&quot;,
    &quot;zhizhen&quot;,
    &quot;huban&quot;
  ],
  &quot;channels_count&quot;: 1,
  &quot;channels&quot;: [
    &quot;tgsearchers3&quot;
  ]
}
```

**Â≠óÊÆµËØ¥Êòé**Ôºö
- `status`: ÊúçÂä°Áä∂ÊÄÅÔºå&quot;ok&quot;Ë°®Á§∫Ê≠£Â∏∏
- `auth_enabled`: ÊòØÂê¶ÂêØÁî®ËÆ§ËØÅÂäüËÉΩ
- `plugins_enabled`: ÊòØÂê¶ÂêØÁî®Êèí‰ª∂
- `plugin_count`: Â∑≤ÂêØÁî®ÁöÑÊèí‰ª∂Êï∞Èáè
- `plugins`: Â∑≤ÂêØÁî®ÁöÑÊèí‰ª∂ÂàóË°®
- `channels_count`: ÈÖçÁΩÆÁöÑÈ¢ëÈÅìÊï∞Èáè
- `channels`: ÈÖçÁΩÆÁöÑÈ¢ëÈÅìÂàóË°®

## üìÑ ËÆ∏ÂèØËØÅ

Êú¨È°πÁõÆÈááÁî® MIT ËÆ∏ÂèØËØÅ„ÄÇËØ¶ÊÉÖËØ∑ËßÅ [LICENSE](LICENSE) Êñá‰ª∂„ÄÇ

## ‚≠ê Star ÂéÜÂè≤

[![Star History Chart](https://api.star-history.com/svg?repos=fish2018/pansou&amp;type=Date)](https://star-history.com/#fish2018/pansou&amp;Date)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[rcourtman/Pulse]]></title>
            <link>https://github.com/rcourtman/Pulse</link>
            <guid>https://github.com/rcourtman/Pulse</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:42 GMT</pubDate>
            <description><![CDATA[A responsive monitoring platform for Proxmox VE, PBS, and Docker with real-time metrics across nodes and containers]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/rcourtman/Pulse">rcourtman/Pulse</a></h1>
            <p>A responsive monitoring platform for Proxmox VE, PBS, and Docker with real-time metrics across nodes and containers</p>
            <p>Language: Go</p>
            <p>Stars: 2,255</p>
            <p>Forks: 80</p>
            <p>Stars today: 64 stars today</p>
            <h2>README</h2><pre># Pulse

[![GitHub release](https://img.shields.io/github/v/release/rcourtman/Pulse)](https://github.com/rcourtman/Pulse/releases/latest)
[![Docker Pulls](https://img.shields.io/docker/pulls/rcourtman/pulse)](https://hub.docker.com/r/rcourtman/pulse)
[![License](https://img.shields.io/github/license/rcourtman/Pulse)](LICENSE)

**Real-time monitoring for Proxmox VE, Proxmox Mail Gateway, PBS, and Docker infrastructure with alerts and webhooks.**

Monitor your hybrid Proxmox and Docker estate from a single dashboard. Get instant alerts when nodes go down, containers misbehave, backups fail, or storage fills up. Supports email, Discord, Slack, Telegram, and more.

**[Try the live demo ‚Üí](https://demo.pulserelay.pro)** (read-only with mock data)

&lt;img width=&quot;2872&quot; height=&quot;1502&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/41ac125c-59e3-4bdc-bfd2-e300109aa1f7&quot; /&gt;

## Support Pulse Development

Pulse is built by a solo developer in evenings and weekends. Your support helps:
- Keep me motivated to add new features
- Prioritize bug fixes and user requests
- Ensure Pulse stays 100% free and open-source forever

[![GitHub Sponsors](https://img.shields.io/github/sponsors/rcourtman?style=social&amp;label=Sponsor)](https://github.com/sponsors/rcourtman)
[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/rcourtman)

**Not ready to sponsor?** Star the project or share it with your homelab community!

## Features

- **Auto-Discovery**: Finds Proxmox nodes on your network, one-liner setup via generated scripts
- **Cluster Support**: Configure one node, monitor entire cluster
- **Enterprise Security**: 
  - Credentials encrypted at rest, masked in logs, never sent to frontend
  - CSRF protection for all state-changing operations
  - Rate limiting (500 req/min general, 10 attempts/min for auth)
  - Account lockout after failed login attempts
  - Secure session management with HttpOnly cookies
  - bcrypt password hashing (cost 12) - passwords NEVER stored in plain text
  - API tokens stored securely with restricted file permissions
  - Security headers (CSP, X-Frame-Options, etc.)
  - Comprehensive audit logging
- Live monitoring of VMs, containers, nodes, storage
- **Smart Alerts**: Email and webhooks (Discord, Slack, Telegram, Teams, ntfy.sh, Gotify)
  - Example: &quot;VM &#039;webserver&#039; is down on node &#039;pve1&#039;&quot;
  - Example: &quot;Storage &#039;local-lvm&#039; at 85% capacity&quot;
  - Example: &quot;VM &#039;database&#039; is back online&quot;
- **Adaptive Thresholds**: Hysteresis-based trigger/clear levels, fractional network thresholds, per-metric search, reset-to-defaults, and Custom overrides with inline audit trail
- **Alert Timeline Analytics**: Rich history explorer with acknowledgement/clear markers, escalation breadcrumbs, and quick filters for noisy resources
- **Ceph Awareness**: Surface Ceph health, pool utilisation, and daemon status automatically when Proxmox exposes Ceph-backed storage
- Unified view of PBS backups, PVE backups, and snapshots
- **Interactive Backup Explorer**: Cross-highlighted bar chart + grid with quick time-range pivots (24h/7d/30d/custom) and contextual tooltips for the busiest jobs
- Proxmox Mail Gateway analytics: mail volume, spam/virus trends, quarantine health, and cluster node status
- Optional Docker container monitoring via lightweight agent
- Config export/import with encryption and authentication
- Automatic stable updates with safe rollback (opt-in)
- Dark/light themes, responsive design
- Built with Go for minimal resource usage

[Screenshots ‚Üí](docs/SCREENSHOTS.md)

## Privacy

**Pulse respects your privacy:**
- No telemetry or analytics collection
- No phone-home functionality
- No external API calls (except for configured webhooks)
- All data stays on your server
- Open source - verify it yourself

Your infrastructure data is yours alone.

## Quick Start

### Install

```bash
# Recommended: Official installer (auto-detects Proxmox and creates container)
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash

# Need to roll back to a previous release? Pass the tag you want
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash -s -- --version v4.20.0

# Alternative: Docker
docker run -d -p 7655:7655 -v pulse_data:/data rcourtman/pulse:latest

# Testing: Install from main branch source (for testing latest fixes)
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash -s -- --source

# Alternative: Kubernetes (Helm)
helm registry login ghcr.io
helm install pulse oci://ghcr.io/rcourtman/pulse-chart \
  --version $(curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/VERSION) \
  --namespace pulse \
  --create-namespace
# Replace the VERSION lookup with a specific release if you need to pin. For local development, see docs/KUBERNETES.md.
```

**Proxmox users**: The installer detects PVE hosts and automatically creates an optimized LXC container. Choose Quick mode for one-minute setup.

[Advanced installation options ‚Üí](docs/INSTALL.md)

### Updating

**Automatic Updates (New!):** Enable during installation or via Settings UI to stay current automatically  
**Standard Install:** Re-run the installer  
**Docker:** `docker pull rcourtman/pulse:latest` then recreate container

### Initial Setup

**Option A: Interactive Setup (UI)**
1. Open `http://&lt;your-server&gt;:7655`
2. **Complete the mandatory security setup** (first-time only)
3. Create your admin username and password
4. Use **Settings ‚Üí Security ‚Üí API tokens** to mint dedicated tokens for automation (issue one token per integration so you can revoke credentials individually)

**Option B: Automated Setup (No UI)**
For automated deployments, configure authentication via environment variables:
```bash
# Start Pulse with auth pre-configured - skips setup screen
API_TOKENS=&quot;ansible-token,docker-agent-token&quot; ./pulse

# Or use basic auth
PULSE_AUTH_USER=admin PULSE_AUTH_PASS=password ./pulse

# Plain text credentials are automatically hashed for security
# `API_TOKEN` is still accepted for back-compat, but `API_TOKENS` lets you manage multiple credentials
# You can also provide pre-hashed values if preferred
```
See [Configuration Guide](docs/CONFIGURATION.md#automated-setup-skip-ui) for details.

### Configure Nodes

**Two authentication methods available:**

#### Method 1: Manual Setup (Recommended for interactive use)
1. After login, go to Settings ‚Üí Nodes
2. Discovered nodes appear automatically
3. Click &quot;Setup Script&quot; next to any node
4. Click &quot;Generate Setup Code&quot; button (creates a 6-character code valid for 5 minutes)
5. Copy and run the provided one-liner on your Proxmox/PBS host
6. Node is configured and monitoring starts automatically

**Example:**
```bash
curl -sSL &quot;http://pulse:7655/api/setup-script?type=pve&amp;host=https://pve:8006&amp;auth_token=ABC123&quot; | bash
```

#### Method 2: Automated Setup (For scripts/automation)
Use your permanent API token directly in the URL for automation:

```bash
# For Proxmox VE
curl -sSL &quot;http://pulse:7655/api/setup-script?type=pve&amp;host=https://pve:8006&amp;auth_token=YOUR_API_TOKEN&quot; | bash

# For Proxmox Backup Server
curl -sSL &quot;http://pulse:7655/api/setup-script?type=pbs&amp;host=https://pbs:8007&amp;auth_token=YOUR_API_TOKEN&quot; | bash
```

**Parameters:**
- `type`: `pve` for Proxmox VE, `pbs` for Proxmox Backup Server
- `host`: Full URL of your Proxmox/PBS server (e.g., https://192.168.1.100:8006)
- `auth_token`: Either a 6-character setup code (expires in 5 min) or your permanent API token
- `backup_perms=true` (optional): Add backup management permissions
- `pulse_url` (optional): Pulse server URL if different from where script is downloaded

The script handles user creation, permissions, token generation, and registration automatically.

### Monitor Docker Containers (optional)

Deploy the lightweight [Pulse Docker agent](docs/DOCKER_MONITORING.md) on any host running Docker to stream container status and resource data back to Pulse. Install the agent alongside your stack, point it at your Pulse URL and API token, and the **Docker** workspace lights up with host summaries, restart loop detection, per-container CPU/memory charts, and quick filters for stacks and unhealthy workloads.

## Docker

### Basic
```bash
docker run -d \
  --name pulse \
  -p 7655:7655 \
  -v pulse_data:/data \
  --restart unless-stopped \
  rcourtman/pulse:latest
```

### Network Discovery

Pulse automatically discovers Proxmox nodes on your network! By default, it scans:
- 192.168.0.0/16 (home networks)
- 10.0.0.0/8 (private networks)
- 172.16.0.0/12 (Docker/internal networks)

To scan a custom subnet instead:
```bash
docker run -d \
  --name pulse \
  -p 7655:7655 \
  -v pulse_data:/data \
  -e DISCOVERY_SUBNET=&quot;192.168.50.0/24&quot; \
  --restart unless-stopped \
  rcourtman/pulse:latest
```

### Automated Deployment
```bash
# Deploy with authentication pre-configured
docker run -d \
  --name pulse \
  -p 7655:7655 \
  -v pulse_data:/data \
  -e API_TOKENS=&quot;ansible-token,docker-agent-token&quot; \
  -e PULSE_AUTH_USER=&quot;admin&quot; \
  -e PULSE_AUTH_PASS=&quot;your-password&quot; \
  --restart unless-stopped \
  rcourtman/pulse:latest

# Plain text credentials are automatically hashed for security
# No setup required - API works immediately
```

### Docker Compose
```yaml
services:
  pulse:
    image: rcourtman/pulse:latest
    container_name: pulse
    ports:
      - &quot;7655:7655&quot;
    volumes:
      - pulse_data:/data
    environment:
      # NOTE: Env vars override UI settings. Remove env var to allow UI configuration.
      
      # Network discovery (usually not needed - auto-scans common networks)
      # - DISCOVERY_SUBNET=192.168.50.0/24  # Only for non-standard networks
      
      # Ports
      # - PORT=7655                         # Backend port (default: 7655)
      # - FRONTEND_PORT=7655                # Frontend port (default: 7655)
      
      # Security (all optional - runs open by default)
      # - PULSE_AUTH_USER=admin             # Username for web UI login
      # - PULSE_AUTH_PASS=your-password     # Plain text or bcrypt hash (auto-hashed if plain)
      # - API_TOKENS=token-a,token-b        # Comma-separated tokens (plain or SHA3-256 hashed)
      # - API_TOKEN=legacy-token            # Optional single-token fallback
      # - ALLOW_UNPROTECTED_EXPORT=false    # Allow export without auth (default: false)
      
      # Security: Plain text credentials are automatically hashed
      # You can provide either:
      # 1. Plain text (auto-hashed): PULSE_AUTH_PASS=mypassword
      # 2. Pre-hashed (advanced): PULSE_AUTH_PASS=&#039;$$2a$$12$$...&#039;
      #    Note: Escape $ as $$ in docker-compose.yml for pre-hashed values
      
      # Performance
      # - CONNECTION_TIMEOUT=10             # Connection timeout in seconds (default: 10)
      
      # CORS &amp; logging
      # - ALLOWED_ORIGINS=https://app.example.com  # CORS origins (default: none, same-origin only)
      # - LOG_LEVEL=info                    # Log level: debug/info/warn/error (default: info)
    restart: unless-stopped

volumes:
  pulse_data:
```


## Security

- **Authentication required** - Protects your Proxmox infrastructure credentials
- **Quick setup wizard** - Secure your installation in under a minute
- **Multiple auth methods**: Password authentication, API tokens, proxy auth (SSO), or combinations
- **Proxy/SSO support** - Integrate with Authentik, Authelia, and other authentication proxies ([docs](docs/PROXY_AUTH.md))
- **Enterprise-grade protection**:
  - Credentials encrypted at rest (AES-256-GCM)
  - CSRF tokens for state-changing operations
  - Rate limiting and account lockout protection
  - Secure session management with HttpOnly cookies
  - bcrypt password hashing (cost 12) - passwords NEVER stored in plain text
  - API tokens stored securely with restricted file permissions
  - Security headers (CSP, X-Frame-Options, etc.)
  - Comprehensive audit logging
- **Security by design**:
  - Frontend never receives node credentials
  - API tokens visible only to authenticated users
  - Export/import requires authentication when configured

See [Security Documentation](docs/SECURITY.md) for details.

## Updating

### Update Notifications
Pulse checks for updates and displays notifications in the UI when new versions are available. For security reasons, updates must be installed manually using the appropriate method for your deployment.

### Manual Installation (systemd)
```bash
# Update to latest stable
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash

# Update to latest RC/pre-release  
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash -s -- --rc

# Install specific version
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash -s -- --version v4.8.0-rc.1
```

### Docker Updates
```bash
# Latest stable
docker pull rcourtman/pulse:latest

# Latest RC
docker pull rcourtman/pulse:rc

# Specific version
docker pull rcourtman/pulse:v4.8.0-rc.1
```

## Configuration

Quick start - most settings are in the web UI:
- **Settings ‚Üí Nodes**: Add/remove Proxmox instances
- **Settings ‚Üí System**: Polling intervals, timeouts, update settings
- **Settings ‚Üí Security**: Authentication and API tokens
- **Alerts**: Thresholds and notifications

### Apprise Notifications

Pulse can broadcast grouped alerts through [Apprise](https://github.com/caronc/apprise) using either the local CLI or a remote Apprise API gateway. Configure everything under **Alerts ‚Üí Notifications ‚Üí Apprise**.

- **Local CLI** ‚Äì Install Apprise on the Pulse host (for example `pip install apprise`) and enter one Apprise URL per line in the delivery targets field. You can override the CLI path and timeout if the executable lives outside of `$PATH`. Pulse skips CLI delivery automatically when no targets are configured.
- **Remote API** ‚Äì Point Pulse at an Apprise API server by providing the base URL (such as `https://apprise-api.local:8000`). Optionally include a configuration key (for `/notify/{key}` routes), an API key header/value pair, and allow self-signed certificates for lab deployments. Targets remain optional in API mode‚Äîleave the list empty to let the Apprise server use its stored defaults.

For both modes, delivery targets accept any Apprise URL (Discord, Slack, email, SMS, etc.). The timeout applies to the CLI process or HTTP request respectively.

### Configuration Files

Pulse uses three separate configuration files with clear separation of concerns:
- `.env` - Authentication credentials only
- `system.json` - Application settings
- `nodes.enc` - Encrypted node credentials

See [docs/CONFIGURATION.md](docs/CONFIGURATION.md) for detailed documentation on configuration structure and management.

### Email Alerts Configuration
Configure email notifications in **Settings ‚Üí Alerts ‚Üí Email Destinations**

#### Supported Providers
- **Gmail/Google Workspace**: Requires app-specific password
- **Outlook/Office 365**: Requires app-specific password  
- **Custom SMTP**: Any SMTP server

#### Recommended Settings
- **Port 587 with STARTTLS** (recommended for most providers)
- **Port 465** for SSL/TLS
- **Port 25** for unencrypted (not recommended)

#### Gmail Setup
1. Enable 2-factor authentication
2. Generate app-specific password at https://myaccount.google.com/apppasswords
3. Use your email as username and app password as password
4. Server: smtp.gmail.com, Port: 587, Enable STARTTLS

#### Outlook Setup
1. Generate app password at https://account.microsoft.com/security
2. Use your email as username and app password as password
3. Server: smtp-mail.outlook.com, Port: 587, Enable STARTTLS

### Alert Configuration

Pulse provides two complementary approaches for managing alerts:

#### Custom Alert Rules (Permanent Policy)
Configure persistent alert policies in **Settings ‚Üí Alerts ‚Üí Custom Rules**:
- Define thresholds for specific VMs/containers based on name patterns
- Set different thresholds for production vs development environments
- Create complex rules with AND/OR logic
- Manage all rules through the UI with priority ordering

**Use for:** Long-term alert policies like &quot;all database VMs should alert at 90%&quot;


### HTTPS/TLS Configuration
Enable HTTPS by setting these environment variables:
```bash
# Systemd (service: pulse; legacy installs may use pulse-backend): sudo systemctl edit pulse
Environment=&quot;HTTPS_ENABLED=true&quot;
Environment=&quot;TLS_CERT_FILE=/etc/pulse/cert.pem&quot;
Environment=&quot;TLS_KEY_FILE=/etc/pulse/key.pem&quot;

# Docker
docker run -d -p 7655:7655 \
  -e HTTPS_ENABLED=true \
  -e TLS_CERT_FILE=/data/cert.pem \
  -e TLS_KEY_FILE=/data/key.pem \
  -v pulse_data:/data \
  -v /path/to/certs:/data/certs:ro \
  rcourtman/pulse:latest
```

For deployment overrides (ports, etc), use environment variables:
```bash
# Systemd (service: pulse; legacy installs may use pulse-backend): sudo systemctl edit pulse
Environment=&quot;FRONTEND_PORT=8080&quot;

# Docker: -e FRONTEND_PORT=8080
```

**[Full Configuration Guide ‚Üí](docs/CONFIGURATION.md)**

### Backup/Restore

**Via UI (recommended):**
- Settings ‚Üí Security ‚Üí Backup &amp; Restore
- Export: Choose login password or custom passphrase for encryption
- Import: Upload backup file with passphrase
- Includes all settings, nodes, and custom console URLs

**Via CLI:**
```bash
# Export (v4.0.3+)
pulse config export -o backup.enc

# Import
pulse config import -i backup.enc
```

## Updates

Pulse shows when updates are available and provides deployment-specific instructions:

### Docker
```bash
docker pull rcourtman/pulse:latest
docker stop pulse
docker rm pulse
# Run docker run command again with your settings
```

### Manual Install
```bash
curl -fsSL https://raw.githubusercontent.com/rcourtman/Pulse/main/install.sh | bash
```

The UI will detect your deployment type and show the appropriate update method when a new version is available.

## API

```bash
# Status
curl http://localhost:7655/api/health

# Metrics (default time range: 1h)
curl http://localhost:7655/api/charts

# With authentication (if configured)
curl -H &quot;X-API-Token: your-token&quot; http://localhost:7655/api/health
```

**[Full API Documentation ‚Üí](docs/API.md)** - Complete endpoint reference with examples

## Reverse Proxy &amp; SSO

Using Pulse behind a reverse proxy? **WebSocket support is required for real-time updates.**

**NEW: Proxy Authentication Support** - Integrate with Authentik, Authelia, and other SSO providers. See [Proxy Authentication Guide](docs/PROXY_AUTH.md).

See [Reverse Proxy Configuration Guide](docs/REVERSE_PROXY.md) for nginx, Caddy, Apache, Traefik, HAProxy, and Cloudflare Tunnel configurations.

## Troubleshooting

### Authentication Issues

#### Cannot login after setting up security
- **Docker**: Ensure bcrypt hash is exactly 60 characters and wrapped in single quotes
- **Docker Compose**: MUST escape $ characters as $$ (e.g., `$$2a$$12$$...`)
- **Example (docker run)**: `PULSE_AUTH_PASS=&#039;$2a$12$YTZXOCEylj4TaevZ0DCeI.notayQZ..b0OZ97lUZ.Q24fljLiMQHK&#039;`
- **Example (docker-compose.yml)**: `PULSE_AUTH_PASS=&#039;$$2a$$12$$YTZXOCEylj4TaevZ0DCeI.notayQZ..b0OZ97lUZ.Q24fljLiMQHK&#039;`
- If hash is truncated or mangled, authentication will fail
- Use Quick Security Setup in the UI to avoid manual configuration errors

#### .env file not created (Docker)
- **Expected behavior**: When using environment variables, no .env file is created in /data
- The .env file is only created when using Quick Security Setup or password changes
- If you provide credentials via environment variables, they take precedence
- To use Quick Security Setup: Start container WITHOUT auth environment variables

### VM Disk Stats Show &quot;-&quot;
- VMs require QEMU Guest Agent to report disk usage (Proxmox API returns 0 for VMs)
- Install guest agent in VM: `apt install qemu-guest-agent` (Linux) or virtio-win tools (Windows)
- Enable in VM Options ‚Üí QEMU Guest Agent, then restart VM
- See [VM Disk Monitoring Guide](docs/VM_DISK_MONITORING.md) for setup
- Container (LXC) disk stats always wo

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[cockroachdb/cockroach]]></title>
            <link>https://github.com/cockroachdb/cockroach</link>
            <guid>https://github.com/cockroachdb/cockroach</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:41 GMT</pubDate>
            <description><![CDATA[CockroachDB ‚Äî the cloud native, distributed SQL database designed for high availability, effortless scale, and control over data placement.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/cockroachdb/cockroach">cockroachdb/cockroach</a></h1>
            <p>CockroachDB ‚Äî the cloud native, distributed SQL database designed for high availability, effortless scale, and control over data placement.</p>
            <p>Language: Go</p>
            <p>Stars: 31,422</p>
            <p>Forks: 3,998</p>
            <p>Stars today: 4 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&#039;docs/media/cockroach_db.png?raw=true&#039; width=&#039;70%&#039;&gt;
&lt;/p&gt;

---

CockroachDB is a cloud-native distributed SQL database designed to build,
scale, and manage modern, data-intensive applications. 

- [What is CockroachDB?](#what-is-cockroachdb)
- [Docs](#docs)
- [Starting with Cockroach Cloud](#starting-with-cockroachcloud)
- [Starting with CockroachDB](#starting-with-cockroachdb)
- [Client Drivers](#client-drivers)
- [Deployment](#deployment)
- [Need Help?](#need-help)
- [Contributing](#contributing)
- [Design](#design)
- [Comparison with Other Databases](#comparison-with-other-databases)
- [See Also](#see-also)

## What is CockroachDB?

CockroachDB is a distributed SQL database built on a transactional and
strongly-consistent key-value store. It **scales** horizontally;
**survives** disk, machine, rack, and even datacenter failures with
minimal latency disruption and no manual intervention; supports
**strongly-consistent** ACID transactions; and provides a familiar
**SQL** API for structuring, manipulating, and querying data.

For more details, see our [product overview](https://www.cockroachlabs.com/product/overview/), [FAQ](https://cockroachlabs.com/docs/stable/frequently-asked-questions.html) or [architecture document](
https://www.cockroachlabs.com/docs/stable/architecture/overview.html).

## Docs

For guidance on installation, development, deployment, and administration, see our [User Documentation](https://cockroachlabs.com/docs/stable/).

## Starting with CockroachCloud

We can run CockroachDB for you, so you don&#039;t have to run your own cluster.

See our online documentation: [Quickstart with CockroachCloud](https://www.cockroachlabs.com/docs/cockroachcloud/quickstart.html)

## Starting with CockroachDB

1. Install CockroachDB:  [using a pre-built executable](https://www.cockroachlabs.com/docs/stable/install-cockroachdb.html) or [build it from source](https://cockroachlabs.atlassian.net/wiki/spaces/CRDB/pages/181338446/Getting+and+building+CockroachDB+from+source).
2. [Start a local cluster](https://www.cockroachlabs.com/docs/stable/start-a-local-cluster.html) and connect to it via the [built-in SQL client](https://www.cockroachlabs.com/docs/stable/use-the-built-in-sql-client.html).
3. [Learn more about CockroachDB SQL](https://www.cockroachlabs.com/docs/stable/learn-cockroachdb-sql.html).
4. Use a PostgreSQL-compatible driver or ORM to [build an app with CockroachDB](https://www.cockroachlabs.com/docs/stable/hello-world-example-apps.html).
5. [Explore core features](https://www.cockroachlabs.com/docs/stable/demo-data-replication.html), such as data replication, automatic rebalancing, and fault tolerance and recovery.

## Client Drivers

CockroachDB supports the PostgreSQL wire protocol, so you can use any available PostgreSQL client drivers to connect from various languages.

- For recommended drivers that we&#039;ve tested, see [Install Client Drivers](https://www.cockroachlabs.com/docs/stable/install-client-drivers.html).
- For tutorials using these drivers, as well as supported ORMs, see [Example Apps](https://www.cockroachlabs.com/docs/stable/example-apps.html).

## Deployment

- [CockroachCloud](https://www.cockroachlabs.com/docs/cockroachcloud/quickstart) - Steps to create a [free CockroachCloud cluster](https://cockroachlabs.cloud/signup?referralId=githubquickstart) on your preferred Cloud platform.
- [Manual](https://www.cockroachlabs.com/docs/stable/manual-deployment.html) - Steps to deploy a CockroachDB cluster manually on multiple machines.
- [Cloud](https://www.cockroachlabs.com/docs/stable/cloud-deployment.html) - Guides for deploying CockroachDB on various cloud platforms.
- [Orchestration](https://www.cockroachlabs.com/docs/stable/orchestration.html) - Guides for running CockroachDB with popular open-source orchestration systems.

## Need Help?

- [CockroachDB Community Slack](https://go.crdb.dev/p/slack) - Join our slack to connect with our engineers and other users running CockroachDB.
- [CockroachDB Forum](https://forum.cockroachlabs.com/) and [Stack Overflow](https://stackoverflow.com/questions/tagged/cockroachdb) - Ask questions, find answers, and help other users.
- [Troubleshooting documentation](https://www.cockroachlabs.com/docs/stable/troubleshooting-overview.html) - Learn how to troubleshoot common errors, cluster setup, and SQL query behavior.
- For filing bugs, suggesting improvements, or requesting new features, help us out by [opening an issue](https://github.com/cockroachdb/cockroach/issues/new).

## Building from source

See [our wiki](https://wiki.crdb.io/wiki/spaces/CRDB/pages/181338446/Getting+and+building+from+source) for more details.

## Contributing

We welcome your contributions! If you&#039;re looking for issues to work on, try looking at the [good first issue list](https://github.com/cockroachdb/cockroach/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22). We do our best to tag issues suitable for new external contributors with that label, so it&#039;s a great way to find something you can help with!

See [our wiki](https://wiki.crdb.io/wiki/spaces/CRDB/pages/73204033/Contributing+to+CockroachDB) for more details.

Engineering discussions take place on our public mailing list, [cockroach-db@googlegroups.com](https://groups.google.com/forum/#!forum/cockroach-db). Also please join our [Community Slack](https://go.crdb.dev/p/slack) (there&#039;s a dedicated #contributors channel!) to ask questions, discuss your ideas, and connect with other contributors.

## Design

For an in-depth discussion of the CockroachDB architecture, see our
[Architecture
Guide](https://www.cockroachlabs.com/docs/stable/architecture/overview.html).
For the original design motivation, see our [design
doc](https://github.com/cockroachdb/cockroach/blob/master/docs/design.md).

## Licensing

All versions released after November 18, 2024, including patch fixes for prior versions 23.1 onward, are published under the [CockroachDB Software License (CSL)](./LICENSE). Source code in a given file is licensed under the CSL and the copyright belongs to The Cockroach Authors unless otherwise noted in the file or in a LICENSE or README file located in the same or parent directory of the file.

## Comparison with Other Databases

To see how key features of CockroachDB stack up against other databases,
check out [CockroachDB in Comparison](https://www.cockroachlabs.com/docs/stable/cockroachdb-in-comparison.html).

## See Also

- [Tech Talks](https://www.cockroachlabs.com/community/tech-talks/) (by CockroachDB founders, engineers, and customers!)
- [CockroachDB User Documentation](https://cockroachlabs.com/docs/stable/)
- [The CockroachDB Blog](https://www.cockroachlabs.com/blog/)
- Key design documents
  - [Serializable, Lockless, Distributed: Isolation in CockroachDB](https://www.cockroachlabs.com/blog/serializable-lockless-distributed-isolation-cockroachdb/)
  - [Consensus, Made Thrive](https://www.cockroachlabs.com/blog/consensus-made-thrive/)
  - [Trust, But Verify: How CockroachDB Checks Replication](https://www.cockroachlabs.com/blog/trust-but-verify-cockroachdb-checks-replication/)
  - [Living Without Atomic Clocks](https://www.cockroachlabs.com/blog/living-without-atomic-clocks/)
  - [The CockroachDB Architecture Document](https://github.com/cockroachdb/cockroach/blob/master/docs/design.md)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[fatedier/frp]]></title>
            <link>https://github.com/fatedier/frp</link>
            <guid>https://github.com/fatedier/frp</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:40 GMT</pubDate>
            <description><![CDATA[A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/fatedier/frp">fatedier/frp</a></h1>
            <p>A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.</p>
            <p>Language: Go</p>
            <p>Stars: 100,006</p>
            <p>Forks: 14,562</p>
            <p>Stars today: 40 stars today</p>
            <h2>README</h2><pre># frp

[![Build Status](https://circleci.com/gh/fatedier/frp.svg?style=shield)](https://circleci.com/gh/fatedier/frp)
[![GitHub release](https://img.shields.io/github/tag/fatedier/frp.svg?label=release)](https://github.com/fatedier/frp/releases)
[![Go Report Card](https://goreportcard.com/badge/github.com/fatedier/frp)](https://goreportcard.com/report/github.com/fatedier/frp)
[![GitHub Releases Stats](https://img.shields.io/github/downloads/fatedier/frp/total.svg?logo=github)](https://somsubhra.github.io/github-release-stats/?username=fatedier&amp;repository=frp)

[README](README.md) | [‰∏≠ÊñáÊñáÊ°£](README_zh.md)

## Sponsors

frp is an open source project with its ongoing development made possible entirely by the support of our awesome sponsors. If you&#039;d like to join them, please consider [sponsoring frp&#039;s development](https://github.com/sponsors/fatedier).

&lt;h3 align=&quot;center&quot;&gt;Gold Sponsors&lt;/h3&gt;
&lt;!--gold sponsors start--&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.recall.ai/?utm_source=github&amp;utm_medium=sponsorship&amp;utm_campaign=fatedier-frp&quot; target=&quot;_blank&quot;&gt;
    &lt;b&gt;Recall.ai - API for meeting recordings&lt;/b&gt;&lt;br&gt;
    &lt;br&gt;
    &lt;sup&gt;If you&#039;re looking for a meeting recording API, consider checking out Recall.ai, an API that records Zoom, Google Meet, Microsoft Teams, in-person meetings, and more.&lt;/sup&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://go.warp.dev/frp&quot; target=&quot;_blank&quot;&gt;
    &lt;img width=&quot;360px&quot; src=&quot;https://raw.githubusercontent.com/warpdotdev/brand-assets/refs/heads/main/Github/Sponsor/Warp-Github-LG-01.png&quot;&gt;
    &lt;br&gt;
    &lt;b&gt;Warp, built for collaborating with AI Agents&lt;/b&gt;
    &lt;br&gt;
	&lt;sub&gt;Available for macOS, Linux and Windows&lt;/sub&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://jb.gg/frp&quot; target=&quot;_blank&quot;&gt;
    &lt;img width=&quot;420px&quot; src=&quot;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_jetbrains.jpg&quot;&gt;
	&lt;br&gt;
	&lt;b&gt;The complete IDE crafted for professional Go developers&lt;/b&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/daytonaio/daytona&quot; target=&quot;_blank&quot;&gt;
    &lt;img width=&quot;420px&quot; src=&quot;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_daytona.png&quot;&gt;
	&lt;br&gt;
	&lt;b&gt;Secure and Elastic Infrastructure for Running Your AI-Generated Code&lt;/b&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/beclab/Olares&quot; target=&quot;_blank&quot;&gt;
    &lt;img width=&quot;420px&quot; src=&quot;https://raw.githubusercontent.com/fatedier/frp/dev/doc/pic/sponsor_olares.jpeg&quot;&gt;
	&lt;br&gt;
	&lt;b&gt;The sovereign cloud that puts you in control&lt;/b&gt;
	&lt;br&gt;
	&lt;sub&gt;An open source, self-hosted alternative to public clouds, built for data ownership and privacy&lt;/sub&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;!--gold sponsors end--&gt;

## What is frp?

frp is a fast reverse proxy that allows you to expose a local server located behind a NAT or firewall to the Internet. It currently supports **TCP** and **UDP**, as well as **HTTP** and **HTTPS** protocols, enabling requests to be forwarded to internal services via domain name.

frp also offers a P2P connect mode.

## Table of Contents

&lt;!-- vim-markdown-toc GFM --&gt;

* [Development Status](#development-status)
    * [About V2](#about-v2)
* [Architecture](#architecture)
* [Example Usage](#example-usage)
    * [Access your computer in a LAN network via SSH](#access-your-computer-in-a-lan-network-via-ssh)
    * [Multiple SSH services sharing the same port](#multiple-ssh-services-sharing-the-same-port)
    * [Accessing Internal Web Services with Custom Domains in LAN](#accessing-internal-web-services-with-custom-domains-in-lan)
    * [Forward DNS query requests](#forward-dns-query-requests)
    * [Forward Unix Domain Socket](#forward-unix-domain-socket)
    * [Expose a simple HTTP file server](#expose-a-simple-http-file-server)
    * [Enable HTTPS for a local HTTP(S) service](#enable-https-for-a-local-https-service)
    * [Expose your service privately](#expose-your-service-privately)
    * [P2P Mode](#p2p-mode)
* [Features](#features)
    * [Configuration Files](#configuration-files)
    * [Using Environment Variables](#using-environment-variables)
    * [Split Configures Into Different Files](#split-configures-into-different-files)
    * [Server Dashboard](#server-dashboard)
    * [Client Admin UI](#client-admin-ui)
    * [Monitor](#monitor)
        * [Prometheus](#prometheus)
    * [Authenticating the Client](#authenticating-the-client)
        * [Token Authentication](#token-authentication)
        * [OIDC Authentication](#oidc-authentication)
    * [Encryption and Compression](#encryption-and-compression)
        * [TLS](#tls)
    * [Hot-Reloading frpc configuration](#hot-reloading-frpc-configuration)
    * [Get proxy status from client](#get-proxy-status-from-client)
    * [Only allowing certain ports on the server](#only-allowing-certain-ports-on-the-server)
    * [Port Reuse](#port-reuse)
    * [Bandwidth Limit](#bandwidth-limit)
        * [For Each Proxy](#for-each-proxy)
    * [TCP Stream Multiplexing](#tcp-stream-multiplexing)
    * [Support KCP Protocol](#support-kcp-protocol)
    * [Support QUIC Protocol](#support-quic-protocol)
    * [Connection Pooling](#connection-pooling)
    * [Load balancing](#load-balancing)
    * [Service Health Check](#service-health-check)
    * [Rewriting the HTTP Host Header](#rewriting-the-http-host-header)
    * [Setting other HTTP Headers](#setting-other-http-headers)
    * [Get Real IP](#get-real-ip)
        * [HTTP X-Forwarded-For](#http-x-forwarded-for)
        * [Proxy Protocol](#proxy-protocol)
    * [Require HTTP Basic Auth (Password) for Web Services](#require-http-basic-auth-password-for-web-services)
    * [Custom Subdomain Names](#custom-subdomain-names)
    * [URL Routing](#url-routing)
    * [TCP Port Multiplexing](#tcp-port-multiplexing)
    * [Connecting to frps via PROXY](#connecting-to-frps-via-proxy)
    * [Port range mapping](#port-range-mapping)
    * [Client Plugins](#client-plugins)
    * [Server Manage Plugins](#server-manage-plugins)
    * [SSH Tunnel Gateway](#ssh-tunnel-gateway)
    * [Virtual Network (VirtualNet)](#virtual-network-virtualnet)
* [Feature Gates](#feature-gates)
    * [Available Feature Gates](#available-feature-gates)
    * [Enabling Feature Gates](#enabling-feature-gates)
    * [Feature Lifecycle](#feature-lifecycle)
* [Related Projects](#related-projects)
* [Contributing](#contributing)
* [Donation](#donation)
    * [GitHub Sponsors](#github-sponsors)
    * [PayPal](#paypal)

&lt;!-- vim-markdown-toc --&gt;

## Development Status

frp is currently under development. You can try the latest release version in the `master` branch, or use the `dev` branch to access the version currently in development.

We are currently working on version 2 and attempting to perform some code refactoring and improvements. However, please note that it will not be compatible with version 1.

We will transition from version 0 to version 1 at the appropriate time and will only accept bug fixes and improvements, rather than big feature requests.

### About V2

The complexity and difficulty of the v2 version are much higher than anticipated. I can only work on its development during fragmented time periods, and the constant interruptions disrupt productivity significantly. Given this situation, we will continue to optimize and iterate on the current version until we have more free time to proceed with the major version overhaul.

The concept behind v2 is based on my years of experience and reflection in the cloud-native domain, particularly in K8s and ServiceMesh. Its core is a modernized four-layer and seven-layer proxy, similar to envoy. This proxy itself is highly scalable, not only capable of implementing the functionality of intranet penetration but also applicable to various other domains. Building upon this highly scalable core, we aim to implement all the capabilities of frp v1 while also addressing the functionalities that were previously unachievable or difficult to implement in an elegant manner. Furthermore, we will maintain efficient development and iteration capabilities.

In addition, I envision frp itself becoming a highly extensible system and platform, similar to how we can provide a range of extension capabilities based on K8s. In K8s, we can customize development according to enterprise needs, utilizing features such as CRD, controller mode, webhook, CSI, and CNI. In frp v1, we introduced the concept of server plugins, which implemented some basic extensibility. However, it relies on a simple HTTP protocol and requires users to start independent processes and manage them on their own. This approach is far from flexible and convenient, and real-world demands vary greatly. It is unrealistic to expect a non-profit open-source project maintained by a few individuals to meet everyone&#039;s needs.

Finally, we acknowledge that the current design of modules such as configuration management, permission verification, certificate management, and API management is not modern enough. While we may carry out some optimizations in the v1 version, ensuring compatibility remains a challenging issue that requires a considerable amount of effort to address.

We sincerely appreciate your support for frp.

## Architecture

![architecture](/doc/pic/architecture.png)

## Example Usage

To begin, download the latest program for your operating system and architecture from the [Release](https://github.com/fatedier/frp/releases) page.

Next, place the `frps` binary and server configuration file on Server A, which has a public IP address.

Finally, place the `frpc` binary and client configuration file on Server B, which is located on a LAN that cannot be directly accessed from the public internet.

Some antiviruses improperly mark frpc as malware and delete it. This is due to frp being a networking tool capable of creating reverse proxies. Antiviruses sometimes flag reverse proxies due to their ability to bypass firewall port restrictions. If you are using antivirus, then you may need to whitelist/exclude frpc in your antivirus settings to avoid accidental quarantine/deletion. See [issue 3637](https://github.com/fatedier/frp/issues/3637) for more details.

### Access your computer in a LAN network via SSH

1. Modify `frps.toml` on server A by setting the `bindPort` for frp clients to connect to:

  ```toml
  # frps.toml
  bindPort = 7000
  ```

2. Start `frps` on server A:

  `./frps -c ./frps.toml`

3. Modify `frpc.toml` on server B and set the `serverAddr` field to the public IP address of your frps server:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;ssh&quot;
  type = &quot;tcp&quot;
  localIP = &quot;127.0.0.1&quot;
  localPort = 22
  remotePort = 6000
  ```

Note that the `localPort` (listened on the client) and `remotePort` (exposed on the server) are used for traffic going in and out of the frp system, while the `serverPort` is used for communication between frps and frpc.

4. Start `frpc` on server B:

  `./frpc -c ./frpc.toml`

5. To access server B from another machine through server A via SSH (assuming the username is `test`), use the following command:

  `ssh -oPort=6000 test@x.x.x.x`

### Multiple SSH services sharing the same port

This example implements multiple SSH services exposed through the same port using a proxy of type tcpmux. Similarly, as long as the client supports the HTTP Connect proxy connection method, port reuse can be achieved in this way.

1. Deploy frps on a machine with a public IP and modify the frps.toml file. Here is a simplified configuration:

  ```toml
  bindPort = 7000
  tcpmuxHTTPConnectPort = 5002
  ```

2. Deploy frpc on the internal machine A with the following configuration:

  ```toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;ssh1&quot;
  type = &quot;tcpmux&quot;
  multiplexer = &quot;httpconnect&quot;
  customDomains = [&quot;machine-a.example.com&quot;]
  localIP = &quot;127.0.0.1&quot;
  localPort = 22
  ```

3. Deploy another frpc on the internal machine B with the following configuration:

  ```toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;ssh2&quot;
  type = &quot;tcpmux&quot;
  multiplexer = &quot;httpconnect&quot;
  customDomains = [&quot;machine-b.example.com&quot;]
  localIP = &quot;127.0.0.1&quot;
  localPort = 22
  ```

4. To access internal machine A using SSH ProxyCommand, assuming the username is &quot;test&quot;:

  `ssh -o &#039;proxycommand socat - PROXY:x.x.x.x:%h:%p,proxyport=5002&#039; test@machine-a.example.com`

5. To access internal machine B, the only difference is the domain name, assuming the username is &quot;test&quot;:

  `ssh -o &#039;proxycommand socat - PROXY:x.x.x.x:%h:%p,proxyport=5002&#039; test@machine-b.example.com`

### Accessing Internal Web Services with Custom Domains in LAN

Sometimes we need to expose a local web service behind a NAT network to others for testing purposes with our own domain name.

Unfortunately, we cannot resolve a domain name to a local IP. However, we can use frp to expose an HTTP(S) service.

1. Modify `frps.toml` and set the HTTP port for vhost to 8080:

  ```toml
  # frps.toml
  bindPort = 7000
  vhostHTTPPort = 8080
  ```

  If you want to configure an https proxy, you need to set up the `vhostHTTPSPort`.

2. Start `frps`:

  `./frps -c ./frps.toml`

3. Modify `frpc.toml` and set `serverAddr` to the IP address of the remote frps server. Specify the `localPort` of your web service:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;web&quot;
  type = &quot;http&quot;
  localPort = 80
  customDomains = [&quot;www.example.com&quot;]
  ```

4. Start `frpc`:

  `./frpc -c ./frpc.toml`

5. Map the A record of `www.example.com` to either the public IP of the remote frps server or a CNAME record pointing to your original domain.

6. Visit your local web service using url `http://www.example.com:8080`.

### Forward DNS query requests

1. Modify `frps.toml`:

  ```toml
  # frps.toml
  bindPort = 7000
  ```

2. Start `frps`:

  `./frps -c ./frps.toml`

3. Modify `frpc.toml` and set `serverAddr` to the IP address of the remote frps server. Forward DNS query requests to the Google Public DNS server `8.8.8.8:53`:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;dns&quot;
  type = &quot;udp&quot;
  localIP = &quot;8.8.8.8&quot;
  localPort = 53
  remotePort = 6000
  ```

4. Start frpc:

  `./frpc -c ./frpc.toml`

5. Test DNS resolution using the `dig` command:

  `dig @x.x.x.x -p 6000 www.google.com`

### Forward Unix Domain Socket

Expose a Unix domain socket (e.g. the Docker daemon socket) as TCP.

Configure `frps` as above.

1. Start `frpc` with the following configuration:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;unix_domain_socket&quot;
  type = &quot;tcp&quot;
  remotePort = 6000
  [proxies.plugin]
  type = &quot;unix_domain_socket&quot;
  unixPath = &quot;/var/run/docker.sock&quot;
  ```

2. Test the configuration by getting the docker version using `curl`:

  `curl http://x.x.x.x:6000/version`

### Expose a simple HTTP file server

Expose a simple HTTP file server to access files stored in the LAN from the public Internet.

Configure `frps` as described above, then:

1. Start `frpc` with the following configuration:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;test_static_file&quot;
  type = &quot;tcp&quot;
  remotePort = 6000
  [proxies.plugin]
  type = &quot;static_file&quot;
  localPath = &quot;/tmp/files&quot;
  stripPrefix = &quot;static&quot;
  httpUser = &quot;abc&quot;
  httpPassword = &quot;abc&quot;
  ```

2. Visit `http://x.x.x.x:6000/static/` from your browser and specify correct username and password to view files in `/tmp/files` on the `frpc` machine.

### Enable HTTPS for a local HTTP(S) service

You may substitute `https2https` for the plugin, and point the `localAddr` to a HTTPS endpoint.

1. Start `frpc` with the following configuration:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;test_https2http&quot;
  type = &quot;https&quot;
  customDomains = [&quot;test.example.com&quot;]

  [proxies.plugin]
  type = &quot;https2http&quot;
  localAddr = &quot;127.0.0.1:80&quot;
  crtPath = &quot;./server.crt&quot;
  keyPath = &quot;./server.key&quot;
  hostHeaderRewrite = &quot;127.0.0.1&quot;
  requestHeaders.set.x-from-where = &quot;frp&quot;
  ```

2. Visit `https://test.example.com`.

### Expose your service privately

To mitigate risks associated with exposing certain services directly to the public network, STCP (Secret TCP) mode requires a preshared key to be used for access to the service from other clients.

Configure `frps` same as above.

1. Start `frpc` on machine B with the following config. This example is for exposing the SSH service (port 22), and note the `secretKey` field for the preshared key, and that the `remotePort` field is removed here:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[proxies]]
  name = &quot;secret_ssh&quot;
  type = &quot;stcp&quot;
  secretKey = &quot;abcdefg&quot;
  localIP = &quot;127.0.0.1&quot;
  localPort = 22
  ```

2. Start another `frpc` (typically on another machine C) with the following config to access the SSH service with a security key (`secretKey` field):

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000

  [[visitors]]
  name = &quot;secret_ssh_visitor&quot;
  type = &quot;stcp&quot;
  serverName = &quot;secret_ssh&quot;
  secretKey = &quot;abcdefg&quot;
  bindAddr = &quot;127.0.0.1&quot;
  bindPort = 6000
  ```

3. On machine C, connect to SSH on machine B, using this command:

  `ssh -oPort=6000 127.0.0.1`

### P2P Mode

**xtcp** is designed to transmit large amounts of data directly between clients. A frps server is still needed, as P2P here only refers to the actual data transmission.

Note that it may not work with all types of NAT devices. You might want to fallback to stcp if xtcp doesn&#039;t work.

1. Start `frpc` on machine B, and expose the SSH port. Note that the `remotePort` field is removed:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000
  # set up a new stun server if the default one is not available.
  # natHoleStunServer = &quot;xxx&quot;

  [[proxies]]
  name = &quot;p2p_ssh&quot;
  type = &quot;xtcp&quot;
  secretKey = &quot;abcdefg&quot;
  localIP = &quot;127.0.0.1&quot;
  localPort = 22
  ```

2. Start another `frpc` (typically on another machine C) with the configuration to connect to SSH using P2P mode:

  ```toml
  # frpc.toml
  serverAddr = &quot;x.x.x.x&quot;
  serverPort = 7000
  # set up a new stun server if the default one is not available.
  # natHoleStunServer = &quot;xxx&quot;

  [[visitors]]
  name = &quot;p2p_ssh_visitor&quot;
  type = &quot;xtcp&quot;
  serverName = &quot;p2p_ssh&quot;
  secretKey = &quot;abcdefg&quot;
  bindAddr = &quot;127.0.0.1&quot;
  bindPort = 6000
  # when automatic tunnel persistence is required, set it to true
  keepTunnelOpen = false
  ```

3. On machine C, connect to SSH on machine B, using this command:

  `ssh -oPort=6000 127.0.0.1`

## Features

### Configuration Files

Since v0.52.0, we support TOML, YAML, and JSON for configuration. Please note that INI is deprecated and will be removed in future releases. New features will only be available in TOML, YAML, or JSON. Users wanting these new features should switch their configuration format accordingly.

Read the full example configuration files to find out even more features not described here.

Examples use TOML format, but you can still use YAML or JSON.

These configuration files is for reference only. Please do not use this configuration directly to run the program as it may have various issues.

[Full configuration file for frps (Server)](./conf/frps_full_example.toml)

[Full configuration file for frpc (Client)](./conf/frpc_full_example.toml)

### Using Environment Variables

Environment variables can be referenced in the configuration file, using Go&#039;s standard format:

```toml
# frpc.toml
serverAddr = &quot;{{ .Envs.FRP_SERVER_ADDR }}&quot;
serverPort = 7000

[[proxies]]
name = &quot;ssh&quot;
type = &quot;tcp&quot;
localIP = &quot;127.0.0.1&quot;
localPort = 22
remotePort = {{ .Envs.FRP_SSH_REMOTE_PORT }}
```

With the config above, variables can be passed into `frpc` program like this:

```
export FRP_SERVER_ADDR=x.x.x.x
export FRP_SSH_REMOTE_PORT=6000
./frpc -c ./frpc.toml
```

`frpc` will render configuration file template using OS environment variables. Remember to prefix your reference with `.Envs`.

### Split

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[gohugoio/hugo]]></title>
            <link>https://github.com/gohugoio/hugo</link>
            <guid>https://github.com/gohugoio/hugo</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:39 GMT</pubDate>
            <description><![CDATA[The world‚Äôs fastest framework for building websites.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/gohugoio/hugo">gohugoio/hugo</a></h1>
            <p>The world‚Äôs fastest framework for building websites.</p>
            <p>Language: Go</p>
            <p>Stars: 84,376</p>
            <p>Forks: 8,081</p>
            <p>Stars today: 18 stars today</p>
            <h2>README</h2><pre>[bep]: https://github.com/bep
[bugs]: https://github.com/gohugoio/hugo/issues?q=is%3Aopen+is%3Aissue+label%3ABug
[contributing]: CONTRIBUTING.md
[create a proposal]: https://github.com/gohugoio/hugo/issues/new?labels=Proposal%2C+NeedsTriage&amp;template=feature_request.md
[documentation repository]: https://github.com/gohugoio/hugoDocs
[documentation]: https://gohugo.io/documentation
[dragonfly bsd, freebsd, netbsd, and openbsd]: https://gohugo.io/installation/bsd
[features]: https://gohugo.io/about/features/
[forum]: https://discourse.gohugo.io
[friends]: https://github.com/gohugoio/hugo/graphs/contributors
[go]: https://go.dev/
[hugo modules]: https://gohugo.io/hugo-modules/
[installation]: https://gohugo.io/installation
[issue queue]: https://github.com/gohugoio/hugo/issues
[linux]: https://gohugo.io/installation/linux
[macos]: https://gohugo.io/installation/macos
[prebuilt binary]: https://github.com/gohugoio/hugo/releases/latest
[requesting help]: https://discourse.gohugo.io/t/requesting-help/9132
[spf13]: https://github.com/spf13
[static site generator]: https://en.wikipedia.org/wiki/Static_site_generator
[support]: https://discourse.gohugo.io
[themes]: https://themes.gohugo.io/
[website]: https://gohugo.io
[windows]: https://gohugo.io/installation/windows

&lt;a href=&quot;https://gohugo.io/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gohugoio/gohugoioTheme/master/static/images/hugo-logo-wide.svg?sanitize=true&quot; alt=&quot;Hugo&quot; width=&quot;565&quot;&gt;&lt;/a&gt;

A fast and flexible static site generator built with love by [bep], [spf13], and [friends] in [Go].

---

[![GoDoc](https://godoc.org/github.com/gohugoio/hugo?status.svg)](https://godoc.org/github.com/gohugoio/hugo)
[![Tests on Linux, MacOS and Windows](https://github.com/gohugoio/hugo/workflows/Test/badge.svg)](https://github.com/gohugoio/hugo/actions?query=workflow%3ATest)
[![Go Report Card](https://goreportcard.com/badge/github.com/gohugoio/hugo)](https://goreportcard.com/report/github.com/gohugoio/hugo)

[Website] | [Installation] | [Documentation] | [Support] | [Contributing] | &lt;a rel=&quot;me&quot; href=&quot;https://fosstodon.org/@gohugoio&quot;&gt;Mastodon&lt;/a&gt;

## Overview

Hugo is a [static site generator] written in [Go], optimized for speed and designed for flexibility. With its advanced templating system and fast asset pipelines, Hugo renders a complete site in seconds, often less.

Due to its flexible framework, multilingual support, and powerful taxonomy system, Hugo is widely used to create:

- Corporate, government, nonprofit, education, news, event, and project sites
- Documentation sites
- Image portfolios
- Landing pages
- Business, professional, and personal blogs
- Resumes and CVs

Use Hugo&#039;s embedded web server during development to instantly see changes to content, structure, behavior, and presentation. Then deploy the site to your host, or push changes to your Git provider for automated builds and deployment.

Hugo&#039;s fast asset pipelines include:

- Image processing &amp;ndash; Convert, resize, crop, rotate, adjust colors, apply filters, overlay text and images, and extract EXIF data
- JavaScript bundling &amp;ndash; Transpile TypeScript and JSX to JavaScript, bundle, tree shake, minify, create source maps, and perform SRI hashing.
- Sass processing &amp;ndash; Transpile Sass to CSS, bundle, tree shake, minify, create source maps, perform SRI hashing, and integrate with PostCSS
- Tailwind CSS processing &amp;ndash; Compile Tailwind CSS utility classes into standard CSS, bundle, tree shake, optimize, minify, perform SRI hashing, and integrate with PostCSS

And with [Hugo Modules], you can share content, assets, data, translations, themes, templates, and configuration with other projects via public or private Git repositories.

See the [features] section of the documentation for a comprehensive summary of Hugo&#039;s capabilities.

## Sponsors

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p float=&quot;left&quot;&gt;
  &lt;a href=&quot;https://www.linode.com/?utm_campaign=hugosponsor&amp;utm_medium=banner&amp;utm_source=hugogithub&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gohugoio/hugoDocs/master/assets/images/sponsors/linode-logo_standard_light_medium.png&quot; width=&quot;200&quot; alt=&quot;Linode&quot;&gt;&lt;/a&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;
  &lt;a href=&quot;https://www.jetbrains.com/go/?utm_source=OSS&amp;utm_medium=referral&amp;utm_campaign=hugo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gohugoio/hugoDocs/master/assets/images/sponsors/goland.svg&quot; width=&quot;200&quot; alt=&quot;The complete IDE crafted for professional Go developers.&quot;&gt;&lt;/a&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;
    &lt;a href=&quot;https://cloudcannon.com/hugo-cms/?utm_campaign=HugoSponsorship&amp;utm_source=sponsor&amp;utm_content=gohugo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gohugoio/hugoDocs/master/assets/images/sponsors/cloudcannon-cms-logo.svg&quot; width=&quot;200&quot; alt=&quot;CloudCannon&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

## Editions

Hugo is available in three editions: standard, extended, and extended/deploy. While the standard edition provides core functionality, the extended and extended/deploy editions offer advanced features.

Feature|extended edition|extended/deploy edition
:--|:-:|:-:
Encode to the WebP format when [processing images]. You can decode WebP images with any edition.|:heavy_check_mark:|:heavy_check_mark:
[Transpile Sass to CSS] using the embedded LibSass transpiler. You can use the [Dart Sass] transpiler with any edition.|:heavy_check_mark:|:heavy_check_mark:
Deploy your site directly to a Google Cloud Storage bucket, an AWS S3 bucket, or an Azure Storage container. See&amp;nbsp;[details].|:x:|:heavy_check_mark:

[dart sass]: https://gohugo.io/functions/css/sass/#dart-sass
[processing images]: https://gohugo.io/content-management/image-processing/
[transpile sass to css]: https://gohugo.io/functions/css/sass/
[details]: https://gohugo.io/hosting-and-deployment/hugo-deploy/

Unless your specific deployment needs require the extended/deploy edition, we recommend the extended edition.

## Installation

Install Hugo from a [prebuilt binary], package manager, or package repository. Please see the installation instructions for your operating system:

- [macOS]
- [Linux]
- [Windows]
- [DragonFly BSD, FreeBSD, NetBSD, and OpenBSD]

## Build from source

Prerequisites to build Hugo from source:

- Standard edition: Go 1.24.0 or later
- Extended edition: Go 1.24.0 or later, and GCC
- Extended/deploy edition: Go 1.24.0 or later, and GCC

Build the standard edition:

```text
go install github.com/gohugoio/hugo@latest
```

Build the extended edition:

```text
CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest
```

Build the extended/deploy edition:

```text
CGO_ENABLED=1 go install -tags extended,withdeploy github.com/gohugoio/hugo@latest
```

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=gohugoio/hugo&amp;type=Timeline)](https://star-history.com/#gohugoio/hugo&amp;Timeline)

## Documentation

Hugo&#039;s [documentation] includes installation instructions, a quick start guide, conceptual explanations, reference information, and examples.

Please submit documentation issues and pull requests to the [documentation repository].

## Support

Please **do not use the issue queue** for questions or troubleshooting. Unless you are certain that your issue is a software defect, use the [forum].

Hugo‚Äôs [forum] is an active community of users and developers who answer questions, share knowledge, and provide examples. A quick search of over 20,000 topics will often answer your question. Please be sure to read about [requesting help] before asking your first question.

## Contributing

You can contribute to the Hugo project by:

- Answering questions on the [forum]
- Improving the [documentation]
- Monitoring the [issue queue]
- Creating or improving [themes]
- Squashing [bugs]

Please submit documentation issues and pull requests to the [documentation repository].

If you have an idea for an enhancement or new feature, create a new topic on the [forum] in the &quot;Feature&quot; category. This will help you to:

- Determine if the capability already exists
- Measure interest
- Refine the concept

If there is sufficient interest, [create a proposal]. Do not submit a pull request until the project lead accepts the proposal.

For a complete guide to contributing to Hugo, see the [Contribution Guide](CONTRIBUTING.md).

## Dependencies

Hugo stands on the shoulders of great open source libraries. Run `hugo env --logLevel info` to display a list of dependencies.

&lt;details&gt;
&lt;summary&gt;See current dependencies&lt;/summary&gt;

```text
github.com/BurntSushi/locker=&quot;v0.0.0-20171006230638-a6e239ea1c69&quot;
github.com/PuerkitoBio/goquery=&quot;v1.10.1&quot;
github.com/alecthomas/chroma/v2=&quot;v2.15.0&quot;
github.com/andybalholm/cascadia=&quot;v1.3.3&quot;
github.com/armon/go-radix=&quot;v1.0.1-0.20221118154546-54df44f2176c&quot;
github.com/bep/clocks=&quot;v0.5.0&quot;
github.com/bep/debounce=&quot;v1.2.0&quot;
github.com/bep/gitmap=&quot;v1.6.0&quot;
github.com/bep/goat=&quot;v0.5.0&quot;
github.com/bep/godartsass/v2=&quot;v2.3.2&quot;
github.com/bep/golibsass=&quot;v1.2.0&quot;
github.com/bep/gowebp=&quot;v0.3.0&quot;
github.com/bep/imagemeta=&quot;v0.8.4&quot;
github.com/bep/lazycache=&quot;v0.7.0&quot;
github.com/bep/logg=&quot;v0.4.0&quot;
github.com/bep/mclib=&quot;v1.20400.20402&quot;
github.com/bep/overlayfs=&quot;v0.9.2&quot;
github.com/bep/simplecobra=&quot;v0.5.0&quot;
github.com/bep/tmc=&quot;v0.5.1&quot;
github.com/cespare/xxhash/v2=&quot;v2.3.0&quot;
github.com/clbanning/mxj/v2=&quot;v2.7.0&quot;
github.com/cpuguy83/go-md2man/v2=&quot;v2.0.4&quot;
github.com/disintegration/gift=&quot;v1.2.1&quot;
github.com/dlclark/regexp2=&quot;v1.11.5&quot;
github.com/dop251/goja=&quot;v0.0.0-20250125213203-5ef83b82af17&quot;
github.com/evanw/esbuild=&quot;v0.24.2&quot;
github.com/fatih/color=&quot;v1.18.0&quot;
github.com/frankban/quicktest=&quot;v1.14.6&quot;
github.com/fsnotify/fsnotify=&quot;v1.8.0&quot;
github.com/getkin/kin-openapi=&quot;v0.129.0&quot;
github.com/ghodss/yaml=&quot;v1.0.0&quot;
github.com/go-openapi/jsonpointer=&quot;v0.21.0&quot;
github.com/go-openapi/swag=&quot;v0.23.0&quot;
github.com/go-sourcemap/sourcemap=&quot;v2.1.4+incompatible&quot;
github.com/gobuffalo/flect=&quot;v1.0.3&quot;
github.com/gobwas/glob=&quot;v0.2.3&quot;
github.com/gohugoio/go-i18n/v2=&quot;v2.1.3-0.20230805085216-e63c13218d0e&quot;
github.com/gohugoio/hashstructure=&quot;v0.5.0&quot;
github.com/gohugoio/httpcache=&quot;v0.7.0&quot;
github.com/gohugoio/hugo-goldmark-extensions/extras=&quot;v0.2.0&quot;
github.com/gohugoio/hugo-goldmark-extensions/passthrough=&quot;v0.3.0&quot;
github.com/gohugoio/locales=&quot;v0.14.0&quot;
github.com/gohugoio/localescompressed=&quot;v1.0.1&quot;
github.com/golang/freetype=&quot;v0.0.0-20170609003504-e2365dfdc4a0&quot;
github.com/google/go-cmp=&quot;v0.6.0&quot;
github.com/google/pprof=&quot;v0.0.0-20250208200701-d0013a598941&quot;
github.com/gorilla/websocket=&quot;v1.5.3&quot;
github.com/hairyhenderson/go-codeowners=&quot;v0.7.0&quot;
github.com/hashicorp/golang-lru/v2=&quot;v2.0.7&quot;
github.com/jdkato/prose=&quot;v1.2.1&quot;
github.com/josharian/intern=&quot;v1.0.0&quot;
github.com/kr/pretty=&quot;v0.3.1&quot;
github.com/kr/text=&quot;v0.2.0&quot;
github.com/kyokomi/emoji/v2=&quot;v2.2.13&quot;
github.com/lucasb-eyer/go-colorful=&quot;v1.2.0&quot;
github.com/mailru/easyjson=&quot;v0.7.7&quot;
github.com/makeworld-the-better-one/dither/v2=&quot;v2.4.0&quot;
github.com/marekm4/color-extractor=&quot;v1.2.1&quot;
github.com/mattn/go-colorable=&quot;v0.1.13&quot;
github.com/mattn/go-isatty=&quot;v0.0.20&quot;
github.com/mattn/go-runewidth=&quot;v0.0.9&quot;
github.com/mazznoer/csscolorparser=&quot;v0.1.5&quot;
github.com/mitchellh/mapstructure=&quot;v1.5.1-0.20231216201459-8508981c8b6c&quot;
github.com/mohae/deepcopy=&quot;v0.0.0-20170929034955-c48cc78d4826&quot;
github.com/muesli/smartcrop=&quot;v0.3.0&quot;
github.com/niklasfasching/go-org=&quot;v1.7.0&quot;
github.com/oasdiff/yaml3=&quot;v0.0.0-20241210130736-a94c01f36349&quot;
github.com/oasdiff/yaml=&quot;v0.0.0-20241210131133-6b86fb107d80&quot;
github.com/olekukonko/tablewriter=&quot;v0.0.5&quot;
github.com/pbnjay/memory=&quot;v0.0.0-20210728143218-7b4eea64cf58&quot;
github.com/pelletier/go-toml/v2=&quot;v2.2.3&quot;
github.com/perimeterx/marshmallow=&quot;v1.1.5&quot;
github.com/pkg/browser=&quot;v0.0.0-20240102092130-5ac0b6a4141c&quot;
github.com/pkg/errors=&quot;v0.9.1&quot;
github.com/rivo/uniseg=&quot;v0.4.7&quot;
github.com/rogpeppe/go-internal=&quot;v1.13.1&quot;
github.com/russross/blackfriday/v2=&quot;v2.1.0&quot;
github.com/sass/libsass=&quot;3.6.6&quot;
github.com/spf13/afero=&quot;v1.11.0&quot;
github.com/spf13/cast=&quot;v1.7.1&quot;
github.com/spf13/cobra=&quot;v1.8.1&quot;
github.com/spf13/fsync=&quot;v0.10.1&quot;
github.com/spf13/pflag=&quot;v1.0.6&quot;
github.com/tdewolff/minify/v2=&quot;v2.20.37&quot;
github.com/tdewolff/parse/v2=&quot;v2.7.15&quot;
github.com/tetratelabs/wazero=&quot;v1.8.2&quot;
github.com/webmproject/libwebp=&quot;v1.3.2&quot;
github.com/yuin/goldmark-emoji=&quot;v1.0.4&quot;
github.com/yuin/goldmark=&quot;v1.7.8&quot;
go.uber.org/automaxprocs=&quot;v1.5.3&quot;
golang.org/x/crypto=&quot;v0.33.0&quot;
golang.org/x/exp=&quot;v0.0.0-20250210185358-939b2ce775ac&quot;
golang.org/x/image=&quot;v0.24.0&quot;
golang.org/x/mod=&quot;v0.23.0&quot;
golang.org/x/net=&quot;v0.35.0&quot;
golang.org/x/sync=&quot;v0.11.0&quot;
golang.org/x/sys=&quot;v0.30.0&quot;
golang.org/x/text=&quot;v0.22.0&quot;
golang.org/x/tools=&quot;v0.30.0&quot;
golang.org/x/xerrors=&quot;v0.0.0-20240903120638-7835f813f4da&quot;
gonum.org/v1/plot=&quot;v0.15.0&quot;
google.golang.org/protobuf=&quot;v1.36.5&quot;
gopkg.in/yaml.v2=&quot;v2.4.0&quot;
gopkg.in/yaml.v3=&quot;v3.0.1&quot;
oss.terrastruct.com/d2=&quot;v0.6.9&quot;
oss.terrastruct.com/util-go=&quot;v0.0.0-20241005222610-44c011a04896&quot;
rsc.io/qr=&quot;v0.2.0&quot;
software.sslmate.com/src/go-pkcs12=&quot;v0.2.0&quot;
```
&lt;/details&gt;
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[alireza0/s-ui]]></title>
            <link>https://github.com/alireza0/s-ui</link>
            <guid>https://github.com/alireza0/s-ui</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:38 GMT</pubDate>
            <description><![CDATA[An advanced Web Panel ‚Ä¢ Built for SagerNet/Sing-Box]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/alireza0/s-ui">alireza0/s-ui</a></h1>
            <p>An advanced Web Panel ‚Ä¢ Built for SagerNet/Sing-Box</p>
            <p>Language: Go</p>
            <p>Stars: 5,627</p>
            <p>Forks: 923</p>
            <p>Stars today: 15 stars today</p>
            <h2>README</h2><pre># S-UI
**An Advanced Web Panel ‚Ä¢ Built on SagerNet/Sing-Box**

![](https://img.shields.io/github/v/release/alireza0/s-ui.svg)
![S-UI Docker pull](https://img.shields.io/docker/pulls/alireza7/s-ui.svg)
[![Go Report Card](https://goreportcard.com/badge/github.com/alireza0/s-ui)](https://goreportcard.com/report/github.com/alireza0/s-ui)
[![Downloads](https://img.shields.io/github/downloads/alireza0/s-ui/total.svg)](https://img.shields.io/github/downloads/alireza0/s-ui/total.svg)
[![License](https://img.shields.io/badge/license-GPL%20V3-blue.svg?longCache=true)](https://www.gnu.org/licenses/gpl-3.0.en.html)

&gt; **Disclaimer:** This project is only for personal learning and communication, please do not use it for illegal purposes, please do not use it in a production environment

**If you think this project is helpful to you, you may wish to give a**:star2:

[![&quot;Buy Me A Coffee&quot;](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/alireza7)

&lt;a href=&quot;https://nowpayments.io/donation/alireza7&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;
   &lt;img src=&quot;https://nowpayments.io/images/embeds/donation-button-white.svg&quot; alt=&quot;Crypto donation button by NOWPayments&quot;&gt;
&lt;/a&gt;

## Quick Overview
| Features                               |      Enable?       |
| -------------------------------------- | :----------------: |
| Multi-Protocol                         | :heavy_check_mark: |
| Multi-Language                         | :heavy_check_mark: |
| Multi-Client/Inbound                   | :heavy_check_mark: |
| Advanced Traffic Routing Interface     | :heavy_check_mark: |
| Client &amp; Traffic &amp; System Status       | :heavy_check_mark: |
| Subscription Service (link/json + info)| :heavy_check_mark: |
| Dark/Light Theme                       | :heavy_check_mark: |
| API Interface                          | :heavy_check_mark: |

## Supported Platforms
| Platform | Architecture | Status |
|----------|--------------|---------|
| Linux    | amd64, arm64, armv7, armv6, armv5, 386, s390x | ‚úÖ Supported |
| Windows  | amd64, 386, arm64 | ‚úÖ Supported |
| macOS    | amd64, arm64 | üöß Experimental |

## Screenshots

![&quot;Main&quot;](https://github.com/alireza0/s-ui-frontend/raw/main/media/main.png)

[Other UI Screenshots](https://github.com/alireza0/s-ui-frontend/blob/main/screenshots.md)

## API Documentation

[API-Documentation Wiki](https://github.com/alireza0/s-ui/wiki/API-Documentation)

## Default Installation Information
- Panel Port: 2095
- Panel Path: /app/
- Subscription Port: 2096
- Subscription Path: /sub/
- User/Password: admin

## Install &amp; Upgrade to Latest Version

### Linux/macOS
```sh
bash &lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/master/install.sh)
```

### Windows
1. Download the latest Windows release from [GitHub Releases](https://github.com/alireza0/s-ui/releases/latest)
2. Extract the ZIP file
3. Run `install-windows.bat` as Administrator
4. Follow the installation wizard

## Install legacy Version

**Step 1:** To install your desired legacy version, add the version to the end of the installation command. e.g., ver `1.0.0`:

```sh
VERSION=1.0.0 &amp;&amp; bash &lt;(curl -Ls https://raw.githubusercontent.com/alireza0/s-ui/$VERSION/install.sh) $VERSION
```

## Manual installation

### Linux/macOS
1. Get the latest version of S-UI based on your OS/Architecture from GitHub: [https://github.com/alireza0/s-ui/releases/latest](https://github.com/alireza0/s-ui/releases/latest)
2. **OPTIONAL** Get the latest version of `s-ui.sh` [https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh](https://raw.githubusercontent.com/alireza0/s-ui/master/s-ui.sh)
3. **OPTIONAL** Copy `s-ui.sh` to /usr/bin/ and run `chmod +x /usr/bin/s-ui`.
4. Extract s-ui tar.gz file to a directory of your choice and navigate to the directory where you extracted the tar.gz file.
5. Copy *.service files to /etc/systemd/system/ and run `systemctl daemon-reload`.
6. Enable autostart and start S-UI service using `systemctl enable s-ui --now`
7. Start sing-box service using `systemctl enable sing-box --now`

### Windows
1. Get the latest Windows version from GitHub: [https://github.com/alireza0/s-ui/releases/latest](https://github.com/alireza0/s-ui/releases/latest)
2. Download the appropriate Windows package (e.g., `s-ui-windows-amd64.zip`)
3. Extract the ZIP file to a directory of your choice
4. Run `install-windows.bat` as Administrator
5. Follow the installation wizard
6. Access the panel at http://localhost:2095/app

## Uninstall S-UI

```sh
sudo -i

systemctl disable s-ui  --now

rm -f /etc/systemd/system/sing-box.service
systemctl daemon-reload

rm -fr /usr/local/s-ui
rm /usr/bin/s-ui
```

## Install using Docker

&lt;details&gt;
   &lt;summary&gt;Click for details&lt;/summary&gt;

### Usage

**Step 1:** Install Docker

```shell
curl -fsSL https://get.docker.com | sh
```

**Step 2:** Install S-UI

&gt; Docker compose method

```shell
mkdir s-ui &amp;&amp; cd s-ui
wget -q https://raw.githubusercontent.com/alireza0/s-ui/master/docker-compose.yml
docker compose up -d
```

&gt; Use docker

```shell
mkdir s-ui &amp;&amp; cd s-ui
docker run -itd \
    -p 2095:2095 -p 2096:2096 -p 443:443 -p 80:80 \
    -v $PWD/db/:/app/db/ \
    -v $PWD/cert/:/root/cert/ \
    --name s-ui --restart=unless-stopped \
    alireza7/s-ui:latest
```

&gt; Build your own image

```shell
git clone https://github.com/alireza0/s-ui
git submodule update --init --recursive
docker build -t s-ui .
```

&lt;/details&gt;

## Manual run ( contribution )

&lt;details&gt;
   &lt;summary&gt;Click for details&lt;/summary&gt;

### Build and run whole project
```shell
./runSUI.sh
```

### Clone the repository
```shell
# clone repository
git clone https://github.com/alireza0/s-ui
# clone submodules
git submodule update --init --recursive
```


### - Frontend

Visit [s-ui-frontend](https://github.com/alireza0/s-ui-frontend) for frontend code

### - Backend
&gt; Please build frontend once before!

To build backend:
```shell
# remove old frontend compiled files
rm -fr web/html/*
# apply new frontend compiled files
cp -R frontend/dist/ web/html/
# build
go build -o sui main.go
```

To run backend (from root folder of repository):
```shell
./sui
```

&lt;/details&gt;

## Languages

- English
- Farsi
- Vietnamese
- Chinese (Simplified)
- Chinese (Traditional)
- Russian

## Features

- Supported protocols:
  - General:  Mixed, SOCKS, HTTP, HTTPS, Direct, Redirect, TProxy
  - V2Ray based: VLESS, VMess, Trojan, Shadowsocks
  - Other protocols: ShadowTLS, Hysteria, Hysteria2, Naive, TUIC
- Supports XTLS protocols
- An advanced interface for routing traffic, incorporating PROXY Protocol, External, and Transparent Proxy, SSL Certificate, and Port
- An advanced interface for inbound and outbound configuration
- Clients‚Äô traffic cap and expiration date
- Displays online clients, inbounds and outbounds with traffic statistics, and system status monitoring
- Subscription service with ability to add external links and subscription
- HTTPS for secure access to the web panel and subscription service (self-provided domain + SSL certificate)
- Dark/Light theme

## Environment Variables

&lt;details&gt;
  &lt;summary&gt;Click for details&lt;/summary&gt;

### Usage

| Variable       |                      Type                      | Default       |
| -------------- | :--------------------------------------------: | :------------ |
| SUI_LOG_LEVEL  | `&quot;debug&quot;` \| `&quot;info&quot;` \| `&quot;warn&quot;` \| `&quot;error&quot;` | `&quot;info&quot;`      |
| SUI_DEBUG      |                   `boolean`                    | `false`       |
| SUI_BIN_FOLDER |                    `string`                    | `&quot;bin&quot;`       |
| SUI_DB_FOLDER  |                    `string`                    | `&quot;db&quot;`        |
| SINGBOX_API    |                    `string`                    | -             |

&lt;/details&gt;

## SSL Certificate

&lt;details&gt;
  &lt;summary&gt;Click for details&lt;/summary&gt;

### Certbot

```bash
snap install core; snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot

certbot certonly --standalone --register-unsafely-without-email --non-interactive --agree-tos -d &lt;Your Domain Name&gt;
```

&lt;/details&gt;

## Stargazers over Time
[![Stargazers over time](https://starchart.cc/alireza0/s-ui.svg)](https://starchart.cc/alireza0/s-ui)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[rook/rook]]></title>
            <link>https://github.com/rook/rook</link>
            <guid>https://github.com/rook/rook</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:37 GMT</pubDate>
            <description><![CDATA[Storage Orchestration for Kubernetes]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/rook/rook">rook/rook</a></h1>
            <p>Storage Orchestration for Kubernetes</p>
            <p>Language: Go</p>
            <p>Stars: 13,143</p>
            <p>Forks: 2,784</p>
            <p>Stars today: 6 stars today</p>
            <h2>README</h2><pre>&lt;img alt=&quot;Rook&quot; src=&quot;Documentation/media/logo.svg&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;

[![CNCF Status](https://img.shields.io/badge/cncf%20status-graduated-blue.svg)](https://www.cncf.io/projects)
[![GitHub release](https://img.shields.io/github/release/rook/rook/all.svg)](https://github.com/rook/rook/releases)
[![Docker Pulls](https://img.shields.io/docker/pulls/rook/ceph)](https://hub.docker.com/u/rook)
[![Go Report Card](https://goreportcard.com/badge/github.com/rook/rook)](https://goreportcard.com/report/github.com/rook/rook)
[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/rook/rook/badge)](https://scorecard.dev/viewer/?uri=github.com/rook/rook)
[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/1599/badge)](https://bestpractices.coreinfrastructure.org/projects/1599)
[![Security scanning](https://github.com/rook/rook/actions/workflows/snyk.yaml/badge.svg)](https://github.com/rook/rook/actions/workflows/snyk.yaml)
[![Slack](https://img.shields.io/badge/rook-slack-blue)](https://slack.rook.io)
[![Twitter Follow](https://img.shields.io/twitter/follow/rook_io.svg?style=social&amp;label=Follow)](https://twitter.com/intent/follow?screen_name=rook_io&amp;user_id=788180534543339520)

# What is Rook?

Rook is an open source **cloud-native storage orchestrator** for Kubernetes, providing the platform, framework, and support for Ceph storage to natively integrate with Kubernetes.

[Ceph](https://ceph.com/) is a distributed storage system that provides file, block and object storage and is deployed in large scale production clusters.

Rook automates deployment and management of Ceph to provide self-managing, self-scaling, and self-healing storage services.
The Rook operator does this by building on Kubernetes resources to deploy, configure, provision, scale, upgrade, and monitor Ceph.

The status of the Ceph storage provider is **Stable**. Features and improvements will be planned for many future versions. Upgrades between versions are provided to ensure backward compatibility between releases.

Rook is hosted by the [Cloud Native Computing Foundation](https://cncf.io) (CNCF) as a [graduated](https://www.cncf.io/announcements/2020/10/07/cloud-native-computing-foundation-announces-rook-graduation/) level project. If you are a company that wants to help shape the evolution of technologies that are container-packaged, dynamically-scheduled and microservices-oriented, consider joining the CNCF. For details about who&#039;s involved and how Rook plays a role, read the CNCF [announcement](https://www.cncf.io/blog/2018/01/29/cncf-host-rook-project-cloud-native-storage-capabilities).

## Getting Started and Documentation

For installation, deployment, and administration, see our [Documentation](https://rook.github.io/docs/rook/latest-release) and [QuickStart Guide](https://rook.github.io/docs/rook/latest-release/Getting-Started/quickstart).

## Contributing

We welcome contributions. See [Contributing](CONTRIBUTING.md) to get started.

## Report a Bug

For filing bugs, suggesting improvements, or requesting new features, please open an [issue](https://github.com/rook/rook/issues).

### Reporting Security Vulnerabilities

If you find a vulnerability or a potential vulnerability in Rook please let us know immediately at
[cncf-rook-security@lists.cncf.io](mailto:cncf-rook-security@lists.cncf.io). We&#039;ll send a confirmation email to acknowledge your
report, and we&#039;ll send an additional email when we&#039;ve identified the issues positively or
negatively.

For further details, please see the complete [security release process](SECURITY.md).

## Contact

Please use the following to reach members of the community:

-   Slack: Join our [slack channel](https://slack.rook.io)
-   GitHub: Start a [discussion](https://github.com/rook/rook/discussions) or open an [issue](https://github.com/rook/rook/issues)
-   Twitter: [@rook_io](https://twitter.com/rook_io)
-   Security topics: [cncf-rook-security@lists.cncf.io](#reporting-security-vulnerabilities)

## Community Meeting

A regular community meeting takes place the [2nd Tuesday of every month at 9:00 AM PT (Pacific Time)](https://zoom.us/j/98052644520?pwd=K0R4RUZCc3NhQisyMnA5VlV2MVBhQT09).
Convert to your [local timezone](http://www.thetimezoneconverter.com/?t=9:00&amp;tz=PT%20%28Pacific%20Time%29).

Any changes to the meeting schedule will be added to the [agenda doc](https://docs.google.com/document/d/1exd8_IG6DkdvyA0eiTtL2z5K2Ra-y68VByUUgwP7I9A/edit?usp=sharing) and posted to [Slack #announcements](https://rook-io.slack.com/messages/C76LLCEE7/).

Anyone who wants to discuss the direction of the project, design and implementation reviews, or general questions with the broader community is welcome and encouraged to join.

-   Meeting link: &lt;https://zoom.us/j/98052644520?pwd=K0R4RUZCc3NhQisyMnA5VlV2MVBhQT09&gt;
-   [Current agenda and past meeting notes](https://docs.google.com/document/d/1exd8_IG6DkdvyA0eiTtL2z5K2Ra-y68VByUUgwP7I9A/edit?usp=sharing)
-   [Past meeting recordings](https://www.youtube.com/playlist?list=PLP0uDo-ZFnQP6NAgJWAtR9jaRcgqyQKVy)

## Official Releases

Official releases of Rook can be found on the [releases page](https://github.com/rook/rook/releases).
Please note that it is **strongly recommended** that you use [official releases](https://github.com/rook/rook/releases) of Rook, as unreleased versions from the master branch are subject to changes and incompatibilities that will not be supported in the official releases.
Builds from the master branch can have functionality changed and even removed at any time without compatibility support and without prior notice.

## Licensing

Rook is under the Apache 2.0 license.

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Frook%2Frook.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Frook%2Frook?ref=badge_large)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[maximhq/bifrost]]></title>
            <link>https://github.com/maximhq/bifrost</link>
            <guid>https://github.com/maximhq/bifrost</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:36 GMT</pubDate>
            <description><![CDATA[Fastest LLM gateway (50x faster than LiteLLM) with adaptive load balancer, cluster mode, guardrails, 1000+ models support & <100 ¬µs overhead at 5k RPS.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/maximhq/bifrost">maximhq/bifrost</a></h1>
            <p>Fastest LLM gateway (50x faster than LiteLLM) with adaptive load balancer, cluster mode, guardrails, 1000+ models support & <100 ¬µs overhead at 5k RPS.</p>
            <p>Language: Go</p>
            <p>Stars: 829</p>
            <p>Forks: 83</p>
            <p>Stars today: 19 stars today</p>
            <h2>README</h2><pre># Bifrost

[![Go Report Card](https://goreportcard.com/badge/github.com/maximhq/bifrost/core)](https://goreportcard.com/report/github.com/maximhq/bifrost/core)
[![Discord badge](https://dcbadge.limes.pink/api/server/https://discord.gg/exN5KAydbU?style=flat)](https://discord.gg/exN5KAydbU)
[![Known Vulnerabilities](https://snyk.io/test/github/maximhq/bifrost/badge.svg)](https://snyk.io/test/github/maximhq/bifrost)
[![codecov](https://codecov.io/gh/maximhq/bifrost/branch/main/graph/badge.svg)](https://codecov.io/gh/maximhq/bifrost)
![Docker Pulls](https://img.shields.io/docker/pulls/maximhq/bifrost)
[&lt;img src=&quot;https://run.pstmn.io/button.svg&quot; alt=&quot;Run In Postman&quot; style=&quot;width: 95px; height: 21px;&quot;&gt;](https://app.getpostman.com/run-collection/31642484-2ba0e658-4dcd-49f4-845a-0c7ed745b916?action=collection%2Ffork&amp;source=rip_markdown&amp;collection-url=entityId%3D31642484-2ba0e658-4dcd-49f4-845a-0c7ed745b916%26entityType%3Dcollection%26workspaceId%3D63e853c8-9aec-477f-909c-7f02f543150e)
[![License](https://img.shields.io/github/license/maximhq/bifrost)](LICENSE)

## The fastest way to build AI applications that never go down

Bifrost is a high-performance AI gateway that unifies access to 12+ providers (OpenAI, Anthropic, AWS Bedrock, Google Vertex, and more) through a single OpenAI-compatible API. Deploy in seconds with zero configuration and get automatic failover, load balancing, semantic caching, and enterprise-grade features.

## Quick Start

![Get started](./docs/media/getting-started.png)

**Go from zero to production-ready AI gateway in under a minute.**

**Step 1:** Start Bifrost Gateway

```bash
# Install and run locally
npx -y @maximhq/bifrost

# Or use Docker
docker run -p 8080:8080 maximhq/bifrost
```

**Step 2:** Configure via Web UI

```bash
# Open the built-in web interface
open http://localhost:8080
```

**Step 3:** Make your first API call

```bash
curl -X POST http://localhost:8080/v1/chat/completions \
  -H &quot;Content-Type: application/json&quot; \
  -d &#039;{
    &quot;model&quot;: &quot;openai/gpt-4o-mini&quot;,
    &quot;messages&quot;: [{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello, Bifrost!&quot;}]
  }&#039;
```

**That&#039;s it!** Your AI gateway is running with a web interface for visual configuration, real-time monitoring, and analytics.

**Complete Setup Guides:**

- [Gateway Setup](https://docs.getbifrost.ai/quickstart/gateway/setting-up) - HTTP API deployment
- [Go SDK Setup](https://docs.getbifrost.ai/quickstart/go-sdk/setting-up) - Direct integration

---

## Key Features

### Core Infrastructure

- **[Unified Interface](https://docs.getbifrost.ai/features/unified-interface)** - Single OpenAI-compatible API for all providers
- **[Multi-Provider Support](https://docs.getbifrost.ai/quickstart/gateway/provider-configuration)** - OpenAI, Anthropic, AWS Bedrock, Google Vertex, Azure, Cohere, Mistral, Ollama, Groq, and more
- **[Automatic Fallbacks](https://docs.getbifrost.ai/features/fallbacks)** - Seamless failover between providers and models with zero downtime
- **[Load Balancing](https://docs.getbifrost.ai/features/fallbacks)** - Intelligent request distribution across multiple API keys and providers

### Advanced Features

- **[Model Context Protocol (MCP)](https://docs.getbifrost.ai/features/mcp)** - Enable AI models to use external tools (filesystem, web search, databases)
- **[Semantic Caching](https://docs.getbifrost.ai/features/semantic-caching)** - Intelligent response caching based on semantic similarity to reduce costs and latency
- **[Multimodal Support](https://docs.getbifrost.ai/quickstart/gateway/streaming)** - Support for text,images, audio, and streaming, all behind a common interface.
- **[Custom Plugins](https://docs.getbifrost.ai/enterprise/custom-plugins)** - Extensible middleware architecture for analytics, monitoring, and custom logic
- **[Governance](https://docs.getbifrost.ai/features/governance)** - Usage tracking, rate limiting, and fine-grained access control

### Enterprise &amp; Security

- **[Budget Management](https://docs.getbifrost.ai/features/governance)** - Hierarchical cost control with virtual keys, teams, and customer budgets
- **[SSO Integration](https://docs.getbifrost.ai/features/sso-with-google-github)** - Google and GitHub authentication support
- **[Observability](https://docs.getbifrost.ai/features/observability)** - Native Prometheus metrics, distributed tracing, and comprehensive logging
- **[Vault Support](https://docs.getbifrost.ai/enterprise/vault-support)** - Secure API key management with HashiCorp Vault integration

### Developer Experience

- **[Zero-Config Startup](https://docs.getbifrost.ai/quickstart/gateway/setting-up)** - Start immediately with dynamic provider configuration
- **[Drop-in Replacement](https://docs.getbifrost.ai/features/drop-in-replacement)** - Replace OpenAI/Anthropic/GenAI APIs with one line of code
- **[SDK Integrations](https://docs.getbifrost.ai/integrations/what-is-an-integration)** - Native support for popular AI SDKs with zero code changes
- **[Configuration Flexibility](https://docs.getbifrost.ai/quickstart/gateway/provider-configuration)** - Web UI, API-driven, or file-based configuration options

---

## Repository Structure

Bifrost uses a modular architecture for maximum flexibility:

```text
bifrost/
‚îú‚îÄ‚îÄ npx/                 # NPX script for easy installation
‚îú‚îÄ‚îÄ core/                # Core functionality and shared components
‚îÇ   ‚îú‚îÄ‚îÄ providers/       # Provider-specific implementations (OpenAI, Anthropic, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ schemas/         # Interfaces and structs used throughout Bifrost
‚îÇ   ‚îî‚îÄ‚îÄ bifrost.go       # Main Bifrost implementation
‚îú‚îÄ‚îÄ framework/           # Framework components for data persistence
‚îÇ   ‚îú‚îÄ‚îÄ configstore/     # Configuration storages
‚îÇ   ‚îú‚îÄ‚îÄ logstore/        # Request logging storages
‚îÇ   ‚îî‚îÄ‚îÄ vectorstore/     # Vector storages
‚îú‚îÄ‚îÄ transports/          # HTTP gateway and other interface layers
‚îÇ   ‚îî‚îÄ‚îÄ bifrost-http/    # HTTP transport implementation
‚îú‚îÄ‚îÄ ui/                  # Web interface for HTTP gateway
‚îú‚îÄ‚îÄ plugins/             # Extensible plugin system
‚îÇ   ‚îú‚îÄ‚îÄ governance/      # Budget management and access control
‚îÇ   ‚îú‚îÄ‚îÄ jsonparser/      # JSON parsing and manipulation utilities
‚îÇ   ‚îú‚îÄ‚îÄ logging/         # Request logging and analytics
‚îÇ   ‚îú‚îÄ‚îÄ maxim/           # Maxim&#039;s observability integration
‚îÇ   ‚îú‚îÄ‚îÄ mocker/          # Mock responses for testing and development
‚îÇ   ‚îú‚îÄ‚îÄ semanticcache/   # Intelligent response caching
‚îÇ   ‚îî‚îÄ‚îÄ telemetry/       # Monitoring and observability
‚îú‚îÄ‚îÄ docs/                # Documentation and guides
‚îî‚îÄ‚îÄ tests/               # Comprehensive test suites
```

---

## Getting Started Options

Choose the deployment method that fits your needs:

### 1. Gateway (HTTP API)

**Best for:** Language-agnostic integration, microservices, and production deployments

```bash
# NPX - Get started in 30 seconds
npx -y @maximhq/bifrost

# Docker - Production ready
docker run -p 8080:8080 -v $(pwd)/data:/app/data maximhq/bifrost
```

**Features:** Web UI, real-time monitoring, multi-provider management, zero-config startup

**Learn More:** [Gateway Setup Guide](https://docs.getbifrost.ai/quickstart/gateway/setting-up)

### 2. Go SDK

**Best for:** Direct Go integration with maximum performance and control

```bash
go get github.com/maximhq/bifrost/core
```

**Features:** Native Go APIs, embedded deployment, custom middleware integration

**Learn More:** [Go SDK Guide](https://docs.getbifrost.ai/quickstart/go-sdk/setting-up)

### 3. Drop-in Replacement

**Best for:** Migrating existing applications with zero code changes

```diff
# OpenAI SDK
- base_url = &quot;https://api.openai.com&quot;
+ base_url = &quot;http://localhost:8080/openai&quot;

# Anthropic SDK  
- base_url = &quot;https://api.anthropic.com&quot;
+ base_url = &quot;http://localhost:8080/anthropic&quot;

# Google GenAI SDK
- api_endpoint = &quot;https://generativelanguage.googleapis.com&quot;
+ api_endpoint = &quot;http://localhost:8080/genai&quot;
```

**Learn More:** [Integration Guides](https://docs.getbifrost.ai/integrations/what-is-an-integration)

---

## Performance

Bifrost adds virtually zero overhead to your AI requests. In sustained 5,000 RPS benchmarks, the gateway added only **11 ¬µs** of overhead per request.

| Metric | t3.medium | t3.xlarge | Improvement |
|--------|-----------|-----------|-------------|
| Added latency (Bifrost overhead) | 59 ¬µs | **11 ¬µs** | **-81%** |
| Success rate @ 5k RPS | 100% | 100% | No failed requests |
| Avg. queue wait time | 47 ¬µs | **1.67 ¬µs** | **-96%** |
| Avg. request latency (incl. provider) | 2.12 s | **1.61 s** | **-24%** |

**Key Performance Highlights:**

- **Perfect Success Rate** - 100% request success rate even at 5k RPS
- **Minimal Overhead** - Less than 15 ¬µs additional latency per request
- **Efficient Queuing** - Sub-microsecond average wait times
- **Fast Key Selection** - ~10 ns to pick weighted API keys

**Complete Benchmarks:** [Performance Analysis](https://docs.getbifrost.ai/benchmarking/getting-started)

---

## Documentation

**Complete Documentation:** [https://docs.getbifrost.ai](https://docs.getbifrost.ai)

### Quick Start

- [Gateway Setup](https://docs.getbifrost.ai/quickstart/gateway/setting-up) - HTTP API deployment in 30 seconds
- [Go SDK Setup](https://docs.getbifrost.ai/quickstart/go-sdk/setting-up) - Direct Go integration
- [Provider Configuration](https://docs.getbifrost.ai/quickstart/gateway/provider-configuration) - Multi-provider setup

### Features

- [Multi-Provider Support](https://docs.getbifrost.ai/features/unified-interface) - Single API for all providers
- [MCP Integration](https://docs.getbifrost.ai/features/mcp) - External tool calling
- [Semantic Caching](https://docs.getbifrost.ai/features/semantic-caching) - Intelligent response caching
- [Fallbacks &amp; Load Balancing](https://docs.getbifrost.ai/features/fallbacks) - Reliability features
- [Budget Management](https://docs.getbifrost.ai/features/governance) - Cost control and governance

### Integrations

- [OpenAI SDK](https://docs.getbifrost.ai/integrations/openai-sdk) - Drop-in OpenAI replacement
- [Anthropic SDK](https://docs.getbifrost.ai/integrations/anthropic-sdk) - Drop-in Anthropic replacement
- [Google GenAI SDK](https://docs.getbifrost.ai/integrations/genai-sdk) - Drop-in GenAI replacement
- [LiteLLM SDK](https://docs.getbifrost.ai/integrations/litellm-sdk) - LiteLLM integration
- [Langchain SDK](https://docs.getbifrost.ai/integrations/langchain-sdk) - Langchain integration

### Enterprise

- [Custom Plugins](https://docs.getbifrost.ai/enterprise/custom-plugins) - Extend functionality
- [Clustering](https://docs.getbifrost.ai/enterprise/clustering) - Multi-node deployment
- [Vault Support](https://docs.getbifrost.ai/enterprise/vault-support) - Secure key management
- [Production Deployment](https://docs.getbifrost.ai/deployment/docker-setup) - Scaling and monitoring

---

## Need Help?

**[Join our Discord](https://discord.gg/exN5KAydbU)** for community support and discussions.

Get help with:

- Quick setup assistance and troubleshooting
- Best practices and configuration tips  
- Community discussions and support
- Real-time help with integrations

---

## Contributing

We welcome contributions of all kinds! See our [Contributing Guide](https://docs.getbifrost.ai/contributing/setting-up-repo) for:

- Setting up the development environment
- Code conventions and best practices
- How to submit pull requests
- Building and testing locally

For development requirements and build instructions, see our [Development Setup Guide](https://docs.getbifrost.ai/contributing/building-a-plugins).

---

## License

This project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.

Built with ‚ù§Ô∏è by [Maxim](https://github.com/maximhq)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[istio/istio]]></title>
            <link>https://github.com/istio/istio</link>
            <guid>https://github.com/istio/istio</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:35 GMT</pubDate>
            <description><![CDATA[Connect, secure, control, and observe services.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/istio/istio">istio/istio</a></h1>
            <p>Connect, secure, control, and observe services.</p>
            <p>Language: Go</p>
            <p>Stars: 37,563</p>
            <p>Forks: 8,106</p>
            <p>Stars today: 3 stars today</p>
            <h2>README</h2><pre># Istio

[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/1395/badge)](https://bestpractices.coreinfrastructure.org/projects/1395)
[![Go Report Card](https://goreportcard.com/badge/github.com/istio/istio)](https://goreportcard.com/report/github.com/istio/istio)
[![GoDoc](https://godoc.org/istio.io/istio?status.svg)](https://godoc.org/istio.io/istio)

&lt;a href=&quot;https://istio.io/&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/projects/istio/icon/color/istio-icon-color.svg&quot;&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://github.com/istio/istio/raw/master/logo/istio-bluelogo-whitebackground-unframed.svg&quot;&gt;
      &lt;img title=&quot;Istio&quot; height=&quot;100&quot; width=&quot;100&quot; alt=&quot;Istio logo&quot; src=&quot;https://github.com/istio/istio/raw/master/logo/istio-bluelogo-whitebackground-unframed.svg&quot;&gt;
    &lt;/picture&gt;
&lt;/a&gt;

---

Istio is an open source service mesh that layers transparently onto existing distributed applications. Istio‚Äôs powerful features provide a uniform and more efficient way to secure, connect, and monitor services. Istio is the path to load balancing, service-to-service authentication, and monitoring ‚Äì with few or no service code changes.

- For in-depth information about how to use Istio, visit [istio.io](https://istio.io)
- To ask questions and get assistance from our community, visit [GitHub Discussions](https://github.com/istio/istio/discussions)
- To learn how to participate in our overall community, visit [our community page](https://istio.io/about/community)

In this README:

- [Introduction](#introduction)
- [Repositories](#repositories)
- [Issue management](#issue-management)

In addition, here are some other documents you may wish to read:

- [Istio Community](https://github.com/istio/community#istio-community) - describes how to get involved and contribute to the Istio project
- [Istio Developer&#039;s Guide](https://github.com/istio/istio/wiki/Preparing-for-Development) - explains how to set up and use an Istio development environment
- [Project Conventions](https://github.com/istio/istio/wiki/Development-Conventions) - describes the conventions we use within the code base
- [Creating Fast and Lean Code](https://github.com/istio/istio/wiki/Writing-Fast-and-Lean-Code) - performance-oriented advice and guidelines for the code base

You&#039;ll find many other useful documents on our [Wiki](https://github.com/istio/istio/wiki).

## Introduction

[Istio](https://istio.io/latest/docs/concepts/what-is-istio/) is an open platform for providing a uniform way to [integrate
microservices](https://istio.io/latest/docs/examples/microservices-istio/), manage [traffic flow](https://istio.io/latest/docs/concepts/traffic-management/) across microservices, enforce policies
and aggregate telemetry data. Istio&#039;s control plane provides an abstraction
layer over the underlying cluster management platform, such as Kubernetes.

Istio is composed of these components:

- **Envoy** - Sidecar proxies per microservice to handle ingress/egress traffic
   between services in the cluster and from a service to external
   services. The proxies form a _secure microservice mesh_ providing a rich
   set of functions like discovery, rich layer-7 routing, circuit breakers,
   policy enforcement and telemetry recording/reporting
   functions.

  &gt; Note: The service mesh is not an overlay network. It
  &gt; simplifies and enhances how microservices in an application talk to each
  &gt; other over the network provided by the underlying platform.

* **Ztunnel** - A lightweight data plane proxy written in Rust,
    used in Ambient mesh mode to provide secure connectivity and observability for workloads without sidecar proxies.

- **Istiod** - The Istio control plane. It provides service discovery, configuration and certificate management.

## Repositories

The Istio project is divided across a few GitHub repositories:

- [istio/api](https://github.com/istio/api). This repository defines
component-level APIs and common configuration formats for the Istio platform.

- [istio/community](https://github.com/istio/community). This repository contains
information on the Istio community, including the various documents that govern
the Istio open source project.

- [istio/istio](README.md). This is the main code repository. It hosts Istio&#039;s
core components, install artifacts, and sample programs. It includes:

    - [istioctl](istioctl/). This directory contains code for the
[_istioctl_](https://istio.io/latest/docs/reference/commands/istioctl/) command line utility.

    - [pilot](pilot/). This directory
contains platform-specific code to populate the
[abstract service model](https://istio.io/docs/concepts/traffic-management/#pilot), dynamically reconfigure the proxies
when the application topology changes, as well as translate
[routing rules](https://istio.io/latest/docs/reference/config/networking/) into proxy specific configuration.

    - [security](security/). This directory contains [security](https://istio.io/latest/docs/concepts/security/) related code.

- [istio/proxy](https://github.com/istio/proxy). The Istio proxy contains
extensions to the [Envoy proxy](https://github.com/envoyproxy/envoy) (in the form of
Envoy filters) that support authentication, authorization, and telemetry collection.

- [istio/ztunnel](https://github.com/istio/ztunnel). The repository contains the Rust implementation of the ztunnel
component of Ambient mesh.

- [istio/client-go](https://github.com/istio/client-go). This repository defines
  auto-generated Kubernetes clients for interacting with Istio resources programmatically.

&gt; [!NOTE]
&gt; Only the `istio/api` and `istio/client-go` repositories expose stable interfaces intended for direct usage as libraries.

## Issue management

We use GitHub to track all of our bugs and feature requests. Each issue we track has a variety of metadata:

- **Epic**. An epic represents a feature area for Istio as a whole. Epics are fairly broad in scope and are basically product-level things.
Each issue is ultimately part of an epic.

- **Milestone**. Each issue is assigned a milestone. This is 0.1, 0.2, ..., or &#039;Nebulous Future&#039;. The milestone indicates when we
think the issue should get addressed.

- **Priority**. Each issue has a priority which is represented by the column in the [Prioritization](https://github.com/orgs/istio/projects/6) project. Priority can be one of
P0, P1, P2, or &gt;P2. The priority indicates how important it is to address the issue within the milestone. P0 says that the
milestone cannot be considered achieved if the issue isn&#039;t resolved.

---

&lt;div align=&quot;center&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/other/cncf/horizontal/color-whitetext/cncf-color-whitetext.svg&quot;&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/color/cncf-color.svg&quot;&gt;
      &lt;img width=&quot;300&quot; alt=&quot;Cloud Native Computing Foundation logo&quot; src=&quot;https://raw.githubusercontent.com/cncf/artwork/refs/heads/main/other/cncf/horizontal/color-whitetext/cncf-color-whitetext.svg&quot;&gt;
    &lt;/picture&gt;
    &lt;p&gt;Istio is a &lt;a href=&quot;https://cncf.io&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[seaweedfs/seaweedfs]]></title>
            <link>https://github.com/seaweedfs/seaweedfs</link>
            <guid>https://github.com/seaweedfs/seaweedfs</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:34 GMT</pubDate>
            <description><![CDATA[SeaweedFS is a fast distributed storage system for blobs, objects, files, and data lake, for billions of files! Blob store has O(1) disk seek, cloud tiering. Filer supports Cloud Drive, xDC replication, Kubernetes, POSIX FUSE mount, S3 API, S3 Gateway, Hadoop, WebDAV, encryption, Erasure Coding. Enterprise version is at seaweedfs.com.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/seaweedfs/seaweedfs">seaweedfs/seaweedfs</a></h1>
            <p>SeaweedFS is a fast distributed storage system for blobs, objects, files, and data lake, for billions of files! Blob store has O(1) disk seek, cloud tiering. Filer supports Cloud Drive, xDC replication, Kubernetes, POSIX FUSE mount, S3 API, S3 Gateway, Hadoop, WebDAV, encryption, Erasure Coding. Enterprise version is at seaweedfs.com.</p>
            <p>Language: Go</p>
            <p>Stars: 26,566</p>
            <p>Forks: 2,501</p>
            <p>Stars today: 58 stars today</p>
            <h2>README</h2><pre># SeaweedFS


[![Slack](https://img.shields.io/badge/slack-purple)](https://join.slack.com/t/seaweedfs/shared_invite/enQtMzI4MTMwMjU2MzA3LTEyYzZmZWYzOGQ3MDJlZWMzYmI0OTE4OTJiZjJjODBmMzUxNmYwODg0YjY3MTNlMjBmZDQ1NzQ5NDJhZWI2ZmY)
[![Twitter](https://img.shields.io/twitter/follow/seaweedfs.svg?style=social&amp;label=Follow)](https://twitter.com/intent/follow?screen_name=seaweedfs)
[![Build Status](https://img.shields.io/github/actions/workflow/status/seaweedfs/seaweedfs/go.yml)](https://github.com/seaweedfs/seaweedfs/actions/workflows/go.yml)
[![GoDoc](https://godoc.org/github.com/seaweedfs/seaweedfs/weed?status.svg)](https://godoc.org/github.com/seaweedfs/seaweedfs/weed)
[![Wiki](https://img.shields.io/badge/docs-wiki-blue.svg)](https://github.com/seaweedfs/seaweedfs/wiki)
[![Docker Pulls](https://img.shields.io/docker/pulls/chrislusf/seaweedfs?maxAge=4800)](https://hub.docker.com/r/chrislusf/seaweedfs/)
[![SeaweedFS on Maven Central](https://img.shields.io/maven-central/v/com.github.chrislusf/seaweedfs-client)](https://search.maven.org/search?q=g:com.github.chrislusf)
[![Artifact Hub](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/seaweedfs)](https://artifacthub.io/packages/search?repo=seaweedfs)

![SeaweedFS Logo](https://raw.githubusercontent.com/seaweedfs/seaweedfs/master/note/seaweedfs.png)

&lt;h2 align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.patreon.com/seaweedfs&quot;&gt;Sponsor SeaweedFS via Patreon&lt;/a&gt;&lt;/h2&gt;

SeaweedFS is an independent Apache-licensed open source project with its ongoing development made
possible entirely thanks to the support of these awesome [backers](https://github.com/seaweedfs/seaweedfs/blob/master/backers.md).
If you&#039;d like to grow SeaweedFS even stronger, please consider joining our
&lt;a href=&quot;https://www.patreon.com/seaweedfs&quot;&gt;sponsors on Patreon&lt;/a&gt;.

Your support will be really appreciated by me and other supporters!

&lt;!--
&lt;h4 align=&quot;center&quot;&gt;Platinum&lt;/h4&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;
    Add your name or icon here
  &lt;/a&gt;
&lt;/p&gt;
--&gt;

### Gold Sponsors
[![nodion](https://raw.githubusercontent.com/seaweedfs/seaweedfs/master/note/sponsor_nodion.png)](https://www.nodion.com)
[![piknik](https://raw.githubusercontent.com/seaweedfs/seaweedfs/master/note/piknik.png)](https://www.piknik.com)
[![keepsec](https://raw.githubusercontent.com/seaweedfs/seaweedfs/master/note/keepsec.png)](https://www.keepsec.ca)

---

- [Download Binaries for different platforms](https://github.com/seaweedfs/seaweedfs/releases/latest)
- [SeaweedFS on Slack](https://join.slack.com/t/seaweedfs/shared_invite/enQtMzI4MTMwMjU2MzA3LTEyYzZmZWYzOGQ3MDJlZWMzYmI0OTE4OTJiZjJjODBmMzUxNmYwODg0YjY3MTNlMjBmZDQ1NzQ5NDJhZWI2ZmY)
- [SeaweedFS on Twitter](https://twitter.com/SeaweedFS)
- [SeaweedFS on Telegram](https://t.me/Seaweedfs) 
- [SeaweedFS on Reddit](https://www.reddit.com/r/SeaweedFS/)
- [SeaweedFS Mailing List](https://groups.google.com/d/forum/seaweedfs)
- [Wiki Documentation](https://github.com/seaweedfs/seaweedfs/wiki)
- [SeaweedFS White Paper](https://github.com/seaweedfs/seaweedfs/wiki/SeaweedFS_Architecture.pdf)
- [SeaweedFS Introduction Slides 2025.5](https://docs.google.com/presentation/d/1tdkp45J01oRV68dIm4yoTXKJDof-EhainlA0LMXexQE/edit?usp=sharing)
- [SeaweedFS Introduction Slides 2021.5](https://docs.google.com/presentation/d/1DcxKWlINc-HNCjhYeERkpGXXm6nTCES8mi2W5G0Z4Ts/edit?usp=sharing)
- [SeaweedFS Introduction Slides 2019.3](https://www.slideshare.net/chrislusf/seaweedfs-introduction)

Table of Contents
=================

* [Quick Start](#quick-start)
    * [Quick Start for S3 API on Docker](#quick-start-for-s3-api-on-docker)
    * [Quick Start with Single Binary](#quick-start-with-single-binary)
    * [Quick Start SeaweedFS S3 on AWS](#quick-start-seaweedfs-s3-on-aws)
* [Introduction](#introduction)
* [Features](#features)
    * [Additional Features](#additional-features)
    * [Filer Features](#filer-features)
* [Example: Using Seaweed Object Store](#example-using-seaweed-object-store)
* [Architecture](#object-store-architecture)
* [Compared to Other File Systems](#compared-to-other-file-systems)
    * [Compared to HDFS](#compared-to-hdfs)
    * [Compared to GlusterFS, Ceph](#compared-to-glusterfs-ceph)
    * [Compared to GlusterFS](#compared-to-glusterfs)
    * [Compared to Ceph](#compared-to-ceph)
    * [Compared to Minio](#compared-to-minio)
* [Dev Plan](#dev-plan)
* [Installation Guide](#installation-guide)
* [Disk Related Topics](#disk-related-topics)
* [Benchmark](#benchmark)
* [Enterprise](#enterprise)
* [License](#license)

# Quick Start #

## Quick Start for S3 API on Docker ##

`docker run -p 8333:8333 chrislusf/seaweedfs server -s3`

## Quick Start with Single Binary ##
* Download the latest binary from https://github.com/seaweedfs/seaweedfs/releases and unzip a single binary file `weed` or `weed.exe`. Or run `go install github.com/seaweedfs/seaweedfs/weed@latest`.
* `export AWS_ACCESS_KEY_ID=admin ; export AWS_SECRET_ACCESS_KEY=key` as the admin credentials to access the object store.
* Run `weed server -dir=/some/data/dir -s3` to start one master, one volume server, one filer, and one S3 gateway.

Also, to increase capacity, just add more volume servers by running `weed volume -dir=&quot;/some/data/dir2&quot; -mserver=&quot;&lt;master_host&gt;:9333&quot; -port=8081` locally, or on a different machine, or on thousands of machines. That is it!

## Quick Start SeaweedFS S3 on AWS ##
* Setup fast production-ready [SeaweedFS S3 on AWS with cloudformation](https://aws.amazon.com/marketplace/pp/prodview-nzelz5gprlrjc)

# Introduction #

SeaweedFS is a simple and highly scalable distributed file system. There are two objectives:

1. to store billions of files!
2. to serve the files fast!

SeaweedFS started as an Object Store to handle small files efficiently. 
Instead of managing all file metadata in a central master, 
the central master only manages volumes on volume servers, 
and these volume servers manage files and their metadata. 
This relieves concurrency pressure from the central master and spreads file metadata into volume servers, 
allowing faster file access (O(1), usually just one disk read operation).

There is only 40 bytes of disk storage overhead for each file&#039;s metadata. 
It is so simple with O(1) disk reads that you are welcome to challenge the performance with your actual use cases.

SeaweedFS started by implementing [Facebook&#039;s Haystack design paper](http://www.usenix.org/event/osdi10/tech/full_papers/Beaver.pdf). 
Also, SeaweedFS implements erasure coding with ideas from 
[f4: Facebook‚Äôs Warm BLOB Storage System](https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-muralidhar.pdf), and has a lot of similarities with [Facebook‚Äôs Tectonic Filesystem](https://www.usenix.org/system/files/fast21-pan.pdf)

On top of the object store, optional [Filer] can support directories and POSIX attributes. 
Filer is a separate linearly-scalable stateless server with customizable metadata stores, 
e.g., MySql, Postgres, Redis, Cassandra, HBase, Mongodb, Elastic Search, LevelDB, RocksDB, Sqlite, MemSql, TiDB, Etcd, CockroachDB, YDB, etc.

For any distributed key value stores, the large values can be offloaded to SeaweedFS. 
With the fast access speed and linearly scalable capacity, 
SeaweedFS can work as a distributed [Key-Large-Value store][KeyLargeValueStore].

SeaweedFS can transparently integrate with the cloud. 
With hot data on local cluster, and warm data on the cloud with O(1) access time, 
SeaweedFS can achieve both fast local access time and elastic cloud storage capacity.
What&#039;s more, the cloud storage access API cost is minimized. 
Faster and cheaper than direct cloud storage!

[Back to TOC](#table-of-contents)

# Features #
## Additional Features ##
* Can choose no replication or different replication levels, rack and data center aware.
* Automatic master servers failover - no single point of failure (SPOF).
* Automatic Gzip compression depending on file MIME type.
* Automatic compaction to reclaim disk space after deletion or update.
* [Automatic entry TTL expiration][VolumeServerTTL].
* Any server with some disk space can add to the total storage space.
* Adding/Removing servers does **not** cause any data re-balancing unless triggered by admin commands.
* Optional picture resizing.
* Support ETag, Accept-Range, Last-Modified, etc.
* Support in-memory/leveldb/readonly mode tuning for memory/performance balance.
* Support rebalancing the writable and readonly volumes.
* [Customizable Multiple Storage Tiers][TieredStorage]: Customizable storage disk types to balance performance and cost.
* [Transparent cloud integration][CloudTier]: unlimited capacity via tiered cloud storage for warm data.
* [Erasure Coding for warm storage][ErasureCoding]  Rack-Aware 10.4 erasure coding reduces storage cost and increases availability.

[Back to TOC](#table-of-contents)

## Filer Features ##
* [Filer server][Filer] provides &quot;normal&quot; directories and files via HTTP.
* [File TTL][FilerTTL] automatically expires file metadata and actual file data.
* [Mount filer][Mount] reads and writes files directly as a local directory via FUSE.
* [Filer Store Replication][FilerStoreReplication] enables HA for filer meta data stores.
* [Active-Active Replication][ActiveActiveAsyncReplication] enables asynchronous one-way or two-way cross cluster continuous replication.
* [Amazon S3 compatible API][AmazonS3API] accesses files with S3 tooling.
* [Hadoop Compatible File System][Hadoop] accesses files from Hadoop/Spark/Flink/etc or even runs HBase.
* [Async Replication To Cloud][BackupToCloud] has extremely fast local access and backups to Amazon S3, Google Cloud Storage, Azure, BackBlaze.
* [WebDAV] accesses as a mapped drive on Mac and Windows, or from mobile devices.
* [AES256-GCM Encrypted Storage][FilerDataEncryption] safely stores the encrypted data.
* [Super Large Files][SuperLargeFiles] stores large or super large files in tens of TB.
* [Cloud Drive][CloudDrive] mounts cloud storage to local cluster, cached for fast read and write with asynchronous write back.
* [Gateway to Remote Object Store][GatewayToRemoteObjectStore] mirrors bucket operations to remote object storage, in addition to [Cloud Drive][CloudDrive]

## Kubernetes ##
* [Kubernetes CSI Driver][SeaweedFsCsiDriver] A Container Storage Interface (CSI) Driver. [![Docker Pulls](https://img.shields.io/docker/pulls/chrislusf/seaweedfs-csi-driver.svg?maxAge=4800)](https://hub.docker.com/r/chrislusf/seaweedfs-csi-driver/)
* [SeaweedFS Operator](https://github.com/seaweedfs/seaweedfs-operator)

[Filer]: https://github.com/seaweedfs/seaweedfs/wiki/Directories-and-Files
[SuperLargeFiles]: https://github.com/seaweedfs/seaweedfs/wiki/Data-Structure-for-Large-Files
[Mount]: https://github.com/seaweedfs/seaweedfs/wiki/FUSE-Mount
[AmazonS3API]: https://github.com/seaweedfs/seaweedfs/wiki/Amazon-S3-API
[BackupToCloud]: https://github.com/seaweedfs/seaweedfs/wiki/Async-Replication-to-Cloud
[Hadoop]: https://github.com/seaweedfs/seaweedfs/wiki/Hadoop-Compatible-File-System
[WebDAV]: https://github.com/seaweedfs/seaweedfs/wiki/WebDAV
[ErasureCoding]: https://github.com/seaweedfs/seaweedfs/wiki/Erasure-coding-for-warm-storage
[TieredStorage]: https://github.com/seaweedfs/seaweedfs/wiki/Tiered-Storage
[CloudTier]: https://github.com/seaweedfs/seaweedfs/wiki/Cloud-Tier
[FilerDataEncryption]: https://github.com/seaweedfs/seaweedfs/wiki/Filer-Data-Encryption
[FilerTTL]: https://github.com/seaweedfs/seaweedfs/wiki/Filer-Stores
[VolumeServerTTL]: https://github.com/seaweedfs/seaweedfs/wiki/Store-file-with-a-Time-To-Live
[SeaweedFsCsiDriver]: https://github.com/seaweedfs/seaweedfs-csi-driver
[ActiveActiveAsyncReplication]: https://github.com/seaweedfs/seaweedfs/wiki/Filer-Active-Active-cross-cluster-continuous-synchronization
[FilerStoreReplication]: https://github.com/seaweedfs/seaweedfs/wiki/Filer-Store-Replication
[KeyLargeValueStore]: https://github.com/seaweedfs/seaweedfs/wiki/Filer-as-a-Key-Large-Value-Store
[CloudDrive]: https://github.com/seaweedfs/seaweedfs/wiki/Cloud-Drive-Architecture
[GatewayToRemoteObjectStore]: https://github.com/seaweedfs/seaweedfs/wiki/Gateway-to-Remote-Object-Storage


[Back to TOC](#table-of-contents)

## Example: Using Seaweed Object Store ##

By default, the master node runs on port 9333, and the volume nodes run on port 8080.
Let&#039;s start one master node, and two volume nodes on port 8080 and 8081. Ideally, they should be started from different machines. We&#039;ll use localhost as an example.

SeaweedFS uses HTTP REST operations to read, write, and delete. The responses are in JSON or JSONP format.

### Start Master Server ###

```
&gt; ./weed master
```

### Start Volume Servers ###

```
&gt; weed volume -dir=&quot;/tmp/data1&quot; -max=5  -mserver=&quot;localhost:9333&quot; -port=8080 &amp;
&gt; weed volume -dir=&quot;/tmp/data2&quot; -max=10 -mserver=&quot;localhost:9333&quot; -port=8081 &amp;
```

### Write File ###

To upload a file: first, send a HTTP POST, PUT, or GET request to `/dir/assign` to get an `fid` and a volume server URL:

```
&gt; curl http://localhost:9333/dir/assign
{&quot;count&quot;:1,&quot;fid&quot;:&quot;3,01637037d6&quot;,&quot;url&quot;:&quot;127.0.0.1:8080&quot;,&quot;publicUrl&quot;:&quot;localhost:8080&quot;}
```

Second, to store the file content, send a HTTP multi-part POST request to `url + &#039;/&#039; + fid` from the response:

```
&gt; curl -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6
{&quot;name&quot;:&quot;myphoto.jpg&quot;,&quot;size&quot;:43234,&quot;eTag&quot;:&quot;1cc0118e&quot;}
```

To update, send another POST request with updated file content.

For deletion, send an HTTP DELETE request to the same `url + &#039;/&#039; + fid` URL:

```
&gt; curl -X DELETE http://127.0.0.1:8080/3,01637037d6
```

### Save File Id ###

Now, you can save the `fid`, 3,01637037d6 in this case, to a database field.

The number 3 at the start represents a volume id. After the comma, it&#039;s one file key, 01, and a file cookie, 637037d6.

The volume id is an unsigned 32-bit integer. The file key is an unsigned 64-bit integer. The file cookie is an unsigned 32-bit integer, used to prevent URL guessing.

The file key and file cookie are both coded in hex. You can store the &lt;volume id, file key, file cookie&gt; tuple in your own format, or simply store the `fid` as a string.

If stored as a string, in theory, you would need 8+1+16+8=33 bytes. A char(33) would be enough, if not more than enough, since most uses will not need 2^32 volumes.

If space is really a concern, you can store the file id in your own format. You would need one 4-byte integer for volume id, 8-byte long number for file key, and a 4-byte integer for the file cookie. So 16 bytes are more than enough.

### Read File ###

Here is an example of how to render the URL.

First look up the volume server&#039;s URLs by the file&#039;s volumeId:

```
&gt; curl http://localhost:9333/dir/lookup?volumeId=3
{&quot;volumeId&quot;:&quot;3&quot;,&quot;locations&quot;:[{&quot;publicUrl&quot;:&quot;localhost:8080&quot;,&quot;url&quot;:&quot;localhost:8080&quot;}]}
```

Since (usually) there are not too many volume servers, and volumes don&#039;t move often, you can cache the results most of the time. Depending on the replication type, one volume can have multiple replica locations. Just randomly pick one location to read.

Now you can take the public URL, render the URL or directly read from the volume server via URL:

```
 http://localhost:8080/3,01637037d6.jpg
```

Notice we add a file extension &quot;.jpg&quot; here. It&#039;s optional and just one way for the client to specify the file content type.

If you want a nicer URL, you can use one of these alternative URL formats:

```
 http://localhost:8080/3/01637037d6/my_preferred_name.jpg
 http://localhost:8080/3/01637037d6.jpg
 http://localhost:8080/3,01637037d6.jpg
 http://localhost:8080/3/01637037d6
 http://localhost:8080/3,01637037d6
```

If you want to get a scaled version of an image, you can add some params:

```
http://localhost:8080/3/01637037d6.jpg?height=200&amp;width=200
http://localhost:8080/3/01637037d6.jpg?height=200&amp;width=200&amp;mode=fit
http://localhost:8080/3/01637037d6.jpg?height=200&amp;width=200&amp;mode=fill
```

### Rack-Aware and Data Center-Aware Replication ###

SeaweedFS applies the replication strategy at a volume level. So, when you are getting a file id, you can specify the replication strategy. For example:

```
curl http://localhost:9333/dir/assign?replication=001
```

The replication parameter options are:

```
000: no replication
001: replicate once on the same rack
010: replicate once on a different rack, but same data center
100: replicate once on a different data center
200: replicate twice on two different data center
110: replicate once on a different rack, and once on a different data center
```

More details about replication can be found [on the wiki][Replication].

[Replication]: https://github.com/seaweedfs/seaweedfs/wiki/Replication

You can also set the default replication strategy when starting the master server.

### Allocate File Key on Specific Data Center ###

Volume servers can be started with a specific data center name:

```
 weed volume -dir=/tmp/1 -port=8080 -dataCenter=dc1
 weed volume -dir=/tmp/2 -port=8081 -dataCenter=dc2
```

When requesting a file key, an optional &quot;dataCenter&quot; parameter can limit the assigned volume to the specific data center. For example, this specifies that the assigned volume should be limited to &#039;dc1&#039;:

```
 http://localhost:9333/dir/assign?dataCenter=dc1
```

### Other Features ###
  * [No Single Point of Failure][feat-1]
  * [Insert with your own keys][feat-2]
  * [Chunking large files][feat-3]
  * [Collection as a Simple Name Space][feat-4]

[feat-1]: https://github.com/seaweedfs/seaweedfs/wiki/Failover-Master-Server
[feat-2]: https://github.com/seaweedfs/seaweedfs/wiki/Optimization#insert-with-your-own-keys
[feat-3]: https://github.com/seaweedfs/seaweedfs/wiki/Optimization#upload-large-files
[feat-4]: https://github.com/seaweedfs/seaweedfs/wiki/Optimization#collection-as-a-simple-name-space

[Back to TOC](#table-of-contents)

## Object Store Architecture ##

Usually distributed file systems split each file into chunks, a central master keeps a mapping of filenames, chunk indices to chunk handles, and also which chunks each chunk server has.

The main drawback is that the central master can&#039;t handle many small files efficiently, and since all read requests need to go through the chunk master, so it might not scale well for many concurrent users.

Instead of managing chunks, SeaweedFS manages data volumes in the master server. Each data volume is 32GB in size, and can hold a lot of files. And each storage node can have many data volumes. So the master node only needs to store the metadata about the volumes, which is a fairly small amount of data and is generally stable.

The actual file metadata is stored in each volume on volume servers. Since each volume server only manages metadata of files on its own disk, with only 16 bytes for each file, all file access can read file metadata just from memory and only needs one disk operation to actually read file data.

For comparison, consider that an xfs inode structure in Linux is 536 bytes.

### Master Server and Volume Server ###

The architecture is fairly simple. The actual data is stored in volumes on storage nodes. One volume server can have multiple volumes, and can both support read and write access with basic authentication.

All volumes are managed by a master server. The master server contains the volume id to volume server mapping. This is fairly static information, and can be easily cached.

On each write request, the master server also generates a file key, which is a growing 64-bit unsigned integer. Since write requests are not generally as frequent as read requests, one master server should be able to handle the concurrency well.

### Write and Read files ###

When a client sends a write request, the master server returns (volume id, file key, file cookie, volume node URL) for the file. The client then contacts the volume node and POSTs the file content.

When a client needs to read a file based on (volume id, file key, file cookie), it asks the master server by the volume id for t

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[grafana/mimir]]></title>
            <link>https://github.com/grafana/mimir</link>
            <guid>https://github.com/grafana/mimir</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:33 GMT</pubDate>
            <description><![CDATA[Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/grafana/mimir">grafana/mimir</a></h1>
            <p>Grafana Mimir provides horizontally scalable, highly available, multi-tenant, long-term storage for Prometheus.</p>
            <p>Language: Go</p>
            <p>Stars: 4,736</p>
            <p>Forks: 656</p>
            <p>Stars today: 2 stars today</p>
            <h2>README</h2><pre># Grafana Mimir

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;images/logo.png&quot; alt=&quot;Grafana Mimir logo&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

Grafana Mimir is an open source software project that provides a scalable long-term storage for [Prometheus](https://prometheus.io). Some of the core strengths of Grafana Mimir include:

- **Easy to install and maintain:** Grafana Mimir‚Äôs extensive documentation, tutorials, and deployment tooling make it quick to get started. Using its monolithic mode, you can get Grafana Mimir up and running with just one binary and no additional dependencies. Once deployed, the best-practice dashboards, alerts, and runbooks packaged with Grafana Mimir make it easy to monitor the health of the system.
- **Massive scalability:** You can run Grafana Mimir&#039;s horizontally-scalable architecture across multiple machines, resulting in the ability to process orders of magnitude more time series than a single Prometheus instance. Internal testing shows that Grafana Mimir handles up to 1 billion active time series.
- **Global view of metrics:** Grafana Mimir enables you to run queries that aggregate series from multiple Prometheus instances, giving you a global view of your systems. Its query engine extensively parallelizes query execution, so that even the highest-cardinality queries complete with blazing speed.
- **Cheap, durable metric storage:** Grafana Mimir uses object storage for long-term data storage, allowing it to take advantage of this ubiquitous, cost-effective, high-durability technology. It is compatible with multiple object store implementations, including AWS S3, Google Cloud Storage, Azure Blob Storage, OpenStack Swift, as well as any S3-compatible object storage.
- **High availability:** Grafana Mimir replicates incoming metrics, ensuring that no data is lost in the event of machine failure. Its horizontally scalable architecture also means that it can be restarted, upgraded, or downgraded with zero downtime, which means no interruptions to metrics ingestion or querying.
- **Natively multi-tenant:** Grafana Mimir‚Äôs multi-tenant architecture enables you to isolate data and queries from independent teams or business units, making it possible for these groups to share the same cluster. Advanced limits and quality-of-service controls ensure that capacity is shared fairly among tenants.

## Migrating to Grafana Mimir

If you&#039;re migrating to Grafana Mimir, refer to the following documents:

- [Migrating from Thanos or Prometheus to Grafana Mimir](https://grafana.com/docs/mimir/latest/set-up/migrate/migrate-from-thanos-or-prometheus/).
- [Migrating from Cortex to Grafana Mimir](https://grafana.com/docs/mimir/latest/set-up/migrate/migrate-from-cortex/)

## Deploying Grafana Mimir

For information about how to deploy Grafana Mimir, refer to [Deploy Grafana Mimir](https://grafana.com/docs/mimir/latest/operators-guide/deploy-grafana-mimir/).

## Getting started

If you‚Äôre new to Grafana Mimir, read the [Get started guide](https://grafana.com/docs/mimir/latest/get-started/).

Before deploying Grafana Mimir in a production environment, read:

1. [An overview of Grafana Mimir‚Äôs architecture](https://grafana.com/docs/mimir/latest/operators-guide/architecture/)
1. [Configure Grafana Mimir](https://grafana.com/docs/mimir/latest/operators-guide/configure/)
1. [Run Grafana Mimir in production](https://grafana.com/docs/mimir/latest/operators-guide/run-production-environment/)

## Documentation

Refer to the following links to access Grafana Mimir documentation:

- [Latest release](https://grafana.com/docs/mimir/latest/)
- [Upcoming release](https://grafana.com/docs/mimir/next/), at the tip of the `main` branch

## Contributing

To contribute to Grafana Mimir, refer to [Contributing to Grafana Mimir](https://github.com/grafana/mimir/tree/main/docs/internal/contributing).

## Join the Grafana Mimir discussion

If you have any questions or feedback regarding Grafana Mimir, join the [Grafana Mimir Discussion](https://github.com/grafana/mimir/discussions). Alternatively, consider joining the monthly [Grafana Mimir Community Call](https://docs.google.com/document/d/1E4jJcGicvLTyMEY6cUFFZUg_I8ytrBuW8r5yt1LyMv4).

Your feedback is always welcome, and you can also share it via the [`#mimir` Slack channel](https://slack.grafana.com/).

## License

Grafana Mimir is distributed under [AGPL-3.0-only](LICENSE).
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[v2fly/v2ray-core]]></title>
            <link>https://github.com/v2fly/v2ray-core</link>
            <guid>https://github.com/v2fly/v2ray-core</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:32 GMT</pubDate>
            <description><![CDATA[A platform for building proxies to bypass network restrictions.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/v2fly/v2ray-core">v2fly/v2ray-core</a></h1>
            <p>A platform for building proxies to bypass network restrictions.</p>
            <p>Language: Go</p>
            <p>Stars: 32,327</p>
            <p>Forks: 4,902</p>
            <p>Stars today: 6 stars today</p>
            <h2>README</h2><pre>&lt;div&gt;
  &lt;img width=&quot;190&quot; height=&quot;210&quot; align=&quot;left&quot; src=&quot;https://raw.githubusercontent.com/v2fly/v2fly-github-io/master/docs/.vuepress/public/readme-logo.png&quot; alt=&quot;V2Ray&quot;/&gt;
  &lt;br&gt;
  &lt;h1&gt;Project V&lt;/h1&gt;
  &lt;p&gt;Project V is a set of network tools that helps you to build your own computer network. It secures your network connections and thus protects your privacy.&lt;/p&gt;
&lt;/div&gt;

[![GitHub Test Badge](https://github.com/v2fly/v2ray-core/actions/workflows/test.yml/badge.svg)](https://github.com/v2fly/v2ray-core/actions/workflows/test.yml)
[![codecov.io](https://codecov.io/gh/v2fly/v2ray-core/branch/master/graph/badge.svg?branch=master)](https://codecov.io/gh/v2fly/v2ray-core?branch=master)
[![goreportcard](https://goreportcard.com/badge/github.com/v2fly/v2ray-core/v5)](https://goreportcard.com/report/github.com/v2fly/v2ray-core/v5)
[![Codacy Badge](https://app.codacy.com/project/badge/Grade/e150b7ede2114388921943bf23d95161)](https://app.codacy.com/gh/v2fly/v2ray-core/dashboard)
[![Downloads](https://img.shields.io/github/downloads/v2fly/v2ray-core/total.svg)](https://github.com/v2fly/v2ray-core/releases/latest)

## Related Links

- [Documentation](https://www.v2fly.org) and [Newcomer&#039;s Instructions](https://www.v2fly.org/guide/start.html)
- Welcome to translate V2Ray documents via [Transifex](https://www.transifex.com/v2fly/public/)

## Packaging Status

&gt; If you are willing to package V2Ray for other distros/platforms, please let us know or seek for help via [GitHub issues](https://github.com/v2fly/v2ray-core/issues).

[![Packaging status](https://repology.org/badge/vertical-allrepos/v2ray.svg)](https://repology.org/project/v2ray/versions)

## License

[The MIT License (MIT)](https://raw.githubusercontent.com/v2fly/v2ray-core/master/LICENSE)

## Credits

This repo relies on the following third-party projects:

- In production:
  - [gorilla/websocket](https://github.com/gorilla/websocket)
  - [quic-go/quic-go](https://github.com/quic-go/quic-go)
  - [pires/go-proxyproto](https://github.com/pires/go-proxyproto)
  - [seiflotfy/cuckoofilter](https://github.com/seiflotfy/cuckoofilter)
  - [google/starlark-go](https://github.com/google/starlark-go)
  - [jhump/protoreflect](https://github.com/jhump/protoreflect)
  - [inetaf/netaddr](https://github.com/inetaf/netaddr)

- For testing only:
  - [miekg/dns](https://github.com/miekg/dns)
  - [h12w/socks](https://github.com/h12w/socks)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[helm/helm]]></title>
            <link>https://github.com/helm/helm</link>
            <guid>https://github.com/helm/helm</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:31 GMT</pubDate>
            <description><![CDATA[The Kubernetes Package Manager]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/helm/helm">helm/helm</a></h1>
            <p>The Kubernetes Package Manager</p>
            <p>Language: Go</p>
            <p>Stars: 28,711</p>
            <p>Forks: 7,364</p>
            <p>Stars today: 2 stars today</p>
            <h2>README</h2><pre># Helm

[![Build Status](https://github.com/helm/helm/workflows/release/badge.svg)](https://github.com/helm/helm/actions?workflow=release)
[![Go Report Card](https://goreportcard.com/badge/helm.sh/helm/v4)](https://goreportcard.com/report/helm.sh/helm/v4)
[![GoDoc](https://img.shields.io/static/v1?label=godoc&amp;message=reference&amp;color=blue)](https://pkg.go.dev/helm.sh/helm/v4)
[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3131/badge)](https://bestpractices.coreinfrastructure.org/projects/3131)
[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/helm/helm/badge)](https://scorecard.dev/viewer/?uri=github.com/helm/helm)
[![LFX Health Score](https://insights.production.lfx.dev/api/badge/health-score?project=helm)](https://insights.linuxfoundation.org/project/helm)

Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources.

Use Helm to:

- Find and use [popular software packaged as Helm Charts](https://artifacthub.io/packages/search?kind=0) to run in Kubernetes
- Share your own applications as Helm Charts
- Create reproducible builds of your Kubernetes applications
- Intelligently manage your Kubernetes manifest files
- Manage releases of Helm packages

## Helm in a Handbasket

Helm is a tool that streamlines installing and managing Kubernetes applications.
Think of it like apt/yum/homebrew for Kubernetes.

- Helm renders your templates and communicates with the Kubernetes API
- Helm runs on your laptop, CI/CD, or wherever you want it to run.
- Charts are Helm packages that contain at least two things:
  - A description of the package (`Chart.yaml`)
  - One or more templates, which contain Kubernetes manifest files
- Charts can be stored on disk, or fetched from remote chart repositories
  (like Debian or RedHat packages)

## Helm Development and Stable Versions

Helm v4 is currently under development on the `main` branch. This is unstable and the APIs within the Go SDK and at the command line are changing.
Helm v3 (current stable) is maintained on the `dev-v3` branch. APIs there follow semantic versioning.

## Install

Binary downloads of the Helm client can be found on [the Releases page](https://github.com/helm/helm/releases/latest).

Unpack the `helm` binary and add it to your PATH and you are good to go!

If you want to use a package manager:

- [Homebrew](https://brew.sh/) users can use `brew install helm`.
- [Chocolatey](https://chocolatey.org/) users can use `choco install kubernetes-helm`.
- [Winget](https://learn.microsoft.com/en-us/windows/package-manager/) users can use `winget install Helm.Helm`.
- [Scoop](https://scoop.sh/) users can use `scoop install helm`.
- [Snapcraft](https://snapcraft.io/) users can use `snap install helm --classic`.
- [Flox](https://flox.dev) users can use `flox install kubernetes-helm`.

To rapidly get Helm up and running, start with the [Quick Start Guide](https://helm.sh/docs/intro/quickstart/).

See the [installation guide](https://helm.sh/docs/intro/install/) for more options,
including installing pre-releases.

## Docs

Get started with the [Quick Start guide](https://helm.sh/docs/intro/quickstart/) or plunge into the [complete documentation](https://helm.sh/docs).

## Roadmap

The [Helm roadmap uses GitHub milestones](https://github.com/helm/helm/milestones) to track the progress of the project.

The development of Helm v4 is currently happening on the `main` branch while the development of Helm v3, the stable branch, is happening on the `dev-v3` branch. Changes should be made to the `main` branch prior to being added to the `dev-v3` branch so that all changes are carried along to Helm v4.

## Community, discussion, contribution, and support

You can reach the Helm community and developers via the following channels:

- [Kubernetes Slack](https://kubernetes.slack.com):
  - [#helm-users](https://kubernetes.slack.com/messages/helm-users)
  - [#helm-dev](https://kubernetes.slack.com/messages/helm-dev)
  - [#charts](https://kubernetes.slack.com/messages/charts)
- Mailing List:
  - [Helm Mailing List](https://lists.cncf.io/g/cncf-helm)
- Developer Call: Thursdays at 9:30-10:00 Pacific ([meeting details](https://github.com/helm/community/blob/master/communication.md#meetings))

### Contribution

If you&#039;re interested in contributing, please refer to the [Contributing Guide](CONTRIBUTING.md) **before submitting a pull request**.

### Code of conduct

Participation in the Helm community is governed by the [Code of Conduct](code-of-conduct.md).
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[filebrowser/filebrowser]]></title>
            <link>https://github.com/filebrowser/filebrowser</link>
            <guid>https://github.com/filebrowser/filebrowser</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:30 GMT</pubDate>
            <description><![CDATA[üìÇ Web File Browser]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/filebrowser/filebrowser">filebrowser/filebrowser</a></h1>
            <p>üìÇ Web File Browser</p>
            <p>Language: Go</p>
            <p>Stars: 31,706</p>
            <p>Forks: 3,545</p>
            <p>Stars today: 16 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/filebrowser/logo/master/banner.png&quot; width=&quot;550&quot;/&gt;
&lt;/p&gt;

[![Build](https://github.com/filebrowser/filebrowser/actions/workflows/main.yaml/badge.svg)](https://github.com/filebrowser/filebrowser/actions/workflows/main.yaml)
[![Go Report Card](https://goreportcard.com/badge/github.com/filebrowser/filebrowser)](https://goreportcard.com/report/github.com/filebrowser/filebrowser)
[![Documentation](https://img.shields.io/badge/godoc-reference-blue.svg)](http://godoc.org/github.com/filebrowser/filebrowser)
[![Version](https://img.shields.io/github/release/filebrowser/filebrowser.svg)](https://github.com/filebrowser/filebrowser/releases/latest)
[![Chat IRC](https://img.shields.io/badge/freenode-%23filebrowser-blue.svg)](http://webchat.freenode.net/?channels=%23filebrowser)

File Browser provides a file managing interface within a specified directory and it can be used to upload, delete, preview and edit your files. It is a **create-your-own-cloud**-kind of software where you can just install it on your server, direct it to a path and access your files through a nice web interface.

## Documentation

Documentation on how to install, configure, and contribute to this project is hosted at [filebrowser.org](https://filebrowser.org).

## Project Status

&gt; [!WARNING]
&gt;
&gt; This project is currently on **maintenance-only** mode, and is looking for new maintainers. For more information, please read the [discussion #4906](https://github.com/filebrowser/filebrowser/discussions/4906). Therefore, please note the following:
&gt;
&gt; - It can take a while until someone gets back to you. Please be patient.
&gt; - [Issues][issues] are only being used to track bugs. Any unrelated issues will be converted into a [discussion][discussions].
&gt; - No new features will be implemented until further notice. The priority is on triaging issues and merge bug fixes.
&gt; 
&gt; If you&#039;re interested in maintaining this project, please reach out via the discussion above.

[issues]: https://github.com/filebrowser/filebrowser/issues
[discussions]: https://github.com/filebrowser/filebrowser/discussions

## Contributing

Contributions are always welcome. To start contributing to this project, read our [guidelines](CONTRIBUTING.md) first.

## License

[Apache License 2.0](LICENSE) ¬© File Browser Contributors
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[thomaspoignant/go-feature-flag]]></title>
            <link>https://github.com/thomaspoignant/go-feature-flag</link>
            <guid>https://github.com/thomaspoignant/go-feature-flag</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:29 GMT</pubDate>
            <description><![CDATA[GO Feature Flag is a simple, complete and lightweight self-hosted feature flag solution 100% Open Source. üéõÔ∏è]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/thomaspoignant/go-feature-flag">thomaspoignant/go-feature-flag</a></h1>
            <p>GO Feature Flag is a simple, complete and lightweight self-hosted feature flag solution 100% Open Source. üéõÔ∏è</p>
            <p>Language: Go</p>
            <p>Stars: 1,810</p>
            <p>Forks: 178</p>
            <p>Stars today: 4 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://gofeatureflag.org&quot; target=&quot;_blank&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;gofeatureflag.svg&quot; alt=&quot;go-feature-flag logo&quot; /&gt;&lt;/a&gt;
  &lt;!-- &lt;a href=&quot;https://gofeatureflag.org&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;website/static/img/logo/logo_footer.png?raw=true&quot; alt=&quot;go-feature-flag logo&quot; /&gt;&lt;/a&gt; --&gt;
&lt;/p&gt;

# üéõÔ∏è GO Feature Flag

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/thomaspoignant/go-feature-flag/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/thomaspoignant/go-feature-flag/actions/workflows/ci.yml/badge.svg&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://scorecard.dev/viewer/?uri=github.com/thomaspoignant/go-feature-flag&quot;&gt;&lt;img src=&quot;https://api.scorecard.dev/projects/github.com/thomaspoignant/go-feature-flag/badge&quot;/&gt;&lt;/a&gt;
    &lt;a href=&quot;https://codecov.io/gh/thomaspoignant/go-feature-flag&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/thomaspoignant/go-feature-flag/branch/main/graph/badge.svg?token=T59ACQWW1H&quot;/&gt;&lt;/a&gt;
    &lt;a href=&quot;https://sonarcloud.io/dashboard?id=thomaspoignant_go-feature-flag&quot;&gt;&lt;img src=&quot;https://sonarcloud.io/api/project_badges/measure?project=thomaspoignant_go-feature-flag&amp;metric=alert_status&quot; alt=&quot;Sonarcloud Status&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/thomaspoignant/go-feature-flag/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/thomaspoignant/go-feature-flag?filter=v*&quot; alt=&quot;Release version&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://goreportcard.com/report/github.com/thomaspoignant/go-feature-flag&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/thomaspoignant/go-feature-flag&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/thomaspoignant/go-feature-flag/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/thomaspoignant/go-feature-flag&quot; alt=&quot;License&quot;/&gt;&lt;/a&gt;
    &lt;br/&gt;
    &lt;a href=&quot;https://www.bestpractices.dev/projects/6290&quot;&gt;&lt;img src=&quot;https://www.bestpractices.dev/projects/6290/badge&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://pkg.go.dev/github.com/thomaspoignant/go-feature-flag&quot;&gt;&lt;img src=&quot;https://godoc.org/github.com/thomaspoignant/go-feature-flag?status.svg&quot; alt=&quot;GoDoc&quot; /&gt;&lt;/a&gt;
    &lt;img src=&quot;https://img.shields.io/github/go-mod/go-version/thomaspoignant/go-feature-flag?logo=go%20version&quot; alt=&quot;Go version&quot;/&gt;
    &lt;a href=&quot;https://github.com/avelino/awesome-go/#server-applications&quot;&gt;&lt;img src=&quot;https://awesome.re/mentioned-badge.svg&quot; alt=&quot;Mentioned in Awesome Go&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://gofeatureflag.org/slack&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/join-us%20on%20slack-gray.svg?longCache=true&amp;logo=slack&amp;colorB=green&quot; alt=&quot;Join us on slack&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/sponsors/thomaspoignant&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/thomaspoignant?logo=GitHub%20Sponsors&quot; alt=&quot;Sponsords&quot;&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;a href=&quot;https://gofeatureflag.org&quot;&gt;GO Feature Flag is a simple, complete and lightweight self-hosted feature flag solution 100% Open Source.&lt;/a&gt;
&lt;/p&gt;

&gt; :pray: If you are using **GO Feature Flag** please consider to add yourself in the [adopters](./ADOPTERS.md) list.  
&gt; This simple act significantly boosts the project&#039;s visibility and credibility, making a substantial contribution to its advancement.
&gt; 
&gt; If you want to support me and GO Feature Flag, you can also [become a sponsor](https://github.com/sponsors/thomaspoignant).

## Table of Contents

- [üéõÔ∏è GO Feature Flag](#Ô∏è-go-feature-flag)
  - [What is GO Feature Flag?](#what-is-go-feature-flag)
  - [What can I do with GO Feature Flag?](#what-can-i-do-with-go-feature-flag)
  - [Getting started with GO Feature Flag](#getting-started)
  - [Can I use GO Feature Flag with any language?](#can-i-use-go-feature-flag-with-any-language)
  - [Where do I store my flags file?](#where-do-i-store-my-flags-file)
  - [Flags file format](#flags-file-format)
  - [Rule format](#rule-format)
  - [Evaluation Context](#evaluation-context)
  - [Variations](#variations)
  - [Rollout](#rollout)
    - [Complex rollout strategy available](#complex-rollout-strategy-available)
  - [Notifiers](#notifiers)
  - [Export data](#export-data)
  - [Linter](#linter)
- [How can I contribute?](#how-can-i-contribute)
  - [Contributors](#contributors)
  - [Sponsors](#sponsors)
  - [Adopters](#adopters)

## What is GO Feature Flag?

GO Feature Flag is a lightweight and open-source solution that provides a simple and complete feature flag implementation.

The solution has been built to facilitate the usage of feature flags in your code with the easiest setup possible.

Originally, **GO Feature Flag** was designed as a solution exclusively for the `GO` language. With the new standardization of feature flags by the [Openfeature](https://openfeature.dev/) project, the solution is now available for multiple languages _([list of supported languages](https://gofeatureflag.org/docs/sdk))_ through a simple API server called the relay proxy, which can be hosted.

&gt; [!TIP]
&gt; If you are not familiar with feature flags, I&#039;ve written an [article](https://medium.com/better-programming/feature-flags-and-how-to-iterate-quickly-7e3371b9986) which explains why feature flags can fasten your iteration cycle.

## What can I do with GO Feature Flag?

- Storing your configuration flags file on various locations (`HTTP`, `S3`, `Kubernetes`, [_see full list_](https://gofeatureflag.org/docs/configure_flag/store_your_flags)).
- Configuring your flags in various [format](https://gofeatureflag.org/docs/configure_flag/flag_format) (`JSON`, `TOML` and `YAML`).
- Adding complex [rules](https://gofeatureflag.org/docs/configure_flag/target-with-flags) to target your users.
- Use a complex rollout strategy for your flags :
  - [Run A/B testing experimentation](https://gofeatureflag.org/docs/configure_flag/rollout-strategies/experimentation).
  - [Progressively rollout a feature](https://gofeatureflag.org/docs/configure_flag/rollout-strategies/progressive).
  - [Schedule your flag updates](https://gofeatureflag.org/docs/configure_flag/rollout-strategies/scheduled).
- Exporting your flags usage data to various destinations such as _(`S3`, `Google cloud storage`, `file`, `kubernetes`, see the [_full list_](https://gofeatureflag.org/docs/integrations/store-flags-configuration#available-retrievers))_.
- Getting notified when a flag has been changed _(`webhook` and `slack`)_.
- Use **GO Feature Flag** in several languages with **Open Feature SDKs**.
- Support your full stack, from the backend to the frontend including your mobile apps.

https://github.com/user-attachments/assets/56e1a2a2-996f-4db8-9c93-28c057e4ed5a

_The code of this demo is available in [`examples/demo`](examples/demo) repository_.

## Getting started

&gt; [!IMPORTANT]
&gt; Before starting to use **GO Feature Flag** you should decide
&gt; if you want to use Open Feature SDKs or if you want to use GO Feature Flag as a GO Module.
&gt; 
&gt; We recommend using the relay-proxy for a central flag management and evaluation solution,
&gt; it enables the multi-languages support, and it integrates seamlessly with the Open Feature SDKs.  
&gt; This is the best way to get full potential of GO Feature Flag.
&gt; 
&gt; If your project is exclusively in GO, the GO module is an option. It will perform the flag evaluation directly in your GO code.

&lt;a id=&quot;using-open-feature&quot;&gt;&lt;/a&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Using Open Feature SDKs&lt;/b&gt;&lt;/summary&gt;

### Create a feature flag configuration

Create a new `YAML` file containing your first flag configuration.

```yaml title=&quot;flag-config.yaml&quot;
# 20% of the users will use the variation &quot;my-new-feature&quot;
test-flag:
  variations:
    my-new-feature: true
    my-old-feature: false
  defaultRule:
    percentage:
      my-new-feature: 20
      my-old-feature: 80
```

This flag split the usage of this flag, 20% will use the variation `my-new-feature` and 80% the variation `my-old-feature`.

### Create a relay proxy configuration file

Create a new `YAML` file containing the configuration of your relay proxy.

```yaml title=&quot;goff-proxy.yaml&quot;
listen: 1031
pollingInterval: 1000
startWithRetrieverError: false
retriever:
  kind: file
  path: /goff/flag-config.yaml
exporter:
  kind: log
```

### Install the relay proxy

And we will run the **relay proxy** locally to make the API available.  
The default port will be `1031`.

```shell
# Launch the container
docker run \
  -p 1031:1031 \
  -v $(pwd)/flag-config.yaml:/goff/flag-config.yaml \
  -v $(pwd)/goff-proxy.yaml:/goff/goff-proxy.yaml \
  gofeatureflag/go-feature-flag:latest

```

_If you don&#039;t want to use docker to install the **relay proxy** you can follow other ways to install it in the [documentation](https://gofeatureflag.org/docs/relay-proxy/install_relay_proxy)._

### Use Open Feature SDK

_In this example, we are using the **nodejs SDK**, but you can check other languages [here](https://gofeatureflag.org/docs/sdk)._


#### Install dependencies

```shell
npm i @openfeature/server-sdk @openfeature/go-feature-flag-provider
```

#### Init your Open Feature client

In your app initialization, you have to create a client using the Open Feature SDK and initialize it.

```javascript
const {OpenFeature} = require(&quot;@openfeature/server-sdk&quot;);
const {GoFeatureFlagProvider} = require(&quot;@openfeature/go-feature-flag-provider&quot;);


// init Open Feature SDK with GO Feature Flag provider
const goFeatureFlagProvider = new GoFeatureFlagProvider({
  endpoint: &#039;http://localhost:1031/&#039; // DNS of your instance of relay proxy
});
OpenFeature.setProvider(goFeatureFlagProvider);
const featureFlagClient = OpenFeature.getClient(&#039;my-app&#039;)
```

#### Evaluate your flag

Now you can evaluate your flags anywhere in your code using this client.

```javascript
// Context of your flag evaluation.
// With GO Feature Flag you MUST provide a targetingKey that is a unique identifier of the user.
const evaluationContext = {
  targetingKey: &#039;1d1b9238-2591-4a47-94cf-d2bc080892f1&#039;, // user unique identifier (mandatory)
  firstname: &#039;john&#039;,
  lastname: &#039;doe&#039;,
  email: &#039;john.doe@gofeatureflag.org&#039;,
  admin: true, // this field is used in the targeting rule of the flag &quot;flag-only-for-admin&quot;
  // ...
};

const adminFlag = await featureFlagClient.getBooleanValue(&#039;flag-only-for-admin&#039;, false, evaluationContext);
if (adminFlag) {
  // flag &quot;flag-only-for-admin&quot; is true for the user
  console.log(&quot;new feature&quot;);
} else {
  // flag &quot;flag-only-for-admin&quot; is false for the user
}
```

&lt;/details&gt;

&lt;a id=&quot;using-go-module&quot;&gt;&lt;/a&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Using the GO Module&lt;/b&gt;&lt;/summary&gt;

### Installation
```bash
go get github.com/thomaspoignant/go-feature-flag
```

### Create a feature flag configuration

Create a new `YAML` file containing your first flag configuration.

```yaml title=&quot;flag-config.yaml&quot;
# 20% of the users will use the variation &quot;my-new-feature&quot;
test-flag:
  variations:
    my-new-feature: true
    my-old-feature: false
  defaultRule:
    percentage:
      my-new-feature: 20
      my-old-feature: 80
```

This flag split the usage of this flag, 20% will use the variation `my-new-feature` and 80% the variation `my-old-feature`.

### SDK Initialisation
First, you need to initialize the `ffclient` with the location of your backend file.
```go linenums=&quot;1&quot;
err := ffclient.Init(ffclient.Config{
  PollingInterval: 3 * time.Second,
  Retriever:      &amp;fileretriever.Retriever{
    Path: &quot;flag-config.goff.yaml&quot;,
  },
})
defer ffclient.Close()
```
*This example will load a file from your local computer and will refresh the flags every 3 seconds (if you omit the
PollingInterval, the default value is 60 seconds).*

&gt; ‚Ñπ info  
This is a basic configuration to test locally, in production it is better to use a remote place to store your feature flag configuration file.  
Look at the list of available options in the [**Store your feature flag file** page](https://gofeatureflag.org/docs/integrations/store-flags-configuration#available-retrievers).

### Evaluate your flags
Now you can evaluate your flags anywhere in your code.

```go linenums=&quot;1&quot;
user := ffcontext.NewEvaluationContext(&quot;user-unique-key&quot;)
hasFlag, _ := ffclient.BoolVariation(&quot;test-flag&quot;, user, false)
if hasFlag {
  // flag &quot;test-flag&quot; is true for the user
} else {
  // flag &quot;test-flag&quot; is false for the user
}
```
The full documentation is available on https://docs.gofeatureflag.org  
You can find more examples in the [examples/](https://github.com/thomaspoignant/go-feature-flag/tree/main/examples) directory.

&lt;/details&gt;

## Can I use GO Feature Flag with any language?

Originally GO Feature Flag was built to be a GOlang only library, but it limits the ecosystem too much.  
To be compatible with more languages we have implemented the [GO Feature Flag Relay Proxy](cmd/relayproxy/).
It is a service you can host that provides an API to evaluate your flags, you can call it using HTTP to get your variation.

Since we believe in standardization we are also implementing [OpenFeature](https://github.com/open-feature) providers to interact with this API in the language of your choice.  
_(OpenFeature is still at an early stage, so not all languages are supported and expect some changes in the future)_

For now, we have providers for:

| Language                       | Provider Source                                                                                                               | Version                                                                                                                                                                                                                                                                                                                                   |
|--------------------------------|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Go                             | [Go Provider](https://github.com/open-feature/go-sdk-contrib/tree/main/providers/go-feature-flag)                             | [![version](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fproxy.golang.org%2Fgithub.com%2Fopen-feature%2Fgo-sdk-contrib%2Fproviders%2Fgo-feature-flag%2F%40latest&amp;query=%24.Version&amp;label=GO&amp;color=blue&amp;style=flat-square&amp;logo=golang)](https://github.com/open-feature/go-sdk-contrib/tree/main/providers/go-feature-flag) |
| Java / Kotlin (server)         | [Java Provider](https://github.com/open-feature/java-sdk-contrib/tree/main/providers/go-feature-flag)                         | [![version](https://img.shields.io/maven-central/v/dev.openfeature.contrib.providers/go-feature-flag?color=blue&amp;style=flat-square&amp;logo=java)](https://central.sonatype.com/artifact/dev.openfeature.contrib.providers/go-feature-flag)                                                                                                    |
| Android / Kotlin (client)      | [Kotlin Provider](openfeature/providers/kotlin-provider)                                                                      | [![version](https://img.shields.io/maven-central/v/org.gofeatureflag.openfeature/gofeatureflag-kotlin-provider?color=blue&amp;style=flat-square&amp;logo=android)](https://central.sonatype.com/artifact/org.gofeatureflag.openfeature/gofeatureflag-kotlin-provider)                                                                             |                                                                                                    
| Javascript/Typescript (server) | [Server Provider](https://github.com/open-feature/js-sdk-contrib/tree/main/libs/providers/go-feature-flag)                    | [![version](https://img.shields.io/npm/v/%40openfeature%2Fgo-feature-flag-provider?color=blue&amp;style=flat-square&amp;logo=npm)](https://www.npmjs.com/package/@openfeature/go-feature-flag-provider)                                                                                                                                           |
| Javascript/Typescript (client) | [Client Provider](https://github.com/open-feature/js-sdk-contrib/tree/main/libs/providers/go-feature-flag-web)                | [![version](https://img.shields.io/npm/v/%40openfeature%2Fgo-feature-flag-web-provider?color=blue&amp;style=flat-square&amp;logo=npm)](https://www.npmjs.com/package/@openfeature/go-feature-flag-web-provider)                                                                                                                                   |
| Python                         | [Python Provider](openfeature/providers/python-provider)                                                                      | [![version](https://img.shields.io/pypi/v/gofeatureflag-python-provider?color=blue&amp;style=flat-square&amp;logo=pypi)](https://pypi.org/project/gofeatureflag-python-provider/)                                                                                                                                                                 |
| .Net                           | [.Net Provider](https://github.com/open-feature/dotnet-sdk-contrib/tree/main/src/OpenFeature.Contrib.Providers.GOFeatureFlag) | [![version](https://img.shields.io/nuget/v/OpenFeature.Contrib.GOFeatureFlag?color=blue&amp;style=flat-square&amp;logo=nuget)](https://nuget.info/packages/OpenFeature.Contrib.GOFeatureFlag)                                                                                                                                                     |
| Ruby                           | [Ruby Provider](https://github.com/open-feature/ruby-sdk-contrib/tree/main/providers/openfeature-go-feature-flag-provider)    | [![version](https://img.shields.io/gem/v/openfeature-go-feature-flag-provider?color=blue&amp;style=flat-square&amp;logo=ruby)](https://rubygems.org/gems/openfeature-go-feature-flag-provider)                                                                                                                                                    |
| Swift                          | [Swift Provider](https://github.com/go-feature-flag/openfeature-swift-provider)                                               | [![version](https://img.shields.io/github/v/release/go-feature-flag/openfeature-swift-provider?label=Swift&amp;amp;display_name=tag&amp;style=flat-square&amp;logo=Swift)](https://github.com/go-feature-flag/openfeature-swift-provider)                                                                                                             |
| PHP                            | [PHP Provider](https://github.com/open-feature/php-sdk-contrib/tree/main/providers/GoFeatureFlag)                             | [![version](https://img.shields.io/packagist/v/open-feature/go-feature-flag-provider?logo=php&amp;color=blue&amp;style=flat-square)](https://packagist.org/packages/open-feature/go-feature-flag-provider)                                                                                                                                                 |
                                                                                                                                                                                                                                        

## Where do I store my flags file?

The module supports different ways of retrieving the flag file.  
The available retrievers are:
- **GitHub**
- **GitLab**
- **HTTP endpoint**
- **AWS S3**
- **Local file**
- **Google Cloud Storage**
- **Kubernetes ConfigMaps**
- **MongoDB**
- **Redis**
- **BitBucket**
- **AzBlobStorage**
- ...

_[See the full list and more information.](https://gofeatureflag.org/docs/integrations/store-flags-configuration#available-retrievers)_

## Flags file format
**GO Feature Flag** core feature is to centralize all your feature flags in a single file and to avoid hosting and maintaining a backend server to manage them.

Your file should be a `YAML`, `JSON` or `TOML` file with a list

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[Loyalsoldier/geoip]]></title>
            <link>https://github.com/Loyalsoldier/geoip</link>
            <guid>https://github.com/Loyalsoldier/geoip</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:28 GMT</pubDate>
            <description><![CDATA[üåö üåç üåù GeoIP ËßÑÂàôÊñá‰ª∂Âä†Âº∫ÁâàÔºåÊîØÊåÅËá™Ë°åÂÆöÂà∂ V2Ray dat Ê†ºÂºèÊñá‰ª∂ geoip.dat„ÄÅMaxMind mmdb Ê†ºÂºèÊñá‰ª∂„ÄÅsing-box SRS Ê†ºÂºèÊñá‰ª∂„ÄÅmihomo MRS Ê†ºÂºèÊñá‰ª∂„ÄÅClash ruleset„ÄÅSurge ruleset Á≠â„ÄÇEnhanced edition of GeoIP files for V2Ray, Xray-core, sing-box, Clash, mihomo, Shadowrocket, Quantumult X, Surge, hysteria, Trojan-Go, Leaf, Nginx, etc.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Loyalsoldier/geoip">Loyalsoldier/geoip</a></h1>
            <p>üåö üåç üåù GeoIP ËßÑÂàôÊñá‰ª∂Âä†Âº∫ÁâàÔºåÊîØÊåÅËá™Ë°åÂÆöÂà∂ V2Ray dat Ê†ºÂºèÊñá‰ª∂ geoip.dat„ÄÅMaxMind mmdb Ê†ºÂºèÊñá‰ª∂„ÄÅsing-box SRS Ê†ºÂºèÊñá‰ª∂„ÄÅmihomo MRS Ê†ºÂºèÊñá‰ª∂„ÄÅClash ruleset„ÄÅSurge ruleset Á≠â„ÄÇEnhanced edition of GeoIP files for V2Ray, Xray-core, sing-box, Clash, mihomo, Shadowrocket, Quantumult X, Surge, hysteria, Trojan-Go, Leaf, Nginx, etc.</p>
            <p>Language: Go</p>
            <p>Stars: 5,163</p>
            <p>Forks: 785</p>
            <p>Stars today: 5 stars today</p>
            <h2>README</h2><pre># ÁÆÄ‰ªã

Êú¨È°πÁõÆÊØèÂë®ÂõõËá™Âä®ÁîüÊàêÂ§öÁßçÊ†ºÂºè GeoIP Êñá‰ª∂ÔºåÂêåÊó∂Êèê‰æõÂëΩ‰ª§Ë°åÁïåÈù¢ÔºàCLIÔºâÂ∑•ÂÖ∑‰æõÁî®Êà∑Ëá™Ë°åÂÆöÂà∂ GeoIP Êñá‰ª∂ÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫é V2Ray `dat` Ê†ºÂºèÊñá‰ª∂ `geoip.dat`„ÄÅMaxMind `mmdb` Ê†ºÂºèÊñá‰ª∂ `Country.mmdb`„ÄÅsing-box `SRS` Ê†ºÂºèÊñá‰ª∂„ÄÅmihomo `MRS` Ê†ºÂºèÊñá‰ª∂„ÄÅClash ruleset Âíå Surge ruleset„ÄÇ

This project releases various formats of GeoIP files automatically every Thursday, and provides a command line interface(CLI) tool for users to customize their own GeoIP files, including but not limited to V2Ray `dat` format file `geoip.dat`, MaxMind `mmdb` format file `Country.mmdb`, sing-box `SRS` format files, mihomo `MRS` format files, Clash ruleset files and Surge ruleset files.

## ‰∏é MaxMind ÂÆòÊñπ GeoIP Êï∞ÊçÆÁöÑÂå∫Âà´

Êú¨È°πÁõÆÈªòËÆ§‰ΩøÁî® [MaxMind GeoLite2 Country CSV Êï∞ÊçÆ](https://github.com/Loyalsoldier/geoip/blob/release/GeoLite2-Country-CSV.zip)ÁîüÊàêÂêÑ‰∏™ÂõΩÂÆ∂ÂíåÂú∞Âå∫ÁöÑ GeoIP Êñá‰ª∂„ÄÇÊâÄÊúâÂèØ‰æõ‰ΩøÁî®ÁöÑÂõΩÂÆ∂ÂíåÂú∞Âå∫ geoip Á±ªÂà´ÔºàÂ¶Ç `geoip:cn`Ôºå‰∏§‰ΩçËã±ÊñáÂ≠óÊØçË°®Á§∫ÂõΩÂÆ∂ÂíåÂú∞Âå∫ÔºâÔºåËØ∑Êü•ÁúãÔºö[https://www.iban.com/country-codes](https://www.iban.com/country-codes)„ÄÇ

Âè¶Â§ñÔºåÊú¨È°πÁõÆÂØπ MaxMind ÂÆòÊñπ GeoIP Êï∞ÊçÆÂÅö‰∫Ü‰øÆÊîπÂíåÊñ∞Â¢ûÔºö

- ‰∏≠ÂõΩÂ§ßÈôÜ IPv4 Âú∞ÂùÄÊï∞ÊçÆËûçÂêà‰∫Ü [IPIP.net](https://github.com/17mon/china_ip_list/blob/master/china_ip_list.txt) Âíå [@gaoyifan/china-operator-ip](https://github.com/gaoyifan/china-operator-ip/blob/ip-lists/china.txt)
- ‰∏≠ÂõΩÂ§ßÈôÜ IPv6 Âú∞ÂùÄÊï∞ÊçÆËûçÂêà‰∫Ü MaxMind GeoLite2 Âíå [@gaoyifan/china-operator-ip](https://github.com/gaoyifan/china-operator-ip/blob/ip-lists/china6.txt)
- Êñ∞Â¢ûÁ±ªÂà´ÔºàÊñπ‰æøÊúâÁâπÊÆäÈúÄÊ±ÇÁöÑÁî®Êà∑‰ΩøÁî®ÔºâÔºö
  - `geoip:cloudflare`Ôºà`GEOIP,CLOUDFLARE`Ôºâ
  - `geoip:cloudfront`Ôºà`GEOIP,CLOUDFRONT`Ôºâ
  - `geoip:facebook`Ôºà`GEOIP,FACEBOOK`Ôºâ
  - `geoip:fastly`Ôºà`GEOIP,FASTLY`Ôºâ
  - `geoip:google`Ôºà`GEOIP,GOOGLE`Ôºâ
  - `geoip:netflix`Ôºà`GEOIP,NETFLIX`Ôºâ
  - `geoip:telegram`Ôºà`GEOIP,TELEGRAM`Ôºâ
  - `geoip:twitter`Ôºà`GEOIP,TWITTER`Ôºâ
  - `geoip:tor`Ôºà`GEOIP,TOR`Ôºâ

## ‰∏ãËΩΩÂú∞ÂùÄ‰∏é‰ΩøÁî®ÊñπÊ≥ï

Êú¨È°πÁõÆÂèëÂ∏ÉÁöÑÊâÄÊúâ GeoIP Êñá‰ª∂ÔºåËØ∑Êü•Áúã [release ÂàÜÊîØ](https://github.com/Loyalsoldier/geoip/tree/release)„ÄÇ‰ª•‰∏ãÊòØÈÉ®ÂàÜÊ†ºÂºè GeoIP Êñá‰ª∂ÁöÑ‰∏ãËΩΩÂú∞ÂùÄÔºö

&gt; Â¶ÇÊûúÊó†Ê≥ïËÆøÈóÆÂüüÂêç `raw.githubusercontent.com`ÔºåÂèØ‰ª•‰ΩøÁî®Á¨¨‰∫å‰∏™Âú∞ÂùÄ `cdn.jsdelivr.net`„ÄÇ
&gt; Â¶ÇÊûúÊó†Ê≥ïËÆøÈóÆÂüüÂêç `cdn.jsdelivr.net`ÔºåÂèØ‰ª•Â∞ÜÂÖ∂ÊõøÊç¢‰∏∫ `fastly.jsdelivr.net`„ÄÇ
&gt;
&gt; *.sha256sum ‰∏∫Ê†°È™åÊñá‰ª∂„ÄÇ

### V2Ray dat Ê†ºÂºèÊñá‰ª∂

&gt; ÈÄÇÁî®‰∫é [V2Ray](https://github.com/v2fly/v2ray-core)„ÄÅ[Xray-core](https://github.com/XTLS/Xray-core)„ÄÅ[mihomo](https://github.com/MetaCubeX/mihomo/tree/Meta)„ÄÅ[hysteria](https://github.com/apernet/hysteria)„ÄÅ[Trojan-Go](https://github.com/p4gefau1t/trojan-go)„ÄÇ

&gt; Ê≠§ dat Ê†ºÂºèÊñá‰ª∂‰∏çËÉΩÁî®‰∫é Nginx„ÄÇ

- **geoip.dat**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip.dat](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip.dat)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip.dat](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip.dat)
- **geoip.dat.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip.dat.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip.dat.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip.dat.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip.dat.sha256sum)
- **geoip-only-cn-private.dat**ÔºàÁ≤æÁÆÄÁâà GeoIPÔºåÂè™ÂåÖÂê´ `geoip:cn` Âíå `geoip:private`ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-only-cn-private.dat](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-only-cn-private.dat)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-only-cn-private.dat](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-only-cn-private.dat)
- **geoip-only-cn-private.dat.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-only-cn-private.dat.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-only-cn-private.dat.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-only-cn-private.dat.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-only-cn-private.dat.sha256sum)
- **geoip-asn.dat**ÔºàÁ≤æÁÆÄÁâà GeoIPÔºåÂè™ÂåÖÂê´‰∏äËø∞Êñ∞Â¢ûÁ±ªÂà´ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-asn.dat](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-asn.dat)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-asn.dat](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-asn.dat)
- **geoip-asn.dat.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-asn.dat.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-asn.dat.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-asn.dat.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip-asn.dat.sha256sum)
- **cn.dat**ÔºàÁ≤æÁÆÄÁâà GeoIPÔºåÂè™ÂåÖÂê´ `geoip:cn`ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/cn.dat](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/cn.dat)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/cn.dat](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/cn.dat)
- **cn.dat.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/cn.dat.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/cn.dat.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/cn.dat.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/cn.dat.sha256sum)
- **private.dat**ÔºàÁ≤æÁÆÄÁâà GeoIPÔºåÂè™ÂåÖÂê´ `geoip:private`ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/private.dat](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/private.dat)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/private.dat](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/private.dat)
- **private.dat.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/private.dat.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/private.dat.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/private.dat.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/private.dat.sha256sum)
- **ÊâÄÊúâÂõΩÂÆ∂ / Âú∞Âå∫ / Êñ∞Â¢ûÁ±ªÂà´**ÁöÑ dat Ê†ºÂºèÊñá‰ª∂ÔºåËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [dat ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/dat)„ÄÇ

#### dat Ê†ºÂºèÊñá‰ª∂‰ΩøÁî®ÊñπÊ≥ï

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;V2Ray&lt;/b&gt; Âíå &lt;b&gt;Xray-core&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂÖà‰∏ãËΩΩ &lt;code&gt;.dat&lt;/code&gt; Ê†ºÂºèÊñá‰ª∂ÔºåÂπ∂ÊîæÁΩÆÂú®Á®ãÂ∫èÁõÆÂΩïÂÜÖ„ÄÇ&lt;/p&gt;

```json
&quot;routing&quot;: {
  &quot;rules&quot;: [
    {
      &quot;type&quot;: &quot;field&quot;,
      &quot;outboundTag&quot;: &quot;Direct&quot;,
      &quot;ip&quot;: [
        &quot;geoip:cn&quot;,
        &quot;geoip:private&quot;,
        &quot;ext:cn.dat:cn&quot;,
        &quot;ext:private.dat:private&quot;,
        &quot;ext:geoip-only-cn-private.dat:cn&quot;,
        &quot;ext:geoip-only-cn-private.dat:private&quot;
      ]
    },
    {
      &quot;type&quot;: &quot;field&quot;,
      &quot;outboundTag&quot;: &quot;Proxy&quot;,
      &quot;ip&quot;: [
        &quot;geoip:us&quot;,
        &quot;geoip:jp&quot;,
        &quot;geoip:facebook&quot;,
        &quot;geoip:telegram&quot;,
        &quot;ext:geoip-asn.dat:facebook&quot;,
        &quot;ext:geoip-asn.dat:telegram&quot;
      ]
    }
  ]
}
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;mihomo&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;

```yaml
geodata-mode: true
geox-url:
  geoip: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip.dat&quot;
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;hysteria&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂÖà‰∏ãËΩΩ &lt;code&gt;.dat&lt;/code&gt; Ê†ºÂºèÊñá‰ª∂ÔºåÂπ∂ÊîæÁΩÆÂú® hysteria Á®ãÂ∫èÁõÆÂΩïÂÜÖ„ÄÇ&lt;/p&gt;

```
direct(geoip:cn)
proxy(geoip:telegram)
proxy(geoip:us)
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Trojan-Go&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂÖà‰∏ãËΩΩ &lt;code&gt;.dat&lt;/code&gt; Ê†ºÂºèÊñá‰ª∂ÔºåÂπ∂ÊîæÁΩÆÂú® Trojan-Go Á®ãÂ∫èÁõÆÂΩïÂÜÖ„ÄÇ&lt;/p&gt;

```json
&quot;router&quot;: {
  &quot;enabled&quot;: true,
  &quot;bypass&quot;: [&quot;geoip:cn&quot;],
  &quot;proxy&quot;: [&quot;geoip:telegram&quot;, &quot;geoip:us&quot;],
  &quot;block&quot;: [&quot;geoip:jp&quot;],
  &quot;default_policy&quot;: &quot;proxy&quot;,
  &quot;geoip&quot;: &quot;./geoip.dat&quot;
}
```
&lt;/details&gt;

---

### MaxMind mmdb Ê†ºÂºèÊñá‰ª∂

MaxMind ÂÆòÊñπÁâà**ÂõΩÂÆ∂/Âú∞Âå∫**Á±ªÂûã mmdb Êñá‰ª∂Ôºö

&gt; ÈÄÇÁî®‰∫é [Clash](https://github.com/Dreamacro/clash)„ÄÅ[mihomo](https://github.com/MetaCubeX/mihomo/tree/Meta)„ÄÅ[Shadowrocket](https://apps.apple.com/us/app/id932747118)„ÄÅ[Quantumult X](https://apps.apple.com/us/app/id1443988620)„ÄÅ[Surge](https://nssurge.com)„ÄÅ[Leaf](https://github.com/eycorsican/leaf)„ÄÇ

&gt; ÈÄÇÁî®‰∫é [Nginx](https://nginx.org)ÔºåÈúÄË¶ÅÈÖçÂêà [ngx_http_geoip2_module](https://github.com/leev/ngx_http_geoip2_module) Ê®°Âùó‰ΩøÁî®„ÄÇ

- **GeoLite2-Country.mmdb**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-Country.mmdb](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-Country.mmdb)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-Country.mmdb](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-Country.mmdb)
- **GeoLite2-Country.mmdb.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-Country.mmdb.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-Country.mmdb.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-Country.mmdb.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-Country.mmdb.sha256sum)

MaxMind ÂÆòÊñπÁâà **ASN** Á±ªÂûã mmdb Êñá‰ª∂Ôºö

&gt; ÈÄÇÁî®‰∫é [mihomo](https://github.com/MetaCubeX/mihomo/tree/Meta)„ÄÅ[Shadowrocket](https://apps.apple.com/us/app/id932747118)„ÄÅ[Surge](https://nssurge.com)„ÄÇ

- **GeoLite2-ASN.mmdb**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-ASN.mmdb](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-ASN.mmdb)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-ASN.mmdb](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-ASN.mmdb)
- **GeoLite2-ASN.mmdb.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-ASN.mmdb.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/GeoLite2-ASN.mmdb.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-ASN.mmdb.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-ASN.mmdb.sha256sum)

Êú¨È°πÁõÆÁîüÊàêÁöÑ**ÂõΩÂÆ∂/Âú∞Âå∫**Á±ªÂûã mmdb Êñá‰ª∂Ôºö

&gt; ÈÄÇÁî®‰∫é [Clash](https://github.com/Dreamacro/clash)„ÄÅ[mihomo](https://github.com/MetaCubeX/mihomo/tree/Meta)„ÄÅ[Shadowrocket](https://apps.apple.com/us/app/id932747118)„ÄÅ[Quantumult X](https://apps.apple.com/us/app/id1443988620)„ÄÅ[Surge](https://nssurge.com)„ÄÅ[Leaf](https://github.com/eycorsican/leaf)„ÄÇ

&gt; ÈÄÇÁî®‰∫é [Nginx](https://nginx.org)ÔºåÈúÄË¶ÅÈÖçÂêà [ngx_http_geoip2_module](https://github.com/leev/ngx_http_geoip2_module) Ê®°Âùó‰ΩøÁî®„ÄÇ

&gt; **ÂõΩÂÆ∂/Âú∞Âå∫**Á±ªÂà´‰øùÁïô‰∫Ü `Continent` Âíå `Country` ÈáåÁöÑÊâÄÊúâÂ≠óÊÆµ„ÄÇ**Êñ∞Â¢ûÁ±ªÂà´**Âíå **geoip:private** Á±ªÂà´Âè™‰øùÁïô‰∫Ü `Country` ÈáåÁöÑ `iso_code`Ôºà‰∏§‰ΩçËã±ÊñáÂ≠óÊØçË°®Á§∫ÁöÑÂõΩÂÆ∂/Âú∞Âå∫‰ª£Âè∑ÔºâÂ≠óÊÆµ„ÄÇÂÖ≥‰∫é Maxmind ÂÆòÊñπ country MMDB Ê†ºÂºèÊñá‰ª∂ÂÆåÊï¥Â≠óÊÆµÔºåËØ∑[Êü•Áúã‰ª£Á†Å](https://github.com/oschwald/geoip2-golang/blob/576a46d19bb59f32d0215cb43285b8928891b6bc/reader.go#L139-L171)„ÄÇ

- **Country-without-asn.mmdb**Ôºà‰º†ÁªüÁâà GeoIPÔºåÂè™ÂåÖÂê´ÂõΩÂÆ∂/Âú∞Âå∫Á±ªÂà´Ôºå‰∏çÂåÖÂê´‰∏äËø∞Êñ∞Â¢ûÁ±ªÂà´„ÄÇÂª∫ËÆÆ‰ºòÂÖà‰ΩøÁî®ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-without-asn.mmdb](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-without-asn.mmdb)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-without-asn.mmdb](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-without-asn.mmdb)
- **Country-without-asn.mmdb.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-without-asn.mmdb.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-without-asn.mmdb.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-without-asn.mmdb.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-without-asn.mmdb.sha256sum)
- **Country.mmdb**ÔºàÂ¢ûÂº∫Áâà GeoIPÔºåÂåÖÂê´ÂõΩÂÆ∂/Âú∞Âå∫Á±ªÂà´Ôºå‰ª•Âèä‰∏äËø∞Êñ∞Â¢ûÁ±ªÂà´„ÄÇ‰ΩÜÁî±‰∫é MaxMind mmdb Ê†ºÂºèÈôêÂà∂ÔºåÈÉ®ÂàÜÂõΩÂÆ∂/Âú∞Âå∫Á±ªÂà´ÁöÑ IP Âú∞ÂùÄÊï∞ÊçÆ‰∏çÂ¶Ç‰∏äËø∞ **Country-without-asn.mmdb** ÂáÜÁ°ÆÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb)
- **Country.mmdb.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb.sha256sum)
- **Country-only-cn-private.mmdb**ÔºàÁ≤æÁÆÄÁâà GeoIPÔºåÂè™ÂåÖÂê´ `GEOIP,CN` Âíå `GEOIP,PRIVATE`ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-only-cn-private.mmdb](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-only-cn-private.mmdb)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-only-cn-private.mmdb](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-only-cn-private.mmdb)
- **Country-only-cn-private.mmdb.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-only-cn-private.mmdb.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-only-cn-private.mmdb.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-only-cn-private.mmdb.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-only-cn-private.mmdb.sha256sum)
- **Country-asn.mmdb**ÔºàÁ≤æÁÆÄÁâà GeoIPÔºåÂè™ÂåÖÂê´‰∏äËø∞Êñ∞Â¢ûÁ±ªÂà´ÔºâÔºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-asn.mmdb](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-asn.mmdb)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-asn.mmdb](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-asn.mmdb)
- **Country-asn.mmdb.sha256sum**Ôºö
  - [https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-asn.mmdb.sha256sum](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-asn.mmdb.sha256sum)
  - [https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-asn.mmdb.sha256sum](https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country-asn.mmdb.sha256sum)

#### mmdb Ê†ºÂºèÊñá‰ª∂‰ΩøÁî®ÊñπÊ≥ï

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Clash&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂÖà‰∏ãËΩΩ &lt;code&gt;.mmdb&lt;/code&gt; Ê†ºÂºèÊñá‰ª∂ÔºåÂëΩÂêç‰∏∫ &lt;code&gt;Country.mmdb&lt;/code&gt;ÔºåÂπ∂ÊîæÁΩÆÂú® Clash Á®ãÂ∫èÁõÆÂΩïÂÜÖ„ÄÇ&lt;/p&gt;

```yaml
rules:
  - GEOIP,PRIVATE,policy,no-resolve
  - GEOIP,FACEBOOK,policy
  - GEOIP,CN,policy,no-resolve
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;mihomo&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;

```yaml
geodata-mode: true
geox-url:
  mmdb: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb&quot;
  asn: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-ASN.mmdb&quot;
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Shadowrocket&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂ∞Ü‰∏ãËΩΩÂú∞ÂùÄÂ°´ÂÖ•Âà∞ Shadowrocket ÁöÑËÆæÁΩÆ‰∏≠„ÄÇ&lt;/p&gt;

```conf
[Rule]
GEOIP,PRIVATE,DIRECT
GEOIP,FACEBOOK,PROXY
GEOIP,CN,DIRECT
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Quantumult X&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂ∞Ü‰∏ãËΩΩÂú∞ÂùÄÂ°´ÂÖ•Âà∞ Quantumult X ÁöÑËÆæÁΩÆ‰∏≠„ÄÇ&lt;/p&gt;

```conf
[filter_local]
GEOIP,PRIVATE,DIRECT
GEOIP,FACEBOOK,PROXY
GEOIP,CN,DIRECT
```
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Surge&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;
  &lt;br/&gt;
  &lt;p&gt;ÈúÄË¶ÅÂ∞Ü‰∏ãËΩΩÂú∞ÂùÄÂ°´ÂÖ•Âà∞ Surge ÁöÑËÆæÁΩÆ‰∏≠„ÄÇ&lt;/p&gt;

```conf
[Rule]
GEOIP,PRIVATE,policy,no-resolve
GEOIP,FACEBOOK,policy
GEOIP,CN,policy,no-resolve
```
&lt;/details&gt;

---

### sing-box SRS Ê†ºÂºèÊñá‰ª∂

&gt; ÈÄÇÁî®‰∫é [sing-box](https://github.com/SagerNet/sing-box)„ÄÇ

ËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [srs ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/srs)„ÄÇ

#### SRS Ê†ºÂºèÊñá‰ª∂‰ΩøÁî®ÊñπÊ≥ï

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;sing-box&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;

```json
&quot;route&quot;: {
  &quot;rules&quot;: [
    {
      &quot;rule_set&quot;: &quot;geoip-cn&quot;,
      &quot;outbound&quot;: &quot;direct&quot;
    },
    {
      &quot;rule_set&quot;: &quot;geoip-us&quot;,
      &quot;outbound&quot;: &quot;block&quot;
    }
  ],
  &quot;rule_set&quot;: [
    {
      &quot;tag&quot;: &quot;geoip-cn&quot;,
      &quot;type&quot;: &quot;remote&quot;,
      &quot;format&quot;: &quot;binary&quot;,
      &quot;url&quot;: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/srs/cn.srs&quot;
    },
    {
      &quot;tag&quot;: &quot;geoip-us&quot;,
      &quot;type&quot;: &quot;remote&quot;,
      &quot;format&quot;: &quot;binary&quot;,
      &quot;url&quot;: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/srs/us.srs&quot;
    }
  ]
}
```
&lt;/details&gt;

---

### mihomo MRS Ê†ºÂºèÊñá‰ª∂

&gt; ÈÄÇÁî®‰∫é [mihomo](https://github.com/MetaCubeX/mihomo/tree/Meta)„ÄÇ

ËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [mrs ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/mrs)„ÄÇ

#### MRS Ê†ºÂºèÊñá‰ª∂‰ΩøÁî®ÊñπÊ≥ï

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;mihomo&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;

```yaml
rule-providers:
  cn-cidr:
    type: http
    behavior: ipcidr
    format: mrs
    url: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/mrs/cn.mrs&quot;
    path: ./mrs/geoip/cn.mrs
    interval: 86400

  google-cidr:
    type: http
    behavior: ipcidr
    format: mrs
    url: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/mrs/google.mrs&quot;
    path: ./mrs/geoip/google.mrs
    interval: 86400

rules:
  - RULE-SET,cn-cidr,DIRECT
  - RULE-SET,google-cidr,PROXY,no-resolve
```
&lt;/details&gt;

---

### Clash ruleset Êñá‰ª∂

&gt; ÈÄÇÁî®‰∫é [Clash Premium](https://github.com/Dreamacro/clash)„ÄÅ[mihomo](https://github.com/MetaCubeX/mihomo/tree/Meta)„ÄÇ

ËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [clash ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/clash)„ÄÇ

#### Clash ruleset ‰ΩøÁî®ÊñπÊ≥ï

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Clash Premium&lt;/b&gt; Âíå &lt;b&gt;mihomo&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;

```yaml
rule-providers:
  cn-cidr:
    type: http
    behavior: ipcidr
    format: yaml
    url: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/clash/ipcidr/cn.txt&quot;
    path: ./ruleset/ipcidr/cn.yaml
    interval: 86400

  telegram-cidr:
    type: http
    behavior: ipcidr
    format: yaml
    url: &quot;https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/clash/ipcidr/telegram.txt&quot;
    path: ./ruleset/ipcidr/telegram.yaml
    interval: 86400

rules:
  - RULE-SET,cn-cidr,DIRECT
  - RULE-SET,telegram-cidr,PROXY,no-resolve
```
&lt;/details&gt;

---

### Surge ruleset Êñá‰ª∂

&gt; ÈÄÇÁî®‰∫é [Surge](https://nssurge.com)„ÄÇ

ËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [surge ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/surge)„ÄÇ

#### Surge ruleset ‰ΩøÁî®ÊñπÊ≥ï

&lt;details&gt;
  &lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂú® &lt;b&gt;Surge&lt;/b&gt; ‰∏≠ÁöÑ‰ΩøÁî®ÊñπÊ≥ï&lt;/summary&gt;

```conf
[Rule]
RULE-SET,https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/surge/us.txt,REJECT
RULE-SET,https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/surge/cn.txt,DIRECT
RULE-SET,https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/surge/telegram.txt,PROXY,no-resolve
```
&lt;/details&gt;

---

### Á∫ØÊñáÊú¨ txt Ê†ºÂºèÊñá‰ª∂

ËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [text ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/text)„ÄÇ

---

### Nginx `allow` Âíå `deny` Êñá‰ª∂

ËØ∑Êü•ÁúãÊú¨È°πÁõÆ `release` ÂàÜÊîØ‰∏ãÁöÑ [nginx ÁõÆÂΩï](https://github.com/Loyalsoldier/geoip/tree/release/nginx)„ÄÇ

---

## Ëá™Ë°åÂÆöÂà∂ GeoIP Êñá‰ª∂

ÂèØÈÄöËøá‰ª•‰∏ãÂá†ÁßçÊñπÂºèËá™Ë°åÂÆöÂà∂ GeoIP Êñá‰ª∂Ôºö

- **Âú®Á∫øÁîüÊàê**Ôºö[Fork](https://github.com/Loyalsoldier/geoip/fork) Êú¨‰ªìÂ∫ìÂêéÔºå‰øÆÊîπËá™Â∑±‰ªìÂ∫ìÂÜÖÁöÑÈÖçÁΩÆÊñá‰ª∂ `config.json` Âíå GitHub Workflow `.github/workflows/build.yml`
- **Êú¨Âú∞ÁîüÊàê**Ôºö
  - ÂÆâË£Ö [Golang](https://go.dev/dl/) Âíå [Git](https://git-scm.com)
  - ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å: `git clone https://github.com/Loyalsoldier/geoip.git`
  - ËøõÂÖ•È°πÁõÆÊ†πÁõÆÂΩïÔºö`cd geoip`
  - ‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂ `config.json`
  - ËøêË°å‰ª£Á†ÅÔºö`go run ./ convert -c ./config.json`

**ÁâπÂà´ËØ¥ÊòéÔºö**

- **Âú®Á∫øÁîüÊàê**Ôºö[Fork](https://github.com/Loyalsoldier/geoip/fork) Êú¨È°πÁõÆÂêéÔºåÂ¶ÇÊûúÈúÄË¶Å‰ΩøÁî® MaxMind GeoLite2 ÂÆòÊñπÊï∞ÊçÆÊñá‰ª∂ÔºåÈúÄË¶ÅÂú®Ëá™Â∑±‰ªìÂ∫ìÁöÑ **[Settings]** È°µÈù¢ÁöÑÂ∑¶‰æßËæπÊ†è **[Secrets and variables]** ‰∏ãÁöÑ **[Actions]** ÈÄâÈ°πÂç°È°µÈù¢‰∏≠Ê∑ªÂä†‰∏Ä‰∏™Âêç‰∏∫ **MAXMIND_GEOLITE2_LICENSE** ÁöÑ secretÔºåÂê¶Âàô GitHub Actions ‰ºöËøêË°åÂ§±Ë¥•„ÄÇËøô‰∏™ secret ÁöÑÂÄº‰∏∫ MaxMind Ë¥¶Âè∑ÁöÑ LICENSE KEYÔºåÈúÄË¶Å[**Ê≥®ÂÜå MaxMind Ë¥¶Âè∑**](https://www.maxmind.com/en/geolite2/signup)ÂêéÔºåÂú®[**‰∏™‰∫∫Ë¥¶Âè∑ÁÆ°ÁêÜÈ°µÈù¢**](https://www.maxmind.com/en/account)Â∑¶‰æßËæπÊ†èÁöÑ [**Manage License Keys**] ÈáåÁîüÊàê„ÄÇ
- **Êú¨Âú∞ÁîüÊàê**ÔºöÂ¶ÇÊûúÈúÄË¶Å‰ΩøÁî® MaxMind ÂÆòÊñπ GeoLite2 Êï∞ÊçÆÊñá‰ª∂ÔºåÈúÄË¶ÅÊèêÂâç‰ªé MaxMind ‰∏ãËΩΩÔºåÊàñËÄÖ‰ªéÊú¨È°πÁõÆ [release ÂàÜÊîØ](https://github.com/Loyalsoldier/geoip/tree/release)‰∏ãËΩΩÔºàÊñá‰ª∂Âêç‰ª• `GeoLite2` ‰∏∫ÂâçÁºÄÁöÑÊñá‰ª∂ÔºâÔºåÂπ∂Ëß£ÂéãÁº©Âà∞Âêç‰∏∫ `geolite2` ÁöÑÁõÆÂΩï„ÄÇ

### Ê¶ÇÂøµËß£Êûê

Êú¨È°πÁõÆÊúâ‰∏§‰∏™Ê¶ÇÂøµÔºö`input` Âíå `output`„ÄÇ`input` ÊåáÊï∞ÊçÆÊ∫êÔºàdata sourceÔºâÂèäÂÖ∂ËæìÂÖ•Ê†ºÂºèÔºå`output` ÊåáÊï∞ÊçÆÁöÑÂéªÂêëÔºàdata destinationÔºâÂèäÂÖ∂ËæìÂá∫Ê†ºÂºè„ÄÇCLI ÁöÑ‰ΩúÁî®Â∞±ÊòØÈÄöËøáËØªÂèñÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÈÄâÈ°πÔºåËÅöÂêàÁî®Êà∑Êèê‰æõÁöÑÊâÄÊúâÊï∞ÊçÆÊ∫êÔºåÂéªÈáçÔºåÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫ÁõÆÊ†áÊ†ºÂºèÔºåÂπ∂ËæìÂá∫Âà∞Êñá‰ª∂„ÄÇ

These two concepts are notable: `input` and `output`. The `input` is the data source and its input format, whereas the `output` is the destination of the converted data and its output format. What the CLI does is to aggregate all input format data, then convert them to output format and write them to GeoIP files by using the options in the config file.

### ÊîØÊåÅÁöÑÊ†ºÂºè

ÂÖ≥‰∫éÊØèÁßçÊ†ºÂºèÊâÄÊîØÊåÅÁöÑÈÖçÁΩÆÈÄâÈ°πÔºåÊü•ÁúãÊú¨È°πÁõÆ [`configuration.md`](https://github.com/Loyalsoldier/geoip/blob/HEAD/configuration.md) Êñá‰ª∂„ÄÇ

ÊîØÊåÅÁöÑ `input` ËæìÂÖ•Ê†ºÂºèÔºö

- **text**ÔºöÁ∫ØÊñáÊú¨ IP Âíå CIDRÔºà‰æãÂ¶ÇÔºö`1.1.1.1` Êàñ `1.0.0.0/24`Ôºâ
- **stdin**Ôºö‰ªé standard input Ëé∑ÂèñÁ∫ØÊñáÊú¨ IP Âíå CIDRÔºà‰æãÂ¶ÇÔºö`1.1.1.1` Êàñ `1.0.0.0/24`Ôºâ
- **private**ÔºöÂ±ÄÂüüÁΩëÂíåÁßÅÊúâÁΩëÁªú CIDRÔºà‰æãÂ¶ÇÔºö`192.168.0.0/16` Âíå `127.0.0.0/8`Ôºâ
- **cutter**ÔºöÁî®‰∫éË£ÅÂâ™ÂâçÁΩÆÊ≠•È™§‰∏≠ÁöÑÊï∞ÊçÆ
- **json**ÔºöJSON Êï∞ÊçÆÊ†ºÂºè
- **v2rayGeoIPDat**ÔºöV2

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[rivo/tview]]></title>
            <link>https://github.com/rivo/tview</link>
            <guid>https://github.com/rivo/tview</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:27 GMT</pubDate>
            <description><![CDATA[Terminal UI library with rich, interactive widgets ‚Äî¬†written in Golang]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/rivo/tview">rivo/tview</a></h1>
            <p>Terminal UI library with rich, interactive widgets ‚Äî¬†written in Golang</p>
            <p>Language: Go</p>
            <p>Stars: 13,065</p>
            <p>Forks: 646</p>
            <p>Stars today: 22 stars today</p>
            <h2>README</h2><pre># Rich Interactive Widgets for Terminal UIs

[![PkgGoDev](https://pkg.go.dev/badge/github.com/rivo/tview)](https://pkg.go.dev/github.com/rivo/tview)
[![Go Report](https://img.shields.io/badge/go%20report-A%2B-brightgreen.svg)](https://goreportcard.com/report/github.com/rivo/tview)

This Go package provides commonly used components for terminal based user interfaces.

![Screenshot](tview.gif)

Among these components are:

- __Input forms__ (including __text input__, __selections__, __checkboxes__, and __buttons__)
- Navigable multi-color __text views__
- Editable multi-line __text areas__
- Sophisticated navigable __table views__
- Flexible __tree views__
- Selectable __lists__
- __Images__
- __Grid__, __Flexbox__ and __page layouts__
- Modal __message windows__
- An __application__ wrapper

They come with lots of customization options and can be easily extended to fit your needs.

## Usage

To add this package to your project:

```bash
go get github.com/rivo/tview@master
```

## Hello World

This basic example creates a box titled &quot;Hello, World!&quot; and displays it in your terminal:

```go
package main

import (
	&quot;github.com/rivo/tview&quot;
)

func main() {
	box := tview.NewBox().SetBorder(true).SetTitle(&quot;Hello, world!&quot;)
	if err := tview.NewApplication().SetRoot(box, true).Run(); err != nil {
		panic(err)
	}
}
```

Check out the [GitHub Wiki](https://github.com/rivo/tview/wiki) for more examples along with screenshots. Or try the examples in the &quot;demos&quot; subdirectory.

For a presentation highlighting this package, compile and run the program found in the &quot;demos/presentation&quot; subdirectory.

## Projects using `tview`

- [K9s - Kubernetes CLI](https://github.com/derailed/k9s)
- [IRCCloud Terminal Client](https://github.com/termoose/irccloud)
- [Window manager for `tview`](https://github.com/epiclabs-io/winman)
- [CLI bookmark manager](https://github.com/Endi1/drawer)
- [A caving database interface written in Go](https://github.com/IdlePhysicist/cave-logger)
- [Interactive file browse and exec any command.](https://github.com/bannzai/itree)
- [A complete TUI for LDAP](https://github.com/Macmod/godap)
- [A simple CRM](https://github.com/broadcastle/crm)
- [Terminal UI for todist](https://github.com/cyberdummy/todoista)
- [Graphical kubectl wrapper](https://github.com/dcaiafa/kpick)
- [Decred Decentralized Exchange ](https://github.com/decred/dcrdex)
- [A CLI file browser for Raspberry PI](https://github.com/destinmoulton/pixi)
- [A tool to manage projects.](https://github.com/divramod/dp)
- [A simple app for BMI monitoring](https://github.com/erleene/go-bmi)
- [Stream TIDAL from command line](https://github.com/godsic/vibe)
- [Secure solution for fully decentralized password management](https://github.com/guillaumemichel/passtor/)
- [A growing collection of convenient little tools to work with systemd services](https://github.com/muesli/service-tools/)
- [A terminal based browser for Redis written in Go](https://github.com/nitishm/redis-terminal)
- [First project for the Computer Networks course.](https://github.com/pablogadhi/XMPPClient)
- [Test your typing speed in the terminal!](https://github.com/shilangyu/typer-go)
- [TUI Client for Docker](https://github.com/skanehira/docui)
- [SSH client using certificates signed by HashiCorp Vault](https://github.com/stephane-martin/vssh)
- [VMware vCenter Text UI](https://github.com/thebsdbox/vctui)
- [Bookmarks on terminal](https://github.com/tryffel/bookmarker)
- [A UDP testing utility](https://github.com/vaelen/udp-tester)
- [A simple Kanban board for your terminal](https://github.com/witchard/toukan)
- [The personal information dashboard for your terminal. ](https://github.com/wtfutil/wtf)
- [MySQL database to Golang struct](https://github.com/xxjwxc/gormt)
- [Discord, TUI and SIXEL.](https://gitlab.com/diamondburned/6cord)
- [A CLI Audio Player](https://www.github.com/dhulihan/grump)
- [GLab, a GitLab CLI tool](https://gitlab.com/profclems/glab)
- [Browse your AWS ECS Clusters in the Terminal](https://github.com/swartzrock/ecsview)
- [The CLI Task Manager for Geeks](https://github.com/ajaxray/geek-life)
- [Fast disk usage analyzer written in Go](https://github.com/dundee/gdu)
- [Multiplayer Chess On Terminal](https://github.com/qnkhuat/gochess)
- [Scriptable TUI music player](https://github.com/issadarkthing/gomu)
- [MangaDesk : TUI Client for downloading manga to your computer](https://github.com/darylhjd/mangadesk)
- [Go How Much? a Crypto coin price tracking from terminal](https://github.com/ledongthuc/gohowmuch)
- [dbui: Universal CLI for Database Connections](https://github.com/KenanBek/dbui)
- [ssmbrowse: Simple and elegant cli AWS SSM parameter browser](https://github.com/bnaydenov/ssmbrowse)
- [gobit: binance intelligence terminal](https://github.com/infl00p/gobit)
- [viddy: A modern watch command](https://github.com/sachaos/viddy)
- [s3surfer: CLI tool for browsing S3 bucket and download objects interactively](https://github.com/hirose31/s3surfer)
- [libgen-tui: A terminal UI for downloading books from Library Genesis](https://github.com/audstanley/libgen-tui)
- [kubectl-lazy: kubectl plugin to easy to view pod](https://github.com/togettoyou/kubectl-lazy)
- [podman-tui: podman user interface](https://github.com/containers/podman-tui)
- [tvxwidgets: tview extra widgets](https://github.com/navidys/tvxwidgets)
- [Domino card game on terminal](https://github.com/gusti-andika/card-domino.git)
- [goaround: Query stackoverflow API and get results on terminal](https://github.com/glendsoza/goaround)
- [resto: a CLI app can send pretty HTTP &amp; API requests with TUI](https://github.com/abdfnx/resto)
- [twad: a WAD launcher for the terminal](https://github.com/zmnpl/twad)
- [pacseek: A TUI for searching and installing Arch Linux packages](https://github.com/moson-mo/pacseek)
- [7GUIs demo](https://github.com/letientai299/7guis/tree/master/tui)
- [tuihub: A utility hub/dashboard for personal use](https://github.com/ashis0013/tuihub)
- [l&#039;oggo: A terminal app for structured log streaming (GCP stack driver, k8s, local streaming)](https://github.com/aurc/loggo)
- [reminder: Terminal based interactive app for organising tasks with minimal efforts.](https://github.com/goyalmunish/reminder)
- [tufw: A terminal UI for ufw.](https://github.com/peltho/tufw)
- [gh: the GitHub CLI](https://github.com/cli/cli)
- [piptui: Terminal UI to manage pip packages](https://github.com/glendsoza/piptui/)
- [cross-clipboard: A cross-platform clipboard sharing](https://github.com/ntsd/cross-clipboard)
- [tui-deck: nextcloud deck frontend](https://github.com/mebitek/tui-deck)
- [ktop: A top-like tool for your Kubernetes clusters](https://github.com/vladimirvivien/ktop)
- [blimp: UI for weather, network latency, application status, &amp; more](https://github.com/merlinfuchs/blimp)
- [Curly - A simple TUI leveraging curl to test endpoints](https://github.com/migcaraballo/curly)
- [amtui: Alertmanager TUI](https://github.com/pehlicd/amtui)
- [A TUI CLI manager](https://github.com/costa86/cli-manager)
- [PrivateBTC](https://github.com/adrianbrad/privatebtc)
- [play: A TUI playground to experiment with your favorite programs, such as grep, sed, awk, jq and yq](https://github.com/paololazzari/play)
- [gorest: Enjoy making HTTP requests in your terminal, just like you do in Insomnia.](https://github.com/NathanFirmo/gorest)
- [Terminal-based application to listen Radio Stations around the world!](https://github.com/vergonha/garden-tui)
- [ntui: A TUI to manage Hashicorp Nomad clusters](https://github.com/SHAPPY0/ntui)
- [lazysql: A cross-platform TUI database management tool written in Go](https://github.com/jorgerojas26/lazysql)
- [redis-tui: A Redis Text-based UI client in CLI](https://github.com/mylxsw/redis-tui)
- [fen: File manager](https://github.com/kivattt/fen)
- [sqltui: A terminal UI to operate sql and nosql databases](https://github.com/LinPr/sqltui)
- [DBee: Simple database browser](https://github.com/murat-cileli/dbee)
- [oddshub: A TUI for sports betting odds](https://github.com/dos-2/oddshub)
- [envolve: Terminal based interactive app for manage enviroment variables](https://github.com/erdemkosk/envolve)
- [zfs-file-history: Terminal UI for inspecting and restoring file history on ZFS snapshots](https://github.com/markusressel/zfs-file-history)
- [fan2go-tui: Terminal UI for fan2go](https://github.com/markusressel/fan2go-tui)
- [NatsDash: Terminal UI for NATS Jetstream](https://nats-dash-gui.returnzero.win/)
- [tuissh: A terminal UI to manage ssh connections](https://github.com/linuxexam/tuissh)
- [chiko: Ultimate Beauty TUI gRPC Client](https://github.com/felangga/chiko)
- [kmip-explorer: Browse &amp; manage your KMIP objects from the terminal](https://github.com/phsym/kmip-explorer)
- [stui: Slurm TUI for managing HPC clusters](https://github.com/antvirf/stui)
- [nerdlog: Fast, remote-first, multi-host log viewer with timeline histogram](https://github.com/dimonomid/nerdlog)
- [lxz: A powerful DevOps graphical command-line interface tool](https://github.com/liangzhaoliang95/lxz)
- [vaulty: Terminal UI for Azure Keyvault](https://github.com/declan-whiting/vaulty)
- [pago: Command-line password manager](https://github.com/dbohdan/pago)

## Documentation

Refer to https://pkg.go.dev/github.com/rivo/tview for the package&#039;s documentation. Also check out the [Wiki](https://github.com/rivo/tview/wiki).

## Dependencies

This package is based on [github.com/gdamore/tcell](https://github.com/gdamore/tcell) (and its dependencies) as well as on [github.com/rivo/uniseg](https://github.com/rivo/uniseg).

## Sponsor this Project

[Become a Sponsor on GitHub](https://github.com/sponsors/rivo?metadata_source=tview_readme) to further this project!

## Backwards-Compatibility

I try really hard to keep this project backwards compatible. Your software should not break when you upgrade `tview`. But this also means that some of its shortcomings that were present in the initial versions will remain. Having said that, backwards compatibility may still break when:

- a new version of an imported package (most likely [`tcell`](https://github.com/gdamore/tcell)) changes in such a way that forces me to make changes in `tview` as well,
- I fix something that I consider a bug, rather than a feature, something that does not work as originally intended,
- I make changes to &quot;internal&quot; interfaces such as [`Primitive`](https://pkg.go.dev/github.com/rivo/tview#Primitive). You shouldn&#039;t need these interfaces unless you&#039;re writing your own primitives for `tview`. (Yes, I realize these are public interfaces. This has advantages as well as disadvantages. For the time being, it is what it is.)

## Your Feedback

Add your issue here on GitHub. Feel free to get in touch if you have any questions.

## Code of Conduct

We follow Golang&#039;s Code of Conduct which you can find [here](https://golang.org/conduct).
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[inngest/inngest]]></title>
            <link>https://github.com/inngest/inngest</link>
            <guid>https://github.com/inngest/inngest</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:26 GMT</pubDate>
            <description><![CDATA[The leading workflow orchestration platform. Run stateful step functions and AI workflows on serverless, servers, or the edge.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/inngest/inngest">inngest/inngest</a></h1>
            <p>The leading workflow orchestration platform. Run stateful step functions and AI workflows on serverless, servers, or the edge.</p>
            <p>Language: Go</p>
            <p>Stars: 4,037</p>
            <p>Forks: 185</p>
            <p>Stars today: 14 stars today</p>
            <h2>README</h2><pre># [![Inngest](https://github.com/inngest/.github/raw/main/profile/github-readme-banner-2025-06-20.png)](https://www.inngest.com)

[![Latest release](https://img.shields.io/github/v/release/inngest/inngest?include_prereleases&amp;sort=semver)](https://github.com/inngest/inngest/releases)
[![Test Status](https://img.shields.io/github/actions/workflow/status/inngest/inngest/go.yaml?branch=main&amp;label=tests)](https://github.com/inngest/inngest/actions?query=branch%3Amain)
[![Discord](https://img.shields.io/discord/842170679536517141?label=discord)](https://www.inngest.com/discord)
[![Twitter Follow](https://img.shields.io/twitter/follow/inngest?style=social)](https://twitter.com/inngest)

[Inngest](https://www.inngest.com/?ref=github-inngest-readme)&#039;s durable functions replace queues, state management, and scheduling to enable any developer to write reliable step functions faster without touching infrastructure.

1. Write durable functions using any of [**our language SDKs**](#sdks)
2. Run the [**Inngest Dev Server**](#getting-started) for a complete local development experience, with production parity.
3. Deploy your functions to your own infrastructure
4. Sync your application&#039;s functions with the [**Inngest Platform**](https://www.inngest.com/?ref=github-inngest-readme) or a [self-hosted Inngest server](#self-hosting).
5. Inngest invokes your functions securely via HTTPS whenever triggering events are received.

### An example durable function

Inngest Functions enable developers to run reliable background logic, from background jobs to complex workflows. An Inngest Function is composed of three key parts that provide robust support for retrying, scheduling, and coordinating complex sequences of operations:

- [**Triggers**](https://www.inngest.com/docs/features/events-triggers?ref=github-inngest-readme) - Events, Cron schedules or webhook events that trigger the function.
- [**Flow Control**](https://www.inngest.com/docs/guides/flow-control?ref=github-inngest-readme) - Configure how the function runs are enqueued and executed including concurrency, throttling, debouncing, rate limiting, and prioritization.
- [**Steps**](/docs/features/inngest-functions/steps-workflows?ref=github-inngest-readme) - Steps are fundamental building blocks of Inngest, turning your Inngest Functions into reliable workflows that can runs for months and recover from failures.

Here is an example function that limits concurrency for each unique user id and performs two steps that will be retried on error:

```typescript
export default inngest.createFunction(
  {
    id: &quot;import-product-images&quot;,
    concurrency: {
      key: &quot;event.data.userId&quot;,
      limit: 10
    }
  },
  { event: &quot;shop/product.imported&quot; },
  async ({ event, step }) =&gt; {
    // Here goes the business logic
    // By wrapping code in steps, each will be retried automatically on failure
    const s3Urls = await step.run(&quot;copy-images-to-s3&quot;, async () =&gt; {
      return copyAllImagesToS3(event.data.imageURLs);
    });
    // You can include numerous steps in your function
    await step.run(&quot;resize-images&quot;, async () =&gt; {
      await resizer.bulk({ urls: s3Urls, quality: 0.9, maxWidth: 1024 });
    })
  };
);

// Elsewhere in your code (e.g. in your API endpoint):
await inngest.send({
  name: &quot;shop/product.imported&quot;,
  data: {
    userId: &quot;01J8G44701QYGE0DH65PZM8DPM&quot;,
    imageURLs: [
      &quot;https://useruploads.acme.com/q2345678/1094.jpg&quot;,
      &quot;https://useruploads.acme.com/q2345678/1095.jpg&quot;
    ],
  },
});
```

## Learn more

- [Getting started](#getting-started)
- [SDKs](#sdks)
- [Project Architecture](#project-architecture)
- [Self-hosting](#self-hosting)
- [Community](#community)

## Getting started

Run the Inngest Dev Server using our CLI:

```
npx inngest-cli@latest dev
```

Open the Inngest Dev Server dashboard at http://localhost:8288:

![Screenshot of the Inngest dashboard served by the Inngest Dev Server](.github/assets/dashboard-screenshot-2024-09-23.png)

Follow our [Next.js](https://www.inngest.com/docs/getting-started/nextjs-quick-start?ref=github-inngest-readme), [Node.js](https://www.inngest.com/docs/getting-started/nodejs-quick-start?ref=github-inngest-readme) or [Python](https://www.inngest.com/docs/getting-started/python-quick-start?ref=github-inngest-readme) quick start guides.

## SDKs

- **TypeScript / JavaScript** ([inngest-js](https://github.com/inngest/inngest-js)) - [Reference](https://www.inngest.com/docs/reference/typescript?ref=github-inngest-readme)
- **Python** ([inngest-py](https://github.com/inngest/inngest-py)) - [Reference](https://www.inngest.com/docs/reference/python?ref=github-inngest-readme)
- **Go** ([inngestgo](https://github.com/inngest/inngestgo)) - [Reference](https://pkg.go.dev/github.com/inngest/inngestgo)
- **Kotlin / Java** ([inngest-kt](https://github.com/inngest/inngest-kt))

## Project Architecture

To understand how self-hosting works, it&#039;s valuable to understand the architecture and system components at a high level. We&#039;ll take a look at a simplified architecture diagram and walk through the system.

&lt;br /&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;.github/assets/architecture-2024-09-23.png&quot; alt=&quot;System Architecture&quot; width=&quot;660&quot; /&gt;
&lt;/p&gt;

- **Event API** - Receives events from SDKs via HTTP requests. Authenticates client requests via [Event Keys](https://www.inngest.com/docs/events/creating-an-event-key?ref=github-inngest-readme). The Event API publishes event payloads to an internal event stream.
- **Event stream** - Acts as buffer between the _Event API_ and the _Runner_.
- **Runner** - Consumes incoming events and performs several actions:
  - Scheduling of new ‚Äúfunction runs‚Äù (aka jobs) given the event type, creating initial run state in the _State store_ database. Runs are added to queues given the function&#039;s flow control configuration.
  - Resume functions paused via [`waitForEvent`](https://www.inngest.com/docs/features/inngest-functions/steps-workflows/wait-for-event?ref=github-inngest-readme) with matching expressions.
  - Cancels running functions with matching [`cancelOn`](https://www.inngest.com/docs/features/inngest-functions/cancellation/cancel-on-events?ref=github-inngest-readme) expressions
  - Writes ingested events to a database for historical record and future replay.
- **Queue** - A multi-tenant aware, multi-tier queue designed for fairness and various [flow control](https://www.inngest.com/docs/guides/flow-control?ref=github-inngest-readme) methods (concurrency, throttling, prioritization, debouncing, rate limiting) and [batching](https://www.inngest.com/docs/guides/batching?ref=github-inngest-readme).
- **Executor** - Responsible for executing functions, from initial execution, step execution, writing incremental function run state to the _State store_, and retries after failures.
- **State store (database)** - Persists data for pending and ongoing function runs. Data includes initial triggering event(s), step output and step errors.
- **Database** - Persists system data and history including Apps, Functions, Events, Function run results.
- **API** - GraphQL and REST APIs for programmatic access and management of system resources.
- **Dashboard UI** - The UI to manage apps, functions and view function run history.

&lt;br /&gt;

## Community

- [**Join our Discord community for support, to give us feedback, or chat with us**](https://www.inngest.com/discord).
- [Post a question or idea to our GitHub discussion board](https://github.com/orgs/inngest/discussions)
- [Read the documentation](https://www.inngest.com/docs?ref=github-inngest-readme)
- [Explore our public roadmap](http://roadmap.inngest.com/)
- [Follow us on Twitter](https://twitter.com/inngest)
- [Join our mailing list](https://www.inngest.com/mailing-list) for release notes and project updates

## Contributing

We embrace contributions in many forms, including documentation, typos, bug reports or fixes. Check out our [contributing guide](/docs/CONTRIBUTING.md) to get started. Each of our open source [SDKs](#sdks) are open to contributions as well.

Additionally, Inngest&#039;s website documentation is available for contribution in [the `inngest/website` repo](https://github.com/inngest/website).

## Self-hosting

Self-hosting the Inngest server is possible and easy to get started with. Learn more about self-hosting Inngest in [our docs guide](https://www.inngest.com/docs/self-hosting?ref=github-inngest-readme).

## License

The Inngest server and CLI are available under the Server Side Public License and delayed open source publication (DOSP) under Apache 2.0. [View the license here](/LICENSE.md).

All Inngest [SDKs](#sdks) are all available under the Apache 2.0 license.
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
        <item>
            <title><![CDATA[NexaAI/nexa-sdk]]></title>
            <link>https://github.com/NexaAI/nexa-sdk</link>
            <guid>https://github.com/NexaAI/nexa-sdk</guid>
            <pubDate>Mon, 27 Oct 2025 00:05:25 GMT</pubDate>
            <description><![CDATA[Run the latest LLMs and VLMs across GPU, NPU, and CPU with PC (Python/C++) & mobile (Android & iOS) support, running quickly with OpenAI gpt-oss, Granite4, Qwen3VL, Gemma 3n and more.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/NexaAI/nexa-sdk">NexaAI/nexa-sdk</a></h1>
            <p>Run the latest LLMs and VLMs across GPU, NPU, and CPU with PC (Python/C++) & mobile (Android & iOS) support, running quickly with OpenAI gpt-oss, Granite4, Qwen3VL, Gemma 3n and more.</p>
            <p>Language: Go</p>
            <p>Stars: 5,527</p>
            <p>Forks: 715</p>
            <p>Stars today: 23 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;
  &lt;p&gt;
      &lt;img width=&quot;100%&quot; src=&quot;assets/banner1.png&quot; alt=&quot;Nexa AI Banner&quot;&gt;
      &lt;div align=&quot;center&quot;&gt;
  &lt;p style=&quot;font-size: 1.3em; font-weight: 600; margin-bottom: 10px;&quot;&gt;ü§ù Trusted by Partners&lt;/p&gt;
  &lt;img src=&quot;assets/qualcomm.png&quot; alt=&quot;Qualcomm&quot; height=&quot;40&quot; style=&quot;margin: 0 20px;&quot;&gt;
  &lt;img src=&quot;assets/nvidia.png&quot; alt=&quot;NVIDIA&quot; height=&quot;40&quot; style=&quot;margin: 0 20px;&quot;&gt;
  &lt;img src=&quot;assets/AMD.png&quot; alt=&quot;AMD&quot; height=&quot;42&quot; style=&quot;margin: 0 20px;&quot;&gt;
  &lt;img src=&quot;assets/Intel_logo.png&quot; alt=&quot;Intel&quot; height=&quot;45&quot; style=&quot;margin: 0 10px;&quot;&gt;
&lt;/div&gt;
  &lt;/p&gt;

  &lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://docs.nexa.ai&quot;&gt;
        &lt;img src=&quot;https://img.shields.io/badge/docs-website-brightgreen?logo=readthedocs&quot; alt=&quot;Documentation&quot;&gt;
    &lt;/a&gt;
   &lt;a href=&quot;https://x.com/nexa_ai&quot;&gt;&lt;img alt=&quot;X account&quot; src=&quot;https://img.shields.io/twitter/url/https/twitter.com/diffuserslib.svg?style=social&amp;label=Follow%20%40Nexa_AI&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://discord.com/invite/nexa-ai&quot;&gt;
        &lt;img src=&quot;https://img.shields.io/discord/1192186167391682711?color=5865F2&amp;logo=discord&amp;logoColor=white&amp;style=flat-square&quot; alt=&quot;Join us on Discord&quot;&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://join.slack.com/t/nexa-ai-community/shared_invite/zt-3837k9xpe-LEty0disTTUnTUQ4O3uuNw&quot;&gt;
        &lt;img src=&quot;https://img.shields.io/badge/slack-join%20chat-4A154B?logo=slack&amp;logoColor=white&quot; alt=&quot;Join us on Slack&quot;&gt;
    &lt;/a&gt;
&lt;/p&gt;


&lt;/div&gt;

# NexaSDK - Run any AI model on any backend

NexaSDK is an easy-to-use developer toolkit for running any AI model locally ‚Äî across NPUs, GPUs, and CPUs ‚Äî powered by our NexaML engine, built entirely from scratch for peak performance on every hardware stack. Unlike wrappers that depend on existing runtimes, NexaML is a unified inference engine built at the kernel level. It‚Äôs what lets NexaSDK achieve Day-0 support for new model architectures (LLMs, multimodal, audio, vision). NexaML supports 3 model formats: GGUF, MLX, and Nexa AI&#039;s own `.nexa` format.

### ‚öôÔ∏è Differentiation

&lt;div align=&quot;center&quot;&gt;

| Features | **NexaSDK** | **Ollama** | **llama.cpp** | **LM Studio** |
|----------|--------------|-------------|----------------|----------------|
| NPU support | ‚úÖ NPU-first | ‚ùå | ‚ùå | ‚ùå |
| Support any model in GGUF, MLX, NEXA format | ‚úÖ Low-level Control | ‚ùå | ‚ö†Ô∏è | ‚ùå |
| Full multimodality support | ‚úÖ Image, Audio, Text | ‚ö†Ô∏è | ‚ö†Ô∏è | ‚ö†Ô∏è |
| Cross-platform support | ‚úÖ Desktop, Mobile, Automotive, IoT | ‚ö†Ô∏è | ‚ö†Ô∏è | ‚ö†Ô∏è |
| One line of code to run | ‚úÖ | ‚úÖ | ‚ö†Ô∏è | ‚úÖ |
| OpenAI-compatible API + Function calling | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |

&lt;p align=&quot;center&quot; style=&quot;margin-top:14px&quot;&gt;
  &lt;i&gt;
      &lt;b&gt;Legend:&lt;/b&gt;
      &lt;span title=&quot;Full support&quot;&gt;‚úÖ Supported&lt;/span&gt; &amp;nbsp; | &amp;nbsp;
      &lt;span title=&quot;Partial or limited support&quot;&gt;‚ö†Ô∏è Partial or limited support &lt;/span&gt; &amp;nbsp; | &amp;nbsp;
      &lt;span title=&quot;Not Supported&quot;&gt;‚ùå No&lt;/span&gt;
  &lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;


## Recent Wins

- üì£ Day-0 Support for **Qwen3-VL-4B and 8B** in GGUF, MLX, .nexa format for NPU/GPU/CPU. We are the only framework that supports the GGUF format. [Featured in Qwen&#039;s post about our partnership](https://x.com/Alibaba_Qwen/status/1978154384098754943).
- üì£ Day-0 Support for **IBM Granite 4.0** on NPU/GPU/CPU. [NexaML engine were featured right next to vLLM, llama.cpp, and MLX in IBM&#039;s blog](https://x.com/IBM/status/1978154384098754943).
- üì£ Day-0 Support for **Google EmbeddingGemma** on NPU. We are [featured in Google&#039;s social post](https://x.com/googleaidevs/status/1969188152049889511).
- üì£ Supported **vision capability for Gemma3n**: First-ever [Gemma-3n](https://sdk.nexa.ai/model/Gemma3n-E4B) **multimodal** inference for GPU &amp; CPU, in GGUF format.
- üì£ AMD NPU Support for [SDXL](https://huggingface.co/NexaAI/sdxl-turbo-amd-npu) image generation
- üì£ Intel NPU Support [DeepSeek-r1-distill-Qwen-1.5B](https://sdk.nexa.ai/model/DeepSeek-R1-Distill-Qwen-1.5B-Intel-NPU) and [Llama3.2-3B](https://sdk.nexa.ai/model/Llama3.2-3B-Intel-NPU)
- üì£ Apple Neural Engine Support for real-time speech recognition with [Parakeet v3 model](https://sdk.nexa.ai/model/parakeet-v3-ane)
  
# Quick Start

## Step 1: Download Nexa CLI with one click

### macOS
* [arm64 with Apple Neural Engine support](https://public-storage.nexa4ai.com/nexa_sdk/downloads/nexa-cli_macos_arm64.pkg)
* [x86_64](https://public-storage.nexa4ai.com/nexa_sdk/downloads/nexa-cli_macos_x86_64.pkg)

### Windows
* [arm64 with Qualcomm NPU support](https://public-storage.nexa4ai.com/nexa_sdk/downloads/nexa-cli_windows_arm64.exe)
* [x86_64 with Intel / AMD NPU support](https://public-storage.nexa4ai.com/nexa_sdk/downloads/nexa-cli_windows_x86_64.exe)

### Linux
#### For x86_64:
```bash
curl -fsSL https://github.com/NexaAI/nexa-sdk/releases/latest/download/nexa-cli_linux_x86_64.sh -o install.sh &amp;&amp; chmod +x install.sh &amp;&amp; ./install.sh &amp;&amp; rm install.sh
```

#### For arm64:
```bash
curl -fsSL https://github.com/NexaAI/nexa-sdk/releases/latest/download/nexa-cli_linux_arm64.sh -o install.sh &amp;&amp; chmod +x install.sh &amp;&amp; ./install.sh &amp;&amp; rm install.sh
```

## Step 2: Run models with one line of code

You can run any compatible GGUF, MLX, or nexa model from ü§ó Hugging Face by using the `nexa infer &lt;full repo name&gt;`.

### GGUF models

&gt; [!TIP]
&gt; GGUF runs on macOS, Linux, and Windows on CPU/GPU. Note certain GGUF models are only supported by NexaSDK (e.g. Qwen3-VL-4B and 8B).

üìù Run and chat with LLMs, e.g. Qwen3:

```bash
nexa infer ggml-org/Qwen3-1.7B-GGUF
```

üñºÔ∏è Run and chat with Multimodal models, e.g. Qwen3-VL-4B:

```bash
nexa infer NexaAI/Qwen3-VL-4B-Instruct-GGUF
```

### MLX models
&gt; [!TIP]
&gt; MLX is macOS-only (Apple Silicon). Many MLX models in the Hugging Face mlx-community organization have quality issues and may not run reliably.
&gt; We recommend starting with models from our curated [NexaAI Collection](https://huggingface.co/NexaAI/collections) for best results. For example

üìù Run and chat with LLMs, e.g. Qwen3:

```bash
nexa infer NexaAI/Qwen3-4B-4bit-MLX
```

üñºÔ∏è Run and chat with Multimodal models, e.g. Gemma3n:

```bash
nexa infer NexaAI/gemma-3n-E4B-it-4bit-MLX
```

### Qualcomm NPU models
&gt; [!TIP]
&gt; You need to download the [arm64 with Qualcomm NPU support](https://public-storage.nexa4ai.com/nexa_sdk/downloads/nexa-cli_windows_arm64.exe) and make sure you have Snapdragon¬Æ X Elite chip on your laptop.

#### Quick Start (Windows arm64, Snapdragon X Elite)

1. **Login &amp; Get Access Token (required for Pro Models)**  
   - Create an account at [sdk.nexa.ai](https://sdk.nexa.ai)  
   - Go to **Deployment ‚Üí Create Token**  
   - Run this once in your terminal (replace with your token):  
     ```bash
     nexa config set license &#039;&lt;your_token_here&gt;&#039;
     ```

2. Run and chat with our multimodal model, OmniNeural-4B, or other models on NPU

```bash
nexa infer NexaAI/OmniNeural-4B
nexa infer NexaAI/Granite-4-Micro-NPU
nexa infer NexaAI/Qwen3-VL-4B-Instruct-NPU
```

## CLI Reference

| Essential Command                          | What it does                                                        |
|----------------------------------|----------------------------------------------------------------------|
| `nexa -h`              | show all CLI commands                              |
| `nexa pull &lt;repo&gt;`              | Interactive download &amp; cache of a model                              |
| `nexa infer &lt;repo&gt;`             | Local inference          |
| `nexa list`                     | Show all cached models with sizes                                    |
| `nexa remove &lt;repo&gt;` / `nexa clean` | Delete one / all cached models                                   |
| `nexa serve --host 127.0.0.1:8080` | Launch OpenAI‚Äëcompatible REST server                            |
| `nexa run &lt;repo&gt;`              | Chat with a model via an existing server                             |

üëâ To interact with multimodal models, you can drag photos or audio clips directly into the CLI ‚Äî you can even drop multiple images at once!

See [CLI Reference](https://nexaai.mintlify.app/nexa-sdk-go/NexaCLI) for full commands.

## Acknowledgements

We would like to thank the following projects:
- [ggml](https://github.com/ggml-org/ggml)
- [mlx-lm](https://github.com/ml-explore/mlx-lm)
- [mlx-vlm](https://github.com/Blaizzy/mlx-vlm)
- [mlx-audio](https://github.com/Blaizzy/mlx-audio)
</pre>
          ]]></content:encoded>
            <category>Go</category>
        </item>
    </channel>
</rss>