<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for typescript - TypeScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for typescript.</description>
        <lastBuildDate>Thu, 27 Mar 2025 00:05:08 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[ourongxing/newsnow]]></title>
            <link>https://github.com/ourongxing/newsnow</link>
            <guid>https://github.com/ourongxing/newsnow</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:08 GMT</pubDate>
            <description><![CDATA[Elegant reading of real-time and hottest news]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/ourongxing/newsnow">ourongxing/newsnow</a></h1>
            <p>Elegant reading of real-time and hottest news</p>
            <p>Language: TypeScript</p>
            <p>Stars: 5,579</p>
            <p>Forks: 1,346</p>
            <p>Stars today: 375 stars today</p>
            <h2>README</h2><pre># NewsNow
&lt;a href=&quot;https://hellogithub.com/repository/c2978695e74a423189e9ca2543ab3b36&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://api.hellogithub.com/v1/widgets/recommend.svg?rid=c2978695e74a423189e9ca2543ab3b36&amp;claim_uid=SMJiFwlsKCkWf89&amp;theme=small&quot; alt=&quot;Featured｜HelloGitHub&quot; /&gt;&lt;/a&gt;

![](screenshots/preview-1.png)

![](screenshots/preview-2.png)

English | [简体中文](README.zh-CN.md)

***Elegant reading of real-time and hottest news***

## Features
- Elegant design for a pleasant reading experience, keeping you up-to-date with the latest and hottest news.
- Supports Github login and data synchronization.
- Default cache duration is 30 minutes. Logged-in users can force fetch the latest data. However, the scraping interval is adjusted based on the update frequency of the content sources (as fast as every two minutes) to save resources and prevent frequent scraping that could lead to IP bans.

## Deployment

If login and caching are not required, you can directly deploy to platforms like Cloudflare Pages or Vercel. Just fork the repository and import it into the respective platform.

For Cloudflare Pages, you need to set the build command to `pnpm run build` and the build output directory to `dist/output/public`.

For login, which involves GitHub OAuth, you only need to [create a GitHub App](https://github.com/settings/applications/new). No special permissions are required. The callback URL should be `https://your-domain.com/api/oauth/github` (replace `your-domain` with your actual domain).

After creating the app, you will get a Client ID and Client Secret. Different platforms have different places to set environment variables; refer to the `example.env.server` file. If running locally, rename it to `.env.server` and add the necessary values.

```env
# Github Client ID
G_CLIENT_ID=
# Github Client Secret
G_CLIENT_SECRET=
# JWT Secret, usually the same as Client Secret
JWT_SECRET=
# Initialize database, must be set to true on first run, can be turned off afterward
INIT_TABLE=true
# Whether to enable cache
ENABLE_CACHE=true
```

This project primarily supports deployment on Cloudflare Pages and Docker. For Vercel, you need to set up your own database. Supported databases can be found at https://db0.unjs.io/connectors .

The Cloudflare D1 database can be used for free. To set it up, go to the Cloudflare Worker control panel and manually create a D1 database. Then, add the `database_id` and `database_name` to the corresponding fields in your `wrangler.toml` file.

If you don&#039;t have a `wrangler.toml` file, you can rename `example.wrangler.toml` to `wrangler.toml` and modify it with your configuration. The changes will take effect on your next deployment.

For Docker deployment. In the project root directory with `docker-compose.yml`, run

```sh
docker compose up
```

## Development

&gt; [!TIP]
&gt; Node version &gt;= 20

```sh
corepack enable
pnpm i
pnpm dev
```

If you want to add data sources, refer to the `shared/sources`, and `server/sources` directories. The project has complete types and a simple structure; feel free to explore.

## License

[MIT](./LICENSE) © ourongxing
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[signalapp/Signal-Desktop]]></title>
            <link>https://github.com/signalapp/Signal-Desktop</link>
            <guid>https://github.com/signalapp/Signal-Desktop</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:07 GMT</pubDate>
            <description><![CDATA[A private messenger for Windows, macOS, and Linux.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/signalapp/Signal-Desktop">signalapp/Signal-Desktop</a></h1>
            <p>A private messenger for Windows, macOS, and Linux.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 15,020</p>
            <p>Forks: 2,740</p>
            <p>Stars today: 17 stars today</p>
            <h2>README</h2><pre>&lt;!-- Copyright 2014 Signal Messenger, LLC --&gt;
&lt;!-- SPDX-License-Identifier: AGPL-3.0-only --&gt;

# Signal Desktop

Signal Desktop links with Signal on [Android](https://github.com/signalapp/Signal-Android) or [iOS](https://github.com/signalapp/Signal-iOS) and lets you message from your Windows, macOS, and Linux computers.

[Install the production version](https://signal.org/download/) or help us out by [installing the beta version](https://support.signal.org/hc/articles/360007318471-Signal-Beta).

## Got a question?

You can find answers to a number of frequently asked questions on our [support site](https://support.signal.org/).
The [community forum](https://community.signalusers.org/) is another good place for questions.

## Found a Bug?

Please search for any [existing issues](https://github.com/signalapp/Signal-Desktop/issues) that describe your bug in order to avoid duplicate submissions.

## Have a feature request, question, comment?

Please use our community forum: https://community.signalusers.org/

## Contributing Code

Please see [CONTRIBUTING.md](https://github.com/signalapp/Signal-Desktop/blob/main/CONTRIBUTING.md)
for setup instructions and guidelines for new contributors. Don&#039;t forget to sign the [CLA](https://signal.org/cla/).

## Contributing Funds

You can donate to Signal development through the [Signal Technology Foundation](https://signal.org/donate), an independent 501c3 nonprofit.

## Cryptography Notice

This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software.
BEFORE using any encryption software, please check your country&#039;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.
See &lt;http://www.wassenaar.org/&gt; for more information.

The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms.
The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.

## License

Copyright 2013-2024 Signal Messenger, LLC

Licensed under the GNU AGPLv3: https://www.gnu.org/licenses/agpl-3.0.html
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[langgenius/dify]]></title>
            <link>https://github.com/langgenius/dify</link>
            <guid>https://github.com/langgenius/dify</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:06 GMT</pubDate>
            <description><![CDATA[Dify is an open-source LLM app development platform. Dify's intuitive interface combines AI workflow, RAG pipeline, agent capabilities, model management, observability features and more, letting you quickly go from prototype to production.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/langgenius/dify">langgenius/dify</a></h1>
            <p>Dify is an open-source LLM app development platform. Dify's intuitive interface combines AI workflow, RAG pipeline, agent capabilities, model management, observability features and more, letting you quickly go from prototype to production.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 86,142</p>
            <p>Forks: 12,761</p>
            <p>Stars today: 399 stars today</p>
            <h2>README</h2><pre>![cover-v5-optimized](https://github.com/langgenius/dify/assets/13230914/f9e19af5-61ba-4119-b926-d10c4c06ebab)

&lt;p align=&quot;center&quot;&gt;
  📌 &lt;a href=&quot;https://dify.ai/blog/introducing-dify-workflow-file-upload-a-demo-on-ai-podcast&quot;&gt;Introducing Dify Workflow File Upload: Recreate Google NotebookLM Podcast&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://cloud.dify.ai&quot;&gt;Dify Cloud&lt;/a&gt; ·
  &lt;a href=&quot;https://docs.dify.ai/getting-started/install-self-hosted&quot;&gt;Self-hosting&lt;/a&gt; ·
  &lt;a href=&quot;https://docs.dify.ai&quot;&gt;Documentation&lt;/a&gt; ·
  &lt;a href=&quot;https://udify.app/chat/22L1zSxg6yW1cWQg&quot;&gt;Enterprise inquiry&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://dify.ai&quot; target=&quot;_blank&quot;&gt;
        &lt;img alt=&quot;Static Badge&quot; src=&quot;https://img.shields.io/badge/Product-F04438&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://dify.ai/pricing&quot; target=&quot;_blank&quot;&gt;
        &lt;img alt=&quot;Static Badge&quot; src=&quot;https://img.shields.io/badge/free-pricing?logo=free&amp;color=%20%23155EEF&amp;label=pricing&amp;labelColor=%20%23528bff&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://discord.gg/FngNHpbcY7&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;https://img.shields.io/discord/1082486657678311454?logo=discord&amp;labelColor=%20%235462eb&amp;logoColor=%20%23f5f5f5&amp;color=%20%235462eb&quot;
            alt=&quot;chat on Discord&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://reddit.com/r/difyai&quot; target=&quot;_blank&quot;&gt;  
        &lt;img src=&quot;https://img.shields.io/reddit/subreddit-subscribers/difyai?style=plastic&amp;logo=reddit&amp;label=r%2Fdifyai&amp;labelColor=white&quot;
            alt=&quot;join Reddit&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=dify_ai&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;https://img.shields.io/twitter/follow/dify_ai?logo=X&amp;color=%20%23f5f5f5&quot;
            alt=&quot;follow on X(Twitter)&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://www.linkedin.com/company/langgenius/&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/LinkedIn-0A66C2?logo=linkedin-white&amp;logoColor=fff&quot;
            alt=&quot;follow on LinkedIn&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://hub.docker.com/u/langgenius&quot; target=&quot;_blank&quot;&gt;
        &lt;img alt=&quot;Docker Pulls&quot; src=&quot;https://img.shields.io/docker/pulls/langgenius/dify-web?labelColor=%20%23FDB062&amp;color=%20%23f79009&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/langgenius/dify/graphs/commit-activity&quot; target=&quot;_blank&quot;&gt;
        &lt;img alt=&quot;Commits last month&quot; src=&quot;https://img.shields.io/github/commit-activity/m/langgenius/dify?labelColor=%20%2332b583&amp;color=%20%2312b76a&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/langgenius/dify/&quot; target=&quot;_blank&quot;&gt;
        &lt;img alt=&quot;Issues closed&quot; src=&quot;https://img.shields.io/github/issues-search?query=repo%3Alanggenius%2Fdify%20is%3Aclosed&amp;label=issues%20closed&amp;labelColor=%20%237d89b0&amp;color=%20%235d6b98&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/langgenius/dify/discussions/&quot; target=&quot;_blank&quot;&gt;
        &lt;img alt=&quot;Discussion posts&quot; src=&quot;https://img.shields.io/github/discussions/langgenius/dify?labelColor=%20%239b8afb&amp;color=%20%237a5af8&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;./README.md&quot;&gt;&lt;img alt=&quot;README in English&quot; src=&quot;https://img.shields.io/badge/English-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_TW.md&quot;&gt;&lt;img alt=&quot;繁體中文文件&quot; src=&quot;https://img.shields.io/badge/繁體中文-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_CN.md&quot;&gt;&lt;img alt=&quot;简体中文版自述文件&quot; src=&quot;https://img.shields.io/badge/简体中文-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_JA.md&quot;&gt;&lt;img alt=&quot;日本語のREADME&quot; src=&quot;https://img.shields.io/badge/日本語-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_ES.md&quot;&gt;&lt;img alt=&quot;README en Español&quot; src=&quot;https://img.shields.io/badge/Español-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_FR.md&quot;&gt;&lt;img alt=&quot;README en Français&quot; src=&quot;https://img.shields.io/badge/Français-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_KL.md&quot;&gt;&lt;img alt=&quot;README tlhIngan Hol&quot; src=&quot;https://img.shields.io/badge/Klingon-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_KR.md&quot;&gt;&lt;img alt=&quot;README in Korean&quot; src=&quot;https://img.shields.io/badge/한국어-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_AR.md&quot;&gt;&lt;img alt=&quot;README بالعربية&quot; src=&quot;https://img.shields.io/badge/العربية-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_TR.md&quot;&gt;&lt;img alt=&quot;Türkçe README&quot; src=&quot;https://img.shields.io/badge/Türkçe-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_VI.md&quot;&gt;&lt;img alt=&quot;README Tiếng Việt&quot; src=&quot;https://img.shields.io/badge/Ti%E1%BA%BFng%20Vi%E1%BB%87t-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_DE.md&quot;&gt;&lt;img alt=&quot;README in Deutsch&quot; src=&quot;https://img.shields.io/badge/German-d9d9d9&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;./README_BN.md&quot;&gt;&lt;img alt=&quot;README in বাংলা&quot; src=&quot;https://img.shields.io/badge/বাংলা-d9d9d9&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

Dify is an open-source LLM app development platform. Its intuitive interface combines agentic AI workflow, RAG pipeline, agent capabilities, model management, observability features and more, letting you quickly go from prototype to production.

## Quick start

&gt; Before installing Dify, make sure your machine meets the following minimum system requirements:
&gt;
&gt; - CPU &gt;= 2 Core
&gt; - RAM &gt;= 4 GiB

&lt;/br&gt;

The easiest way to start the Dify server is through [docker compose](docker/docker-compose.yaml). Before running Dify with the following commands, make sure that [Docker](https://docs.docker.com/get-docker/) and [Docker Compose](https://docs.docker.com/compose/install/) are installed on your machine:

```bash
cd dify
cd docker
cp .env.example .env
docker compose up -d
```

After running, you can access the Dify dashboard in your browser at [http://localhost/install](http://localhost/install) and start the initialization process.

#### Seeking help

Please refer to our [FAQ](https://docs.dify.ai/getting-started/install-self-hosted/faqs) if you encounter problems setting up Dify. Reach out to [the community and us](#community--contact) if you are still having issues.

&gt; If you&#039;d like to contribute to Dify or do additional development, refer to our [guide to deploying from source code](https://docs.dify.ai/getting-started/install-self-hosted/local-source-code)

## Key features

**1. Workflow**:
Build and test powerful AI workflows on a visual canvas, leveraging all the following features and beyond.

https://github.com/langgenius/dify/assets/13230914/356df23e-1604-483d-80a6-9517ece318aa

**2. Comprehensive model support**:
Seamless integration with hundreds of proprietary / open-source LLMs from dozens of inference providers and self-hosted solutions, covering GPT, Mistral, Llama3, and any OpenAI API-compatible models. A full list of supported model providers can be found [here](https://docs.dify.ai/getting-started/readme/model-providers).

![providers-v5](https://github.com/langgenius/dify/assets/13230914/5a17bdbe-097a-4100-8363-40255b70f6e3)

**3. Prompt IDE**:
Intuitive interface for crafting prompts, comparing model performance, and adding additional features such as text-to-speech to a chat-based app.

**4. RAG Pipeline**:
Extensive RAG capabilities that cover everything from document ingestion to retrieval, with out-of-box support for text extraction from PDFs, PPTs, and other common document formats.

**5. Agent capabilities**:
You can define agents based on LLM Function Calling or ReAct, and add pre-built or custom tools for the agent. Dify provides 50+ built-in tools for AI agents, such as Google Search, DALL·E, Stable Diffusion and WolframAlpha.

**6. LLMOps**:
Monitor and analyze application logs and performance over time. You could continuously improve prompts, datasets, and models based on production data and annotations.

**7. Backend-as-a-Service**:
All of Dify&#039;s offerings come with corresponding APIs, so you could effortlessly integrate Dify into your own business logic.

## Feature Comparison

&lt;table style=&quot;width: 100%;&quot;&gt;
  &lt;tr&gt;
    &lt;th align=&quot;center&quot;&gt;Feature&lt;/th&gt;
    &lt;th align=&quot;center&quot;&gt;Dify.AI&lt;/th&gt;
    &lt;th align=&quot;center&quot;&gt;LangChain&lt;/th&gt;
    &lt;th align=&quot;center&quot;&gt;Flowise&lt;/th&gt;
    &lt;th align=&quot;center&quot;&gt;OpenAI Assistants API&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Programming Approach&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;API + App-oriented&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;Python Code&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;App-oriented&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;API-oriented&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Supported LLMs&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;Rich Variety&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;Rich Variety&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;Rich Variety&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;OpenAI-only&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;RAG Engine&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Agent&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Workflow&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Observability&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Enterprise Feature (SSO/Access control)&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;Local Deployment&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;✅&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;❌&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

## Using Dify

- **Cloud &lt;/br&gt;**
  We host a [Dify Cloud](https://dify.ai) service for anyone to try with zero setup. It provides all the capabilities of the self-deployed version, and includes 200 free GPT-4 calls in the sandbox plan.

- **Self-hosting Dify Community Edition&lt;/br&gt;**
  Quickly get Dify running in your environment with this [starter guide](#quick-start).
  Use our [documentation](https://docs.dify.ai) for further references and more in-depth instructions.

- **Dify for enterprise / organizations&lt;/br&gt;**
  We provide additional enterprise-centric features. [Log your questions for us through this chatbot](https://udify.app/chat/22L1zSxg6yW1cWQg) or [send us an email](mailto:business@dify.ai?subject=[GitHub]Business%20License%20Inquiry) to discuss enterprise needs. &lt;/br&gt;
  &gt; For startups and small businesses using AWS, check out [Dify Premium on AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-t22mebxzwjhu6) and deploy it to your own AWS VPC with one-click. It&#039;s an affordable AMI offering with the option to create apps with custom logo and branding.

## Staying ahead

Star Dify on GitHub and be instantly notified of new releases.

![star-us](https://github.com/langgenius/dify/assets/13230914/b823edc1-6388-4e25-ad45-2f6b187adbb4)

## Advanced Setup

If you need to customize the configuration, please refer to the comments in our [.env.example](docker/.env.example) file and update the corresponding values in your `.env` file. Additionally, you might need to make adjustments to the `docker-compose.yaml` file itself, such as changing image versions, port mappings, or volume mounts, based on your specific deployment environment and requirements. After making any changes, please re-run `docker-compose up -d`. You can find the full list of available environment variables [here](https://docs.dify.ai/getting-started/install-self-hosted/environments).

If you&#039;d like to configure a highly-available setup, there are community-contributed [Helm Charts](https://helm.sh/) and YAML files which allow Dify to be deployed on Kubernetes.

- [Helm Chart by @LeoQuote](https://github.com/douban/charts/tree/master/charts/dify)
- [Helm Chart by @BorisPolonsky](https://github.com/BorisPolonsky/dify-helm)
- [Helm Chart by @magicsong](https://github.com/magicsong/ai-charts)
- [YAML file by @Winson-030](https://github.com/Winson-030/dify-kubernetes)
- [YAML file by @wyy-holding](https://github.com/wyy-holding/dify-k8s)

#### Using Terraform for Deployment

Deploy Dify to Cloud Platform with a single click using [terraform](https://www.terraform.io/)

##### Azure Global

- [Azure Terraform by @nikawang](https://github.com/nikawang/dify-azure-terraform)

##### Google Cloud

- [Google Cloud Terraform by @sotazum](https://github.com/DeNA/dify-google-cloud-terraform)

#### Using AWS CDK for Deployment

Deploy Dify to AWS with [CDK](https://aws.amazon.com/cdk/)

##### AWS

- [AWS CDK by @KevinZhao](https://github.com/aws-samples/solution-for-deploying-dify-on-aws)

## Contributing

For those who&#039;d like to contribute code, see our [Contribution Guide](https://github.com/langgenius/dify/blob/main/CONTRIBUTING.md).
At the same time, please consider supporting Dify by sharing it on social media and at events and conferences.

&gt; We are looking for contributors to help with translating Dify to languages other than Mandarin or English. If you are interested in helping, please see the [i18n README](https://github.com/langgenius/dify/blob/main/web/i18n/README.md) for more information, and leave us a comment in the `global-users` channel of our [Discord Community Server](https://discord.gg/8Tpq4AcN9c).

## Community &amp; contact

- [Github Discussion](https://github.com/langgenius/dify/discussions). Best for: sharing feedback and asking questions.
- [GitHub Issues](https://github.com/langgenius/dify/issues). Best for: bugs you encounter using Dify.AI, and feature proposals. See our [Contribution Guide](https://github.com/langgenius/dify/blob/main/CONTRIBUTING.md).
- [Discord](https://discord.gg/FngNHpbcY7). Best for: sharing your applications and hanging out with the community.
- [X(Twitter)](https://twitter.com/dify_ai). Best for: sharing your applications and hanging out with the community.

**Contributors**

&lt;a href=&quot;https://github.com/langgenius/dify/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=langgenius/dify&quot; /&gt;
&lt;/a&gt;

## Star history

[![Star History Chart](https://api.star-history.com/svg?repos=langgenius/dify&amp;type=Date)](https://star-history.com/#langgenius/dify&amp;Date)

## Security disclosure

To protect your privacy, please avoid posting security issues on GitHub. Instead, send your questions to security@dify.ai and we will provide you with a more detailed answer.

## License

This repository is available under the [Dify Open Source License](LICENSE), which is essentially Apache 2.0 with a few additional restrictions.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[n8n-io/n8n]]></title>
            <link>https://github.com/n8n-io/n8n</link>
            <guid>https://github.com/n8n-io/n8n</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:05 GMT</pubDate>
            <description><![CDATA[Fair-code workflow automation platform with native AI capabilities. Combine visual building with custom code, self-host or cloud, 400+ integrations.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/n8n-io/n8n">n8n-io/n8n</a></h1>
            <p>Fair-code workflow automation platform with native AI capabilities. Combine visual building with custom code, self-host or cloud, 400+ integrations.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 71,092</p>
            <p>Forks: 18,600</p>
            <p>Stars today: 430 stars today</p>
            <h2>README</h2><pre>![Banner image](https://user-images.githubusercontent.com/10284570/173569848-c624317f-42b1-45a6-ab09-f0ea3c247648.png)

# n8n - Secure Workflow Automation for Technical Teams

n8n is a workflow automation platform that gives technical teams the flexibility of code with the speed of no-code. With 400+ integrations, native AI capabilities, and a fair-code license, n8n lets you build powerful automations while maintaining full control over your data and deployments.

![n8n.io - Screenshot](https://raw.githubusercontent.com/n8n-io/n8n/master/assets/n8n-screenshot-readme.png)

## Key Capabilities

- **Code When You Need It**: Write JavaScript/Python, add npm packages, or use the visual interface
- **AI-Native Platform**: Build AI agent workflows based on LangChain with your own data and models
- **Full Control**: Self-host with our fair-code license or use our [cloud offering](https://app.n8n.cloud/login)
- **Enterprise-Ready**: Advanced permissions, SSO, and air-gapped deployments
- **Active Community**: 400+ integrations and 900+ ready-to-use [templates](https://n8n.io/workflows)

## Quick Start

Try n8n instantly with [npx](https://docs.n8n.io/hosting/installation/npm/) (requires [Node.js](https://nodejs.org/en/)):

```
npx n8n
```

Or deploy with [Docker](https://docs.n8n.io/hosting/installation/docker/):

```
docker volume create n8n_data
docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n
```

Access the editor at http://localhost:5678

## Resources

- 📚 [Documentation](https://docs.n8n.io)
- 🔧 [400+ Integrations](https://n8n.io/integrations)
- 💡 [Example Workflows](https://n8n.io/workflows)
- 🤖 [AI &amp; LangChain Guide](https://docs.n8n.io/langchain/)
- 👥 [Community Forum](https://community.n8n.io)
- 📖 [Community Tutorials](https://community.n8n.io/c/tutorials/28)

## Support

Need help? Our community forum is the place to get support and connect with other users:
[community.n8n.io](https://community.n8n.io)

## License

n8n is [fair-code](https://faircode.io) distributed under the [Sustainable Use License](https://github.com/n8n-io/n8n/blob/master/LICENSE.md) and [n8n Enterprise License](https://github.com/n8n-io/n8n/blob/master/LICENSE_EE.md).

- **Source Available**: Always visible source code
- **Self-Hostable**: Deploy anywhere
- **Extensible**: Add your own nodes and functionality

[Enterprise licenses](mailto:license@n8n.io) available for additional features and support.

Additional information about the license model can be found in the [docs](https://docs.n8n.io/reference/license/).

## Contributing

Found a bug 🐛 or have a feature idea ✨? Check our [Contributing Guide](https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md) to get started.

## Join the Team

Want to shape the future of automation? Check out our [job posts](https://n8n.io/careers) and join our team!

## What does n8n mean?

**Short answer:** It means &quot;nodemation&quot; and is pronounced as n-eight-n.

**Long answer:** &quot;I get that question quite often (more often than I expected) so I decided it is probably best to answer it here. While looking for a good name for the project with a free domain I realized very quickly that all the good ones I could think of were already taken. So, in the end, I chose nodemation. &#039;node-&#039; in the sense that it uses a Node-View and that it uses Node.js and &#039;-mation&#039; for &#039;automation&#039; which is what the project is supposed to help with. However, I did not like how long the name was and I could not imagine writing something that long every time in the CLI. That is when I then ended up on &#039;n8n&#039;.&quot; - **Jan Oberhauser, Founder and CEO, n8n.io**
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[executeautomation/mcp-playwright]]></title>
            <link>https://github.com/executeautomation/mcp-playwright</link>
            <guid>https://github.com/executeautomation/mcp-playwright</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:04 GMT</pubDate>
            <description><![CDATA[Playwright Model Context Protocol Server - Tool to automate Browsers and APIs in Claude Desktop, Cline, Cursor IDE and More 🔌]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/executeautomation/mcp-playwright">executeautomation/mcp-playwright</a></h1>
            <p>Playwright Model Context Protocol Server - Tool to automate Browsers and APIs in Claude Desktop, Cline, Cursor IDE and More 🔌</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,658</p>
            <p>Forks: 137</p>
            <p>Stars today: 69 stars today</p>
            <h2>README</h2><pre># Playwright MCP Server 🎭

[![smithery badge](https://smithery.ai/badge/@executeautomation/playwright-mcp-server)](https://smithery.ai/server/@executeautomation/playwright-mcp-server)

A Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.

&lt;a href=&quot;https://glama.ai/mcp/servers/yh4lgtwgbe&quot;&gt;&lt;img width=&quot;380&quot; height=&quot;200&quot; src=&quot;https://glama.ai/mcp/servers/yh4lgtwgbe/badge&quot; alt=&quot;mcp-playwright MCP server&quot; /&gt;&lt;/a&gt;

## Screenshot
![Playwright + Claude](image/playwright_claude.png)

## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)

## Installation

You can install the package using either npm, mcp-get, or Smithery:

Using npm:
```bash
npm install -g @executeautomation/playwright-mcp-server
```

Using mcp-get:
```bash
npx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server
```
Using Smithery

To install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):

```bash
npx -y @smithery/cli install @executeautomation/playwright-mcp-server --client claude
```
## Configuration to use Playwright Server
Here&#039;s the Claude Desktop configuration to use the Playwright server:

```json
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [&quot;-y&quot;, &quot;@executeautomation/playwright-mcp-server&quot;]
    }
  }
}
```

## Testing

This project uses Jest for testing. The tests are located in the `src/__tests__` directory.

### Running Tests

You can run the tests using one of the following commands:

```bash
# Run tests using the custom script (with coverage)
node run-tests.cjs

# Run tests using npm scripts
npm test           # Run tests without coverage
npm run test:coverage  # Run tests with coverage
npm run test:custom    # Run tests with custom script (same as node run-tests.cjs)
```

The test coverage report will be generated in the `coverage` directory.

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=executeautomation/mcp-playwright&amp;type=Date)](https://star-history.com/#executeautomation/mcp-playwright&amp;Date)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[kern/filepizza]]></title>
            <link>https://github.com/kern/filepizza</link>
            <guid>https://github.com/kern/filepizza</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:03 GMT</pubDate>
            <description><![CDATA[🍕 Peer-to-peer file transfers in your browser]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/kern/filepizza">kern/filepizza</a></h1>
            <p>🍕 Peer-to-peer file transfers in your browser</p>
            <p>Language: TypeScript</p>
            <p>Stars: 7,350</p>
            <p>Forks: 456</p>
            <p>Stars today: 144 stars today</p>
            <h2>README</h2><pre>&lt;a href=&quot;https://xkcd.com/949/&quot;&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/file_transfer.png&quot; alt=&quot;XKCD 949&quot; width=&quot;30%&quot; align=&quot;right&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;public/images/wordmark.png&quot; alt=&quot;FilePizza wordmark&quot; width=&quot;50%&quot; /&gt; &lt;h3&gt;Peer-to-peer file transfers in your browser&lt;/h3&gt;

*Cooked up by [Alex Kern](https://kern.io) &amp; [Neeraj Baid](https://github.com/neerajbaid) while eating Sliver @ UC Berkeley.*

Using [WebRTC](http://www.webrtc.org), FilePizza eliminates the initial upload step required by other web-based file sharing services. Because data is never stored in an intermediary server, the transfer is fast, private, and secure.

A hosted instance of FilePizza is available at [file.pizza](https://file.pizza).

## What&#039;s new with FilePizza v2

* A new UI with dark mode support, now built on modern browser technologies.
* Works on most mobile browsers, including Mobile Safari.
* Transfers are now directly from the uploader to the downloader&#039;s browser (WebRTC without WebTorrent) with faster handshakes.
* Uploaders can monitor the progress of the transfer and stop it if they want.
* Better security and safety measures with password protection and reporting.
* Support for uploading multiple files at once, which downloaders receive as a zip file.
* Streaming downloads with a Service Worker.
* Out-of-process storage of server state using Redis.

## Development

```
$ git clone https://github.com/kern/filepizza.git
$ pnpm install
$ pnpm dev
$ pnpm build
$ pnpm start
```

## Running with Docker

```
$ pnpm docker:build
$ pnpm docker:up
$ pnpm docker:down
```

## Stack

* Next.js
* Tailwind
* TypeScript
* React
* PeerJS for WebRTC
* View Transitions
* Redis (optional)

## FAQ

**How are my files sent?** Your files are sent directly from your browser to the downloader&#039;s browser. They never pass through our servers. FilePizza uses WebRTC to send files. This requires that the uploader leave their browser window open until the transfer is complete.

**Can multiple people download my file at once?** Yes! Just send them your short or long URL.

**How big can my files be?** As big as your browser can handle.

**What happens when I close my browser?** The URLs for your files will no longer work. If a downloader has completed the transfer, that downloader will continue to seed to incomplete downloaders, but no new downloads may be initiated.

**Are my files encrypted?** Yes, all WebRTC communications are automatically encrypted using public-key cryptography because of DTLS. You can add an optional password to your upload for an extra layer of security.

## License &amp; Acknowledgements

FilePizza is released under the [BSD 3-Clause license](https://github.com/kern/filepizza/blob/main/LICENSE). A huge thanks to [iblowyourdesign](https://dribbble.com/iblowyourdesign) for the pizza illustration.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[wonderwhy-er/DesktopCommanderMCP]]></title>
            <link>https://github.com/wonderwhy-er/DesktopCommanderMCP</link>
            <guid>https://github.com/wonderwhy-er/DesktopCommanderMCP</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:02 GMT</pubDate>
            <description><![CDATA[This is MCP server for Claude that gives it terminal control, file system search and diff file editing capabilities]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/wonderwhy-er/DesktopCommanderMCP">wonderwhy-er/DesktopCommanderMCP</a></h1>
            <p>This is MCP server for Claude that gives it terminal control, file system search and diff file editing capabilities</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,083</p>
            <p>Forks: 112</p>
            <p>Stars today: 67 stars today</p>
            <h2>README</h2><pre># Desktop Commander MCP


[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)
[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)
[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)

[![Discord](https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&amp;logo=discord&amp;logoColor=white)](https://discord.gg/kQ27sNnZr7)

Short version. Two key things. Terminal commands and diff based file editing.

![Desktop Commander MCP](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/logo.png)

&lt;a href=&quot;https://glama.ai/mcp/servers/zempur9oh4&quot;&gt;
  &lt;img width=&quot;380&quot; height=&quot;200&quot; src=&quot;https://glama.ai/mcp/servers/zempur9oh4/badge&quot; alt=&quot;Claude Desktop Commander MCP server&quot; /&gt;
&lt;/a&gt;

## Table of Contents
- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Handling Long-Running Commands](#handling-long-running-commands)
- [Work in Progress and TODOs](#work-in-progress-and-todos)
- [Media links](#media)
- [Testimonials](#testimonials)
- [Contributing](#contributing)
- [License](#license)

This is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities .

## Features

- Execute terminal commands with output streaming
- Command timeout and background execution support
- Process management (list and kill processes)
- Session management for long-running commands
- Full filesystem operations:
  - Read/write files
  - Create/list directories
  - Move files/directories
  - Search files
  - Get file metadata
  - Code editing capabilities:
  - Surgical text replacements for small changes
  - Full file rewrites for major changes
  - Multiple file support
  - Pattern-based replacements
  - vscode-ripgrep based recursive code or text search in folders

## Installation
First, ensure you&#039;ve downloaded and installed the [Claude Desktop app](https://claude.ai/download) and you have [npm installed](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).

### Option 1: Installing via Smithery

To install Desktop Commander for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):

```bash
npx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude
```

### Option 2: Install trough npx
Just run this in terminal
```
npx @wonderwhy-er/desktop-commander setup
```
Restart Claude if running

### Option 3: Add to claude_desktop_config by hand
Add this entry to your claude_desktop_config.json (on Mac, found at ~/Library/Application\ Support/Claude/claude_desktop_config.json):
```json
{
  &quot;mcpServers&quot;: {
    &quot;desktop-commander&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;-y&quot;,
        &quot;@wonderwhy-er/desktop-commander&quot;
      ]
    }
  }
}
```
Restart Claude if running

### Option 4: Checkout locally
1. Clone and build:
```bash
git clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git
cd ClaudeComputerCommander
npm run setup
```
Restart Claude if running

The setup command will:
- Install dependencies
- Build the server
- Configure Claude&#039;s desktop app
- Add MCP servers to Claude&#039;s config if needed

## Usage

The server provides these tool categories:

### Terminal Tools
- `execute_command`: Run commands with configurable timeout
- `read_output`: Get output from long-running commands
- `force_terminate`: Stop running command sessions
- `list_sessions`: View active command sessions
- `list_processes`: View system processes
- `kill_process`: Terminate processes by PID
- `block_command`/`unblock_command`: Manage command blacklist

### Filesystem Tools
- `read_file`/`write_file`: File operations
- `create_directory`/`list_directory`: Directory management  
- `move_file`: Move/rename files
- `search_files`: Pattern-based file search
- `get_file_info`: File metadata
- `code_search`: Recursive ripgrep based text and code search

### Edit Tools
- `edit_block`: Apply surgical text replacements (best for changes &lt;20% of file size)
- `write_file`: Complete file rewrites (best for large changes &gt;20% or when edit_block fails)

Search/Replace Block Format:
```
filepath.ext
&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH
existing code to replace
=======
new code to insert
&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE
```

Example:
```
src/main.js
&lt;&lt;&lt;&lt;&lt;&lt;&lt; SEARCH
console.log(&quot;old message&quot;);
=======
console.log(&quot;new message&quot;);
&gt;&gt;&gt;&gt;&gt;&gt;&gt; REPLACE
```

## Handling Long-Running Commands

For commands that may take a while:

1. `execute_command` returns after timeout with initial output
2. Command continues in background
3. Use `read_output` with PID to get new output
4. Use `force_terminate` to stop if needed

## Model Context Protocol Integration

This project extends the MCP Filesystem Server to enable:
- Local server support in Claude Desktop
- Full system command execution
- Process management
- File operations
- Code editing with search/replace blocks

Created as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us

## DONE
- **25-03-2025 Better code search** ([merged](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/17)) - Enhanced code exploration with context-aware results

## Work in Progress and TODOs

The following features are currently being developed or planned:

- **Better configurations** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/16)) - Improved settings for allowed paths, commands and shell environment
- **Windows environment fixes** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/13)) - Resolving issues specific to Windows platforms
- **Linux improvements** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/12)) - Enhancing compatibility with various Linux distributions
- **Support for WSL** - Windows Subsystem for Linux integration
- **Support for SSH** - Remote server command execution
- **Installation troubleshooting guide** - Comprehensive help for setup issues

## Website

Visit our official website at [https://desktopcommander.app/](https://desktopcommander.app/) for the latest information, documentation, and updates.

## Media
Learn more about this project through these resources:

### Article
[Claude with MCPs replaced Cursor &amp; Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.

### Video
[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.

### Community
Join our [Discord server](https://discord.gg/7cbccwRp) to get help, share feedback, and connect with other users.

## Testimonials

[![It&#039;s a life saver! I paid Claude + Cursor currently which I always feel it&#039;s kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It&#039;s so good when Cursor doesn&#039;t work sometimes or all the fast requests are used.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png) https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=UgyyBt6_ShdDX_rIOad4AaABAg
](https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=UgyyBt6_ShdDX_rIOad4AaABAg
)

[![This is the first comment I&#039;ve ever left on a youtube video, THANK YOU! I&#039;ve been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn&#039;t get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png)
https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=UgztdHvDMqTb9jiqnf54AaABAg
)

[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes loosing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.
Also this is much more than code editing it is much more thank you for great video!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png)
https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=UgyQFTmYLJ4VBwIlmql4AaABAg)

[![it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png)
https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&amp;lc=Ugy4-exy166_Ma7TH-h4AaABAg)

[![You sir are my hero. You&#039;ve pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven&#039;t looked back since.
Claude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I&#039;m not lol.
33
1](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png)
https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)

## Contributing

If you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.

We welcome contributions from the community! Whether you&#039;ve found a bug, have a feature request, or want to contribute code, here&#039;s how you can help:

- **Found a bug?** Open an issue at [github.com/wonderwhy-er/ClaudeComputerCommander/issues](https://github.com/wonderwhy-er/ClaudeComputerCommander/issues)
- **Have a feature idea?** Submit a feature request in the issues section
- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request
- **Questions or discussions?** Start a discussion in the GitHub Discussions tab

All contributions, big or small, are greatly appreciated!

If you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).

## License

MIT
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[haydenbleasel/next-forge]]></title>
            <link>https://github.com/haydenbleasel/next-forge</link>
            <guid>https://github.com/haydenbleasel/next-forge</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:01 GMT</pubDate>
            <description><![CDATA[Production-grade Turborepo template for Next.js apps.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/haydenbleasel/next-forge">haydenbleasel/next-forge</a></h1>
            <p>Production-grade Turborepo template for Next.js apps.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 5,629</p>
            <p>Forks: 455</p>
            <p>Stars today: 8 stars today</p>
            <h2>README</h2><pre># next-forge

**Production-grade Turborepo template for Next.js apps.**

&lt;div&gt;
  &lt;img src=&quot;https://img.shields.io/npm/dy/next-forge&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;https://img.shields.io/npm/v/next-forge&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;https://img.shields.io/github/license/haydenbleasel/next-forge&quot; alt=&quot;&quot; /&gt;
&lt;/div&gt;

[next-forge](https://github.com/haydenbleasel/next-forge) is a [Next.js](https://nextjs.org/) project boilerplate for modern web application. It is designed to be a comprehensive starting point for new apps, providing a solid, opinionated foundation with a minimal amount of configuration.

Clone the repo using:

```sh
npx next-forge@latest init
```

Then read the [docs](https://docs.next-forge.com) for more information.

&lt;a href=&quot;https://github.com/haydenbleasel/next-forge/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=haydenbleasel/next-forge&quot; /&gt;
&lt;/a&gt;

Made with [contrib.rocks](https://contrib.rocks).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[Nutlope/logocreator]]></title>
            <link>https://github.com/Nutlope/logocreator</link>
            <guid>https://github.com/Nutlope/logocreator</guid>
            <pubDate>Thu, 27 Mar 2025 00:05:00 GMT</pubDate>
            <description><![CDATA[A free + OSS logo generator powered by Flux on Together AI]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Nutlope/logocreator">Nutlope/logocreator</a></h1>
            <p>A free + OSS logo generator powered by Flux on Together AI</p>
            <p>Language: TypeScript</p>
            <p>Stars: 5,116</p>
            <p>Forks: 441</p>
            <p>Stars today: 60 stars today</p>
            <h2>README</h2><pre>&lt;a href=&quot;https://www.logo-creator.io&quot;&gt;
  &lt;img alt=&quot;AI Logo Generator&quot; src=&quot;./public/og-image.png&quot;&gt;
  &lt;h1 align=&quot;center&quot;&gt;AI Logo Generator&lt;/h1&gt;
&lt;/a&gt;

&lt;p align=&quot;center&quot;&gt;
  An open source logo generator – create professional logos in seconds with customizable styles.
&lt;/p&gt;

## Tech stack

- [Flux Pro 1.1](https://togetherai.link/flux-playground) on [Together AI](https://togetherai.link/) for logo generation
- [Next.js](https://nextjs.org/) with TypeScript for the app framework
- [Shadcn](https://ui.shadcn.com/) for UI components &amp; [Tailwind](https://tailwindcss.com/) for styling
- [Upstash Redis](https://upstash.com/) for rate limiting
- [Clerk](https://clerk.com/) for authentication
- [Plausible](https://plausible.io/) &amp; [Helicone](https://helicone.ai/) for analytics &amp; observability

## Cloning &amp; running

1. Clone the repo: `git clone https://github.com/Nutlope/logocreator`
2. Create a `.env` file and add your [Together AI API key](https://api.together.xyz/settings/api-keys): `TOGETHER_API_KEY=`
3. Run `npm install` and `npm run dev` to install dependencies and run locally.

## Future Tasks

- [ ] Create a dashboard with a user&#039;s logo history
- [ ] Support SVG exports instead of just PNG
- [ ] Add support for additional styles
- [ ] Add a dropdown for image size (can do up to 1440x1440)
- [ ] Show approximate price when using your own Together AI key
- [ ] Allow the ability to upload a reference logo (use vision model to read it)
- [ ] Redesign popular brand’s logos with my logo maker and have it in a showcase
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[mendableai/firecrawl]]></title>
            <link>https://github.com/mendableai/firecrawl</link>
            <guid>https://github.com/mendableai/firecrawl</guid>
            <pubDate>Thu, 27 Mar 2025 00:04:59 GMT</pubDate>
            <description><![CDATA[🔥 Turn entire websites into LLM-ready markdown or structured data. Scrape, crawl and extract with a single API.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/mendableai/firecrawl">mendableai/firecrawl</a></h1>
            <p>🔥 Turn entire websites into LLM-ready markdown or structured data. Scrape, crawl and extract with a single API.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 32,922</p>
            <p>Forks: 2,841</p>
            <p>Stars today: 177 stars today</p>
            <h2>README</h2><pre>&lt;h3 align=&quot;center&quot;&gt;
  &lt;a name=&quot;readme-top&quot;&gt;&lt;/a&gt;
  &lt;img
    src=&quot;https://raw.githubusercontent.com/mendableai/firecrawl/main/img/firecrawl_logo.png&quot;
    height=&quot;200&quot;
  &gt;
&lt;/h3&gt;
&lt;div align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/mendableai/firecrawl/blob/main/LICENSE&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/license/mendableai/firecrawl&quot; alt=&quot;License&quot;&gt;
&lt;/a&gt;
    &lt;a href=&quot;https://pepy.tech/project/firecrawl-py&quot;&gt;
  &lt;img src=&quot;https://static.pepy.tech/badge/firecrawl-py&quot; alt=&quot;Downloads&quot;&gt;
&lt;/a&gt;
&lt;a href=&quot;https://GitHub.com/mendableai/firecrawl/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/contributors/mendableai/firecrawl.svg&quot; alt=&quot;GitHub Contributors&quot;&gt;
&lt;/a&gt;
&lt;a href=&quot;https://firecrawl.dev&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/badge/Visit-firecrawl.dev-orange&quot; alt=&quot;Visit firecrawl.dev&quot;&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://twitter.com/firecrawl_dev&quot;&gt;
      &lt;img src=&quot;https://img.shields.io/badge/Follow%20on%20X-000000?style=for-the-badge&amp;logo=x&amp;logoColor=white&quot; alt=&quot;Follow on X&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://www.linkedin.com/company/104100957&quot;&gt;
      &lt;img src=&quot;https://img.shields.io/badge/Follow%20on%20LinkedIn-0077B5?style=for-the-badge&amp;logo=linkedin&amp;logoColor=white&quot; alt=&quot;Follow on LinkedIn&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://discord.com/invite/gSmWdAkdwd&quot;&gt;
      &lt;img src=&quot;https://img.shields.io/badge/Join%20our%20Discord-5865F2?style=for-the-badge&amp;logo=discord&amp;logoColor=white&quot; alt=&quot;Join our Discord&quot; /&gt;
    &lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

# 🔥 Firecrawl

Empower your AI apps with clean data from any website. Featuring advanced scraping, crawling, and data extraction capabilities.

_This repository is in development, and we’re still integrating custom modules into the mono repo. It&#039;s not fully ready for self-hosted deployment yet, but you can run it locally._

## What is Firecrawl?

[Firecrawl](https://firecrawl.dev?ref=github) is an API service that takes a URL, crawls it, and converts it into clean markdown or structured data. We crawl all accessible subpages and give you clean data for each. No sitemap required. Check out our [documentation](https://docs.firecrawl.dev).

_Pst. hey, you, join our stargazers :)_

&lt;a href=&quot;https://github.com/mendableai/firecrawl&quot;&gt;
  &lt;img src=&quot;https://img.shields.io/github/stars/mendableai/firecrawl.svg?style=social&amp;label=Star&amp;maxAge=2592000&quot; alt=&quot;GitHub stars&quot;&gt;
&lt;/a&gt;

## How to use it?

We provide an easy to use API with our hosted version. You can find the playground and documentation [here](https://firecrawl.dev/playground). You can also self host the backend if you&#039;d like.

Check out the following resources to get started:
- [x] **API**: [Documentation](https://docs.firecrawl.dev/api-reference/introduction)
- [x] **SDKs**: [Python](https://docs.firecrawl.dev/sdks/python), [Node](https://docs.firecrawl.dev/sdks/node), [Go](https://docs.firecrawl.dev/sdks/go), [Rust](https://docs.firecrawl.dev/sdks/rust)
- [x] **LLM Frameworks**: [Langchain (python)](https://python.langchain.com/docs/integrations/document_loaders/firecrawl/), [Langchain (js)](https://js.langchain.com/docs/integrations/document_loaders/web_loaders/firecrawl), [Llama Index](https://docs.llamaindex.ai/en/latest/examples/data_connectors/WebPageDemo/#using-firecrawl-reader), [Crew.ai](https://docs.crewai.com/), [Composio](https://composio.dev/tools/firecrawl/all), [PraisonAI](https://docs.praison.ai/firecrawl/), [Superinterface](https://superinterface.ai/docs/assistants/functions/firecrawl), [Vectorize](https://docs.vectorize.io/integrations/source-connectors/firecrawl)
- [x] **Low-code Frameworks**: [Dify](https://dify.ai/blog/dify-ai-blog-integrated-with-firecrawl), [Langflow](https://docs.langflow.org/), [Flowise AI](https://docs.flowiseai.com/integrations/langchain/document-loaders/firecrawl), [Cargo](https://docs.getcargo.io/integration/firecrawl), [Pipedream](https://pipedream.com/apps/firecrawl/)
- [x] **Others**: [Zapier](https://zapier.com/apps/firecrawl/integrations), [Pabbly Connect](https://www.pabbly.com/connect/integrations/firecrawl/)
- [ ] Want an SDK or Integration? Let us know by opening an issue.

To run locally, refer to guide [here](https://github.com/mendableai/firecrawl/blob/main/CONTRIBUTING.md).

### API Key

To use the API, you need to sign up on [Firecrawl](https://firecrawl.dev) and get an API key.

### Features

- [**Scrape**](#scraping): scrapes a URL and get its content in LLM-ready format (markdown, structured data via [LLM Extract](#llm-extraction-beta), screenshot, html)
- [**Crawl**](#crawling): scrapes all the URLs of a web page and return content in LLM-ready format
- [**Map**](#map-alpha): input a website and get all the website urls - extremely fast
- [**Extract**](#extract): get structured data from single page, multiple pages or entire websites with AI.

### Powerful Capabilities
- **LLM-ready formats**: markdown, structured data, screenshot, HTML, links, metadata
- **The hard stuff**: proxies, anti-bot mechanisms, dynamic content (js-rendered), output parsing, orchestration
- **Customizability**: exclude tags, crawl behind auth walls with custom headers, max crawl depth, etc...
- **Media parsing**: pdfs, docx, images
- **Reliability first**: designed to get the data you need - no matter how hard it is
- **Actions**: click, scroll, input, wait and more before extracting data
- **Batching (New)**: scrape thousands of URLs at the same time with a new async endpoint.

You can find all of Firecrawl&#039;s capabilities and how to use them in our [documentation](https://docs.firecrawl.dev)

### Crawling

Used to crawl a URL and all accessible subpages. This submits a crawl job and returns a job ID to check the status of the crawl.

```bash
curl -X POST https://api.firecrawl.dev/v1/crawl \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer fc-YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;url&quot;: &quot;https://docs.firecrawl.dev&quot;,
      &quot;limit&quot;: 10,
      &quot;scrapeOptions&quot;: {
        &quot;formats&quot;: [&quot;markdown&quot;, &quot;html&quot;]
      }
    }&#039;
```

Returns a crawl job id and the url to check the status of the crawl.

```json
{
  &quot;success&quot;: true,
  &quot;id&quot;: &quot;123-456-789&quot;,
  &quot;url&quot;: &quot;https://api.firecrawl.dev/v1/crawl/123-456-789&quot;
}
```

### Check Crawl Job

Used to check the status of a crawl job and get its result.

```bash
curl -X GET https://api.firecrawl.dev/v1/crawl/123-456-789 \
  -H &#039;Content-Type: application/json&#039; \
  -H &#039;Authorization: Bearer YOUR_API_KEY&#039;
```

```json
{
  &quot;status&quot;: &quot;completed&quot;,
  &quot;total&quot;: 36,
  &quot;creditsUsed&quot;: 36,
  &quot;expiresAt&quot;: &quot;2024-00-00T00:00:00.000Z&quot;,
  &quot;data&quot;: [
    {
      &quot;markdown&quot;: &quot;[Firecrawl Docs home page![light logo](https://mintlify.s3-us-west-1.amazonaws.com/firecrawl/logo/light.svg)!...&quot;,
      &quot;html&quot;: &quot;&lt;!DOCTYPE html&gt;&lt;html lang=\&quot;en\&quot; class=\&quot;js-focus-visible lg:[--scroll-mt:9.5rem]\&quot; data-js-focus-visible=\&quot;\&quot;&gt;...&quot;,
      &quot;metadata&quot;: {
        &quot;title&quot;: &quot;Build a &#039;Chat with website&#039; using Groq Llama 3 | Firecrawl&quot;,
        &quot;language&quot;: &quot;en&quot;,
        &quot;sourceURL&quot;: &quot;https://docs.firecrawl.dev/learn/rag-llama3&quot;,
        &quot;description&quot;: &quot;Learn how to use Firecrawl, Groq Llama 3, and Langchain to build a &#039;Chat with your website&#039; bot.&quot;,
        &quot;ogLocaleAlternate&quot;: [],
        &quot;statusCode&quot;: 200
      }
    }
  ]
}
```

### Scraping

Used to scrape a URL and get its content in the specified formats.

```bash
curl -X POST https://api.firecrawl.dev/v1/scrape \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;url&quot;: &quot;https://docs.firecrawl.dev&quot;,
      &quot;formats&quot; : [&quot;markdown&quot;, &quot;html&quot;]
    }&#039;
```

Response:

```json
{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;markdown&quot;: &quot;Launch Week I is here! [See our Day 2 Release 🚀](https://www.firecrawl.dev/blog/launch-week-i-day-2-doubled-rate-limits)[💥 Get 2 months free...&quot;,
    &quot;html&quot;: &quot;&lt;!DOCTYPE html&gt;&lt;html lang=\&quot;en\&quot; class=\&quot;light\&quot; style=\&quot;color-scheme: light;\&quot;&gt;&lt;body class=\&quot;__variable_36bd41 __variable_d7dc5d font-inter ...&quot;,
    &quot;metadata&quot;: {
      &quot;title&quot;: &quot;Home - Firecrawl&quot;,
      &quot;description&quot;: &quot;Firecrawl crawls and converts any website into clean markdown.&quot;,
      &quot;language&quot;: &quot;en&quot;,
      &quot;keywords&quot;: &quot;Firecrawl,Markdown,Data,Mendable,Langchain&quot;,
      &quot;robots&quot;: &quot;follow, index&quot;,
      &quot;ogTitle&quot;: &quot;Firecrawl&quot;,
      &quot;ogDescription&quot;: &quot;Turn any website into LLM-ready data.&quot;,
      &quot;ogUrl&quot;: &quot;https://www.firecrawl.dev/&quot;,
      &quot;ogImage&quot;: &quot;https://www.firecrawl.dev/og.png?123&quot;,
      &quot;ogLocaleAlternate&quot;: [],
      &quot;ogSiteName&quot;: &quot;Firecrawl&quot;,
      &quot;sourceURL&quot;: &quot;https://firecrawl.dev&quot;,
      &quot;statusCode&quot;: 200
    }
  }
}
```

### Map (Alpha)

Used to map a URL and get urls of the website. This returns most links present on the website.

```bash cURL
curl -X POST https://api.firecrawl.dev/v1/map \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;url&quot;: &quot;https://firecrawl.dev&quot;
    }&#039;
```

Response:

```json
{
  &quot;status&quot;: &quot;success&quot;,
  &quot;links&quot;: [
    &quot;https://firecrawl.dev&quot;,
    &quot;https://www.firecrawl.dev/pricing&quot;,
    &quot;https://www.firecrawl.dev/blog&quot;,
    &quot;https://www.firecrawl.dev/playground&quot;,
    &quot;https://www.firecrawl.dev/smart-crawl&quot;,
  ]
}
```

#### Map with search

Map with `search` param allows you to search for specific urls inside a website.

```bash cURL
curl -X POST https://api.firecrawl.dev/v1/map \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;url&quot;: &quot;https://firecrawl.dev&quot;,
      &quot;search&quot;: &quot;docs&quot;
    }&#039;
```

Response will be an ordered list from the most relevant to the least relevant.

```json
{
  &quot;status&quot;: &quot;success&quot;,
  &quot;links&quot;: [
    &quot;https://docs.firecrawl.dev&quot;,
    &quot;https://docs.firecrawl.dev/sdks/python&quot;,
    &quot;https://docs.firecrawl.dev/learn/rag-llama3&quot;,
  ]
}
```

### Extract

Get structured data from entire websites with a prompt and/or a schema.

You can extract structured data from one or multiple URLs, including wildcards:

Single Page:
Example: https://firecrawl.dev/some-page

Multiple Pages / Full Domain
Example: https://firecrawl.dev/*

When you use /*, Firecrawl will automatically crawl and parse all URLs it can discover in that domain, then extract the requested data.

```bash
curl -X POST https://api.firecrawl.dev/v1/extract \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;urls&quot;: [
        &quot;https://firecrawl.dev/*&quot;, 
        &quot;https://docs.firecrawl.dev/&quot;, 
        &quot;https://www.ycombinator.com/companies&quot;
      ],
      &quot;prompt&quot;: &quot;Extract the company mission, whether it is open source, and whether it is in Y Combinator from the page.&quot;,
      &quot;schema&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;company_mission&quot;: {
            &quot;type&quot;: &quot;string&quot;
          },
          &quot;is_open_source&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;is_in_yc&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        },
        &quot;required&quot;: [
          &quot;company_mission&quot;,
          &quot;is_open_source&quot;,
          &quot;is_in_yc&quot;
        ]
      }
    }&#039;
```

```json
{
  &quot;success&quot;: true,
  &quot;id&quot;: &quot;44aa536d-f1cb-4706-ab87-ed0386685740&quot;,
  &quot;urlTrace&quot;: []
}
```

If you are using the sdks, it will auto pull the response for you:

```json
{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;company_mission&quot;: &quot;Firecrawl is the easiest way to extract data from the web. Developers use us to reliably convert URLs into LLM-ready markdown or structured data with a single API call.&quot;,
    &quot;supports_sso&quot;: false,
    &quot;is_open_source&quot;: true,
    &quot;is_in_yc&quot;: true
  }
}
```

### LLM Extraction (Beta)

Used to extract structured data from scraped pages.

```bash
curl -X POST https://api.firecrawl.dev/v1/scrape \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;url&quot;: &quot;https://www.mendable.ai/&quot;,
      &quot;formats&quot;: [&quot;json&quot;],
      &quot;jsonOptions&quot;: {
        &quot;schema&quot;: {
          &quot;type&quot;: &quot;object&quot;,
          &quot;properties&quot;: {
            &quot;company_mission&quot;: {
                      &quot;type&quot;: &quot;string&quot;
            },
            &quot;supports_sso&quot;: {
                      &quot;type&quot;: &quot;boolean&quot;
            },
            &quot;is_open_source&quot;: {
                      &quot;type&quot;: &quot;boolean&quot;
            },
            &quot;is_in_yc&quot;: {
                      &quot;type&quot;: &quot;boolean&quot;
            }
          },
          &quot;required&quot;: [
            &quot;company_mission&quot;,
            &quot;supports_sso&quot;,
            &quot;is_open_source&quot;,
            &quot;is_in_yc&quot;
          ]
        }
      }
    }&#039;
```

```json
{
  &quot;success&quot;: true,
  &quot;data&quot;: {
    &quot;content&quot;: &quot;Raw Content&quot;,
    &quot;metadata&quot;: {
      &quot;title&quot;: &quot;Mendable&quot;,
      &quot;description&quot;: &quot;Mendable allows you to easily build AI chat applications. Ingest, customize, then deploy with one line of code anywhere you want. Brought to you by SideGuide&quot;,
      &quot;robots&quot;: &quot;follow, index&quot;,
      &quot;ogTitle&quot;: &quot;Mendable&quot;,
      &quot;ogDescription&quot;: &quot;Mendable allows you to easily build AI chat applications. Ingest, customize, then deploy with one line of code anywhere you want. Brought to you by SideGuide&quot;,
      &quot;ogUrl&quot;: &quot;https://mendable.ai/&quot;,
      &quot;ogImage&quot;: &quot;https://mendable.ai/mendable_new_og1.png&quot;,
      &quot;ogLocaleAlternate&quot;: [],
      &quot;ogSiteName&quot;: &quot;Mendable&quot;,
      &quot;sourceURL&quot;: &quot;https://mendable.ai/&quot;
    },
    &quot;json&quot;: {
      &quot;company_mission&quot;: &quot;Train a secure AI on your technical resources that answers customer and employee questions so your team doesn&#039;t have to&quot;,
      &quot;supports_sso&quot;: true,
      &quot;is_open_source&quot;: false,
      &quot;is_in_yc&quot;: true
    }
  }
}
```

### Extracting without a schema (New)

You can now extract without a schema by just passing a `prompt` to the endpoint. The llm chooses the structure of the data.

```bash
curl -X POST https://api.firecrawl.dev/v1/scrape \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;url&quot;: &quot;https://docs.firecrawl.dev/&quot;,
      &quot;formats&quot;: [&quot;json&quot;],
      &quot;jsonOptions&quot;: {
        &quot;prompt&quot;: &quot;Extract the company mission from the page.&quot;
      }
    }&#039;
```

### Interacting with the page with Actions (Cloud-only)

Firecrawl allows you to perform various actions on a web page before scraping its content. This is particularly useful for interacting with dynamic content, navigating through pages, or accessing content that requires user interaction.

Here is an example of how to use actions to navigate to google.com, search for Firecrawl, click on the first result, and take a screenshot.

```bash
curl -X POST https://api.firecrawl.dev/v1/scrape \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
        &quot;url&quot;: &quot;google.com&quot;,
        &quot;formats&quot;: [&quot;markdown&quot;],
        &quot;actions&quot;: [
            {&quot;type&quot;: &quot;wait&quot;, &quot;milliseconds&quot;: 2000},
            {&quot;type&quot;: &quot;click&quot;, &quot;selector&quot;: &quot;textarea[title=\&quot;Search\&quot;]&quot;},
            {&quot;type&quot;: &quot;wait&quot;, &quot;milliseconds&quot;: 2000},
            {&quot;type&quot;: &quot;write&quot;, &quot;text&quot;: &quot;firecrawl&quot;},
            {&quot;type&quot;: &quot;wait&quot;, &quot;milliseconds&quot;: 2000},
            {&quot;type&quot;: &quot;press&quot;, &quot;key&quot;: &quot;ENTER&quot;},
            {&quot;type&quot;: &quot;wait&quot;, &quot;milliseconds&quot;: 3000},
            {&quot;type&quot;: &quot;click&quot;, &quot;selector&quot;: &quot;h3&quot;},
            {&quot;type&quot;: &quot;wait&quot;, &quot;milliseconds&quot;: 3000},
            {&quot;type&quot;: &quot;screenshot&quot;}
        ]
    }&#039;
```

### Batch Scraping Multiple URLs (New)

You can now batch scrape multiple URLs at the same time. It is very similar to how the /crawl endpoint works. It submits a batch scrape job and returns a job ID to check the status of the batch scrape.

```bash
curl -X POST https://api.firecrawl.dev/v1/batch/scrape \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;urls&quot;: [&quot;https://docs.firecrawl.dev&quot;, &quot;https://docs.firecrawl.dev/sdks/overview&quot;],
      &quot;formats&quot; : [&quot;markdown&quot;, &quot;html&quot;]
    }&#039;
```

### Search

The search endpoint combines web search with Firecrawl’s scraping capabilities to return full page content for any query.

Include `scrapeOptions` with `formats: [&quot;markdown&quot;]` to get complete markdown content for each search result otherwise it defaults to getting SERP results (url, title, description).

```bash
curl -X POST https://api.firecrawl.dev/v1/search \
    -H &#039;Content-Type: application/json&#039; \
    -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
    -d &#039;{
      &quot;query&quot;: &quot;What is Mendable?&quot;
    }&#039;
```

```json
{
  &quot;success&quot;: true,
  &quot;data&quot;: [
    {
      &quot;url&quot;: &quot;https://mendable.ai&quot;,
      &quot;title&quot;: &quot;Mendable | AI for CX and Sales&quot;,
      &quot;description&quot;: &quot;AI for CX and Sales&quot;
    }
  ]
}
```

## Using Python SDK

### Installing Python SDK

```bash
pip install firecrawl-py
```

### Crawl a website

```python
from firecrawl.firecrawl import FirecrawlApp

app = FirecrawlApp(api_key=&quot;fc-YOUR_API_KEY&quot;)

# Scrape a website:
scrape_status = app.scrape_url(
  &#039;https://firecrawl.dev&#039;, 
  params={&#039;formats&#039;: [&#039;markdown&#039;, &#039;html&#039;]}
)
print(scrape_status)

# Crawl a website:
crawl_status = app.crawl_url(
  &#039;https://firecrawl.dev&#039;, 
  params={
    &#039;limit&#039;: 100, 
    &#039;scrapeOptions&#039;: {&#039;formats&#039;: [&#039;markdown&#039;, &#039;html&#039;]}
  },
  poll_interval=30
)
print(crawl_status)
```

### Extracting structured data from a URL

With LLM extraction, you can easily extract structured data from any URL. We support pydantic schemas to make it easier for you too. Here is how you to use it:

```python

from firecrawl.firecrawl import FirecrawlApp

app = FirecrawlApp(api_key=&quot;fc-YOUR_API_KEY&quot;)

class ArticleSchema(BaseModel):
    title: str
    points: int
    by: str
    commentsURL: str

class TopArticlesSchema(BaseModel):
    top: List[ArticleSchema] = Field(..., max_items=5, description=&quot;Top 5 stories&quot;)

data = app.scrape_url(&#039;https://news.ycombinator.com&#039;, {
    &#039;formats&#039;: [&#039;json&#039;],
    &#039;jsonOptions&#039;: {
        &#039;schema&#039;: TopArticlesSchema.model_json_schema()
    }
})
print(data[&quot;json&quot;])
```

## Using the Node SDK

### Installation

To install the Firecrawl Node SDK, you can use npm:

```bash
npm install @mendable/firecrawl-js
```

### Usage

1. Get an API key from [firecrawl.dev](https://firecrawl.dev)
2. Set the API key as an environment variable named `FIRECRAWL_API_KEY` or pass it as a parameter to the `FirecrawlApp` class.

```js
import FirecrawlApp, { CrawlParams, CrawlStatusResponse } from &#039;@mendable/firecrawl-js&#039;;

const app = new FirecrawlApp({apiKey: &quot;fc-YOUR_API_KEY&quot;});

// Scrape a website
const scrapeResponse = await app.scrapeUrl(&#039;https://firecrawl.dev&#039;, {
  formats: [&#039;markdown&#039;, &#039;html&#039;],
});

if (scrapeResponse) {
  console.log(scrapeResponse)
}

// Crawl a website
const crawlResponse = await app.crawlUrl(&#039;https://firecrawl.dev&#039;, {
  limit: 100,
  scrapeOptions: {
    formats: [&#039;markdown&#039;, &#039;html&#039;],
  }
} satisfies CrawlParams, true, 30) satisfies CrawlStatusResponse;

if (crawlResponse) {
  console.log(crawlResponse)
}
```


### Extracting structured data from a URL

With LLM extraction, you can easily extract structured data from any URL. We support zod schema to make it easier for you too. Here is how to use it:

```js
import FirecrawlApp from &quot;@mendable/firecrawl-js&quot;;
import { z } from &quot;zod&quot;;

const app = new FirecrawlApp({
  apiKey: &quot;fc-YOUR_API_KEY&quot;
});

// Define schema to extract contents into
const schema = z.object({
  top: z
    .array(
      z.object({
        title: z.string(),
        points: z.number(),
        by: z.string(),
        commentsURL: z.string(),
      })
    )
    .length(5)
    .describe(&quot;Top 5 stories on Hacker News&quot;),
});

const scrapeResult = await app.scrapeUrl(&quot;https://news.ycombinator.com&quot;, {
  jsonOptions: { extractionSchema: schema },
});

console.log(scrapeResult.data[&quot;json&quot;]);
```

## Open Source vs Cloud Offering

Firecrawl is open source available under the AGPL-3.0 license. 

To deliver the best possible product, we offer a hosted version of Firecrawl alongside our open-source offering. The cloud solution allows us to continuously innovate and maintain a high-quality, sustainable service for all users.

Firecrawl Cloud is available at [firecrawl.dev](https://firecrawl.dev) and offers a range of features that are not available in the open source version:

![Open Source vs Cloud Offering](https://raw.

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[cline/cline]]></title>
            <link>https://github.com/cline/cline</link>
            <guid>https://github.com/cline/cline</guid>
            <pubDate>Thu, 27 Mar 2025 00:04:58 GMT</pubDate>
            <description><![CDATA[Autonomous coding agent right in your IDE, capable of creating/editing files, executing commands, using the browser, and more with your permission every step of the way.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/cline/cline">cline/cline</a></h1>
            <p>Autonomous coding agent right in your IDE, capable of creating/editing files, executing commands, using the browser, and more with your permission every step of the way.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 36,814</p>
            <p>Forks: 3,802</p>
            <p>Stars today: 253 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;&lt;sub&gt;
English | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/es/README.md&quot; target=&quot;_blank&quot;&gt;Español&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/de/README.md&quot; target=&quot;_blank&quot;&gt;Deutsch&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/ja/README.md&quot; target=&quot;_blank&quot;&gt;日本語&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/zh-cn/README.md&quot; target=&quot;_blank&quot;&gt;简体中文&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/zh-tw/README.md&quot; target=&quot;_blank&quot;&gt;繁體中文&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/ko/README.md&quot; target=&quot;_blank&quot;&gt;한국어&lt;/a&gt;
&lt;/sub&gt;&lt;/div&gt;

# Cline – \#1 on OpenRouter

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://media.githubusercontent.com/media/cline/cline/main/assets/docs/demo.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Download on VS Marketplace&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://discord.gg/cline&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://www.reddit.com/r/cline/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;r/cline&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://github.com/cline/cline/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feature Requests&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://docs.cline.bot/getting-started/getting-started-new-coders&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

Meet Cline, an AI assistant that can use your **CLI** a**N**d **E**ditor.

Thanks to [Claude 3.7 Sonnet&#039;s agentic coding capabilities](https://www.anthropic.com/claude/sonnet), Cline can handle complex software development tasks step-by-step. With tools that let him create &amp; edit files, explore large projects, use the browser, and execute terminal commands (after you grant permission), he can assist you in ways that go beyond code completion or tech support. Cline can even use the Model Context Protocol (MCP) to create new tools and extend his own capabilities. While autonomous AI scripts traditionally run in sandboxed environments, this extension provides a human-in-the-loop GUI to approve every file change and terminal command, providing a safe and accessible way to explore the potential of agentic AI.

1. Enter your task and add images to convert mockups into functional apps or fix bugs with screenshots.
2. Cline starts by analyzing your file structure &amp; source code ASTs, running regex searches, and reading relevant files to get up to speed in existing projects. By carefully managing what information is added to context, Cline can provide valuable assistance even for large, complex projects without overwhelming the context window.
3. Once Cline has the information he needs, he can:
    - Create and edit files + monitor linter/compiler errors along the way, letting him proactively fix issues like missing imports and syntax errors on his own.
    - Execute commands directly in your terminal and monitor their output as he works, letting him e.g., react to dev server issues after editing a file.
    - For web development tasks, Cline can launch the site in a headless browser, click, type, scroll, and capture screenshots + console logs, allowing him to fix runtime errors and visual bugs.
4. When a task is completed, Cline will present the result to you with a terminal command like `open -a &quot;Google Chrome&quot; index.html`, which you run with a click of a button.

&gt; [!TIP]
&gt; Use the `CMD/CTRL + Shift + P` shortcut to open the command palette and type &quot;Cline: Open In New Tab&quot; to open the extension as a tab in your editor. This lets you use Cline side-by-side with your file explorer, and see how he changes your workspace more clearly.

---

&lt;img align=&quot;right&quot; width=&quot;340&quot; src=&quot;https://github.com/user-attachments/assets/3cf21e04-7ce9-4d22-a7b9-ba2c595e88a4&quot;&gt;

### Use any API and Model

Cline supports API providers like OpenRouter, Anthropic, OpenAI, Google Gemini, AWS Bedrock, Azure, and GCP Vertex. You can also configure any OpenAI compatible API, or use a local model through LM Studio/Ollama. If you&#039;re using OpenRouter, the extension fetches their latest model list, allowing you to use the newest models as soon as they&#039;re available.

The extension also keeps track of total tokens and API usage cost for the entire task loop and individual requests, keeping you informed of spend every step of the way.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;left&quot; width=&quot;370&quot; src=&quot;https://github.com/user-attachments/assets/81be79a8-1fdb-4028-9129-5fe055e01e76&quot;&gt;

### Run Commands in Terminal

Thanks to the new [shell integration updates in VSCode v1.93](https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api), Cline can execute commands directly in your terminal and receive the output. This allows him to perform a wide range of tasks, from installing packages and running build scripts to deploying applications, managing databases, and executing tests, all while adapting to your dev environment &amp; toolchain to get the job done right.

For long running processes like dev servers, use the &quot;Proceed While Running&quot; button to let Cline continue in the task while the command runs in the background. As Cline works he’ll be notified of any new terminal output along the way, letting him react to issues that may come up, such as compile-time errors when editing files.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;right&quot; width=&quot;400&quot; src=&quot;https://github.com/user-attachments/assets/c5977833-d9b8-491e-90f9-05f9cd38c588&quot;&gt;

### Create and Edit Files

Cline can create and edit files directly in your editor, presenting you a diff view of the changes. You can edit or revert Cline&#039;s changes directly in the diff view editor, or provide feedback in chat until you&#039;re satisfied with the result. Cline also monitors linter/compiler errors (missing imports, syntax errors, etc.) so he can fix issues that come up along the way on his own.

All changes made by Cline are recorded in your file&#039;s Timeline, providing an easy way to track and revert modifications if needed.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;left&quot; width=&quot;370&quot; src=&quot;https://github.com/user-attachments/assets/bc2e85ba-dfeb-4fe6-9942-7cfc4703cbe5&quot;&gt;

### Use the Browser

With Claude 3.5 Sonnet&#039;s new [Computer Use](https://www.anthropic.com/news/3-5-models-and-computer-use) capability, Cline can launch a browser, click elements, type text, and scroll, capturing screenshots and console logs at each step. This allows for interactive debugging, end-to-end testing, and even general web use! This gives him autonomy to fixing visual bugs and runtime issues without you needing to handhold and copy-pasting error logs yourself.

Try asking Cline to &quot;test the app&quot;, and watch as he runs a command like `npm run dev`, launches your locally running dev server in a browser, and performs a series of tests to confirm that everything works. [See a demo here.](https://x.com/sdrzn/status/1850880547825823989)

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;right&quot; width=&quot;350&quot; src=&quot;https://github.com/user-attachments/assets/ac0efa14-5c1f-4c26-a42d-9d7c56f5fadd&quot;&gt;

### &quot;add a tool that...&quot;

Thanks to the [Model Context Protocol](https://github.com/modelcontextprotocol), Cline can extend his capabilities through custom tools. While you can use [community-made servers](https://github.com/modelcontextprotocol/servers), Cline can instead create and install tools tailored to your specific workflow. Just ask Cline to &quot;add a tool&quot; and he will handle everything, from creating a new MCP server to installing it into the extension. These custom tools then become part of Cline&#039;s toolkit, ready to use in future tasks.

-   &quot;add a tool that fetches Jira tickets&quot;: Retrieve ticket ACs and put Cline to work
-   &quot;add a tool that manages AWS EC2s&quot;: Check server metrics and scale instances up or down
-   &quot;add a tool that pulls the latest PagerDuty incidents&quot;: Fetch details and ask Cline to fix bugs

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;left&quot; width=&quot;360&quot; src=&quot;https://github.com/user-attachments/assets/7fdf41e6-281a-4b4b-ac19-020b838b6970&quot;&gt;

### Add Context

**`@url`:** Paste in a URL for the extension to fetch and convert to markdown, useful when you want to give Cline the latest docs

**`@problems`:** Add workspace errors and warnings (&#039;Problems&#039; panel) for Cline to fix

**`@file`:** Adds a file&#039;s contents so you don&#039;t have to waste API requests approving read file (+ type to search files)

**`@folder`:** Adds folder&#039;s files all at once to speed up your workflow even more

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;right&quot; width=&quot;350&quot; src=&quot;https://github.com/user-attachments/assets/140c8606-d3bf-41b9-9a1f-4dbf0d4c90cb&quot;&gt;

### Checkpoints: Compare and Restore

As Cline works through a task, the extension takes a snapshot of your workspace at each step. You can use the &#039;Compare&#039; button to see a diff between the snapshot and your current workspace, and the &#039;Restore&#039; button to roll back to that point.

For example, when working with a local web server, you can use &#039;Restore Workspace Only&#039; to quickly test different versions of your app, then use &#039;Restore Task and Workspace&#039; when you find the version you want to continue building from. This lets you safely explore different approaches without losing progress.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

## Contributing

To contribute to the project, start with our [Contributing Guide](CONTRIBUTING.md) to learn the basics. You can also join our [Discord](https://discord.gg/cline) to chat with other contributors in the `#contributors` channel. If you&#039;re looking for full-time work, check out our open positions on our [careers page](https://cline.bot/join-us)!

&lt;details&gt;
&lt;summary&gt;Local Development Instructions&lt;/summary&gt;

1. Clone the repository _(Requires [git-lfs](https://git-lfs.com/))_:
    ```bash
    git clone https://github.com/cline/cline.git
    ```
2. Open the project in VSCode:
    ```bash
    code cline
    ```
3. Install the necessary dependencies for the extension and webview-gui:
    ```bash
    npm run install:all
    ```
4. Launch by pressing `F5` (or `Run`-&gt;`Start Debugging`) to open a new VSCode window with the extension loaded. (You may need to install the [esbuild problem matchers extension](https://marketplace.visualstudio.com/items?itemName=connor4312.esbuild-problem-matchers) if you run into issues building the project.)

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Creating a Pull Request&lt;/summary&gt;

1. Before creating a PR, generate a changeset entry:
    ```bash
    npm run changeset
    ```
   This will prompt you for:
   - Type of change (major, minor, patch)
     - `major` → breaking changes (1.0.0 → 2.0.0)
     - `minor` → new features (1.0.0 → 1.1.0)
     - `patch` → bug fixes (1.0.0 → 1.0.1)
   - Description of your changes

2. Commit your changes and the generated `.changeset` file

3. Push your branch and create a PR on GitHub. Our CI will:
   - Run tests and checks
   - Changesetbot will create a comment showing the version impact
   - When merged to main, changesetbot will create a Version Packages PR
   - When the Version Packages PR is merged, a new release will be published

&lt;/details&gt;


## License

[Apache 2.0 © 2025 Cline Bot Inc.](./LICENSE)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[renovatebot/renovate]]></title>
            <link>https://github.com/renovatebot/renovate</link>
            <guid>https://github.com/renovatebot/renovate</guid>
            <pubDate>Thu, 27 Mar 2025 00:04:57 GMT</pubDate>
            <description><![CDATA[Home of the Renovate CLI: Cross-platform Dependency Automation by Mend.io]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/renovatebot/renovate">renovatebot/renovate</a></h1>
            <p>Home of the Renovate CLI: Cross-platform Dependency Automation by Mend.io</p>
            <p>Language: TypeScript</p>
            <p>Stars: 18,673</p>
            <p>Forks: 2,513</p>
            <p>Stars today: 14 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[nanbingxyz/5ire]]></title>
            <link>https://github.com/nanbingxyz/5ire</link>
            <guid>https://github.com/nanbingxyz/5ire</guid>
            <pubDate>Thu, 27 Mar 2025 00:04:56 GMT</pubDate>
            <description><![CDATA[5ire is a cross-platform desktop AI assistant, MCP client. It compatible with major service providers, supports local knowledge base and tools via model context protocol servers .]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/nanbingxyz/5ire">nanbingxyz/5ire</a></h1>
            <p>5ire is a cross-platform desktop AI assistant, MCP client. It compatible with major service providers, supports local knowledge base and tools via model context protocol servers .</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,983</p>
            <p>Forks: 136</p>
            <p>Stars today: 129 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/nanbingxyz/5ire&quot;&gt;
    &lt;img src=&quot;https://5ire.app/logo.png&quot; alt=&quot;Logo&quot; width=&quot;120&quot;&gt;
  &lt;/a&gt;
  &lt;br /&gt;
   &lt;h1&gt;A Sleek AI Assistant &amp; MCP Client&lt;/h1&gt;
   &lt;div&gt;
    &lt;img src=&quot;https://badge.mcpx.dev/?type=client&quot; /&gt;&amp;nbsp;
    &lt;img src=&quot;https://badge.mcpx.dev/?type=client&amp;features=tools&quot; /&gt;
     &lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-brightgreen?style=flat&quot;/&gt;
     &lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg&quot;/&gt;
  &lt;/div&gt;
   &lt;br /&gt;
  &lt;img src=&quot;https://github.com/user-attachments/assets/e622e1da-09b9-4212-b71c-ad9d39bf3cd5&quot; width=&quot;100%&quot;/&gt;
  &lt;br /&gt;
  &lt;p&gt;
    &lt;br /&gt;
    &lt;div style=&quot;display:flex;justify-content:space-around;align-items:center;gap:6px;flex-wrap:wrap;margin-bottom:15px;&quot;&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;OpenAI&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Azure&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Anthropic&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Google&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Baidu&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Mistral&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Moonshot&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Doubao&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Grok&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ DeepSeek&lt;/span&gt;
    &lt;span style=&quot;font-size:12px;&quot;&gt;/ Ollama&lt;/span&gt;
  &lt;/div&gt;
    &lt;br /&gt;
    &lt;a href=&quot;https://x.com/intent/follow?screen_name=1ronben&quot;&gt;Twitter&lt;/a&gt;
    ·
    &lt;a href=&quot;https://github.com/nanbingxyz/5ire/releases/latest&quot;&gt;Releases&lt;/a&gt;
  &lt;/p&gt;
  &lt;div&gt;&lt;a href=&quot;https://buymeacoffee.com/ironben&quot;&gt;&lt;img src=&quot;https://github.com/user-attachments/assets/2265e2d6-2a17-4a48-b779-52a925261135&quot; style=&quot;width:200px&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
   &lt;br /&gt;
&lt;video src=&quot;https://github.com/user-attachments/assets/741b23d3-31df-4749-bde4-103e2d415953.mp4&quot;&gt;&lt;/video&gt;
&lt;/div&gt;
&lt;br /&gt;

# Features

## ⚒️ Support Tools via MCP Servers
MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.

With tools, you can access the file system, obtain system information, interact with databases, access remote data, and more, rather than just having a simple conversation.

https://github.com/user-attachments/assets/5aa98f2b-c26d-435e-8196-73fa414066eb

We have created an open [marketplace for MCP Servers](https://github.com/nanbingxyz/mcpsvr). it empowers users to discover exceptional tools while offering a streamlined process for sharing their own MCP server creations.

https://github.com/user-attachments/assets/be66c30e-bb29-4dfe-9f25-8d396470ed60

## 💡 Local Knowledge Base
We have integrated the bge-m3 as our local embedding model, which excels in multilingual vectorization. 5ire now supports parsing and vectorization of docx, xlsx, pptx, pdf, txt, and csv documents, enabling storage of these vectors to power robust Retrieval-Augmented Generation (RAG) capabilities locally.

![Local Knowledge Base Screenshot](https://5ire.app/knowledge.png)

## 📈 Usage Analytics
By keeping track of your API usage and spending, you can gain a better understanding of how much you&#039;re spending on the API and make informed decisions to optimize your use of the service.

![Usage Analytics Screenshot](https://5ire.app/analytics.png)

## ✨ Prompts Library
The prompt library provides an effective way to create and organize your own prompts. These prompts are highly versatile, thanks to their support for variables.

![Prompts Library Screenshot](https://5ire.app/prompts.png)

## 🔖 Bookmarks
You can bookmark each conversation, and even if the original messages are deleted, the saved bookmarked content remains unaffected.
![Bookmarks Screenshot](https://5ire.app/bookmarks.png)

## 🔍 Quick Search
You can perform keyword searches across all conversations, quickly pinpointing the information you need.
![Search Screenshot](https://5ire.app/search.png)


&gt; [!TIP]
&gt; Since 5ire uses native dependencies, it needs to be packaged on the corresponding platform. If it is on Mac OS, you may also need to configure APPLE_TEAM_ID, APPLE_ID, and APPLE_ID_PASS for notarization to avoid security alerts.


&lt;hr/&gt;

##  Discover Exceptional MCP Servers

&gt; [!TIP]
&gt; [MCPSvr](https://github.com/nanbingxyz/mcpsvr), a community-driven directory of MCP servers, empowers developers to discover exceptional tools while offering a streamlined process for sharing their own MCP server creations.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[supercorp-ai/supergateway]]></title>
            <link>https://github.com/supercorp-ai/supergateway</link>
            <guid>https://github.com/supercorp-ai/supergateway</guid>
            <pubDate>Thu, 27 Mar 2025 00:04:55 GMT</pubDate>
            <description><![CDATA[Run MCP stdio servers over SSE and SSE over stdio. AI gateway.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/supercorp-ai/supergateway">supercorp-ai/supergateway</a></h1>
            <p>Run MCP stdio servers over SSE and SSE over stdio. AI gateway.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 459</p>
            <p>Forks: 43</p>
            <p>Stars today: 21 stars today</p>
            <h2>README</h2><pre>![Supergateway: Run stdio MCP servers over SSE and WS](https://raw.githubusercontent.com/supercorp-ai/supergateway/main/supergateway.png)

**Supergateway** runs **MCP stdio-based servers** over **SSE (Server-Sent Events)** or **WebSockets (WS)** with one command. This is useful for remote access, debugging, or connecting to clients when your MCP server only supports stdio.

Supported by [Supermachine](https://supermachine.ai) (hosted MCPs), [Superinterface](https://superinterface.ai), and [Supercorp](https://supercorp.ai).

## Installation &amp; Usage

Run Supergateway via `npx`:

```bash
npx -y supergateway --stdio &quot;uvx mcp-server-git&quot;
```

- **`--stdio &quot;command&quot;`**: Command that runs an MCP server over stdio
- **`--sse &quot;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&quot;`**: SSE URL to connect to (SSE→stdio mode)
- **`--outputTransport stdio | sse | ws`**: Output MCP transport (default: `sse` with `--stdio`, `stdio` with `--sse`)
- **`--port 8000`**: Port to listen on (stdio→SSE or stdio→WS mode, default: `8000`)
- **`--baseUrl &quot;http://localhost:8000&quot;`**: Base URL for SSE or WS clients (stdio→SSE mode; optional)
- **`--ssePath &quot;/sse&quot;`**: Path for SSE subscriptions (stdio→SSE mode, default: `/sse`)
- **`--messagePath &quot;/message&quot;`**: Path for messages (stdio→SSE or stdio→WS mode, default: `/message`)
- **`--logLevel info | none`**: Controls logging level (default: `info`). Use `none` to suppress all logs.
- **`--cors`**: Enable CORS (stdio→SSE or stdio→WS mode)
- **`--healthEndpoint /healthz`**: Register one or more endpoints (stdio→SSE or stdio→WS mode; can be used multiple times) that respond with `&quot;ok&quot;`

## stdio → SSE

Expose an MCP stdio server as an SSE server:

```bash
npx -y supergateway \
    --stdio &quot;npx -y @modelcontextprotocol/server-filesystem ./my-folder&quot; \
    --port 8000 --baseUrl http://localhost:8000 \
    --ssePath /sse --messagePath /message
```

- **Subscribe to events**: `GET http://localhost:8000/sse`
- **Send messages**: `POST http://localhost:8000/message`

## SSE → stdio

Connect to a remote SSE server and expose locally via stdio:

```bash
npx -y supergateway --sse &quot;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&quot;
```

Useful for integrating remote SSE MCP servers into local command-line environments.

## stdio → WS

Expose an MCP stdio server as a WebSocket server:

```bash
npx -y supergateway \
    --stdio &quot;npx -y @modelcontextprotocol/server-filesystem ./my-folder&quot; \
    --port 8000 --outputTransport ws --messagePath /message
```

- **WebSocket endpoint**: `ws://localhost:8000/message`

## Example with MCP Inspector (stdio → SSE mode)

1. **Run Supergateway**:

```bash
npx -y supergateway --port 8000 \
    --stdio &quot;npx -y @modelcontextprotocol/server-filesystem /Users/MyName/Desktop&quot;
```

2. **Use MCP Inspector**:

```bash
npx @modelcontextprotocol/inspector
```

You can now list tools, resources, or perform MCP actions via Supergateway.

## Using with ngrok

Use [ngrok](https://ngrok.com/) to share your local MCP server publicly:

```bash
npx -y supergateway --port 8000 \
    --stdio &quot;npx -y @modelcontextprotocol/server-filesystem .&quot;

# In another terminal:
ngrok http 8000
```

ngrok provides a public URL for remote access.

## Running with Docker

A Docker-based workflow avoids local Node.js setup. A ready-to-run Docker image is available here:
[supercorp/supergateway](https://hub.docker.com/r/supercorp/supergateway). Also on GHCR: [ghcr.io/supercorp-ai/supergateway](https://github.com/supercorp-ai/supergateway/pkgs/container/supergateway)

### Using the Official Image

```bash
docker run -it --rm -p 8000:8000 supercorp/supergateway \
    --stdio &quot;npx -y @modelcontextprotocol/server-filesystem /&quot; \
    --port 8000
```

Docker pulls the image automatically. The MCP server runs in the container’s root directory (`/`). You can mount host directories if needed.

### Building the Image Yourself

Use provided Dockerfile:

```bash
docker build -t supergateway .

docker run -it --rm -p 8000:8000 supergateway \
    --stdio &quot;npx -y @modelcontextprotocol/server-filesystem /&quot; \
    --port 8000
```

## Using with Claude Desktop (SSE → stdio mode)

Claude Desktop can use Supergateway’s SSE→stdio mode.

### NPX-based MCP Server Example

```json
{
  &quot;mcpServers&quot;: {
    &quot;supermachineExampleNpx&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;-y&quot;,
        &quot;supergateway&quot;,
        &quot;--sse&quot;,
        &quot;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&quot;
      ]
    }
  }
}
```

### Docker-based MCP Server Example

```json
{
  &quot;mcpServers&quot;: {
    &quot;supermachineExampleDocker&quot;: {
      &quot;command&quot;: &quot;docker&quot;,
      &quot;args&quot;: [
        &quot;run&quot;,
        &quot;-i&quot;,
        &quot;--rm&quot;,
        &quot;supercorp/supergateway&quot;,
        &quot;--sse&quot;,
        &quot;https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app&quot;
      ]
    }
  }
}
```

## Why MCP?

[Model Context Protocol](https://spec.modelcontextprotocol.io/) standardizes AI tool interactions. Supergateway converts MCP stdio servers into SSE or WS services, simplifying integration and debugging with web-based or remote clients.

## Advanced Configuration

Supergateway emphasizes modularity:

- Automatically manages JSON-RPC versioning.
- Retransmits package metadata where possible.
- stdio→SSE or stdio→WS mode logs via standard output; SSE→stdio mode logs via stderr.

## Additional resources

- [Superargs](https://github.com/supercorp-ai/superargs) - provide arguments to MCP servers during runtime.

## Contributors

- [@Joffref](https://github.com/Joffref)
- [@michaeljguarino](https://github.com/michaeljguarino)

## Contributing

Issues and PRs welcome. Please open one if you encounter problems or have feature suggestions.

## License

[MIT License](./LICENSE)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
    </channel>
</rss>