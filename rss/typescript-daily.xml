<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for typescript - TypeScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for typescript.</description>
        <lastBuildDate>Thu, 25 Sep 2025 00:05:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[cloudflare/capnweb]]></title>
            <link>https://github.com/cloudflare/capnweb</link>
            <guid>https://github.com/cloudflare/capnweb</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:06 GMT</pubDate>
            <description><![CDATA[JavaScript/TypeScript-native, low-boilerplate, object-capability RPC system]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/cloudflare/capnweb">cloudflare/capnweb</a></h1>
            <p>JavaScript/TypeScript-native, low-boilerplate, object-capability RPC system</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,705</p>
            <p>Forks: 44</p>
            <p>Stars today: 326 stars today</p>
            <h2>README</h2><pre># Cap&#039;n Web: A JavaScript-native RPC system

Cap&#039;n Web is a spiritual sibling to [Cap&#039;n Proto](https://capnproto.org) (and is created by the same author), but designed to play nice in the web stack. That means:
* Like Cap&#039;n Proto, it is an object-capability protocol. (&quot;Cap&#039;n&quot; is short for &quot;capabilities and&quot;.) We&#039;ll get into this more below, but it&#039;s incredibly powerful.
* Unlike Cap&#039;n Proto, Cap&#039;n Web has no schemas. In fact, it has almost no boilerplate whatsoever. This means it works more like the [JavaScript-native RPC system in Cloudflare Workers](https://blog.cloudflare.com/javascript-native-rpc/).
* That said, it integrates nicely with TypeScript.
* Also unlike Cap&#039;n Proto, Cap&#039;n Web&#039;s underlying serialization is human-readable. In fact, it&#039;s just JSON, with a little pre-/post-processing.
* It works over HTTP, WebSocket, and postMessage() out-of-the-box, with the ability to extend it to other transports easily.
* It works in all major browsers, Cloudflare Workers, Node.js, and other modern JavaScript runtimes.
The whole thing compresses (minify+gzip) to under 10kB with no dependencies.

Cap&#039;n Web is more expressive than almost every other RPC system, because it implements an object-capability RPC model. That means it:
* Supports bidirectional calling. The client can call the server, and the server can also call the client.
* Supports passing functions by reference: If you pass a function over RPC, the recipient receives a &quot;stub&quot;. When they call the stub, they actually make an RPC back to you, invoking the function where it was created. This is how bidirectional calling happens: the client passes a callback to the server, and then the server can call it later.
* Similarly, supports passing objects by reference: If a class extends the special marker type `RpcTarget`, then instances of that class are passed by reference, with method calls calling back to the location where the object was created.
* Supports promise pipelining. When you start an RPC, you get back a promise. Instead of awaiting it, you can immediately use the promise in dependent RPCs, thus performing a chain of calls in a single network round trip.
* Supports capability-based security patterns.

## Installation

[Cap&#039;n Web is an npm package.](https://www.npmjs.com/package/capnweb)

```
npm i capnweb
```

## Example

A client looks like this:

```js
import { newWebSocketRpcSession } from &quot;capnweb&quot;;

// One-line setup.
let api = newWebSocketRpcSession(&quot;wss://example.com/api&quot;);

// Call a method on the server!
let result = await api.hello(&quot;World&quot;);

console.log(result);
```

Here&#039;s the server:

```js
import { RpcTarget, newWorkersRpcResponse } from &quot;capnweb&quot;;

// This is the server implementation.
class MyApiServer extends RpcTarget {
  hello(name) {
    return `Hello, ${name}!`
  }
}

// Standard Cloudflare Workers HTTP handler.
//
// (Node and other runtimes are supported too; see below.)
export default {
  fetch(request, env, ctx) {
    // Parse URL for routing.
    let url = new URL(request.url);

    // Serve API at `/api`.
    if (url.pathname === &quot;/api&quot;) {
      return newWorkersRpcResponse(request, new MyApiServer());
    }

    // You could serve other endpoints here...
    return new Response(&quot;Not found&quot;, {status: 404});
  }
}
```

### More complicated example

Here&#039;s an example that:
* Uses TypeScript
* Sends multiple calls, where the second call depends on the result of the first, in one round trip.

We declare our interface in a shared types file:

```ts
interface PublicApi {
  // Authenticate the API token, and returned the authenticated API.
  authenticate(apiToken: string): AuthedApi;

  // Get a given user&#039;s public profile info. (Doesn&#039;t require authentication.)
  getUserProfile(userId: string): Promise&lt;UserProfile&gt;;
}

interface AuthedApi {
  getUserId(): number;

  // Get the user IDs of all the user&#039;s friends.
  getFriendIds(): number[];
}

type UserProfile = {
  name: string;
  photoUrl: string;
}
```

(Note: you don&#039;t _have to_ declare your interface separately. The client could just use `import(&quot;./server&quot;).ApiServer` as the type.)

On the server, we implement the interface as an RpcTarget:

```ts
import { newWorkersRpcResponse, RpcTarget } from &quot;capnweb&quot;;

class ApiServer extends RpcTarget implements PublicApi {
  // ... implement PublicApi ...
}

export default {
  async fetch(req, env, ctx) {
    // ... same as previous example ...
  }
}
```

On the client, we can use it in a batch request:

```ts
import { newHttpBatchRpcSession } from &quot;capnweb&quot;;

let api = newHttpBatchRpcSession&lt;PublicApi&gt;(&quot;https://example.com/api&quot;);

// Call authenticate(), but don&#039;t await it. We can use the returned promise
// to make &quot;pipelined&quot; calls without waiting.
let authedApi: RpcPromise&lt;AuthedApi&gt; = api.authenticate(apiToken);

// Make a pipelined call to get the user&#039;s ID. Again, don&#039;t await it.
let userIdPromise: RpcPromise&lt;number&gt; = authedApi.getUserId();

// Make another pipelined call to fetch the user&#039;s public profile, based on
// the user ID. Notice how we can use `RpcPromise&lt;T&gt;` in the parameters of a
// call anywhere where T is expected. The promise will be replaced with its
// resolution before delivering the call.
let profilePromise = api.getUserProfile(userIdPromise);

// Make another call to get the user&#039;s friends.
let friendsPromise = authedApi.getFriendIds();

// That only returns an array of user IDs, but we want all the profile info
// too, so use the magic .map() function to get them, too! Still one round
// trip.
let friendProfilesPromise = friendsPromise.map((id: RpcPromise&lt;number&gt;) =&gt; {
  return { id, profile: api.getUserProfile(id); };
});

// Now await the promises. The batch is sent at this point. It&#039;s important
// to simultaneously await all promises for which you actually want the
// result. If you don&#039;t actually await a promise before the batch is sent,
// the system detects this and doesn&#039;t actually ask the server to send the
// return value back!
let [profile, friendProfiles] =
    await Promise.all([profilePromise, friendProfilesPromise]);

console.log(`Hello, ${profile.name}!`);

// Note that at this point, the `api` and `authedApi` stubs no longer work,
// because the batch is done. You must start a new batch.
```

Alternatively, for a long-running interactive application, we can set up a persistent WebSocket connection:

```ts
import { newWebSocketRpcSession } from &quot;capnweb&quot;;

// We declare `api` with `using` so that it&#039;ll be disposed at the end of the
// scope, which closes the connection. `using` is a fairly new JavaScript
// feature, part of the &quot;explicit resource management&quot; spec. Alternatively,
// we could declare `api` with `let` or `const` and make sure to call
// `api[Symbol.dispose]()` to dispose it and close the connection later.
using api = newWebSocketRpcSession&lt;PublicApi&gt;(&quot;https://example.com/api&quot;);

// Usage is exactly the same, except we don&#039;t have to await all the promises
// at once.

// Authenticate and get the user ID in one round trip. Note we use `using`
// again so that `authedApi` will be disposed when we&#039;re done with it. In
// this case, it won&#039;t close the connection (since it&#039;s not the main stub),
// but disposing it does release the `AuthedApi` object on the server side.
using authedApi: RpcPromise&lt;AuthedApi&gt; = api.authenticate(apiToken);
let userId: number = await authedApi.getUserId();

// ... continue calling other methods, now or in the future ...
```

## RPC Basics

### Pass-by-value types

The following types can be passed over RPC (in arguments or return values), and will be passed &quot;by value&quot;, meaning the content is serialized, producing a copy at the receiving end:

* Primitive values: strings, numbers, booleans, null, undefined
* Plain objects (e.g., from object literals)
* Arrays
* `bigint`
* `Date`
* `Uint8Array`
* `Error` and its well-known subclasses

The following types are not supported as of this writing, but may be added in the future:
* `Map` and `Set`
* `ArrayBuffer` and typed arrays other than `Uint8Array`
* `RegExp`
* `ReadableStream` and `WritableStream`, with automatic flow control.
* `Headers`, `Request`, and `Response`

The following are intentionally NOT supported:
* Application-defined classes that do not extend `RpcTarget`.
* Cyclic values. Messages are serialized strictly as trees (like JSON).

### `RpcTarget`

To export an interface over RPC, you must write a class that `extends RpcTarget`. Extending `RpcTarget` tells the RPC system: instances of this class are _pass-by-reference_. When an instance is passed over RPC, the object should NOT be serialized. Instead, the RPC message will contain a &quot;stub&quot; that points back to the original target object. Invoking this stub calls back over RPC.

When you send someone an `RpcTarget` reference, they will be able to call any class method over RPC, including getters. They will not, however, be able to access &quot;own&quot; properties. In precise JavaScript terms, they can access prototype properties but not instance properties. This policy is intended to &quot;do the right thing&quot; for typical JavaScript code, where private members are typically stored as instance properties.

WARNING: If you are using TypeScript, note that declaring a method `private` does not hide it from RPC, because TypeScript annotations are &quot;erased&quot; at runtime, so cannot be enforced. To actually make methods private, you must prefix their names with `#`, which makes them private for JavaScript (not just TypeScript). Names prefixed with `#` are never available over RPC.

### Functions

When a plain function is passed over RPC, it will be treated similarly to an `RpcTarget`. The function will be replaced by a stub which, when invoked, calls back over RPC to the original function object.

If the function has any own properties, those will be available over RPC. Note that this differs from `RpcTarget`: With `RpcTarget`, own properties are not exposed, but with functions, _only_ own properties are exposed. Generally functions don&#039;t have properties anyway, making the point moot.

### `RpcStub&lt;T&gt;`

When a type `T` which extends `RpcTarget` (or is a function) is sent as part of an RPC message (in the arguments to a call, or in the return value), it is replaced with a stub of type `RpcStub&lt;T&gt;`.

Stubs are implemented using JavaScript `Proxy`s. A stub appears to have every possible method and property name. The stub does not know at runtime which properties actually exist on the server side. If you use a property that doesn&#039;t exist, an error will not be produced until you await the results.

TypeScript, however, will know which properties exist from type parameter `T`. Thus, if you are using TypeScript, you will get full compile-time type checking, auto-complete, etc. Hooray!

To read a property from the remote object (as opposed to calling a method), simply `await` the property, like `let foo = await stub.foo;`.

A stub can be passed across RPC again, including over independent connections. If Alice is connected to Bob and Carol, and Alice receives a stub from Bob, Alice can pass the stub in an RPC to Carol, thus allowing Carol to call Bob. (As of this writing, any such calls will be proxied through Alice, but in the future we may support &quot;three-party handoff&quot; such that Carol can make a direct connection to Bob.)

You may construct a stub explicitly without an RPC connection, using `new RpcStub(target)`. This is sometimes useful to be able to perform local calls as if they were remote, or to help manage disposal (see below).

### `RpcPromise&lt;T&gt;`

Calling an RPC method returns an `RpcPromise` rather than a regular `Promise`. You can use an `RpcPromise` in all the ways a regular `Promise` can be used, that is, you can `await` it, call `.then()`, pass it to `Promise.resolve()`, etc. (This is all possible because `RpcPromise` is a [&quot;thenable&quot;](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables).)

However, you can do more with `RpcPromise`. `RpcPromise` supports _Promise Pipelining_:

1. An `RpcPromise` also acts as a _stub_ for the eventual result of the promise. That means, you can access properties and invoke methods on it, without awaiting the promise first.

```ts
// In a single round trip, authenticate the user, and fetch their notifications.
let user = api.authenticate(cookie);
let notifications = await user.getNotifications();
```

2. An `RpcPromise` (or its properties) can be passed as parameters to other RPC calls.

```ts
// In a single round trip, authenticate the user, and fetch their public profile
// given their ID.
let user = api.authenticate(cookie);
let profile = await api.getUserProfile(user.id);
```

Whenever an `RpcPromise` is passed in the parameters to an RPC, or returned as part of the result, the promise will be replaced with its resolution before delivery to the receiving application. So, you can use an `RpcPromise&lt;T&gt;` anywhere where a `T` is required!

### The magic `map()` method

Every RPC promise has a special method `.map()` which can be used to remotely transform a value, without pulling it back locally. Here&#039;s an example:

```ts
// Get a list of user IDs.
let idsPromise = api.listUserIds();

// Look up the username for each one.
let names = await idsPromise.map(id =&gt; [id, api.getUserName(id)]);
```

This example calls one API method to get a list of user IDs, then, for each user ID in the list, makes another RPC call to look up the user&#039;s name, producing a list of id/name pairs.

**All this happens in a single network round trip!**

`promise.map(func)` transfers a representation of `func` to the server, where it is executed on the promise&#039;s result. Specifically:

* If the promise resolves to an array, the mapper function executes on each element of the array. The overall `.map()` operation returns a promise for an array of the results.
* If the promise resolves to `null` or `undefined`, the map function is not executed at all. The result is the same value.
* If the promise resolves to any other value, the map function executes once on that value, returning the result.

Thus, `map()` can be used both for handling arrays, and for handling nullable values.

There are some restrictions:

* The callback must have no side effects other than calling RPCs.
* The callback must be synchronous. It cannot await anything.
* The input to the callback is an `RpcPromise`, hence the callback cannot actually operate on it, other than to invoke its RPC methods, or to use it in the params of other RPC methods.
* Any stubs which you use in the callback -- and any parameters you pass to them -- will be sent to the peer. Be warned, a malicious peer can use these stubs for anything, not just calling your callback. Typically, it only makes sense to invoke stubs that came from the same peer originally, since this is what saves round-trips.

**How the heck does that work?**

Cap&#039;n Web does NOT send arbitrary code over the wire!

The trick here is record-replay: On the calling side, Cap&#039;n Web will invoke your callback once, in a special &quot;recording&quot; mode, passing in a special placeholder stub which records what you do with it. During the invocation, any RPCs invoked by the callback (on *any* stub) will not actually be executed, but will be recorded as an action the callback performs. Any stubs you use during the recording are &quot;captured&quot; as well. Once the callback returns, the recording and the capture list can then be sent to the peer, where the recording can then be replayed as needed to process individual results.

Since all of the not-yet-determined values seen by the callback are represented as `RpcPromise`s, the callback&#039;s behavior is deterministic. Any actual computation (arithmetic, branching, etc.) can&#039;t possibly use these promises as (meaningful) inputs, so would logically produce the same results for every invocation of the callback. Any such computation will actually end up being performed on the sending side, just once, with the results being imbued into the recording.

### Cloudflare Workers RPC interoperability

Cap&#039;n Web works on any JavaScript platform. But, on Cloudflare Workers specifically, it&#039;s designed to play nicely with the [the built-in RPC system](https://blog.cloudflare.com/javascript-native-rpc/). The two have basically the same semantics, the only difference being that Workers RPC is a built-in API provided by the Workers Runtime, whereas Cap&#039;n Web is implemented in pure JavaScript.

To facilitate interoperability:
* On Workers, the `RpcTarget` class exported by &quot;capnweb&quot; is just an alias of the built-in one, so you can use them interchangeably.
* RPC stubs and promises originating from one RPC system can be passed over the other. This will automatically set up proxying.
* You can also send Workers Service Bindings and Durable Object stubs over Cap&#039;n Web -- again, this sets up proxying.

So basically, it &quot;just works&quot;.

With that said, as of this writing, the feature set is not exactly the same between the two. We aim to fix this over time, by adding missing features to both sides until they match. In particular, as of this writing:
* Workers RPC supports some types that Cap&#039;n Web does not yet, like `Map`, streams, etc.
* Workers RPC supports sending values that contain aliases and cycles. This can actually cause problems, so we actually plan to *remove* this feature from Workers RPC (with a compatibility flag, of course).
* Workers RPC does not yet support placing an `RpcPromise` into the parameters of a request, to be replaced by its resolution.
* Workers RPC does not yet support the magic `.map()` method.

## Resource Management and Disposal

Unfortunately, garbage collection does not work well when remote resources are involved, for two reasons:

1. Many JavaScript runtimes only run the garbage collector when they sense &quot;memory pressure&quot; -- if memory is not running low, then they figure there&#039;s no need to try to reclaim any. However, the runtime has no way to know if the other side of an RPC connection is suffering memory pressure.

2. Garbage collectors need to trace the full object graph in order to detect which objects are unreachable, especially when those objects contain cyclic references. However, the garbage collector can only see local objects; it has no ability to trace through the remote graph to discover cycles that may cross RPC connections.

Both of these problems might be solvable with sufficient work, but the problem seems exceedingly difficult. We make no attempt to solve it in this library.

Instead, you may choose one of two strategies:

1. Explicitly dispose stubs when you are done with them. This notifies the remote end that it can release the associated resources.

2. Use short-lived sessions. When the session ends, all stubs are implicitly disposed. In particular, when using HTTP batch request, there&#039;s generally no need to dispose stubs. When using long-lived WebSocket sessions, however, disposal may be important.

Note: We might extend Cap&#039;n Web to use `FinalizationRegistry` to automatically dispose abandoned stubs in the future, but even if we do, it should not be relied upon, due to problems discussed above.

### How to dispose

Stubs integrate with JavaScript&#039;s [explicit resource management](https://v8.dev/features/explicit-resource-management), which became widely available in mid-2025 (and has been supported via transpilers and polyfills going back a few years earlier). In short:

* Disposable objects (including stubs) have a method `[Symbol.dispose]`. You can call this like `stub[Symbol.dispose]()`.
* You can arrange for a stub to be disposed automatically at the end of a function scope by assigning it to a `using` variable, like `using stub = api.getStub();`. The disposer will automatically be invoked when the variable goes out-of-scope.

### Automatic disposal

This library implements several rules to help make resource management more manageable. These rules may appear a bit complicated, but are intended to implement the behavior you would naturally expect.

The b

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[siyuan-note/siyuan]]></title>
            <link>https://github.com/siyuan-note/siyuan</link>
            <guid>https://github.com/siyuan-note/siyuan</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:05 GMT</pubDate>
            <description><![CDATA[A privacy-first, self-hosted, fully open source personal knowledge management software, written in typescript and golang.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/siyuan-note/siyuan">siyuan-note/siyuan</a></h1>
            <p>A privacy-first, self-hosted, fully open source personal knowledge management software, written in typescript and golang.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 37,712</p>
            <p>Forks: 2,319</p>
            <p>Stars today: 75 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
&lt;img alt=&quot;SiYuan&quot; src=&quot;https://b3log.org/images/brand/siyuan-128.png&quot;&gt;
&lt;br&gt;
&lt;em&gt;Refactor your thinking&lt;/em&gt;
&lt;br&gt;&lt;br&gt;
&lt;a title=&quot;Build Status&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/siyuan-note/siyuan/cd.yml?style=flat-square&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Releases&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/siyuan-note/siyuan.svg?style=flat-square&amp;color=9CF&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Downloads&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/siyuan-note/siyuan/total.svg?style=flat-square&amp;color=blueviolet&quot;&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a title=&quot;Docker Pulls&quot; target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/b3log/siyuan&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/b3log/siyuan.svg?style=flat-square&amp;color=green&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Docker Image Size&quot; target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/b3log/siyuan&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/image-size/b3log/siyuan.svg?style=flat-square&amp;color=ff96b4&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Hits&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan&quot;&gt;&lt;img src=&quot;https://hits.b3log.org/siyuan-note/siyuan.svg&quot;&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a title=&quot;AGPLv3&quot; target=&quot;_blank&quot; href=&quot;https://www.gnu.org/licenses/agpl-3.0.txt&quot;&gt;&lt;img src=&quot;http://img.shields.io/badge/license-AGPLv3-orange.svg?style=flat-square&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Code Size&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/languages/code-size/siyuan-note/siyuan.svg?style=flat-square&amp;color=yellow&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;GitHub Pull Requests&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-pr-closed/siyuan-note/siyuan.svg?style=flat-square&amp;color=FF9966&quot;&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a title=&quot;GitHub Commits&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan/commits/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/siyuan-note/siyuan.svg?style=flat-square&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Last Commit&quot; target=&quot;_blank&quot; href=&quot;https://github.com/siyuan-note/siyuan/commits/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/siyuan-note/siyuan.svg?style=flat-square&amp;color=FF9900&quot;&gt;&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;a title=&quot;Twitter&quot; target=&quot;_blank&quot; href=&quot;https://twitter.com/b3logos&quot;&gt;&lt;img alt=&quot;Twitter Follow&quot; src=&quot;https://img.shields.io/twitter/follow/b3logos?label=Follow&amp;style=social&quot;&gt;&lt;/a&gt;
&lt;a title=&quot;Discord&quot; target=&quot;_blank&quot; href=&quot;https://discord.gg/dmMbCqVX7G&quot;&gt;&lt;img alt=&quot;Chat on Discord&quot; src=&quot;https://img.shields.io/discord/808152298789666826?label=Discord&amp;logo=Discord&amp;style=social&quot;&gt;&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;a href=&quot;https://trendshift.io/repositories/3949&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/3949&quot; alt=&quot;siyuan-note%2Fsiyuan | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;README_zh_CN.md&quot;&gt;中文&lt;/a&gt; | &lt;a href=&quot;README_ja_JP.md&quot;&gt;日本語&lt;/a&gt;
&lt;/p&gt;

---

## Table of Contents

* [💡 Introduction](#-introduction)
* [🔮 Features](#-features)
* [🏗️ Architecture and Ecosystem](#-architecture-and-ecosystem)
* [🌟 Star History](#-star-history)
* [🗺️ Roadmap](#️-roadmap)
* [🚀 Download Setup](#-download-setup)
  * [App Market](#app-market)
  * [Installation Package](#installation-package)
  * [Docker Hosting](#docker-hosting)
  * [Unraid Hosting](#unraid-hosting)
  * [Insider Preview](#insider-preview)
* [🏘️ Community](#️-community)
* [🛠️ Development Guide](#️-development-guide)
* [❓ FAQ](#-faq)
  * [How does SiYuan store data?](#how-does-siyuan-store-data)
  * [Does it support data synchronization through a third-party sync disk?](#does-it-support-data-synchronization-through-a-third-party-sync-disk)
  * [Is SiYuan open source?](#is-siyuan-open-source)
  * [How to upgrade to a new version?](#how-to-upgrade-to-a-new-version)
  * [What if some blocks (such as paragraph blocks in list items) cannot find the block icon?](#what-if-some-blocks-such-as-paragraph-blocks-in-list-items-cannot-find-the-block-icon)
  * [What should I do if the data repo key is lost?](#what-should-i-do-if-the-data-repo-key-is-lost)
  * [Do I need to pay for it?](#do-i-need-to-pay-for-it)
* [🙏 Acknowledgement](#-acknowledgement)
  * [Contributors](#contributors)

---

## 💡 Introduction

SiYuan is a privacy-first personal knowledge management system, support fine-grained block-level reference and Markdown
WYSIWYG.

Welcome to [SiYuan English Discussion Forum](https://liuyun.io) to learn more.

![feature0.png](https://b3logfile.com/file/2024/01/feature0-1orBRlI.png)

![feature51.png](https://b3logfile.com/file/2024/02/feature5-1-uYYjAqy.png)

## 🔮 Features

Most features are free, even for commercial use.

* Content block
  * Block-level reference and two-way links
  * Custom attributes
  * SQL query embed
  * Protocol `siyuan://`
* Editor
  * Block-style
  * Markdown WYSIWYG
  * List outline
  * Block zoom-in
  * Million-word large document editing
  * Mathematical formulas, charts, flowcharts, Gantt charts, timing charts, staffs, etc.
  * Web clipping
  * PDF Annotation link
* Export
  * Block ref and embed
  * Standard Markdown with assets
  * PDF, Word and HTML
  * Copy to WeChat MP, Zhihu and Yuque
* Database
  * Table view
* Flashcard spaced repetition
* AI writing and Q/A chat via OpenAI API
* Tesseract OCR 
* Multi-tab, drag and drop to split screen
* Template snippet
* JavaScript/CSS snippet
* Android/iOS/HarmonyOS App
* Docker deployment
* [API](https://github.com/siyuan-note/siyuan/blob/master/API.md)
* Community marketplace

Some features are only available to paid members, for more details please refer to [Pricing](https://b3log.org/siyuan/en/pricing.html).

## 🏗️ Architecture and Ecosystem

![SiYuan Arch](https://b3logfile.com/file/2023/05/SiYuan_Arch-Sgu8vXT.png &quot;SiYuan Arch&quot;)

| Project                                                  | Description           | Forks                                                                           | Stars                                                                                | 
|----------------------------------------------------------|-----------------------|---------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|
| [lute](https://github.com/88250/lute)                    | Editor engine         | ![GitHub forks](https://img.shields.io/github/forks/88250/lute)                 | ![GitHub Repo stars](https://img.shields.io/github/stars/88250/lute)                 |
| [chrome](https://github.com/siyuan-note/siyuan-chrome)   | Chrome/Edge extension | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/siyuan-chrome)  | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/siyuan-chrome)  |
| [bazaar](https://github.com/siyuan-note/bazaar)          | Community marketplace | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/bazaar)         | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/bazaar)         |
| [dejavu](https://github.com/siyuan-note/dejavu)          | Data repo             | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/dejavu)         | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/dejavu)         |
| [petal](https://github.com/siyuan-note/petal)            | Plugin API            | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/petal)          | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/petal)          |
| [android](https://github.com/siyuan-note/siyuan-android) | Android App           | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/siyuan-android) | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/siyuan-android) |
| [ios](https://github.com/siyuan-note/siyuan-ios)         | iOS App               | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/siyuan-ios)     | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/siyuan-ios)     |
| [harmony](https://github.com/siyuan-note/siyuan-harmony) | HarmonyOS App         | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/siyuan-harmony) | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/siyuan-harmony) |
| [riff](https://github.com/siyuan-note/riff)              | Spaced repetition     | ![GitHub forks](https://img.shields.io/github/forks/siyuan-note/riff)           | ![GitHub Repo stars](https://img.shields.io/github/stars/siyuan-note/riff)           |

## 🌟 Star History

&lt;a href=&quot;https://star-history.com/#siyuan-note/siyuan&amp;Date&quot;&gt;
 &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=siyuan-note/siyuan&amp;type=Date&amp;theme=dark&quot; /&gt;
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=siyuan-note/siyuan&amp;type=Date&quot; /&gt;
   &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=siyuan-note/siyuan&amp;type=Date&quot; /&gt;
 &lt;/picture&gt;
&lt;/a&gt;

## 🗺️ Roadmap

* [SiYuan development plan and progress](https://github.com/orgs/siyuan-note/projects/1)
* [SiYuan changelog](CHANGELOG.md)

## 🚀 Download Setup

It is recommended to give priority to installing through the application market on the desktop and mobile, so that you can upgrade the version with one click in the future.

### App Market

Mobile:

* [App Store](https://apps.apple.com/us/app/siyuan/id1583226508)
* [Google Play](https://play.google.com/store/apps/details?id=org.b3log.siyuan)
* [F-Droid](https://f-droid.org/packages/org.b3log.siyuan)

Desktop:

* [Microsoft Store](https://apps.microsoft.com/detail/9p7hpmxp73k4)

### Installation Package

* [B3log](https://b3log.org/siyuan/en/download.html)
* [GitHub](https://github.com/siyuan-note/siyuan/releases)

### Docker Hosting

&lt;details&gt;
&lt;summary&gt;Docker Deployment&lt;/summary&gt;

#### Overview

The easiest way to serve SiYuan on a server is to deploy it through Docker.

* Image name `b3log/siyuan`
* [Image URL](https://hub.docker.com/r/b3log/siyuan)

#### File structure

The overall program is located under `/opt/siyuan/`, which is basically the structure under the resources folder of the Electron installation package:

* appearance: icon, theme, languages
* guide: user guide document
* stage: interface and static resources
* kernel: kernel program

#### Entrypoint

The entry point is set when building the Docker image: `ENTRYPOINT [&quot;/opt/siyuan/entrypoint.sh&quot;]`. This script allows changing the `PUID` and `PGID` of the user that will run inside the container. This is especially relevant to solve permission issues when mounting directories from the host. The `PUID` (User ID) and `PGID` (Group ID) can be passed as environment variables, making it easier to ensure correct permissions when accessing host-mounted directories.

Use the following parameters when running the container with `docker run b3log/siyuan`:

* `--workspace`: Specifies the workspace folder path, mounted to the container via `-v` on the host
* `--accessAuthCode`: Specifies the access authorization code

More parameters can be found using `--help`. Here’s an example of a startup command with the new environment variables:

```bash
docker run -d \
  -v workspace_dir_host:workspace_dir_container \
  -p 6806:6806 \
  -e PUID=1001 -e PGID=1002 \
  b3log/siyuan \
  --workspace=workspace_dir_container \
  --accessAuthCode=xxx
```

* `PUID`: Custom user ID (optional, defaults to `1000` if not provided)
* `PGID`: Custom group ID (optional, defaults to `1000` if not provided)
* `workspace_dir_host`: The workspace folder path on the host
* `workspace_dir_container`: The path of the workspace folder in the container, as specified in `--workspace`
  * In alternative, it&#039;s possible to set the path via the `SIYUAN_WORKSPACE_PATH` env variable. The commandline will always have the priority, if both are set
* `accessAuthCode`: Access authorization code (please **be sure to modify**, otherwise anyone can access your data)
  * In alternative, it&#039;s possible to set the auth code via the `SIYUAN_ACCESS_AUTH_CODE` env variable. The commandline will always have the priority, if both are set
  * To disable the Access authorization code set the env variable `SIYUAN_ACCESS_AUTH_CODE_BYPASS=true`

To simplify things, it is recommended to configure the workspace folder path to be consistent on the host and container, such as having both `workspace_dir_host` and `workspace_dir_container` configured as `/siyuan/workspace`. The corresponding startup command would be:

```bash
docker run -d \
  -v /siyuan/workspace:/siyuan/workspace \
  -p 6806:6806 \
  -e PUID=1001 -e PGID=1002 \
  b3log/siyuan \
  --workspace=/siyuan/workspace/ \
  --accessAuthCode=xxx
```

#### Docker Compose

For users running Siyuan with Docker Compose, the environment variables `PUID` and `PGID` can be passed to customize the user and group IDs. Here&#039;s an example of a Docker Compose configuration:

```yaml
version: &quot;3.9&quot;
services:
  main:
    image: b3log/siyuan
    command: [&#039;--workspace=/siyuan/workspace/&#039;, &#039;--accessAuthCode=${AuthCode}&#039;]
    ports:
      - 6806:6806
    volumes:
      - /siyuan/workspace:/siyuan/workspace
    restart: unless-stopped
    environment:
      # A list of time zone identifiers can be found at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
      - TZ=${YOUR_TIME_ZONE}
      - PUID=${YOUR_USER_PUID}  # Customize user ID
      - PGID=${YOUR_USER_PGID}  # Customize group ID
```

In this setup:

* `PUID` and `PGID` are set dynamically and passed to the container
* If these variables are not provided, the default `1000` will be used

By specifying `PUID` and `PGID` in the environment, you avoid the need to explicitly set the `user` directive (`user: &#039;1000:1000&#039;`) in the compose file. The container will dynamically adjust the user and group based on these environment variables at startup.

#### User Permissions

In the image, the `entrypoint.sh` script ensures the creation of the `siyuan` user and group with the specified `PUID` and `PGID`. Therefore, when the host creates a workspace folder, pay attention to setting the user and group ownership of the folder to match the `PUID` and `PGID` you plan to use. For example:

```bash
chown -R 1001:1002 /siyuan/workspace
```

If you use custom `PUID` and `PGID` values, the entrypoint script will ensure that the correct user and group are created inside the container, and ownership of mounted volumes will be adjusted accordingly. There’s no need to manually pass `-u` in `docker run` or `docker-compose` as the environment variables will handle the customization.

#### Hidden port

Use NGINX reverse proxy to hide port 6806, please note:

* Configure WebSocket reverse proxy `/ws`

#### Note

* Be sure to confirm the correctness of the mounted volume, otherwise the data will be lost after the container is deleted
* Do not use URL rewriting for redirection, otherwise there may be problems with authentication, it is recommended to configure a reverse proxy
* If you encounter permission issues, verify that the `PUID` and `PGID` environment variables match the ownership of the mounted directories on your host system

#### Limitations

* Does not support desktop and mobile application connections, only supports use on browsers
* Export to PDF, HTML and Word formats is not supported
* Import Markdown file is not supported

&lt;/details&gt;

### Unraid Hosting

&lt;details&gt;
&lt;summary&gt;Unraid Deployment&lt;/summary&gt;

Note: First run `chown -R 1000:1000 /mnt/user/appdata/siyuan` in the terminal

Template reference:

```
Web UI: 6806
Container Port: 6806
Container Path: /home/siyuan
Host path: /mnt/user/appdata/siyuan
PUID: 1000
PGID: 1000
Publish parameters: --accessAuthCode=******(Access authorization code)
```

&lt;/details&gt;

### Insider Preview

We release insider preview before major updates, please visit [https://github.com/siyuan-note/insider](https://github.com/siyuan-note/insider).

## 🏘️ Community

* [English Discussion Forum](https://liuyun.io)
* [User community summary](https://liuyun.io/article/1687779743723)
* [Awesome SiYuan](https://github.com/siyuan-note/awesome)

## 🛠️ Development Guide

See [Development Guide](https://github.com/siyuan-note/siyuan/blob/master/.github/CONTRIBUTING.md).

## ❓ FAQ

### How does SiYuan store data?

The data is saved in the workspace folder, in the workspace data folder:

* `assets` is used to save all inserted assets
* `emojis` is used to save emoji images
* `snippets` is used to save code snippets
* `storage` is used to save query conditions, layouts and flashcards, etc.
* `templates` is used to save template snippets
* `widgets` is used to save widgets
* `plugins` is used to save plugins
* `public` is used to save public data
* The rest of the folders are the notebook folders created by the user, files with the suffix of `.sy` in the notebook folder are used to save the document data, and the data format is JSON

### Does it support data synchronization through a third-party sync disk?

Data synchronization through third-party synchronization disks is not supported, otherwise data may be corrupted.

Although it does not support third-party sync disks, it supports connect with third-party cloud storage (Member&#039;s privileges).

In addition, you can also consider manually exporting and importing data to achieve data synchronization:

* Desktop: &lt;kbd&gt;Settings&lt;/kbd&gt; - &lt;kbd&gt;Export&lt;/kbd&gt; - &lt;kbd&gt;Export Data&lt;/kbd&gt; / &lt;kbd&gt;Import Data&lt;/kbd&gt;
* Mobile: &lt;kbd&gt;Right column&lt;/kbd&gt; - &lt;kbd&gt;About&lt;/kbd&gt; - &lt;kbd&gt;Export Data&lt;/kbd&gt; / &lt;kbd&gt;Import Data&lt;/kbd&gt;

### Is SiYuan open source?

SiYuan is completely open source, and contributions are welcome:

* [User Interface and Kernel](https://github.com/siyuan-note/siyuan)
* [Android](https://github.com/siyuan-note/siyuan-android)
* [iOS](https://github.com/siyuan-note/siyuan-ios)
* [HarmonyOS](https://github.com/siyuan-note/siyuan-harmony)
* [Chrome Clipping Extension](https://github.com/siyuan-note/siyuan-chrome)

For more details, please refer to [Development Guide](https://github.com/siyuan-note/siyuan/blob/master/.github/CONTRIBUTING.md).

### How to upgrade to a new version?

* If installed via app store, please update via app store
* If it is installed through the installation package on the desktop, you can open the option of &lt;kbd&gt;Settings&lt;/kbd&gt; - &lt;kbd&gt;About&lt;/kbd&gt; - &lt;kbd&gt;Automatically download update installation package&lt;/kbd&gt;, so that SiYuan will automatically download The latest version of the installation package and prompts to install
* If it is installed by manual installation package, please download the installation package again to install

You can &lt;kbd&gt;Check update&lt;/kbd&gt; in &lt;kbd&gt;Settings&lt;/kbd&gt; - &lt;kbd&gt;About&lt;/kbd&gt; - &lt;kbd&gt;Current Version&lt;/kbd&gt;, or pay attention to [Official Download](https://b3log.org/siyuan/en/download.html) or [GitHub Releases](https://github.com/siyuan-note/siyuan/releases) to get the new version.

### What if some blocks (such as paragraph blocks in list items) cannot find the block icon?

The first sub-block under the list item is the block icon omitted. You can move the cursor into this block and trigger its block menu with &lt;kbd&gt;Ctrl+/&lt;/kbd&gt; .

### What should I do if the data repo key is lost?

* If the data repo key is correctly initialized on multiple devices before, the key is the same on all devices and can be set in &lt;kbd&gt;Settings&lt;/kbd&gt; - &lt;kbd&gt;About&lt;/kbd&gt; - &lt;kbd&gt;Data repo key&lt;/kbd&gt; - &lt;kbd&gt;Copy key string&lt;/kbd&gt; retrieve
* If it has not been configured correctly before (for example, the keys on multiple devices are inconsistent) or all devices are unavailable and the key string cannot be obtained, you can reset the key by following the steps below:

  1. Manually back up the data, you can use &lt;kbd&gt;Export Data&lt;/kbd&gt; or directly copy the &lt;kbd&gt;workspace/data/&lt;/kbd&gt; folder on the fil

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[DefinitelyTyped/DefinitelyTyped]]></title>
            <link>https://github.com/DefinitelyTyped/DefinitelyTyped</link>
            <guid>https://github.com/DefinitelyTyped/DefinitelyTyped</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:04 GMT</pubDate>
            <description><![CDATA[The repository for high quality TypeScript type definitions.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped/DefinitelyTyped</a></h1>
            <p>The repository for high quality TypeScript type definitions.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 50,418</p>
            <p>Forks: 30,497</p>
            <p>Stars today: 23 stars today</p>
            <h2>README</h2><pre># Definitely Typed

&gt; The repository for _high quality_ TypeScript type definitions.

_You can also read this README in [Español](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.es.md), [한국어](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ko.md), [Русский](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ru.md), [简体中文](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.zh-Hans.md), [Português](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.pt.md), [Italiano](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.it.md), [日本語](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ja.md) and [Français](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.fr.md)!_

_Link to [Admin manual](./docs/admin.md)_

## !!! Important! This repo has recently changed layout! !!!

Definitely Typed has recently changed to a proper `pnpm` monorepo; you may want to reread this document for changes to the layout of packages in this repo.

At the very least, you may want to `git clean -fdx` the repo (or `node ./scripts/clean-node-modules.js` on Windows) to clean up `node_modules` and run `pnpm install --filter .` to install the workspace root. See further sections for more info on `pnpm install`.

## Current status

This section tracks the health of the repository and publishing process.
It may be helpful for contributors experiencing any issues with their PRs and packages.

- Most recent build [type-checked/linted](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint) cleanly: [![Build status](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml/badge.svg?branch=master&amp;event=push)](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml?query=branch%3Amaster+event%3Apush)
- All packages are type-checking/linting cleanly: [![Build status](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml/badge.svg?branch=master&amp;event=schedule)](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml?query=branch%3Amaster+event%3Aschedule)
- All packages are being [published to npm](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/publisher): [![Publish Status](https://github.com/microsoft/DefinitelyTyped-tools/actions/workflows/publish-packages.yml/badge.svg?event=schedule)](https://github.com/microsoft/DefinitelyTyped-tools/actions/workflows/publish-packages.yml)
- Current [infrastructure status updates](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/44317)

If anything here seems wrong or any of the above are failing, please let us know in [the Definitely Typed channel on the TypeScript Community Discord server](https://discord.gg/typescript).

## What are declaration files and how do I get them?

See the [TypeScript handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html).

### npm

This is the preferred method. For example:

```sh
npm install --save-dev @types/node
```

To install typings for a scoped module, remove the `@` and add double-underscore after the scope. For example, to install typings for `@babel/preset-env`:

```sh
npm install --save-dev @types/babel__preset-env
```

The types should then be automatically included by the compiler.
You may need to add a `types` reference if you&#039;re not using modules:

```ts
/// &lt;reference types=&quot;node&quot; /&gt;
```

See more in the [handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html).

For an npm package &quot;foo&quot;, typings for it will be at &quot;@types/foo&quot;.

If your package has typings specified using the `types` or `typings` key in its `package.json`, the npm registry will display that the package has available bindings like so:

![image](https://user-images.githubusercontent.com/30049719/228748963-56fabfd1-9101-42c2-9891-b586b775b01e.png)

If you still can&#039;t find the typings, just look for any &quot;.d.ts&quot; files in the package and manually include them with a `/// &lt;reference path=&quot;&quot; /&gt;`.

### Support Window

Definitely Typed only tests packages on versions of TypeScript that are less than 2 years old.

&lt;img src=&quot;docs/support-window.svg#gh-light-mode-only&quot; style=&quot;width:100%&quot;&gt;
&lt;img src=&quot;docs/support-window.svg#gh-dark-mode-only&quot; style=&quot;width:100%&quot;&gt;

&lt;details&gt;
&lt;summary&gt;Older versions of TypeScript&lt;/summary&gt;

`@types` packages have tags for versions of TypeScript that they explicitly support, so you can usually get older versions of packages that predate the 2-year window.
For example, if you run `npm dist-tags @types/react`, you&#039;ll see that TypeScript 2.5 can use types for react@16.0, whereas TypeScript 2.6 and 2.7 can use types for react@16.4:

| Tag    | Version |
| ------ | ------- |
| latest | 16.9.23 |
| ts2.0  | 15.0.1  |
| ...    | ...     |
| ts2.5  | 16.0.36 |
| ts2.6  | 16.4.7  |
| ts2.7  | 16.4.7  |
| ...    | ...     |

#### TypeScript 1.*

- Manually download from the `master` branch of this repository and place them in your project
- ~~[Typings](https://github.com/typings/typings)~~ (use preferred alternatives, typings is deprecated)
- ~~[NuGet](https://nuget.org/packages?q=DefinitelyTyped)~~ (use preferred alternatives, nuget DT type publishing has been turned off)

You may need to add manual [references](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html).

&lt;/details&gt;

## How can I contribute?

Definitely Typed only works because of contributions by users like you!

### Testing

Before you share your improvement with the world, use the types yourself by creating a `typename.d.ts` file in your project and filling out its exports:

```ts
declare module &quot;libname&quot; {
    // Types inside here
    export function helloWorldMessage(): string;
}
```

#### Test editing an existing package

You can edit the types directly in `node_modules/@types/foo/index.d.ts` to validate your changes, then bring the changes to this repo with the steps below.

Alternatively, you can use [module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) to extend existing types from the DT module or use the `declare module` technique above which will override the version in `node_modules`.

#### Adding tests to a new package

Add to your `tsconfig.json`:

```json
&quot;baseUrl&quot;: &quot;types&quot;,
&quot;typeRoots&quot;: [&quot;types&quot;],
```

Create `types/foo/index.d.ts` containing declarations for the module &quot;foo&quot;.
You should now be able to import from `&quot;foo&quot;` in your code and it will route to the new type definition.
Then build _and_ run the code to make sure your type definition actually corresponds to what happens at runtime.

Once you&#039;ve tested your definitions with real code, make a [PR](#make-a-pull-request)
then follow the instructions to [edit an existing package](#edit-an-existing-package) or
[create a new package](#create-a-new-package).

### Make a pull request

Once you&#039;ve tested your package, you can share it on Definitely Typed.

1. [Fork](https://guides.github.com/activities/forking/) this repository.
1. Clone it.
   - The Definitely Typed repo is large; you may want to consider using a [&quot;blobless clone&quot;](https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/#user-content-blobless-clones) to save time and space by passing `--filter=blob:none` when running `git clone`.
1. Install [node](https://nodejs.org/).
1. Run `pnpm install`.
   - `pnpm install` will install the _entire_
     repository, including packages you may not be editing. If you&#039;d like to install only a subset,
     you can run `pnpm install -w --filter &quot;{./types/foo}...&quot;` to install `@types/foo` and all of
     its dependencies. If you need to run tests for packages that _depend_ on `@types/foo`, you can run `pnpm install -w --filter &quot;...{./types/foo}...&quot;` to pull in all related packages for testing.

&gt; [!NOTE]
&gt; If you are using Windows, you may find that `git clean` does not remove the `node_modules` directory or hangs when doing so. If you need to remove `node_modules`, you can run `pnpm clean-node-modules` to reset the repo.

We use a bot to let a large number of pull requests to DefinitelyTyped be handled entirely in a self-service manner. You can read more about [why and how here](https://devblogs.microsoft.com/typescript/changes-to-how-we-manage-definitelytyped/). Here is a handy reference showing the life cycle of a pull request to DT:

&lt;img src=&quot;https://raw.githubusercontent.com/microsoft/DefinitelyTyped-tools/main/packages/mergebot/docs/dt-mergebot-lifecycle.svg&quot;&gt;

#### Edit an existing package

- Make changes. Remember to [edit tests](#my-package-teststs).
  If you make breaking changes, do not forget to [update a major version](#if-a-library-is-updated-to-a-new-major-version-with-breaking-changes-how-should-i-update-its-type-declaration-package).
- [Run `pnpm test &lt;package to test&gt;`](#running-tests).

When you make a PR to edit an existing package, `dt-bot` should @-mention the package&#039;s owners.
If it doesn&#039;t, you can do so yourself in the comment associated with the PR.

#### Create a new package

If you are the library author and your package is written in TypeScript, [bundle the generated declaration files](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html) in your package instead of publishing to Definitely Typed.
You can also generate declaration files from JavaScript files, using JSDoc for type annotations.

If you are adding typings for an npm package, create a directory with the same name.
If the package you are adding typings for is not on npm, make sure the name you choose for it does not conflict with the name of a package on npm.
(You can use `npm info &lt;my-package&gt;` to check for the existence of the `&lt;my-package&gt;` package.)

Your package should have this structure:

| File                                           | Purpose                                                                                              |
| ---------------------------------------------- | ---------------------------------------------------------------------------------------------------- |
| `index.d.ts`                                   | This contains the typings for the package.                                                           |
| [`&lt;my-package&gt;-tests.ts`](#my-package-teststs) | This contains sample code which tests the typings. This code does _not_ run, but it is type-checked. |
| [`tsconfig.json`](#tsconfigjson)               | This allows you to run `tsc` within the package.                                                     |
| [`.eslintrc.json`](#linter-eslintrcjson)       | (Rarely) Needed only to disable lint rules written for eslint.                                       |
| [`package.json`](#packagejson)                 | Contains metadata for the package, including its name, version and dependencies.                     |
| [`.npmignore`](#npmignore)                     | Specifies which files are intended to be included in the package.                                    |

Generate these by running `npx dts-gen --dt --name &lt;my-package&gt; --template module`.
See all options at [dts-gen](https://github.com/microsoft/DefinitelyTyped-tools/tree/main/packages/dts-gen).

If you have `.d.ts` files besides `index.d.ts`, make sure that they are referenced either in `index.d.ts` or the tests.

Definitely Typed members routinely monitor for new PRs, though keep in mind that the number of other PRs may slow things down.

For a good example package, see [base64-js](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/a2ff1d2088143cbacc15786c7f3b0ec67179523c/types/base64-js).

#### Removing a package

When a package [bundles](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html) its own types, types should be removed from Definitely Typed to avoid confusion.

You can remove it by running `pnpm run not-needed &lt;typingsPackageName&gt; &lt;asOfVersion&gt; [&lt;libraryName&gt;]`.

- `&lt;typingsPackageName&gt;`: This is the name of the directory to delete.
- `&lt;asOfVersion&gt;`: A stub will be published to `@types/&lt;typingsPackageName&gt;` with this version. Should be higher than any currently published version and should be a version of `&lt;libraryName&gt;` on npm.
- `&lt;libraryName&gt;`: Name of npm package that replaces the Definitely Typed types. Usually this is identical to `&lt;typingsPackageName&gt;`, in which case you can omit it.

If a package was never on Definitely Typed, it does not need to be added to `notNeededPackages.json`.

#### Running tests

Test your changes by running `pnpm test &lt;package to test&gt;` where `&lt;package to test&gt;` is the name of your package.
You need to run this from the DefinitelyTyped directory because individual package.jsons don&#039;t define test scripts.

This script uses [dtslint](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint) to run the TypeScript compiler against your dts files.

Once you have all your changes ready, use `pnpm run test-all` to see how your changes affect other modules.

##### @arethetypeswrong/cli (`attw`) checks

dtslint includes module format and `package.json` configuration checks from [@arethetypeswrong/cli](https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli). The checks run only if a SemVer-major-compatible implementation package can be found on npm to compare against the DefinitelyTyped package. (DefinitelyTyped packages marked as `nonNpm` in their `package.json` are skipped.)

Many packages currently fail the `attw` checks and need to be fixed. To allow us to make incremental progress, failed `attw` checks do not fail the `dtslint` run when the package is listed in `failingPackages` in [`attw.json`](./attw.json), but they will still be reported in the `pnpm test my-package` output. If you fix the package, remove it from `failingPackages` so that `attw` checks can start failing `dtslint` runs.

All problems reported by `attw` have documentation linked in the output. Some rules of thumb to help avoid problems:

- The `package.json` in the DefinitelyTyped package must have matching `type` and `exports` fields if the implementation package uses them in its `package.json`. For example, if an implementation `package.json` looks like:

  ```json
  {
      &quot;name&quot;: &quot;my-package&quot;,
      &quot;version&quot;: &quot;1.0.1&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;main&quot;: &quot;dist/cjs/index.cjs&quot;,
      &quot;exports&quot;: {
          &quot;.&quot;: {
              &quot;import&quot;: &quot;./dist/esm/index.js&quot;,
              &quot;require&quot;: &quot;./dist/cjs/index.cjs&quot;
          },
          &quot;./subpath&quot;: {
              &quot;import&quot;: &quot;./dist/esm/subpath.js&quot;,
              &quot;require&quot;: &quot;./dist/cjs/subpath.cjs&quot;
          }
      }
  }
  ```

  then the DefinitelyTyped `package.json` should look something like:

  ```json5
  {
      &quot;name&quot;: &quot;@types/my-package&quot;,
      &quot;version&quot;: &quot;1.0.9999&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;types&quot;: &quot;index.d.ts&quot;,
      &quot;exports&quot;: {
          &quot;.&quot;: {
              &quot;import&quot;: &quot;./index.d.ts&quot;,
              &quot;require&quot;: &quot;./index.d.cts&quot;
          },
          &quot;./subpath&quot;: {
              &quot;import&quot;: &quot;./subpath.d.ts&quot;,
               &quot;require&quot;: &quot;./subpath.d.cts&quot;
          }
      }
  }
  ```

  Notice that each `exports` subpath is reflected, and each JavaScript file has a corresponding declaration file with a matching file extension—a `.d.ts` file types a `.js` file, not a `.mjs` or `.cjs` file!

- When the implementation package uses `module.exports = ...`, the DefinitelyTyped package should use `export =`, not `export default`. (Alternatively, if the `module.exports` is just an object of named properties, the DefinitelyTyped package can use a series of named exports.) The most common obstacle to correcting this problem is confusion about how to export types in addition to the primary export. For example, assume these types are incorrectly using `export default`:

  ```ts
  export interface Options {
      // ...
  }
  export default function doSomething(options: Options): void;
  ```

  Changing the `export default` to an `export =` creates an error:

  ```ts
  export interface Options {
      // ...
  }
  declare function doSomething(options: Options): void;
  export = doSomething;
  // ^^^^^^^^^^^^^^^^^
  // Error: An export assignment cannot be used in a module with other exported elements.
  ```

  To fix this, move the types inside a namespace with the same name as the function:

  ```ts
  declare namespace doSomething {
      export interface Options {
          // ...
      }
  }
  declare function doSomething(options: doSomething.Options): void;
  export = doSomething;
  ```

If you need help fixing a problem, please ask in the DefinitelyTyped channel on the [TypeScript Community Discord server](https://discord.gg/typescript).

#### Naming

If you are adding typings for an npm package, create a directory with the same name.
If the package you are adding typings for is not on npm, set `&quot;nonNpm&quot;: true` in the `package.json`, and make sure the name you choose for it does not conflict with the name of a package on npm.
(You can use `npm info &lt;my-package&gt;` to check for the existence of the `&lt;my-package&gt;` package.)

In rare occasions, `nonNpm` may be set to `&quot;conflict&quot;`, which incidates that there is a package on npm with the same name, but the types intentionally conflict with that package.
This can be true for packages which define an environment like `@types/node` or for dummy packages like `aws-lambda`. Avoid using `&quot;conflict&quot;` where possible.

#### `&lt;my-package&gt;-tests.ts`

There should be a `&lt;my-package&gt;-tests.ts` file, which is considered your test file, along with any `*.ts` files it imports.
If you don&#039;t see any test files in the module&#039;s folder, create a `&lt;my-package&gt;-tests.ts`.
These files are used to validate the API exported from the `*.d.ts` files which are shipped as `@types/&lt;my-package&gt;`.
They do not themselves ship.

Changes to the `*.d.ts` files should include a corresponding `*.ts` file change which shows the API being used, so that someone doesn&#039;t accidentally break code you depend on.
For example, this change to a function in a `.d.ts` file adding a new param to a function:

`index.d.ts`:

```diff
- export function twoslash(body: string): string
+ export function twoslash(body: string, config?: { version: string }): string
```

`&lt;my-package&gt;-tests.ts`:

```diff
import {twoslash} from &quot;./&quot;

// $ExpectType string
const result = twoslash(&quot;//&quot;)

+ // Handle options param
+ const resultWithOptions = twoslash(&quot;//&quot;, { version: &quot;3.7&quot; })
+ // When the param is incorrect
+ // @ts-expect-error
+ const resultWithOptions = twoslash(&quot;//&quot;, {  })
```

If you&#039;re wondering where to start with test code, the examples in the README of the original package are a great place to start.

You can [validate your changes](#running-tests) with `npm test &lt;package to test&gt;` from the root of this repo, which takes changed files into account.

Use `$ExpectType` to assert that an expression is of a given type and `@ts-expect-error` to assert that a compile error. Examples:

```js
// $ExpectType void
f(1);

// @ts-expect-error
f(&quot;one&quot;);
```

For more details, see [dtslint](https://github.com/Microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint#write-tests) readme.

##### Linter: `.eslintrc.json`

If for some reason a lint rule needs to be disabled, disable it for a specific line:

```ts
// eslint-disable-next-line no-const-enum
const enum Const {
    One,
}
const enum Enum { // eslint-disable-line no-const-enum
    Two,
}
```

You can still disable rules with an .eslintrc.json, but should not in new packages.
Disabling rules for the entire package makes it harder to review.

#### `tsconfig.json`

`tsconfig.json` should have `noImplicitAny`, `noImplicitThis`, `strictNullChecks` and `strictFunctionTypes` set to `true`.

You may edit the `tsconfig.json` to add new test files, to add `&quot;target&quot;: &quot;es6&quot;` (needed for async functions), to add to `&quot;lib&quot;` or

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[nrwl/nx]]></title>
            <link>https://github.com/nrwl/nx</link>
            <guid>https://github.com/nrwl/nx</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:03 GMT</pubDate>
            <description><![CDATA[Get to green PRs in half the time. Nx optimizes your builds, scales your CI, and fixes failed PRs. Built for developers and AI agents.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/nrwl/nx">nrwl/nx</a></h1>
            <p>Get to green PRs in half the time. Nx optimizes your builds, scales your CI, and fixes failed PRs. Built for developers and AI agents.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 27,093</p>
            <p>Forks: 2,602</p>
            <p>Stars today: 14 stars today</p>
            <h2>README</h2><pre>&lt;p style=&quot;text-align: center;&quot;&gt;
 &lt;picture&gt;
 &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg&quot;&gt;
 &lt;img alt=&quot;Nx - Smart Repos · Fast Builds&quot; src=&quot;https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg&quot; width=&quot;100%&quot;&gt;
 &lt;/picture&gt;
&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;

[![CircleCI](https://circleci.com/gh/nrwl/nx.svg?style=svg)](https://circleci.com/gh/nrwl/nx)
[![License](https://img.shields.io/npm/l/nx.svg?style=flat-square)]()
[![NPM Version](https://badge.fury.io/js/nx.svg)](https://www.npmjs.com/package/nx)
[![Semantic Release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic-release-e10079.svg?style=flat-square)]()
[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)
[![Join the chat at https://gitter.im/nrwl-nx/community](https://badges.gitter.im/nrwl-nx/community.svg)](https://gitter.im/nrwl-nx/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)
[![Join the Official Nx Discord Server](https://img.shields.io/discord/1143497901675401286?label=discord)](https://go.nx.dev/community)

&lt;/div&gt;

&lt;hr&gt;

# Smart Repos · Fast Builds

Get to green PRs in half the time. Nx optimizes your builds, scales your CI, and fixes failed PRs. Built for developers and AI agents.

Create a new Nx workspace with

```shell
npx create-nx-workspace
```

...or run

```
npx nx init
```

to add Nx to your existing workspace to get faster task scheduling, caching and more. More [in the docs](https://nx.dev/getting-started/intro).

## Learn about CI with Nx Cloud

[Nx Cloud](https://nx.dev/nx-cloud) connects directly to your existing CI setup, helping you scale your monorepos on CI by leveraging [remote caching](https://nx.dev/ci/features/remote-cache?utm_source=nxrepo&amp;utm_medium=readme&amp;utm_campaign=nxrepo), [task distribution across multiple machines](https://nx.dev/ci/features/distribute-task-execution?utm_source=nxrepo&amp;utm_medium=readme&amp;utm_campaign=nxrepo), [automated e2e test splitting](https://nx.dev/ci/features/split-e2e-tasks?utm_source=nxrepo&amp;utm_medium=readme&amp;utm_campaign=nxrepo) and [automated task flakiness detection](https://nx.dev/ci/features/flaky-tasks?utm_source=nxrepo&amp;utm_medium=readme&amp;utm_campaign=nxrepo)

Connect your existing Nx workspace with

```
npx nx connect
```

Learn more in the [Nx CI docs &amp;raquo;](https://nx.dev/ci/getting-started/intro?utm_source=nxrepo&amp;utm_medium=readme&amp;utm_campaign=nxrepo)

## Useful links

- [Our docs](https://nx.dev/docs)
- [Our blog](https://nx.dev/blog)
- [Our community discord, live stream,...](https://nx.dev/community)
- [Our YouTube channel](https://www.youtube.com/@NxDevtools)
- [Our Twitter/X](https://x.com/nxdevtools)

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://www.youtube.com/@nxdevtools/videos&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;./images/nx-courses-and-videos.svg&quot; 
width=&quot;100%&quot; alt=&quot;Nx - Smart Repos · Fast Builds&quot;&gt;&lt;/a&gt;&lt;/p&gt;

## Want to help?

If you want to file a bug or submit a PR, read up on
our [guidelines for contributing](https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md) and watch this video that will
help you get started.

&lt;a href=&quot;https://www.youtube.com/watch?v=8LCA_4qxc08&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nrwl/nx/master/images/how-to-contribute.png&quot; width=&quot;600&quot; alt=&quot;Nx - How to contribute video&quot;&gt;&lt;/p&gt;
&lt;/a&gt;

## Core Team

| Victor Savkin                                                          | Jason Jean                                                            | Benjamin Cabanes                                                            | Jack Hsu                                                          |
| ---------------------------------------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------------------- | ----------------------------------------------------------------- |
| ![Victor Savkin](https://avatars1.githubusercontent.com/u/35996?s=160) | ![Jason Jean](https://avatars2.githubusercontent.com/u/8104246?s=160) | ![Benjamin Cabanes](https://avatars2.githubusercontent.com/u/3447705?s=160) | ![Jack Hsu](https://avatars0.githubusercontent.com/u/53559?s=160) |
| [vsavkin](https://github.com/vsavkin)                                  | [FrozenPandaz](https://github.com/FrozenPandaz)                       | [bcabanes](https://github.com/bcabanes)                                     | [jaysoo](https://github.com/jaysoo)                               |

| James Henry                                                              | Jon Cammisuli                                                            | Max Kless                                                            | Juri Strumpflohner                                                           |
| ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | -------------------------------------------------------------------- | ---------------------------------------------------------------------------- |
| ![James Henry](https://avatars.githubusercontent.com/u/900523?s=160&amp;v=4) | ![Jon Cammisuli](https://avatars2.githubusercontent.com/u/4332460?s=160) | ![Max Kless](https://avatars.githubusercontent.com/u/34165455?s=160) | ![Juri Strumpflohner](https://avatars1.githubusercontent.com/u/542458?s=160) |
| [JamesHenry](https://github.com/JamesHenry)                              | [cammisuli](https://github.com/cammisuli)                                | [MaxKless](https://github.com/MaxKless)                              | [juristr](https://github.com/juristr)                                        |

| Philip Fulcher                                                            | Caleb Ukle                                                            | Colum Ferry                                                            | Steven Nance                                                           |
| ------------------------------------------------------------------------- | --------------------------------------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------- |
| ![Philip Fulcher](https://avatars1.githubusercontent.com/u/1536471?s=160) | ![Caleb Ukle](https://avatars.githubusercontent.com/u/23272162?s=160) | ![Colum Ferry](https://avatars.githubusercontent.com/u/12140467?s=160) | ![Steven Nance](https://avatars.githubusercontent.com/u/1036428?s=160) |
| [philipjfulcher](https://github.com/philipjfulcher)                       | [barbados-clemens](https://github.com/barbados-clemens)               | [Coly010](https://github.com/Coly010)                                  | [llwt](https://github.com/llwt)                                        |

| Miroslav Jonaš                                                          | Leosvel Pérez Espinosa                                                            | Zachary DeRose                                                           | Craigory Coppola                                                           |
| ----------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | -------------------------------------------------------------------------- |
| ![Miroslav Jonaš](https://avatars.githubusercontent.com/u/881612?s=160) | ![Leosvel Pérez Espinosa](https://avatars.githubusercontent.com/u/12051310?s=160) | ![Zachary DeRose](https://avatars.githubusercontent.com/u/3788405?s=160) | ![Craigory Coppola](https://avatars.githubusercontent.com/u/6933928?s=160) |
| [meeroslav](https://github.com/meeroslav)                               | [leosvelperez](https://github.com/leosvelperez)                                   | [ZackDeRose](https://github.com/ZackDeRose)                              | [AgentEnder](https://github.com/AgentEnder)                                |

| Chau Tran                                                            | Nicole Oliver                                                           | Rares Matei                                                           | Altan Stalker                                                           |
| -------------------------------------------------------------------- | ----------------------------------------------------------------------- | --------------------------------------------------------------------- | ----------------------------------------------------------------------- |
| ![Chau Tran](https://avatars.githubusercontent.com/u/25516557?s=160) | ![Nicole Oliver](https://avatars.githubusercontent.com/u/4440385?s=160) | ![Rares Matei](https://avatars.githubusercontent.com/u/5975076?s=160) | ![Altan Stalker](https://avatars.githubusercontent.com/u/6324206?s=160) |
| [nartc](https://github.com/nartc)                                    | [nixallover](https://github.com/nixallover)                             | [rarmatei](https://github.com/rarmatei)                               | [StalkAltan](https://github.com/StalkAltan)                             |

| Josh VanAllen                                                           | Austin Fahsl                                                           | Louie Weng                                                            |
| ----------------------------------------------------------------------- | ---------------------------------------------------------------------- | --------------------------------------------------------------------- |
| ![Josh VanAllen](https://avatars.githubusercontent.com/u/5290334?s=160) | ![Austin Fahsl](https://avatars.githubusercontent.com/u/6913035?s=160) | ![Louie Weng](https://avatars.githubusercontent.com/u/56288712?s=160) |
| [joshvanallen](https://github.com/joshvanallen)                         | [fahslaj](https://github.com/fahslaj)                                  | [lourw](https://github.com/lourw)                                     |
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[coinbase/x402]]></title>
            <link>https://github.com/coinbase/x402</link>
            <guid>https://github.com/coinbase/x402</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:02 GMT</pubDate>
            <description><![CDATA[A payments protocol for the internet. Built on HTTP.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/coinbase/x402">coinbase/x402</a></h1>
            <p>A payments protocol for the internet. Built on HTTP.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,204</p>
            <p>Forks: 240</p>
            <p>Stars today: 95 stars today</p>
            <h2>README</h2><pre># x402 payments protocol

&gt; &quot;1 line of code to accept digital dollars. No fee, 2 second settlement, $0.001 minimum payment.&quot;

```typescript
app.use(
  // How much you want to charge, and where you want the funds to land
  paymentMiddleware(&quot;0xYourAddress&quot;, { &quot;/your-endpoint&quot;: &quot;$0.01&quot; })
);
// That&#039;s it! See examples/typescript/servers/express.ts for a complete example. Instruction below for running on base-sepolia.
```

## Philosophy

Payments on the internet are fundamentally flawed. Credit Cards are high friction, hard to accept, have minimum payments that are far too high, and don&#039;t fit into the programmatic nature of the internet.
It&#039;s time for an open, internet-native form of payments. A payment rail that doesn&#039;t have high minimums + % based fee. Payments that are amazing for humans and AI agents.

## Principles

- **Open standard:** the x402 protocol will never force reliance on a single party
- **HTTP Native:** x402 is meant to seamlessly complement the existing HTTP request made by traditional web services, it should not mandate additional requests outside the scope of a typical client / server flow.
- **Chain and token agnostic:** we welcome contributions that add support for new chains, signing standards, or schemes, so long as they meet our acceptance criteria laid out in [CONTRIBUTING.md](https://github.com/coinbase/x402/blob/main/CONTRIBUTING.md)
- **Trust minimizing:** all payment schemes must not allow for the facilitator or resource server to move funds, other than in accordance with client intentions
- **Easy to use:** x402 needs to be 10x better than existing ways to pay on the internet. This means abstracting as many details of crypto as possible away from the client and resource server, and into the facilitator. This means the client/server should not need to think about gas, rpc, etc.

## Ecosystem

The x402 ecosystem is growing! Check out our [ecosystem page](https://x402.org/ecosystem) to see projects building with x402, including:

- Client-side integrations
- Services and endpoints
- Ecosystem infrastructure and tooling
- Learning and community resources

Want to add your project to the ecosystem? See our [demo site README](https://github.com/coinbase/x402/tree/main/typescript/site#adding-your-project-to-the-ecosystem) for detailed instructions on how to submit your project.

**Roadmap:** see [ROADMAP.md](https://github.com/coinbase/x402/blob/main/ROADMAP.md)

## Terms:

- `resource`: Something on the internet. This could be a webpage, file server, RPC service, API, any resource on the internet that accepts HTTP / HTTPS requests.
- `client`: An entity wanting to pay for a resource.
- `facilitator server`: A server that facilitates verification and execution of on-chain payments.
- `resource server`: An HTTP server that provides an API or other resource for a client.

## Technical Goals:

- Permissionless and secure for clients and servers
- Gasless for client and resource servers
- Minimal integration for the resource server and client (1 line for the server, 1 function for the client)
- Ability to trade off speed of response for guarantee of payment
- Extensible to different payment flows and chains

## V1 Protocol

The `x402` protocol is a chain agnostic standard for payments on top of HTTP, leverage the existing `402 Payment Required` HTTP status code to indicate that a payment is required for access to the resource.

It specifies:

1. A schema for how servers can respond to clients to facilitate payment for a resource (`PaymentRequirements`)
2. A standard header `X-PAYMENT` that is set by clients paying for resources
3. A standard schema and encoding method for data in the `X-PAYMENT` header
4. A recommended flow for how payments should be verified and settled by a resource server
5. A REST specification for how a resource server can perform verification and settlement against a remote 3rd party server (`facilitator`)
6. A specification for a `X-PAYMENT-RESPONSE` header that can be used by resource servers to communicate blockchain transactions details to the client in their HTTP response

### V1 Protocol Sequencing

![](./static/x402-protocol-flow.png)

The following outlines the flow of a payment using the `x402` protocol. Note that steps (1) and (2) are optional if the client already knows the payment details accepted for a resource.

1. `Client` makes an HTTP request to a `resource server`.

2. `Resource server` responds with a `402 Payment Required` status and a `Payment Required Response` JSON object in the response body.

3. `Client` selects one of the `paymentRequirements` returned by the server response and creates a `Payment Payload` based on the `scheme` of the `paymentRequirements` they have selected.

4. `Client` sends the HTTP request with the `X-PAYMENT` header containing the `Payment Payload` to the resource server.

5. `Resource server` verifies the `Payment Payload` is valid either via local verification or by POSTing the `Payment Payload` and `Payment Requirements` to the `/verify` endpoint of a `facilitator server`.

6. `Facilitator server` performs verification of the object based on the `scheme` and `network` of the `Payment Payload` and returns a `Verification Response`.

7. If the `Verification Response` is valid, the resource server performs the work to fulfill the request. If the `Verification Response` is invalid, the resource server returns a `402 Payment Required` status and a `Payment Required Response` JSON object in the response body.

8. `Resource server` either settles the payment by interacting with a blockchain directly, or by POSTing the `Payment Payload` and `Payment PaymentRequirements` to the `/settle` endpoint of a `facilitator server`.

9. `Facilitator server` submits the payment to the blockchain based on the `scheme` and `network` of the `Payment Payload`.

10. `Facilitator server` waits for the payment to be confirmed on the blockchain.

11. `Facilitator server` returns a `Payment Execution Response` to the resource server.

12. `Resource server` returns a `200 OK` response to the `Client` with the resource they requested as the body of the HTTP response, and a `X-PAYMENT-RESPONSE` header containing the `Settlement Response` as Base64 encoded JSON if the payment was executed successfully.

### Type Specifications

#### Data types

**Payment Required Response**

```json5
{
  // Version of the x402 payment protocol
  x402Version: int,

  // List of payment requirements that the resource server accepts. A resource server may accept on multiple chains, or in multiple currencies.
  accepts: [paymentRequirements]

  // Message from the resource server to the client to communicate errors in processing payment
  error: string
}
```

**paymentRequirements**

```json5
{
  // Scheme of the payment protocol to use
  scheme: string;

  // Network of the blockchain to send payment on
  network: string;

  // Maximum amount required to pay for the resource in atomic units of the asset
  maxAmountRequired: uint256 as string;

  // URL of resource to pay for
  resource: string;

  // Description of the resource
  description: string;

  // MIME type of the resource response
  mimeType: string;

  // Output schema of the resource response
  outputSchema?: object | null;

  // Address to pay value to
  payTo: string;

  // Maximum time in seconds for the resource server to respond
  maxTimeoutSeconds: number;

  // Address of the EIP-3009 compliant ERC20 contract
  asset: string;

  // Extra information about the payment details specific to the scheme
  // For `exact` scheme on a EVM network, expects extra to contain the records `name` and `version` pertaining to asset
  extra: object | null;
}
```

**`Payment Payload`** (included as the `X-PAYMENT` header in base64 encoded json)

```json5
{
  // Version of the x402 payment protocol
  x402Version: number;

  // scheme is the scheme value of the accepted `paymentRequirements` the client is using to pay
  scheme: string;

  // network is the network id of the accepted `paymentRequirements` the client is using to pay
  network: string;

  // payload is scheme dependent
  payload: &lt;scheme dependent&gt;;
}
```

#### Facilitator Types &amp; Interface

A `facilitator server` is a 3rd party service that can be used by a `resource server` to verify and settle payments, without the `resource server` needing to have access to a blockchain node or wallet.

**POST /verify**. Verify a payment with a supported scheme and network:

- Request body JSON:
  ```json5
  {
    x402Version: number;
    paymentHeader: string;
    paymentRequirements: paymentRequirements;
  }
  ```
- Response:
  ```json5
  {
    isValid: boolean;
    invalidReason: string | null;
  }
  ```

**POST /settle**. Settle a payment with a supported scheme and network:

- Request body JSON:

  ```json5
  {
    x402Version: number;
    paymentHeader: string;
    paymentRequirements: paymentRequirements;
  }
  ```

- Response:

  ```json5
  {
    // Whether the payment was successful
    success: boolean;

    // Error message from the facilitator server
    error: string | null;

    // Transaction hash of the settled payment
    txHash: string | null;

    // Network id of the blockchain the payment was settled on
    networkId: string | null;
  }
  ```

**GET /supported**. Get supported payment schemes and networks:

- Response:
  ```json5
  {
    kinds: [
      {
        &quot;scheme&quot;: string,
        &quot;network&quot;: string,
      }
    ]
  }
  ```

### Schemes

A scheme is a logical way of moving money.

Blockchains allow for a large number of flexible ways to move money. To help facilitate an expanding number of payment use cases, the `x402` protocol is extensible to different ways of settling payments via its `scheme` field.

Each payment scheme may have different operational functionality depending on what actions are necessary to fulfill the payment.
For example `exact`, the first scheme shipping as part of the protocol, would have different behavior than `upto`. `exact` transfers a specific amount (ex: pay $1 to read an article), while a theoretical `upto` would transfer up to an amount, based on the resources consumed during a request (ex: generating tokens from an LLM).

See `specs/schemes` for more details on schemes, and see `specs/schemes/exact/scheme_exact_evm.md` to see the first proposed scheme for exact payment on EVM chains.

### Schemes vs Networks

Because a scheme is a logical way of moving money, the way a scheme is implemented can be different for different blockchains. (ex: the way you need to implement `exact` on Ethereum is very different from the way you need to implement `exact` on Solana).

Clients and facilitators must explicitly support different `(scheme, network)` pairs in order to be able to create proper payloads and verify / settle payments.

## Running example

**Requirements:** Node.js v24 or higher

1. From `examples/typescript` run `pnpm install` and `pnpm build` to ensure all dependent packages and examples are setup.

2. Select a server, i.e. express, and `cd` into that example. Add your server&#039;s ethereum address to get paid to into the `.env` file, and then run `pnpm dev` in that directory.

3. Select a client, i.e. axios, and `cd` into that example. Add your private key for the account making payments into the `.env` file, and then run `pnpm dev` in that directory.

You should see activities in the client terminal, which will display a weather report.

## Running tests

1. Navigate to the typescript directory: `cd typescript`
2. Install dependencies: `pnpm install`
3. Run the unit tests: `pnpm test`

This will run the unit tests for the x402 packages.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[yangshun/tech-interview-handbook]]></title>
            <link>https://github.com/yangshun/tech-interview-handbook</link>
            <guid>https://github.com/yangshun/tech-interview-handbook</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:01 GMT</pubDate>
            <description><![CDATA[💯 Curated coding interview preparation materials for busy software engineers]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/yangshun/tech-interview-handbook">yangshun/tech-interview-handbook</a></h1>
            <p>💯 Curated coding interview preparation materials for busy software engineers</p>
            <p>Language: TypeScript</p>
            <p>Stars: 130,411</p>
            <p>Forks: 15,825</p>
            <p>Stars today: 164 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot;&gt;Tech Interview Handbook&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.techinterviewhandbook.org/&quot;&gt;
    &lt;img src=&quot;assets/logo.svg&quot; alt=&quot;Tech Interview Handbook&quot; width=&quot;400&quot; /&gt;
  &lt;/a&gt;
  &lt;br /&gt;
  &lt;h3&gt;
    &lt;a href=&quot;https://www.techinterviewhandbook.org/&quot;&gt;Read on the website&lt;/a&gt;
  &lt;/h3&gt;
  &lt;p&gt;
    Join/follow us on &lt;a href=&quot;https://discord.com/invite/usMqNaPczq&quot; target=&quot;_blank&quot;&gt;Discord&lt;/a&gt; | &lt;a href=&quot;https://twitter.com/techinterviewhb&quot; target=&quot;_blank&quot;&gt;𝕏 (Twitter)&lt;/a&gt; | &lt;a href=&quot;https://t.me/techinterviewhandbook&quot; target=&quot;_blank&quot;&gt;Telegram&lt;/a&gt; |  &lt;a href=&quot;https://facebook.com/techinterviewhandbook&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

---

&lt;a href=&quot;https://www.techinterviewhandbook.org/software-engineering-interview-guide/&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;assets/start-reading-button.jpg&quot; alt=&quot;Start Reading Tech Interview Handbook&quot; /&gt;
&lt;/a&gt;

## What is this?

Not everyone has the time to do a few hundred LeetCode questions. Here are _free and curated_ technical interview preparation materials for busy engineers, brought to you by me, the author of [Blind 75](https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU). Over 1,000,000 people have benefitted from this handbook!

Besides the usual algorithm questions, other **awesome** stuff includes:

- [Best practice questions](https://www.techinterviewhandbook.org/coding-interview-study-plan/) for coding interviews
- [Grind 75](https://www.techinterviewhandbook.org/grind75/) - the next evolution of Blind 75, bigger and better
- [How to prepare](https://www.techinterviewhandbook.org/coding-interview-prep/) for coding interviews
- [Coding interview best practices](https://www.techinterviewhandbook.org/coding-interview-cheatsheet/) - Straight-to-the-point Do&#039;s and Don&#039;ts
- [Algorithm cheatsheets and tips](https://www.techinterviewhandbook.org/algorithms/study-cheatsheet/) categorized by topic
- [Step-by-step Software Engineer resume guide](https://www.techinterviewhandbook.org/resume/) to prepare a FAANG-ready resume
- [Behavioral questions](https://www.techinterviewhandbook.org/behavioral-interview-questions/) asked by the top tech companies
- [Front end interview preparation](https://www.frontendinterviewhandbook.com)

Help from you in contributing content would be very much appreciated!

## Why would you read this?

This repository has **practical** content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful.

The information in this repository is condensed. Ultimately, the key to succeeding in technical interviews is consistent practice and I don&#039;t want to bore you with too many words. I tell you the minimum you need to know on how to go about navigating the interview process, you go and practice and land your dream job.

## Who is this for?

Anybody who wants to land a job at a tech company but is new to technical interviews, seasoned engineers who have not been on the other side of the interviewing table in a while and want to get back into the game, or anyone who wants to be better at technical interviewing.

---

&lt;div align=&quot;center&quot;&gt;
  &lt;h3&gt;💡 Stop grinding mindlessly! Study coding question patterns efficiently with
    &lt;a href=&quot;https://www.designgurus.io/course/grokking-the-coding-interview?aff=kJSIoU&quot;&gt;Grokking the Coding Interview&lt;/a&gt; by Design Gurus 💡
  &lt;/h3&gt;
&lt;/div&gt;

---

## How is this repository different?

There are many awesome books like &quot;Cracking the Coding Interview&quot; and interview-related repositories out there on GitHub, what makes this repository different? The difference is that many existing interview repositories contain mainly links to external resources whereas this repository contains top-quality curated content directly for your consumption.

Also, existing resources focus mainly on algorithm questions and lack coverage for more domain-specific and non-technical questions. This handbook aims to cover content beyond the typical algorithmic coding questions. 😎

## Looking for interview courses?

### [AlgoMonster](https://shareasale.com/r.cfm?b=1873647&amp;u=3114753&amp;m=114505&amp;urllink=&amp;afftrack=)

AlgoMonster aims to help you ace the technical interview **in the shortest time possible**. By Google engineers, AlgoMonster uses a data-driven approach to teach you the most useful key question patterns and has contents to help you quickly revise basic data structures and algorithms. Best of all, AlgoMonster is not subscription-based - pay a one-time fee and get **lifetime access**. [**Join today for a 70% discount →**](https://shareasale.com/r.cfm?b=1873647&amp;u=3114753&amp;m=114505&amp;urllink=&amp;afftrack=)

### [Grokking the Coding Interview: Patterns for Coding Questions](https://www.designgurus.io/course/grokking-the-coding-interview?aff=kJSIoU)

This course by Design Gurus expands upon the questions on the recommended practice questions but approaches the practicing from a questions pattern perspective, which is an approach I also agree with for learning and have personally used to get better at coding interviews. The course allows you to practice selected questions in Java, Python, C++, JavaScript and also provides sample solutions in those languages. **Learn and understand patterns, not memorize answers!** [**Get lifetime access today →**](https://www.designgurus.io/course/grokking-the-coding-interview?aff=kJSIoU)

## Looking for Front End content?

Front-end-related content has been moved to a separate website - [Front End Interview Handbook](https://frontendinterviewhandbook.com).

## Looking for System Design content?

We&#039;re still working on System Design content. In the meanwhile, check out [ByteByteGo&#039;s System Design Interview course](https://bytebytego.com?fpr=techinterviewhandbook) or Design Gurus&#039; [Grokking the System Design Interview course](https://www.designgurus.io/course/grokking-the-system-design-interview?aff=kJSIoU), which in our opinion are among the most useful resources for getting started on system design interviews preparation.

## Contents

A [Docusaurus](https://github.com/facebook/docusaurus) website has been created to provide a better reading experience. Check out the website [here](https://www.techinterviewhandbook.org)!

---

&lt;div align=&quot;center&quot;&gt;
  &lt;h3&gt;💡 Stop the grind and study with a plan! Developed by Google engineers, &lt;a href=&quot;https://shareasale.com/r.cfm?b=1873647&amp;u=3114753&amp;m=114505&amp;urllink=&amp;afftrack=&quot;&gt;AlgoMonster&lt;/a&gt; is the fastest way to get a software engineering job. &lt;a href=&quot;https://shareasale.com/r.cfm?b=1873647&amp;u=3114753&amp;m=114505&amp;urllink=&amp;afftrack=&quot;&gt;Join today for a 70% discount!&lt;/a&gt; 💡&lt;/h3&gt;
&lt;/div&gt;

---

## Related

If you are interested in how data structures are implemented, check out [Lago](https://github.com/yangshun/lago), a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that can be used in production and also a reference resource for revising Data Structures and Algorithms.

## Contributing

There are no formal contributing guidelines at the moment as things are still in flux and we might find a better approach to structure content as we go along. You are welcome to contribute whatever you think will be helpful to fellow engineers. If you would like to contribute content for different domains, feel free to create an issue or submit a pull request and we can discuss further.

### Contributors

This project exists thanks to all the people who contributed. [[Contribute](CONTRIBUTING.md)]. &lt;a href=&quot;https://github.com/yangshun/tech-interview-handbook/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/contributors.svg?width=890&amp;button=false&quot;&gt;&lt;/a&gt;

### Backers

Thank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/tech-interview-handbook#backer)]

&lt;a href=&quot;https://opencollective.com/tech-interview-handbook#backers&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/backers.svg?width=890&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;https://www.buymeacoffee.com/yangshun&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: auto !important; width: auto !important;&quot;&gt;&lt;/a&gt;

### Sponsors

Support this project by becoming a sponsor. Your logo/profile picture will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/tech-interview-handbook#sponsor)]

&lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/0/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/1/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/2/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/3/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/4/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/5/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/6/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/7/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/8/avatar.svg&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/tech-interview-handbook/sponsor/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/tech-interview-handbook/sponsor/9/avatar.svg&quot;&gt;&lt;/a&gt;

## Disclaimer

I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Meta).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[TanStack/router]]></title>
            <link>https://github.com/TanStack/router</link>
            <guid>https://github.com/TanStack/router</guid>
            <pubDate>Thu, 25 Sep 2025 00:05:00 GMT</pubDate>
            <description><![CDATA[🤖 Fully typesafe Router for React (and friends) w/ built-in caching, 1st class search-param APIs, client-side cache integration and isomorphic rendering.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/TanStack/router">TanStack/router</a></h1>
            <p>🤖 Fully typesafe Router for React (and friends) w/ built-in caching, 1st class search-param APIs, client-side cache integration and isomorphic rendering.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 11,172</p>
            <p>Forks: 1,205</p>
            <p>Stars today: 28 stars today</p>
            <h2>README</h2><pre>&lt;img src=&quot;https://static.scarf.sh/a.png?x-pxid=d988eb79-b0fc-4a2b-8514-6a1ab932d188&quot; /&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;

&lt;img
src=&quot;./media/header_router.png&quot;
alt=&quot;TanStack Router&quot;
/&gt;

## TanStack Router

A modern router designed for type safety, data‑driven navigation, and seamless developer experience.

- End‑to‑end type safety (routes, params, loaders)
- Schema‑driven search params with validation
- Built‑in caching, prefetching &amp; invalidation
- Nested layouts, transitions &amp; error boundaries

### [Read the Router Docs →](https://tanstack.com/router)

&lt;/td&gt;
&lt;td&gt;

&lt;img
src=&quot;./media/header_start.png&quot;
alt=&quot;TanStack Start&quot;
/&gt;

## TanStack Start

A full‑stack framework built on Router, designed for server rendering, streaming, and production‑ready deployments.

- Full‑document SSR &amp; streaming
- Server functions &amp; end‑to‑end type safety
- Deployment‑ready bundling &amp; builds
- All the power of TanStack Router, plus full‑stack features

### [Read the Start Docs →](https://tanstack.com/start)

&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;br /&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://npmjs.com/package/@tanstack/react-router&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/npm/dm/@tanstack/react-router.svg&quot; alt=&quot;npm downloads&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/tanstack/router&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/stars/tanstack/router.svg?style=social&amp;label=Star&quot; alt=&quot;GitHub stars&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://bundlephobia.com/result?p=@tanstack/react-router&quot;&gt;
    &lt;img src=&quot;https://badgen.net/bundlephobia/minzip/@tanstack/react-router&quot; alt=&quot;Bundle size&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;a href=&quot;#badge&quot;&gt;
    &lt;img alt=&quot;semantic-release&quot; src=&quot;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://bestofjs.org/projects/tanstack-router&quot;&gt;&lt;img alt=&quot;Best of JS&quot; src=&quot;https://img.shields.io/endpoint?url=https://bestofjs-serverless.now.sh/api/project-badge?fullName=TanStack%2Frouter%26since=daily&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://twitter.com/tan_stack&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/tan_stack.svg?style=social&quot; alt=&quot;Follow @TanStack&quot;/&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;

### [Become a Sponsor!](https://github.com/sponsors/tannerlinsley/)

&lt;/div&gt;

## Get Involved

- We welcome issues and pull requests!
- Participate in [GitHub discussions](https://github.com/TanStack/router/discussions)
- Chat with the community on [Discord](https://discord.com/invite/WrRKjPJ)
- See [CONTRIBUTING.md](./CONTRIBUTING.md) for setup instructions

## Partners

&lt;table align=&quot;center&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;
        &lt;a href=&quot;https://www.coderabbit.ai/?via=tanstack&amp;dub_id=aCcEEdAOqqutX6OS&quot;&gt;
			&lt;picture&gt;
			  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://tanstack.com/assets/coderabbit-dark-CMcuvjEy.svg&quot; height=&quot;40&quot; /&gt;
			  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://tanstack.com/assets/coderabbit-light-DVMJ2jHi.svg&quot; height=&quot;40&quot; /&gt;
			  &lt;img src=&quot;https://tanstack.com/assets/coderabbit-dark-CMcuvjEy.svg&quot; height=&quot;40&quot; alt=&quot;CodeRabbit&quot; /&gt;
			&lt;/picture&gt;        
		&lt;/a&gt;
    &lt;/td&gt;
    &lt;td padding=&quot;20&quot;&gt;
      &lt;a href=&quot;https://www.cloudflare.com?utm_source=tanstack&quot;&gt;
         &lt;picture&gt;
    		  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://tanstack.com/assets/cloudflare-white-DQDB7UaL.svg&quot; height=&quot;60&quot; /&gt;
    		  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://tanstack.com/assets/cloudflare-black-CPufaW0B.svg&quot; height=&quot;60&quot; /&gt;
    		  &lt;img src=&quot;https://tanstack.com/assets/cloudflare-black-CPufaW0B.svg&quot; height=&quot;60&quot; alt=&quot;Cloudflare&quot; /&gt;
    		&lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://netlify.com?utm_source=tanstack&quot;&gt;
      &lt;picture&gt;
        &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/netlify-dark.svg&quot; height=&quot;70&quot;/&gt;
        &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/netlify.svg&quot; height=&quot;70&quot;/&gt;
        &lt;img src=&quot;https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/netlify-dark.svg&quot; height=&quot;70&quot; alt=&quot;Netlify&quot; /&gt;
      &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://neon.tech?utm_source=tanstack&quot;&gt;
		  &lt;picture&gt;
	        &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/neon-dark.svg&quot; height=&quot;50&quot;/&gt;
	        &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/neon.svg&quot; height=&quot;50&quot;/&gt;
	        &lt;img src=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/neon.svg&quot; height=&quot;50&quot; alt=&quot;Neon&quot; /&gt;
		  &lt;/picture&gt;
	  &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://go.clerk.com/wOwHtuJ&quot;&gt;
        &lt;picture&gt;
          &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://tanstack.com/assets/clerk-logo-dark-CRE22T_2.svg&quot; height=&quot;40&quot;/&gt;
          &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/clerk.svg&quot; height=&quot;40&quot;/&gt;
          &lt;img src=&quot;https://tanstack.com/assets/clerk-logo-dark-CRE22T_2.svg&quot; height=&quot;40&quot; alt=&quot;Clerk&quot; /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://convex.dev?utm_source=tanstack&quot;&gt;
        &lt;picture&gt;
          &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/convex-white.svg&quot; height=&quot;30&quot;/&gt;
          &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/convex.svg&quot; height=&quot;30&quot;/&gt;
          &lt;img src=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/convex.svg&quot; height=&quot;30&quot; alt=&quot;Convex&quot; /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://sentry.io?utm_source=tanstack&quot;&gt;
        &lt;picture&gt;
           &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/sentry-wordmark-light.svg&quot; height=&quot;50&quot;/&gt;
          &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/sentry.svg&quot; height=&quot;50&quot;/&gt;
          &lt;img src=&quot;https://raw.githubusercontent.com/tannerlinsley/files/master/partners/sentry.svg&quot; height=&quot;50&quot; alt=&quot;Sentry&quot; /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://www.prisma.io?utm_source=tanstack&amp;via=tanstack&quot;&gt;
        &lt;picture&gt;
          &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://tanstack.com/assets/prisma-dark-DwgDxLwn.svg&quot; height=&quot;50&quot;/&gt;
          &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://tanstack.com/assets/prisma-light-Cloa3Onm.svg&quot; height=&quot;50&quot;/&gt;
          &lt;img src=&quot;https://tanstack.com/assets/prisma-dark-DwgDxLwn.svg&quot; height=&quot;50&quot; alt=&quot;Prisma&quot; /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href=&quot;https://strapi.link/tanstack-start&quot;&gt;
        &lt;picture&gt;
          &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://tanstack.com/assets/strapi-dark-CQ84tQTk.svg&quot; height=&quot;40&quot;/&gt;
          &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://tanstack.com/assets/strapi-light-6x7linao.svg&quot; height=&quot;40&quot;/&gt;
          &lt;img src=&quot;https://tanstack.com/assets/strapi-dark-CQ84tQTk.svg&quot; height=&quot;40&quot; alt=&quot;Strapi&quot; /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;./media/partner_logo.svg&quot; alt=&quot;Router &amp; you?&quot; height=&quot;65&quot;&gt;
&lt;p&gt;
We&#039;re looking for TanStack Router &amp; Start Partners to join our mission! Partner with us to push the boundaries of TanStack Router &amp; Start and build amazing things together.
&lt;/p&gt;
&lt;a href=&quot;mailto:partners@tanstack.com?subject=TanStack Router &amp; Start Partnership&quot;&gt;&lt;b&gt;LET&#039;S CHAT&lt;/b&gt;&lt;/a&gt;
&lt;/div&gt;

## Explore the TanStack Ecosystem

- &lt;a href=&quot;https://github.com/tanstack/config&quot;&gt;&lt;b&gt;TanStack Config&lt;/b&gt;&lt;/a&gt; – Tooling for JS/TS packages
- &lt;a href=&quot;https://github.com/tanstack/db&quot;&gt;&lt;b&gt;TanStack DB&lt;/b&gt;&lt;/a&gt; – Reactive sync client store
- &lt;a href=&quot;https://github.com/tanstack/devtools&quot;&gt;&lt;b&gt;TanStack DevTools&lt;/b&gt;&lt;/a&gt; – Unified devtools panel
- &lt;a href=&quot;https://github.com/tanstack/form&quot;&gt;&lt;b&gt;TanStack Form&lt;/b&gt;&lt;/a&gt; – Type‑safe form state
- &lt;a href=&quot;https://github.com/tanstack/pacer&quot;&gt;&lt;b&gt;TanStack Pacer&lt;/b&gt;&lt;/a&gt; – Debouncing, throttling, batching &lt;br/&gt;
- &lt;a href=&quot;https://github.com/tanstack/query&quot;&gt;&lt;b&gt;TanStack Query&lt;/b&gt;&lt;/a&gt; – Async state &amp; caching
- &lt;a href=&quot;https://github.com/tanstack/ranger&quot;&gt;&lt;b&gt;TanStack Ranger&lt;/b&gt;&lt;/a&gt; – Range &amp; slider primitives
- &lt;a href=&quot;https://github.com/tanstack/store&quot;&gt;&lt;b&gt;TanStack Store&lt;/b&gt;&lt;/a&gt; – Reactive data store
- &lt;a href=&quot;https://github.com/tanstack/table&quot;&gt;&lt;b&gt;TanStack Table&lt;/b&gt;&lt;/a&gt; – Headless datagrids
- &lt;a href=&quot;https://github.com/tanstack/virtual&quot;&gt;&lt;b&gt;TanStack Virtual&lt;/b&gt;&lt;/a&gt; – Virtualized rendering

… and more at &lt;a href=&quot;https://tanstack.com&quot;&gt;&lt;b&gt;TanStack.com »&lt;/b&gt;&lt;/a&gt;

&lt;!-- Use the force, Luke --&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[vuejs/core]]></title>
            <link>https://github.com/vuejs/core</link>
            <guid>https://github.com/vuejs/core</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:59 GMT</pubDate>
            <description><![CDATA[🖖 Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/vuejs/core">vuejs/core</a></h1>
            <p>🖖 Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 51,693</p>
            <p>Forks: 8,892</p>
            <p>Stars today: 19 stars today</p>
            <h2>README</h2><pre># vuejs/core [![npm](https://img.shields.io/npm/v/vue.svg)](https://www.npmjs.com/package/vue) [![build status](https://github.com/vuejs/core/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/vuejs/core/actions/workflows/ci.yml) [![Download](https://img.shields.io/npm/dm/vue)](https://www.npmjs.com/package/vue)

## Getting Started

Please follow the documentation at [vuejs.org](https://vuejs.org/)!

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you&#039;d like to join them, please consider [ sponsoring Vue&#039;s development](https://vuejs.org/sponsor/).

&lt;p align=&quot;center&quot;&gt;
  &lt;h3 align=&quot;center&quot;&gt;Special Sponsor&lt;/h3&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/appwrite/appwrite&quot;&gt;
  &lt;img alt=&quot;special sponsor appwrite&quot; src=&quot;https://sponsors.vuejs.org/images/appwrite.svg&quot; width=&quot;300&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a target=&quot;_blank&quot; href=&quot;https://vuejs.org/sponsor/#current-sponsors&quot;&gt;
    &lt;img alt=&quot;sponsors&quot; src=&quot;https://sponsors.vuejs.org/sponsors.svg?v3&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to respect issue requirements and use [the new issue helper](https://new-issue.vuejs.org/) when opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Stay In Touch

- [X](https://x.com/vuejs)
- [Bluesky](https://bsky.app/profile/vuejs.org)
- [Blog](https://blog.vuejs.org/)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/core/blob/main/.github/contributing.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

&lt;a href=&quot;https://github.com/vuejs/core/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/vuejs/contributors.svg?width=890&amp;limit=500&quot; /&gt;&lt;/a&gt;

&lt;sub&gt;_Note: Showing the first 500 contributors only due to GitHub image size limitations_&lt;/sub&gt;

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[Canner/WrenAI]]></title>
            <link>https://github.com/Canner/WrenAI</link>
            <guid>https://github.com/Canner/WrenAI</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:58 GMT</pubDate>
            <description><![CDATA[⚡️ GenBI (Generative BI) queries any database in natural language, generates accurate SQL (Text-to-SQL), charts (Text-to-Chart), and AI-powered insights in seconds.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Canner/WrenAI">Canner/WrenAI</a></h1>
            <p>⚡️ GenBI (Generative BI) queries any database in natural language, generates accurate SQL (Text-to-SQL), charts (Text-to-Chart), and AI-powered insights in seconds.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 12,031</p>
            <p>Forks: 1,212</p>
            <p>Stars today: 15 stars today</p>
            <h2>README</h2><pre>
&lt;p align=&quot;center&quot; id=&quot;top&quot;&gt;
  &lt;a href=&quot;https://getwren.ai/?utm_source=github&amp;utm_medium=title&amp;utm_campaign=readme&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./misc/wrenai_logo.png&quot;&gt;
      &lt;img src=&quot;./misc/wrenai_logo_white.png&quot; width=&quot;300px&quot;&gt;
    &lt;/picture&gt;
    &lt;h1 align=&quot;center&quot;&gt;Wren AI - Open-Source GenBI Agent&lt;/h1&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a aria-label=&quot;Follow us on X&quot; href=&quot;https://x.com/getwrenai&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/-@getwrenai-blue?style=for-the-badge&amp;logo=x&amp;logoColor=white&amp;labelColor=gray&amp;logoWidth=20&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;Releases&quot; href=&quot;https://github.com/canner/WrenAI/releases&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/github/v/release/canner/WrenAI?logo=github&amp;label=GitHub%20Release&amp;color=blue&amp;style=for-the-badge&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;License&quot; href=&quot;https://github.com/Canner/WrenAI/blob/main/LICENSE&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/github/license/canner/WrenAI?color=blue&amp;style=for-the-badge&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://docs.getwren.ai&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/badge/docs-online-brightgreen?style=for-the-badge&quot; alt=&quot;Docs&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;Join the community on GitHub&quot; href=&quot;https://discord.gg/5DvshJqG8Z&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/-JOIN%20THE%20COMMUNITY-blue?style=for-the-badge&amp;logo=discord&amp;logoColor=white&amp;labelColor=grey&amp;logoWidth=20&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;Canner&quot; href=&quot;https://cannerdata.com/?utm_source=github&amp;utm_medium=badge&amp;utm_campaign=readme&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%A7%A1-Made%20by%20Canner-blue?style=for-the-badge&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://trendshift.io/repositories/9263&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/9263&quot; alt=&quot;Canner%2FWrenAI | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;

&gt; Wren AI is your GenBI Agent, that you can query any database with natural language → get accurate SQL(Text-to-SQL), charts(Text-to-Charts) &amp; AI-generated insights in seconds. ⚡️

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;1920&quot; height=&quot;1080&quot; alt=&quot;1&quot; src=&quot;https://github.com/user-attachments/assets/bba9d37a-33e3-49ab-b7cb-32fd6dddc8d1&quot; /&gt;
&lt;/p&gt;
 
## 😍 Demos

https://github.com/user-attachments/assets/f9c1cb34-5a95-4580-8890-ec9644da4160

[Watch GenBI Demo](https://github.com/user-attachments/assets/90ad1d35-bb1e-490b-9676-b29863ff090b)

## 🤖 Features

|                    | What you get | Why it matters |
|--------------------|--------------|----------------|
| **Talk to Your Data** | Ask in any language → precise SQL &amp; answers | Slash the SQL learning curve﻿ |
| **GenBI Insights** | AI-written summaries, charts &amp; reports | Decision-ready context in one click﻿ |
| **Semantic Layer** | MDL models encode schema, metrics, joins | Keeps LLM outputs accurate &amp; governed﻿ |
| **Embed via API**  | Generate queries &amp; charts inside your apps ([API Docs](https://wrenai.readme.io/reference/cloud-getting-started)) | Build custom agents, SaaS features, chatbots﻿ ([Streamlit Live Demo](https://huggingface.co/spaces/getWrenAI/wrenai-cloud-api-demo)) |

🤩 [Learn more about GenBI](https://getwren.ai/genbi?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme)

## 🚀 Getting Started

Using Wren AI is super simple, you can set it up within 3 minutes, and start to interact with your data!

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;1920&quot; height=&quot;1080&quot; alt=&quot;2&quot; src=&quot;https://github.com/user-attachments/assets/6555f539-9ef2-485d-9135-0071741fda96&quot; /&gt;
&lt;/p&gt;

- Visit our [Install in your local environment](http://docs.getwren.ai/oss/installation?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme).
- Visit the [Usage Guides](https://docs.getwren.ai/oss/guide/connect/overview?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) to learn more about how to use Wren AI.
- Or just start with [Wren AI Cloud](https://getwren.ai/?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) our Managed Cloud Service. ([OSS vs. Commercial Plans](https://docs.getwren.ai/oss/overview/cloud_vs_self_host)).

## 🏗️ Architecture

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;1011&quot; height=&quot;682&quot; alt=&quot;wrenai-architecture&quot; src=&quot;https://github.com/user-attachments/assets/e99b999f-9912-4fa7-921a-9c86b6b83354&quot; /&gt;
&lt;/p&gt;

👉 [Learn more about our Design](https://getwren.ai/post/how-we-design-our-semantic-engine-for-llms-the-backbone-of-the-semantic-layer-for-llm-architecture?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme)



## 🔌 Data Sources

If your data source is not listed here, vote for it in our [GitHub discussion thread](https://github.com/Canner/WrenAI/discussions/327). It will be a valuable input for us to decide on the next supported data sources.
- Athena (Trino)
- Redshift
- BigQuery
- DuckDB
- PostgreSQL
- MySQL
- Microsoft SQL Server
- ClickHouse
- Oracle
- Trino
- Snowflake

## 🤖 LLM Models

Wren AI supports integration with various Large Language Models (LLMs), including but not limited to:
- OpenAI Models
- Azure OpenAI Models
- DeepSeek Models
- Google AI Studio – Gemini Models
- Vertex AI Models (Gemini + Anthropic)
- Bedrock Models
- Anthropic API Models
- Groq Models
- Ollama Models
- Databricks Models

Check [configuration examples here](https://github.com/Canner/WrenAI/tree/main/wren-ai-service/docs/config_examples)!

&gt; [!CAUTION]
&gt; The performance of Wren AI depends significantly on the capabilities of the LLM you choose. We strongly recommend using the most powerful model available for optimal results. Using less capable models may lead to reduced performance, slower response times, or inaccurate outputs.

## 📚 Documentation

Visit [Wren AI documentation](https://docs.getwren.ai/oss/overview/introduction?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) to view the full documentation.

## 📪 Keep Posted?

[Subscribe our blog](https://www.getwren.ai/blog/?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) and [Follow our LinkedIn](https://www.linkedin.com/company/wrenai)

## 🛠️ Contribution

1.	Star ⭐ the repo to show support (it really helps).
2.	Open an issue for bugs, ideas, or discussions.
3.	Read [Contribution Guidelines](https://github.com/Canner/WrenAI/blob/main/CONTRIBUTING.md) for setup &amp; PR guidelines.

## ⭐️ Community

- Join 1.3k+ developers in our [Discord](https://discord.gg/5DvshJqG8Z) for real-time help and roadmap previews.
- If there are any issues, please visit [GitHub Issues](https://github.com/Canner/WrenAI/issues).
- Explore our [public roadmap](https://wrenai.notion.site/) to stay updated on upcoming features and improvements!

Please note that our [Code of Conduct](./CODE_OF_CONDUCT.md) applies to all Wren AI community channels. Users are **highly encouraged** to read and adhere to them to avoid repercussions.

## 🎉 Our Contributors
&lt;a href=&quot;https://github.com/canner/wrenAI/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=Canner/WrenAI&quot; /&gt;
&lt;/a&gt;

&lt;p align=&quot;right&quot;&gt;
  &lt;a href=&quot;#top&quot;&gt;⬆️ Back to Top&lt;/a&gt;
&lt;/p&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[chaitin/PandaWiki]]></title>
            <link>https://github.com/chaitin/PandaWiki</link>
            <guid>https://github.com/chaitin/PandaWiki</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:57 GMT</pubDate>
            <description><![CDATA[PandaWiki 是一款 AI 大模型驱动的开源知识库搭建系统，帮助你快速构建智能化的 产品文档、技术文档、FAQ、博客系统，借助大模型的力量为你提供 AI 创作、AI 问答、AI 搜索等能力。]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/chaitin/PandaWiki">chaitin/PandaWiki</a></h1>
            <p>PandaWiki 是一款 AI 大模型驱动的开源知识库搭建系统，帮助你快速构建智能化的 产品文档、技术文档、FAQ、博客系统，借助大模型的力量为你提供 AI 创作、AI 问答、AI 搜索等能力。</p>
            <p>Language: TypeScript</p>
            <p>Stars: 6,041</p>
            <p>Forks: 522</p>
            <p>Stars today: 99 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/images/banner.png&quot; width=&quot;400&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a target=&quot;_blank&quot; href=&quot;https://ly.safepoint.cloud/Br48PoX&quot;&gt;📖 官方网站&lt;/a&gt; &amp;nbsp; | &amp;nbsp;
  &lt;a target=&quot;_blank&quot; href=&quot;/images/wechat.png&quot;&gt;🙋‍♂️ 微信交流群&lt;/a&gt;
&lt;/p&gt;

## 👋 项目介绍

PandaWiki 是一款 AI 大模型驱动的**开源知识库搭建系统**，帮助你快速构建智能化的 **产品文档、技术文档、FAQ、博客系统**，借助大模型的力量为你提供 **AI 创作、AI 问答、AI 搜索** 等能力。

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/images/setup.png&quot; width=&quot;800&quot; /&gt;
&lt;/p&gt;

## ⚡️ 界面展示

| PandaWiki 控制台                                 | Wiki 网站前台                                    |
| ------------------------------------------------ | ------------------------------------------------ |
| &lt;img src=&quot;/images/screenshot-1.png&quot; width=370 /&gt; | &lt;img src=&quot;/images/screenshot-2.png&quot; width=370 /&gt; |
| &lt;img src=&quot;/images/screenshot-3.png&quot; width=370 /&gt; | &lt;img src=&quot;/images/screenshot-4.png&quot; width=370 /&gt; |

## 🔥 功能与特色

- AI 驱动智能化：AI 辅助创作、AI 辅助问答、AI 辅助搜索。
- 强大的富文本编辑能力：兼容 Markdown 和 HTML，支持导出为 word、pdf、markdown 等多种格式。
- 轻松与第三方应用进行集成：支持做成网页挂件挂在其他网站上，支持做成钉钉、飞书、企业微信等聊天机器人。
- 通过第三方来源导入内容：根据网页 URL 导入、通过网站 Sitemap 导入、通过 RSS 订阅、通过离线文件导入等。

## 🚀 上手指南

### 安装 PandaWiki

你需要一台支持 Docker 20.x 以上版本的 Linux 系统来安装 PandaWiki。

使用 root 权限登录你的服务器，然后执行以下命令。

```bash
bash -c &quot;$(curl -fsSLk https://release.baizhi.cloud/panda-wiki/manager.sh)&quot;
```

根据命令提示的选项进行安装，命令执行过程将会持续几分钟，请耐心等待。

&gt; 关于安装与部署的更多细节请参考 [安装 PandaWiki](https://pandawiki.docs.baizhi.cloud/node/01971602-bb4e-7c90-99df-6d3c38cfd6d5)。

### 登录 PandaWiki

在上一步中，安装命令执行结束后，你的终端会输出以下内容。

```
SUCCESS  控制台信息:
SUCCESS    访问地址(内网): http://*.*.*.*:2443
SUCCESS    访问地址(外网): http://*.*.*.*:2443
SUCCESS    用户名: admin
SUCCESS    密码: **********************
```

使用浏览器打开上述内容中的 “访问地址”，你将看到 PandaWiki 的控制台登录入口，使用上述内容中的 “用户名” 和 “密码” 登录即可。

### 配置 AI 模型

&gt; PandaWiki 是由 AI 大模型驱动的 Wiki 系统，在未配置大模型的情况下 AI 创作、AI 问答、AI 搜索 等功能无法正常使用。
&gt; 
首次登录时会提示需要先配置 AI 模型，根据下方图片配置 “Chat 模型”。

&lt;img src=&quot;/images/modelconfig.png&quot; width=&quot;800&quot; /&gt;

&gt; 推荐使用 [百智云模型广场](https://baizhi.cloud/) 快速接入 AI 模型，注册即可获赠 5 元的模型使用额度。
&gt; 关于大模型的更多配置细节请参考 [接入 AI 模型](https://pandawiki.docs.baizhi.cloud/node/01971616-811c-70e1-82d9-706a202b8498)。

### 创建知识库

一切配置就绪后，你需要先创建一个 “知识库”。

“知识库” 是一组文档的集合，PandaWiki 将会根据知识库中的文档，为不同的知识库分别创建 “Wiki 网站”。

&lt;img src=&quot;/images/createkb.png&quot; width=&quot;800&quot; /&gt;

&gt; 关于知识库的更多配置细节请参考 [知识库设置](https://pandawiki.docs.baizhi.cloud/node/01971b5e-5bea-76d2-9f89-a95f98347bb0)。

### 💪 开始使用

如果你顺利完成了以上步骤，那么恭喜你，属于你的 PandaWiki 搭建成功，你可以：

- 访问 **控制台** 来管理你的知识库内容
- 访问 **Wiki 网站** 让你的用户使用知识库

## 社区交流

欢迎加入我们的微信群进行交流。

&lt;img src=&quot;/images/wechat.png&quot; width=&quot;300&quot; /&gt;

## 🙋‍♂️ 贡献

欢迎提交 [Pull Request](https://github.com/chaitin/PandaWiki/pulls) 或创建 [Issue](https://github.com/chaitin/PandaWiki/issues) 来帮助改进项目。

## 📝 许可证

本项目采用 GNU Affero General Public License v3.0 (AGPL-3.0) 许可证。这意味着：

- 你可以自由使用、修改和分发本软件
- 你必须以相同的许可证开源你的修改
- 如果你通过网络提供服务，也必须开源你的代码
- 商业使用需要遵守相同的开源要求


## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=chaitin/PandaWiki&amp;type=Date)](https://www.star-history.com/#chaitin/PandaWiki&amp;Date)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[tldraw/tldraw]]></title>
            <link>https://github.com/tldraw/tldraw</link>
            <guid>https://github.com/tldraw/tldraw</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:56 GMT</pubDate>
            <description><![CDATA[very good whiteboard SDK / infinite canvas SDK]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/tldraw/tldraw">tldraw/tldraw</a></h1>
            <p>very good whiteboard SDK / infinite canvas SDK</p>
            <p>Language: TypeScript</p>
            <p>Stars: 42,876</p>
            <p>Forks: 2,755</p>
            <p>Stars today: 187 stars today</p>
            <h2>README</h2><pre># tldraw

[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/tldraw/tldraw)

Welcome to the public monorepo for [tldraw](https://github.com/tldraw/tldraw). tldraw is a library for creating infinite canvas experiences in React. It&#039;s the software behind the digital whiteboard [tldraw.com](https://tldraw.com).

- Read the docs and learn more at [tldraw.dev](https://tldraw.dev).
- Learn about [our license](https://github.com/tldraw/tldraw#License).

&gt; [Click here](https://tldraw.dev/#pricing) to learn about our license and pricing.

## Installation

```bash
npm i tldraw
```

## Usage

```tsx
import { Tldraw } from &#039;tldraw&#039;
import &#039;tldraw/tldraw.css&#039;

export default function App() {
	return (
		&lt;div style={{ position: &#039;fixed&#039;, inset: 0 }}&gt;
			&lt;Tldraw /&gt;
		&lt;/div&gt;
	)
}
```

Learn more at [tldraw.dev](https://tldraw.dev).

## Local development

The local development server will run our examples app. The basic example will show any changes you&#039;ve made to the codebase.

To run the local development server, first clone this repo.

Enable [corepack](https://nodejs.org/api/corepack.html) to make sure you have the right version of `yarn`:

```bash
npm i -g corepack
```

Install dependencies:

```bash
yarn
```

Start the local development server:

```bash
yarn dev
```

Open the example project at `localhost:5420`.

## Tips for AIs

**Are you an AI agent?** If so, this monorepo has special `CONTEXT.md` files found throughout the repository that you can use to quickly build context while you work. Use your own tools to find and read these files, or use our helpful `context` script to locate and log the contents of the most relevant files.

To get started quickly, run:

```bash
yarn context
```

This will find and display the nearest CONTEXT.md file to help you understand the codebase. The `context` script supports several options:

- `yarn context` - Show path to nearest CONTEXT.md from current directory
- `yarn context ./foo/bar/baz.ts` - Show path to nearest CONTEXT.md for a specific file or directory
- `yarn context -v` or `--verbose` - Show full content of nearest CONTEXT.md
- `yarn context -r` or `--recursive` - Find all CONTEXT.md files in the repository

## License

The tldraw SDK is provided under the [tldraw license](https://github.com/tldraw/tldraw/blob/main/LICENSE.md).

You can use the tldraw SDK in commercial or non-commercial projects so long as you preserve the &quot;Made with tldraw&quot; watermark on the canvas. To remove the watermark, you can purchase a [business license](https://tldraw.dev#pricing). Visit [tldraw.dev](https://tldraw.dev) to learn more.

## Trademarks

Copyright (c) 2024-present tldraw Inc. The tldraw name and logo are trademarks of tldraw. Please see our [trademark guidelines](https://github.com/tldraw/tldraw/blob/main/TRADEMARKS.md) for info on acceptable usage.

## Distributions

You can find tldraw on npm [here](https://www.npmjs.com/package/@tldraw/tldraw?activeTab=versions).

## Contribution

Please see our [contributing guide](https://github.com/tldraw/tldraw/blob/main/CONTRIBUTING.md). Found a bug? Please [submit an issue](https://github.com/tldraw/tldraw/issues/new).

## Community

Have questions, comments or feedback? [Join our discord](https://discord.tldraw.com/?utm_source=github&amp;utm_medium=readme&amp;utm_campaign=sociallink). For the latest news and release notes, visit [tldraw.dev](https://tldraw.dev).

## Contributors

&lt;a href=&quot;https://github.com/tldraw/tldraw/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=tldraw/tldraw&amp;max=400&amp;columns=20&quot; width=&quot;100%&quot;/&gt;
&lt;/a&gt;

## Star History

&lt;a href=&quot;https://star-history.com/#tldraw/tldraw&quot;&gt;
	&lt;picture&gt;
	  &lt;source
	    media=&quot;(prefers-color-scheme: dark)&quot;
	    srcset=&quot;https://api.star-history.com/svg?repos=tldraw/tldraw&amp;type=Date&amp;theme=dark&quot;
	  /&gt;
	  &lt;source
	    media=&quot;(prefers-color-scheme: light)&quot;
	    srcset=&quot;https://api.star-history.com/svg?repos=tldraw/tldraw&amp;type=Date&quot;
	  /&gt;
	  &lt;img src=&quot;https://api.star-history.com/svg?repos=tldraw/tldraw&amp;type=Date&quot; alt=&quot;Star History Chart&quot; width=&quot;100%&quot; /&gt;
	&lt;/picture&gt;
&lt;/a&gt;

## Contact

Find us on Twitter/X at [@tldraw](https://twitter.com/tldraw). You can contact us by email at [hello@tldraw.com](mailto:hello@tldraw.com).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[n8n-io/n8n]]></title>
            <link>https://github.com/n8n-io/n8n</link>
            <guid>https://github.com/n8n-io/n8n</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:55 GMT</pubDate>
            <description><![CDATA[Fair-code workflow automation platform with native AI capabilities. Combine visual building with custom code, self-host or cloud, 400+ integrations.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/n8n-io/n8n">n8n-io/n8n</a></h1>
            <p>Fair-code workflow automation platform with native AI capabilities. Combine visual building with custom code, self-host or cloud, 400+ integrations.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 140,457</p>
            <p>Forks: 44,872</p>
            <p>Stars today: 326 stars today</p>
            <h2>README</h2><pre>![Banner image](https://user-images.githubusercontent.com/10284570/173569848-c624317f-42b1-45a6-ab09-f0ea3c247648.png)

# n8n - Secure Workflow Automation for Technical Teams

n8n is a workflow automation platform that gives technical teams the flexibility of code with the speed of no-code. With 400+ integrations, native AI capabilities, and a fair-code license, n8n lets you build powerful automations while maintaining full control over your data and deployments.

![n8n.io - Screenshot](https://raw.githubusercontent.com/n8n-io/n8n/master/assets/n8n-screenshot-readme.png)

## Key Capabilities

- **Code When You Need It**: Write JavaScript/Python, add npm packages, or use the visual interface
- **AI-Native Platform**: Build AI agent workflows based on LangChain with your own data and models
- **Full Control**: Self-host with our fair-code license or use our [cloud offering](https://app.n8n.cloud/login)
- **Enterprise-Ready**: Advanced permissions, SSO, and air-gapped deployments
- **Active Community**: 400+ integrations and 900+ ready-to-use [templates](https://n8n.io/workflows)

## Quick Start

Try n8n instantly with [npx](https://docs.n8n.io/hosting/installation/npm/) (requires [Node.js](https://nodejs.org/en/)):

```
npx n8n
```

Or deploy with [Docker](https://docs.n8n.io/hosting/installation/docker/):

```
docker volume create n8n_data
docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n
```

Access the editor at http://localhost:5678

## Resources

- 📚 [Documentation](https://docs.n8n.io)
- 🔧 [400+ Integrations](https://n8n.io/integrations)
- 💡 [Example Workflows](https://n8n.io/workflows)
- 🤖 [AI &amp; LangChain Guide](https://docs.n8n.io/langchain/)
- 👥 [Community Forum](https://community.n8n.io)
- 📖 [Community Tutorials](https://community.n8n.io/c/tutorials/28)

## Support

Need help? Our community forum is the place to get support and connect with other users:
[community.n8n.io](https://community.n8n.io)

## License

n8n is [fair-code](https://faircode.io) distributed under the [Sustainable Use License](https://github.com/n8n-io/n8n/blob/master/LICENSE.md) and [n8n Enterprise License](https://github.com/n8n-io/n8n/blob/master/LICENSE_EE.md).

- **Source Available**: Always visible source code
- **Self-Hostable**: Deploy anywhere
- **Extensible**: Add your own nodes and functionality

[Enterprise licenses](mailto:license@n8n.io) available for additional features and support.

Additional information about the license model can be found in the [docs](https://docs.n8n.io/reference/license/).

## Contributing

Found a bug 🐛 or have a feature idea ✨? Check our [Contributing Guide](https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md) to get started.

## Join the Team

Want to shape the future of automation? Check out our [job posts](https://n8n.io/careers) and join our team!

## What does n8n mean?

**Short answer:** It means &quot;nodemation&quot; and is pronounced as n-eight-n.

**Long answer:** &quot;I get that question quite often (more often than I expected) so I decided it is probably best to answer it here. While looking for a good name for the project with a free domain I realized very quickly that all the good ones I could think of were already taken. So, in the end, I chose nodemation. &#039;node-&#039; in the sense that it uses a Node-View and that it uses Node.js and &#039;-mation&#039; for &#039;automation&#039; which is what the project is supposed to help with. However, I did not like how long the name was and I could not imagine writing something that long every time in the CLI. That is when I then ended up on &#039;n8n&#039;.&quot; - **Jan Oberhauser, Founder and CEO, n8n.io**
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[EvolutionAPI/evolution-api]]></title>
            <link>https://github.com/EvolutionAPI/evolution-api</link>
            <guid>https://github.com/EvolutionAPI/evolution-api</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:54 GMT</pubDate>
            <description><![CDATA[Evolution API is an open-source WhatsApp integration API]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/EvolutionAPI/evolution-api">EvolutionAPI/evolution-api</a></h1>
            <p>Evolution API is an open-source WhatsApp integration API</p>
            <p>Language: TypeScript</p>
            <p>Stars: 5,476</p>
            <p>Forks: 4,291</p>
            <p>Stars today: 20 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot;&gt;Evolution Api&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt;

[![Docker Image](https://img.shields.io/badge/Docker-image-blue)](https://hub.docker.com/r/evoapicloud/evolution-api)
[![Whatsapp Group](https://img.shields.io/badge/Group-WhatsApp-%2322BC18)](https://evolution-api.com/whatsapp)
[![Discord Community](https://img.shields.io/badge/Discord-Community-blue)](https://evolution-api.com/discord)
[![Postman Collection](https://img.shields.io/badge/Postman-Collection-orange)](https://evolution-api.com/postman) 
[![Documentation](https://img.shields.io/badge/Documentation-Official-green)](https://doc.evolution-api.com)
[![Feature Requests](https://img.shields.io/badge/Feature-Requests-purple)](https://evolutionapi.canny.io/feature-requests)
[![Roadmap](https://img.shields.io/badge/Roadmap-Community-blue)](https://evolutionapi.canny.io/feature-requests)
[![Changelog](https://img.shields.io/badge/Changelog-Updates-green)](https://evolutionapi.canny.io/changelog)
[![License](https://img.shields.io/badge/license-Apache--2.0-blue)](./LICENSE)
[![Support](https://img.shields.io/badge/Donation-picpay-green)](https://app.picpay.com/user/davidsongomes1998)
[![Sponsors](https://img.shields.io/badge/Github-sponsor-orange)](https://github.com/sponsors/EvolutionAPI)

&lt;/div&gt;
  
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;./public/images/cover.png&quot;&gt;&lt;/div&gt;

## Evolution API

Evolution API began as a WhatsApp controller API based on [CodeChat](https://github.com/code-chat-br/whatsapp-api), which in turn implemented the [Baileys](https://github.com/WhiskeySockets/Baileys) library. While originally focused on WhatsApp, Evolution API has grown into a comprehensive platform supporting multiple messaging services and integrations. We continue to acknowledge CodeChat for laying the groundwork.

Today, Evolution API is not limited to WhatsApp. It integrates with various platforms such as Typebot, Chatwoot, Dify, and OpenAI, offering a broad array of functionalities beyond messaging. Evolution API supports both the Baileys-based WhatsApp API and the official WhatsApp Business API, with upcoming support for Instagram and Messenger.

## Looking for a Lightweight Version?
For those who need a more streamlined and performance-optimized version, check out [Evolution API Lite](https://github.com/EvolutionAPI/evolution-api-lite). It&#039;s designed specifically for microservices, focusing solely on connectivity without integrations or audio conversion features. Ideal for environments that prioritize simplicity and efficiency.

## Types of Connections

Evolution API supports multiple types of connections to WhatsApp, enabling flexible and powerful integration options:

- *WhatsApp API - Baileys*:
  - A free API based on WhatsApp Web, leveraging the [Baileys library](https://github.com/WhiskeySockets/Baileys).
  - This connection type allows control over WhatsApp Web functionalities through a RESTful API, suitable for multi-service chats, service bots, and other WhatsApp-integrated systems.
  - Note: This method relies on the web version of WhatsApp and may have limitations compared to official APIs.

- *WhatsApp Cloud API*:
  - The official API provided by Meta (formerly Facebook).
  - This connection type offers a robust and reliable solution designed for businesses needing higher volumes of messaging and better integration support.
  - The Cloud API supports features such as end-to-end encryption, advanced analytics, and more comprehensive customer service tools.
  - To use this API, you must comply with Meta&#039;s policies and potentially pay for usage based on message volume and other factors.

## Integrations

Evolution API supports various integrations to enhance its functionality. Below is a list of available integrations and their uses:

- [Typebot](https://typebot.io/):
  - Build conversational bots using Typebot, integrated directly into Evolution with trigger management.

- [Chatwoot](https://www.chatwoot.com/):
  - Direct integration with Chatwoot for handling customer service for your business.

- [RabbitMQ](https://www.rabbitmq.com/):
  - Receive events from the Evolution API via RabbitMQ.

- [Apache Kafka](https://kafka.apache.org/):
  - Receive events from the Evolution API via Apache Kafka for real-time event streaming and processing.

- [Amazon SQS](https://aws.amazon.com/pt/sqs/):
  - Receive events from the Evolution API via Amazon SQS.

- [Socket.io](https://socket.io/):
  - Receive events from the Evolution API via WebSocket.

- [Dify](https://dify.ai/):
  - Integrate your Evolution API directly with Dify AI for seamless trigger management and multiple agents.

- [OpenAI](https://openai.com/):
  - Integrate your Evolution API with OpenAI for AI capabilities, including audio-to-text conversion, available across all Evolution integrations.

- Amazon S3 / Minio:
  - Store media files received in [Amazon S3](https://aws.amazon.com/pt/s3/) or [Minio](https://min.io/).

## Community &amp; Feedback

We value community input and feedback to continuously improve Evolution API:

### 🚀 Feature Requests &amp; Roadmap
- **[Feature Requests](https://evolutionapi.canny.io/feature-requests)**: Submit new feature ideas and vote on community proposals
- **[Roadmap](https://evolutionapi.canny.io/feature-requests)**: View planned features and development progress
- **[Changelog](https://evolutionapi.canny.io/changelog)**: Stay updated with the latest releases and improvements

### 💬 Community Support
- **[WhatsApp Group](https://evolution-api.com/whatsapp)**: Join our community for support and discussions
- **[Discord Community](https://evolution-api.com/discord)**: Real-time chat with developers and users
- **[GitHub Issues](https://github.com/EvolutionAPI/evolution-api/issues)**: Report bugs and technical issues

### 🔒 Security
- **[Security Policy](./SECURITY.md)**: Guidelines for reporting security vulnerabilities
- **Security Contact**: contato@evolution-api.com

## Telemetry Notice

To continuously improve our services, we have implemented telemetry that collects data on the routes used, the most accessed routes, and the version of the API in use. We would like to assure you that no sensitive or personal data is collected during this process. The telemetry helps us identify improvements and provide a better experience for users.

## Evolution Support Premium

Join our Evolution Pro community for expert support and a weekly call to answer questions. Visit the link below to learn more and subscribe:

[Click here to learn more](https://evolution-api.com/suporte-pro)

# Donate to the project.

#### Github Sponsors

https://github.com/sponsors/EvolutionAPI

# Content Creator Partners

We are proud to collaborate with the following content creators who have contributed valuable insights and tutorials about Evolution API:

- [Promovaweb](https://www.youtube.com/@promovaweb)
- [Sandeco](https://www.youtube.com/@canalsandeco)
- [Comunidade ZDG](https://www.youtube.com/@ComunidadeZDG)
- [Francis MNO](https://www.youtube.com/@FrancisMNO)
- [Pablo Cabral](https://youtube.com/@pablocabral)
- [XPop Digital](https://www.youtube.com/@xpopdigital)
- [Costar Wagner Dev](https://www.youtube.com/@costarwagnerdev)
- [Dante Testa](https://youtube.com/@dantetesta_)
- [Rubén Salazar](https://youtube.com/channel/UCnYGZIE2riiLqaN9sI6riig)
- [OrionDesign](youtube.com/OrionDesign_Oficial)
- [IMPA 365](youtube.com/@impa365_ofc)
- [Comunidade Hub Connect](https://youtube.com/@comunidadehubconnect)
- [dSantana Automações](https://www.youtube.com/channel/UCG7DjUmAxtYyURlOGAIryNQ?view_as=subscriber)
- [Edison Martins](https://www.youtube.com/@edisonmartinsmkt)
- [Astra Online](https://www.youtube.com/@astraonlineweb)
- [MKT Seven Automações](https://www.youtube.com/@sevenautomacoes)
- [Vamos automatizar](https://www.youtube.com/vamosautomatizar)

## License

Evolution API is licensed under the Apache License 2.0, with the following additional conditions:

1. **LOGO and copyright information**: In the process of using Evolution API&#039;s frontend components, you may not remove or modify the LOGO or copyright information in the Evolution API console or applications. This restriction is inapplicable to uses of Evolution API that do not involve its frontend components.

2. **Usage Notification Requirement**: If Evolution API is used as part of any project, including closed-source systems (e.g., proprietary software), the user is required to display a clear notification within the system that Evolution API is being utilized. This notification should be visible to system administrators and accessible from the system&#039;s documentation or settings page. Failure to comply with this requirement may result in the necessity for a commercial license, as determined by the producer.

Please contact contato@evolution-api.com to inquire about licensing matters.

Apart from the specific conditions mentioned above, all other rights and restrictions follow the Apache License 2.0. Detailed information about the Apache License 2.0 can be found at [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0).

© 2025 Evolution API
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[arabold/docs-mcp-server]]></title>
            <link>https://github.com/arabold/docs-mcp-server</link>
            <guid>https://github.com/arabold/docs-mcp-server</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:53 GMT</pubDate>
            <description><![CDATA[Docs MCP Server: Enhance Your AI Coding Assistant]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/arabold/docs-mcp-server">arabold/docs-mcp-server</a></h1>
            <p>Docs MCP Server: Enhance Your AI Coding Assistant</p>
            <p>Language: TypeScript</p>
            <p>Stars: 631</p>
            <p>Forks: 71</p>
            <p>Stars today: 4 stars today</p>
            <h2>README</h2><pre># Docs MCP Server: Your AI&#039;s Up-to-Date Documentation Expert

AI coding assistants often struggle with outdated documentation and hallucinations. The **Docs MCP Server** solves this by providing a personal, always-current knowledge base for your AI. It **indexes 3rd party documentation** from various sources (websites, GitHub, npm, PyPI, local files) and offers powerful, version-aware search tools via the Model Context Protocol (MCP).

This enables your AI agent to access the **latest official documentation**, dramatically improving the quality and reliability of generated code and integration details. It&#039;s **free**, **open-source**, runs **locally** for privacy, and integrates seamlessly into your development workflow.

## Why Use the Docs MCP Server?

LLM-assisted coding promises speed and efficiency, but often falls short due to:

- 🌀 **Stale Knowledge:** LLMs train on snapshots of the internet and quickly fall behind new library releases and API changes.
- 👻 **Code Hallucinations:** AI can invent plausible-looking code that is syntactically correct but functionally wrong or uses non-existent APIs.
- ❓ **Version Ambiguity:** Generic answers rarely account for the specific version dependencies in your project, leading to subtle bugs.
- ⏳ **Verification Overhead:** Developers spend valuable time double-checking AI suggestions against official documentation.

**Docs MCP Server solves these problems by:**

- ✅ **Providing Up-to-Date Context:** Fetches and indexes documentation directly from official sources (websites, GitHub, npm, PyPI, local files) on demand.
- 🎯 **Delivering Version-Specific Answers:** Search queries can target exact library versions, ensuring information matches your project&#039;s dependencies.
- 💡 **Reducing Hallucinations:** Grounds the LLM in real documentation for accurate examples and integration details.
- ⚡ **Boosting Productivity:** Get trustworthy answers faster, integrated directly into your AI assistant workflow.

## ✨ Key Features

- **Accurate &amp; Version-Aware AI Responses:** Provides up-to-date, version-specific documentation to reduce AI hallucinations and improve code accuracy.
- **Broad Source Compatibility:** Scrapes documentation from websites, GitHub repos, package manager sites (npm, PyPI), and local file directories.
- **Advanced Search &amp; Processing:** Intelligently chunks documentation semantically, generates embeddings, and combines vector similarity with full-text search.
- **Flexible Embedding Models:** Supports various providers including OpenAI (and compatible APIs), Google Gemini/Vertex AI, Azure OpenAI, and AWS Bedrock. Vector search is optional.
- **Enterprise Authentication:** Optional OAuth2/OIDC authentication with dynamic client registration for secure deployments.
- **Web Interface:** Easy-to-use web interface for searching and managing documentation.
- **Local &amp; Private:** Runs entirely on your machine, ensuring data and queries remain private.
- **Free &amp; Open Source:** Community-driven and freely available.
- **Simple Deployment:** Easy setup via Docker or `npx`.
- **Seamless Integration:** Works with MCP-compatible clients (like Claude, Cline, Roo).

&gt; **What is semantic chunking?**
&gt;
&gt; Semantic chunking splits documentation into meaningful sections based on structure—like headings, code blocks, and tables—rather than arbitrary text size. Docs MCP Server preserves logical boundaries, keeps code and tables intact, and removes navigation clutter from HTML docs. This ensures LLMs receive coherent, context-rich information for more accurate and relevant answers.

## How to Run the Docs MCP Server

Choose your deployment method:

- [Standalone Server (Recommended)](#standalone-server-recommended)
- [Embedded Server](#embedded-server)
- [Advanced: Docker Compose (Scaling)](#advanced-docker-compose-scaling)

## Standalone Server (Recommended)

Run a standalone server that includes both MCP endpoints and web interface in a single process. This is the easiest way to get started.

### Option 1: Docker

1. **Install Docker.**
2. **Start the server:**

   ```bash
   docker run --rm \
     -v docs-mcp-data:/data \
     -p 6280:6280 \
     ghcr.io/arabold/docs-mcp-server:latest \
     --protocol http --host 0.0.0.0 --port 6280
   ```

   **Optional:** Add `-e OPENAI_API_KEY=&quot;your-openai-api-key&quot;` to enable vector search for improved results.

### Option 2: npx

1. **Install Node.js 22.x or later.**
2. **Start the server:**

   ```bash
   npx @arabold/docs-mcp-server@latest
   ```

   This will run the server on port 6280 by default.

   **Optional:** Prefix with `OPENAI_API_KEY=&quot;your-openai-api-key&quot;` to enable vector search for improved results.

### Configure Your MCP Client

Add this to your MCP settings (VS Code, Claude Desktop, etc.):

```json
{
  &quot;mcpServers&quot;: {
    &quot;docs-mcp-server&quot;: {
      &quot;type&quot;: &quot;sse&quot;,
      &quot;url&quot;: &quot;http://localhost:6280/sse&quot;,
      &quot;disabled&quot;: false,
      &quot;autoApprove&quot;: []
    }
  }
}
```

**Alternative connection types:**

```jsonc
// SSE (Server-Sent Events)
&quot;type&quot;: &quot;sse&quot;, &quot;url&quot;: &quot;http://localhost:6280/sse&quot;

// HTTP (Streamable)
&quot;type&quot;: &quot;http&quot;, &quot;url&quot;: &quot;http://localhost:6280/mcp&quot;
```

Restart your AI assistant after updating the config.

### Access the Web Interface

Open `http://localhost:6280` in your browser to manage documentation and monitor jobs.

### CLI Usage with Standalone Server

You can also use CLI commands to interact with the local database:

```bash
# List indexed libraries
OPENAI_API_KEY=&quot;your-key&quot; npx @arabold/docs-mcp-server@latest list

# Search documentation
OPENAI_API_KEY=&quot;your-key&quot; npx @arabold/docs-mcp-server@latest search react &quot;useState hook&quot;

# Scrape new documentation (connects to running server&#039;s worker)
npx @arabold/docs-mcp-server@latest scrape react https://react.dev/reference/react --server-url http://localhost:6280/api
```

### Adding Library Documentation

1. Open the Web Interface at `http://localhost:6280`.
2. Use the &quot;Queue New Scrape Job&quot; form.
3. Enter the documentation URL, library name, and (optionally) version.
4. Click &quot;Queue Job&quot;. Monitor progress in the Job Queue.
5. Repeat for each library you want indexed.

Once a job completes, the docs are searchable via your AI assistant or the Web UI.

![Docs MCP Server Web Interface](docs/docs-mcp-server.png)

**Benefits:**

- Single command setup with both web UI and MCP server
- Persistent data storage (Docker volume or local directory)
- No repository cloning required
- Full feature access including web interface

To stop the server, press `Ctrl+C`.

## Embedded Server

Run the MCP server directly embedded in your AI assistant without a separate process or web interface. This method provides MCP integration only.

### Configure Your MCP Client

Add this to your MCP settings (VS Code, Claude Desktop, etc.):

```json
{
  &quot;mcpServers&quot;: {
    &quot;docs-mcp-server&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [&quot;@arabold/docs-mcp-server@latest&quot;],
      &quot;disabled&quot;: false,
      &quot;autoApprove&quot;: []
    }
  }
}
```

**Optional:** To enable vector search for improved results, add an `env` section with your API key:

```json
{
  &quot;mcpServers&quot;: {
    &quot;docs-mcp-server&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [&quot;@arabold/docs-mcp-server@latest&quot;],
      &quot;env&quot;: {
        &quot;OPENAI_API_KEY&quot;: &quot;sk-proj-...&quot; // Your OpenAI API key
      },
      &quot;disabled&quot;: false,
      &quot;autoApprove&quot;: []
    }
  }
}
```

Restart your application after updating the config.

### Adding Library Documentation

**Option 1: Use MCP Tools**

Your AI assistant can index new documentation using the built-in `scrape_docs` tool:

```
Please scrape the React documentation from https://react.dev/reference/react for library &quot;react&quot; version &quot;18.x&quot;
```

**Option 2: Launch Web Interface**

Start a temporary web interface that shares the same database:

```bash
OPENAI_API_KEY=&quot;your-key&quot; npx @arabold/docs-mcp-server@latest web --port 6281
```

Then open `http://localhost:6281` to manage documentation. Stop the web interface when done (`Ctrl+C`).

**Option 3: CLI Commands**

Use CLI commands directly (avoid running scrape jobs concurrently with embedded server):

```bash
# List libraries
OPENAI_API_KEY=&quot;your-key&quot; npx @arabold/docs-mcp-server@latest list

# Search documentation
OPENAI_API_KEY=&quot;your-key&quot; npx @arabold/docs-mcp-server@latest search react &quot;useState hook&quot;
```

**Benefits:**

- Direct integration with AI assistant
- No separate server process required
- Persistent data storage in user&#039;s home directory
- Shared database with standalone server and CLI

**Limitations:**

- No web interface (unless launched separately)
- Documentation indexing requires MCP tools or separate commands

## Scraping Local Files and Folders

You can index documentation from your local filesystem by using a `file://` URL as the source. This works in both the Web UI and CLI.

**Examples:**

- Web: `https://react.dev/reference/react`
- Local file: `file:///Users/me/docs/index.html`
- Local folder: `file:///Users/me/docs/my-library`

**Requirements:**

- All files with a MIME type of `text/*` are processed. This includes HTML, Markdown, plain text, and source code files such as `.js`, `.ts`, `.tsx`, `.css`, etc. Binary files, PDFs, images, and other non-text formats are ignored.
- You must use the `file://` prefix for local files/folders.
- The path must be accessible to the server process.
- **If running in Docker:**
  - You must mount the local folder into the container and use the container path in your `file://` URL.
  - Example Docker run:
    ```bash
    docker run --rm \
      -e OPENAI_API_KEY=&quot;your-key&quot; \
      -v /absolute/path/to/docs:/docs:ro \
      -v docs-mcp-data:/data \
      ghcr.io/arabold/docs-mcp-server:latest \
      scrape mylib file:///docs/my-library
    ```
  - In the Web UI, enter the path as `file:///docs/my-library` (matching the container path).

See the tooltips in the Web UI and CLI help for more details.

## Advanced: Docker Compose (Scaling)

For production deployments or when you need to scale processing, use Docker Compose to run separate services. The system selects either a local in-process worker or a remote worker client based on the configuration, ensuring consistent behavior across modes.

**Start the services:**

```bash
# Clone the repository (to get docker-compose.yml)
git clone https://github.com/arabold/docs-mcp-server.git
cd docs-mcp-server

# Set your environment variables
export OPENAI_API_KEY=&quot;your-key-here&quot;

# Start all services
docker compose up -d
```

**Service architecture:**

- **Worker** (port 8080): Handles documentation processing jobs
- **MCP Server** (port 6280): Provides `/sse` endpoint for AI tools
- **Web Interface** (port 6281): Browser-based management interface

**Configure your MCP client:**

```json
{
  &quot;mcpServers&quot;: {
    &quot;docs-mcp-server&quot;: {
      &quot;type&quot;: &quot;sse&quot;,
      &quot;url&quot;: &quot;http://localhost:6280/sse&quot;,
      &quot;disabled&quot;: false,
      &quot;autoApprove&quot;: []
    }
  }
}
```

**Alternative connection types:**

```json
// SSE (Server-Sent Events)
&quot;type&quot;: &quot;sse&quot;, &quot;url&quot;: &quot;http://localhost:6280/sse&quot;

// HTTP (Streamable)
&quot;type&quot;: &quot;http&quot;, &quot;url&quot;: &quot;http://localhost:6280/mcp&quot;
```

**Access interfaces:**

- Web Interface: `http://localhost:6281`
- MCP Endpoint (HTTP): `http://localhost:6280/mcp`
- MCP Endpoint (SSE): `http://localhost:6280/sse`

This architecture allows independent scaling of processing (workers) and user interfaces.

## Configuration

The Docs MCP Server can run without any configuration and will use full-text search only. To enable vector search for improved results, configure an embedding provider via environment variables.

### Command Line Argument Overrides

Many CLI arguments can be overridden using environment variables. This is useful for Docker deployments, CI/CD pipelines, or setting default values.

| Environment Variable       | CLI Argument           | Description                                     | Used by Commands          |
| -------------------------- | ---------------------- | ----------------------------------------------- | ------------------------- |
| `DOCS_MCP_STORE_PATH`      | `--store-path`         | Custom path for data storage directory          | all                       |
| `DOCS_MCP_TELEMETRY`       | `--no-telemetry`       | Disable telemetry (`false` to disable)          | all                       |
| `DOCS_MCP_PROTOCOL`        | `--protocol`           | MCP server protocol (auto, stdio, http)         | default, mcp              |
| `DOCS_MCP_PORT`            | `--port`               | Server port                                     | default, mcp, web, worker |
| `DOCS_MCP_WEB_PORT`        | `--port` (web command) | Web interface port (web command only)           | web                       |
| `PORT`                     | `--port`               | Server port (fallback if DOCS_MCP_PORT not set) | default, mcp, web, worker |
| `DOCS_MCP_HOST`            | `--host`               | Server host/bind address                        | default, mcp, web, worker |
| `HOST`                     | `--host`               | Server host (fallback if DOCS_MCP_HOST not set) | default, mcp, web, worker |
| `DOCS_MCP_EMBEDDING_MODEL` | `--embedding-model`    | Embedding model configuration                   | default, mcp, web, worker |
| `DOCS_MCP_AUTH_ENABLED`    | `--auth-enabled`       | Enable OAuth2/OIDC authentication               | default, mcp              |
| `DOCS_MCP_AUTH_ISSUER_URL` | `--auth-issuer-url`    | OAuth2 provider issuer/discovery URL            | default, mcp              |
| `DOCS_MCP_AUTH_AUDIENCE`   | `--auth-audience`      | JWT audience claim (resource identifier)        | default, mcp              |

**Usage Examples:**

```bash
# Set via environment variables
export DOCS_MCP_PORT=8080
export DOCS_MCP_HOST=0.0.0.0
export DOCS_MCP_EMBEDDING_MODEL=text-embedding-3-small
npx @arabold/docs-mcp-server@latest

# Override with CLI arguments (takes precedence)
DOCS_MCP_PORT=8080 npx @arabold/docs-mcp-server@latest --port 9090
```

### Embedding Provider Configuration

The Docs MCP Server is configured via environment variables. Set these in your shell, Docker, or MCP client config.

| Variable                           | Description                                           |
| ---------------------------------- | ----------------------------------------------------- |
| `DOCS_MCP_EMBEDDING_MODEL`         | Embedding model to use (see below for options).       |
| `OPENAI_API_KEY`                   | OpenAI API key for embeddings.                        |
| `OPENAI_API_BASE`                  | Custom OpenAI-compatible API endpoint (e.g., Ollama). |
| `GOOGLE_API_KEY`                   | Google API key for Gemini embeddings.                 |
| `GOOGLE_APPLICATION_CREDENTIALS`   | Path to Google service account JSON for Vertex AI.    |
| `AWS_ACCESS_KEY_ID`                | AWS key for Bedrock embeddings.                       |
| `AWS_SECRET_ACCESS_KEY`            | AWS secret for Bedrock embeddings.                    |
| `AWS_REGION`                       | AWS region for Bedrock.                               |
| `AZURE_OPENAI_API_KEY`             | Azure OpenAI API key.                                 |
| `AZURE_OPENAI_API_INSTANCE_NAME`   | Azure OpenAI instance name.                           |
| `AZURE_OPENAI_API_DEPLOYMENT_NAME` | Azure OpenAI deployment name.                         |
| `AZURE_OPENAI_API_VERSION`         | Azure OpenAI API version.                             |

See [examples above](#alternative-using-docker) for usage.

### Embedding Model Options

Set `DOCS_MCP_EMBEDDING_MODEL` to one of:

- `text-embedding-3-small` (default, OpenAI)
- `openai:snowflake-arctic-embed2` (OpenAI-compatible, Ollama)
- `vertex:text-embedding-004` (Google Vertex AI)
- `gemini:embedding-001` (Google Gemini)
- `aws:amazon.titan-embed-text-v1` (AWS Bedrock)
- `microsoft:text-embedding-ada-002` (Azure OpenAI)
- Or any OpenAI-compatible model name

### Provider-Specific Configuration Examples

Here are complete configuration examples for different embedding providers:

**OpenAI (Default):**

```bash
OPENAI_API_KEY=&quot;sk-proj-your-openai-api-key&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;text-embedding-3-small&quot; \
npx @arabold/docs-mcp-server@latest
```

**Ollama (Local):**

```bash
OPENAI_API_KEY=&quot;ollama&quot; \
OPENAI_API_BASE=&quot;http://localhost:11434/v1&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;nomic-embed-text&quot; \
npx @arabold/docs-mcp-server@latest
```

**LM Studio (Local):**

```bash
OPENAI_API_KEY=&quot;lmstudio&quot; \
OPENAI_API_BASE=&quot;http://localhost:1234/v1&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;text-embedding-qwen3-embedding-4b&quot; \
npx @arabold/docs-mcp-server@latest
```

**Google Gemini:**

```bash
GOOGLE_API_KEY=&quot;your-google-api-key&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;gemini:embedding-001&quot; \
npx @arabold/docs-mcp-server@latest
```

**Google Vertex AI:**

```bash
GOOGLE_APPLICATION_CREDENTIALS=&quot;/path/to/your/gcp-service-account.json&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;vertex:text-embedding-004&quot; \
npx @arabold/docs-mcp-server@latest
```

**AWS Bedrock:**

```bash
AWS_ACCESS_KEY_ID=&quot;your-aws-access-key-id&quot; \
AWS_SECRET_ACCESS_KEY=&quot;your-aws-secret-access-key&quot; \
AWS_REGION=&quot;us-east-1&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;aws:amazon.titan-embed-text-v1&quot; \
npx @arabold/docs-mcp-server@latest
```

**Azure OpenAI:**

```bash
AZURE_OPENAI_API_KEY=&quot;your-azure-openai-api-key&quot; \
AZURE_OPENAI_API_INSTANCE_NAME=&quot;your-instance-name&quot; \
AZURE_OPENAI_API_DEPLOYMENT_NAME=&quot;your-deployment-name&quot; \
AZURE_OPENAI_API_VERSION=&quot;2024-02-01&quot; \
DOCS_MCP_EMBEDDING_MODEL=&quot;microsoft:text-embedding-ada-002&quot; \
npx @arabold/docs-mcp-server@latest
```

For more architectural details, see the [ARCHITECTURE.md](ARCHITECTURE.md).

For enterprise authentication and security features, see the [Authentication Guide](docs/authentication.md).

## Telemetry

The Docs MCP Server includes privacy-first telemetry to help improve the product. We collect anonymous usage data to understand how the tool is used and identify areas for improvement.

### What We Collect

- Command usage patterns and success rates
- Tool execution metrics (counts, durations, error types)
- Pipeline job statistics (progress, completion rates)
- Service configuration patterns (auth enabled, read-only mode)
- Performance metrics (response times, processing efficiency)
- Protocol usage (stdio vs HTTP, transport modes)

### What We DON&#039;T Collect

- Search query content or user input
- URLs being scraped or accessed
- Document content or scraped data
- Authentication tokens or credentials
- Personal information or identifying data

### Disabling Telemetry

You can disable telemetry collection entirely:

**Option 1: CLI Flag**

```bash
npx @arabold/docs-mcp-server@latest --no-telemetry
```

**Option 2: Environment Variable**

```bash
DOCS_MCP_TELEMETRY=false npx @arabold/docs-mcp-server@latest
```

**Option 3: Docker**

```bash
docker run -e DOCS_MCP_TELEMETRY=false ghcr.io/arabold/docs-mcp-server:latest
```

For more details about our telemetry practices, see the [Telemetry Guide](docs/telemetry.md).

## Development

To develop or contribute to the Docs MCP Server:

- Fork the repository and create a feature branch.
- Follow the code conventions in [ARCHITECTURE.md](ARCHITECTURE.md).
- Write clear commit messages (see Git guidelines above).
- Open a pull request with a clear description of your changes.

For questions or suggestions, open an issue.

### Architecture

For details on the project&#039;s architecture and design principles, please see [ARCHITECTURE.md](ARCHITECTURE.md).

_Notably, the vast majority of this project&#039;s code was generated by the AI assistant Cline, leveraging the capabilities of this very MCP server._

## License

This project is licensed under the MIT License. See [LICENSE](LICENSE) for details.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[MrLesk/Backlog.md]]></title>
            <link>https://github.com/MrLesk/Backlog.md</link>
            <guid>https://github.com/MrLesk/Backlog.md</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:52 GMT</pubDate>
            <description><![CDATA[Backlog.md - A tool for managing project collaboration between humans and AI Agents in a git ecosystem]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/MrLesk/Backlog.md">MrLesk/Backlog.md</a></h1>
            <p>Backlog.md - A tool for managing project collaboration between humans and AI Agents in a git ecosystem</p>
            <p>Language: TypeScript</p>
            <p>Stars: 3,515</p>
            <p>Forks: 163</p>
            <p>Stars today: 44 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot;&gt;Backlog.md&lt;/h1&gt;
&lt;p align=&quot;center&quot;&gt;Markdown‑native Task Manager &amp;amp; Kanban visualizer for any Git repository&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;code&gt;npm i -g backlog.md&lt;/code&gt; or &lt;code&gt;bun add -g backlog.md&lt;/code&gt; or &lt;code&gt;brew install backlog-md&lt;/code&gt; or &lt;code&gt;nix run github:MrLesk/Backlog.md&lt;/code&gt;
&lt;/p&gt;

![Backlog demo GIF using: backlog board](./.github/backlog.gif)


---

&gt; **Backlog.md** turns any folder with a Git repo into a **self‑contained project board**  
&gt; powered by plain Markdown files and a zero‑config CLI.

## Features

* 📝 **Markdown-native tasks** -- manage every issue as a plain `.md` file

* 🔒 **100 % private &amp; offline** -- backlog lives entirely inside your repo

* 📊 **Instant terminal Kanban** -- `backlog board` paints a live board in your shell

* 📤 **Board export** -- `backlog board export` creates shareable markdown reports

* 🌐 **Modern web interface** -- `backlog browser` launches a sleek web UI for visual task management

* 🤖 **AI-ready CLI** -- &quot;Claude, please take over task 33&quot;

* 🔍 **Powerful search** -- fuzzy search across tasks, docs &amp; decisions with `backlog search`

* 📋 **Rich query commands** -- view, list, filter, or archive tasks with ease

* 💻 **Cross-platform** -- runs on macOS, Linux, and Windows

* 🆓 **MIT-licensed &amp; open-source** -- free for personal or commercial use


---

## &lt;img src=&quot;./.github/5-minute-tour-256.png&quot; alt=&quot;5-minute tour&quot; width=&quot;28&quot; height=&quot;28&quot; align=&quot;center&quot;&gt; Five‑minute tour
```bash
# 1. Make sure you have Backlog.md installed  
bun/npm i -g backlog.md or brew install backlog-md

# 2. Bootstrap a repo + backlog  
backlog init &quot;My Awesome Project&quot;

# 3. Capture work  
backlog task create &quot;Render markdown as kanban&quot;

# 4. See where you stand
backlog board view or backlog browser

# 5. Find what you need
backlog search &quot;markdown&quot; or just backlog search for interactive filters

# 6. Create tasks using Claude-code, Gemini, Codex or Jules
Claude I would like to build a search functionality in the web view that searches for:
* tasks
* docs
* decisions
  Please create relevant tasks to tackle this request.

# 7. Assign tasks to AI
Claude please implement all tasks related to the web search functionality (task-10, task-11, task-12)
* before starting to write code use &#039;ultrathink mode&#039; to prepare an implementation plan
* use multiple sub-agents when possible and dependencies allow
```


All data is saved under `backlog` folder as human‑readable Markdown with the following format `task-&lt;task-id&gt; - &lt;task-title&gt;.md` (e.g. `task-10 - Add core search functionality.md`).

---

## &lt;img src=&quot;./.github/web-interface-256.png&quot; alt=&quot;Web Interface&quot; width=&quot;28&quot; height=&quot;28&quot; align=&quot;center&quot;&gt; Web Interface

Launch a modern, responsive web interface for visual task management:

```bash
# Start the web server (opens browser automatically)
backlog browser

# Custom port
backlog browser --port 8080

# Don&#039;t open browser automatically
backlog browser --no-open
```

![Web Interface Screenshot](./.github/web.jpeg)

The web interface provides:
- **Interactive Kanban board** with drag-and-drop functionality
- **Task creation and editing** with rich forms and validation
- **Interactive acceptance criteria editor** with checklist controls and instant persistence
- **Real-time updates** as you manage tasks
- **Responsive design** that works on desktop and mobile
- **Archive tasks** with confirmation dialogs
- **Seamless CLI integration** - changes sync with your markdown files

---

## &lt;img src=&quot;./.github/cli-reference-256.png&quot; alt=&quot;CLI Reference&quot; width=&quot;28&quot; height=&quot;28&quot; align=&quot;center&quot;&gt; CLI reference

### Project Setup

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Initialize project | `backlog init [project-name]` (creates backlog structure with interactive configuration) |
| Re-initialize | `backlog init` (preserves existing config, allows updates) |

The `backlog init` command provides comprehensive project setup with interactive prompts for:
- **Project name** - identifier for your backlog
- **Auto-commit** - whether to automatically commit task changes to git
- **Default editor** - editor command for opening tasks (detects from environment)
- **Remote operations** - enable/disable fetching tasks from remote branches
- **Web UI settings** - port and browser auto-open preferences
- **Agent guidelines** - AI agent instruction files (CLAUDE.md, AGENTS.md, GEMINI.md, Copilot)
- **Claude Code agent** - optional Backlog.md agent for enhanced task management (defaults to not installed; opt-in during `init` or pass `--install-claude-agent true`)

### Documentation

- Document IDs are global across all subdirectories under `backlog/docs`. You can organize files in nested folders (e.g., `backlog/docs/guides/`), and `backlog doc list` and `backlog doc view &lt;id&gt;` work across the entire tree. Example: `backlog doc create -p guides &quot;New Guide&quot;`.

When re-initializing an existing project, all current configuration values are preserved and pre-populated in prompts, allowing you to update only what you need.

### Task Management

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Create task | `backlog task create &quot;Add OAuth System&quot;`                    |
| Create with description | `backlog task create &quot;Feature&quot; -d &quot;Add authentication system&quot;` |
| Create with assignee | `backlog task create &quot;Feature&quot; -a @sara`           |
| Create with status | `backlog task create &quot;Feature&quot; -s &quot;In Progress&quot;`    |
| Create with labels | `backlog task create &quot;Feature&quot; -l auth,backend`     |
| Create with priority | `backlog task create &quot;Feature&quot; --priority high`     |
| Create with plan | `backlog task create &quot;Feature&quot; --plan &quot;1. Research\n2. Implement&quot;`     |
| Create with AC | `backlog task create &quot;Feature&quot; --ac &quot;Must work,Must be tested&quot;` |
| Create with notes | `backlog task create &quot;Feature&quot; --notes &quot;Started initial research&quot;` |
| Create with deps | `backlog task create &quot;Feature&quot; --dep task-1,task-2` |
| Create sub task | `backlog task create -p 14 &quot;Add Login with Google&quot;`|
| Create (all options) | `backlog task create &quot;Feature&quot; -d &quot;Description&quot; -a @sara -s &quot;To Do&quot; -l auth --priority high --ac &quot;Must work&quot; --notes &quot;Initial setup done&quot; --dep task-1 -p 14` |
| List tasks  | `backlog task list [-s &lt;status&gt;] [-a &lt;assignee&gt;] [-p &lt;parent&gt;]` |
| List by parent | `backlog task list --parent 42` or `backlog task list -p task-42` |
| View detail | `backlog task 7` (interactive UI, press &#039;E&#039; to edit in editor) |
| View (AI mode) | `backlog task 7 --plain`                           |
| Edit        | `backlog task edit 7 -a @sara -l auth,backend`       |
| Add plan    | `backlog task edit 7 --plan &quot;Implementation approach&quot;`    |
| Add AC      | `backlog task edit 7 --ac &quot;New criterion&quot; --ac &quot;Another one&quot;` |
| Remove AC   | `backlog task edit 7 --remove-ac 2` (removes AC #2)      |
| Remove multiple ACs | `backlog task edit 7 --remove-ac 2 --remove-ac 4` (removes AC #2 and #4) |
| Check AC    | `backlog task edit 7 --check-ac 1` (marks AC #1 as done) |
| Check multiple ACs | `backlog task edit 7 --check-ac 1 --check-ac 3` (marks AC #1 and #3 as done) |
| Uncheck AC  | `backlog task edit 7 --uncheck-ac 3` (marks AC #3 as not done) |
| Mixed AC operations | `backlog task edit 7 --check-ac 1 --uncheck-ac 2 --remove-ac 4` |
| Add notes   | `backlog task edit 7 --notes &quot;Completed X, working on Y&quot;` (replaces existing) |
| Append notes | `backlog task edit 7 --append-notes &quot;New findings&quot;` |
| Add deps    | `backlog task edit 7 --dep task-1 --dep task-2`     |
| Archive     | `backlog task archive 7`                             |

#### Multi‑line input (description/plan/notes)

The CLI preserves input literally; `\n` sequences are not auto‑converted. Use one of the following to insert real newlines:

- **Bash/Zsh (ANSI‑C quoting)**
  - Description: `backlog task create &quot;Feature&quot; --desc $&#039;Line1\nLine2\n\nFinal paragraph&#039;`
  - Plan: `backlog task edit 7 --plan $&#039;1. Research\n2. Implement&#039;`
  - Notes: `backlog task edit 7 --notes $&#039;Completed A\nWorking on B&#039;`
  - Append notes: `backlog task edit 7 --append-notes $&#039;Added X\nAdded Y&#039;`
- **POSIX sh (printf)**
  - `backlog task create &quot;Feature&quot; --desc &quot;$(printf &#039;Line1\nLine2\n\nFinal paragraph&#039;)&quot;`
- **PowerShell (backtick)**
  - `backlog task create &quot;Feature&quot; --desc &quot;Line1`nLine2`n`nFinal paragraph&quot;`

Tip: Help text shows Bash examples with escaped `\\n` for readability; when typing, `$&#039;\n&#039;` expands to a newline.

### Search

Find tasks, documents, and decisions across your entire backlog with fuzzy search:

| Action             | Example                                              |
|--------------------|------------------------------------------------------|
| Search tasks       | `backlog search &quot;auth&quot;`                        |
| Filter by status   | `backlog search &quot;api&quot; --status &quot;In Progress&quot;`   |
| Filter by priority | `backlog search &quot;bug&quot; --priority high`        |
| Combine filters    | `backlog search &quot;web&quot; --status &quot;To Do&quot; --priority medium` |
| Plain text output  | `backlog search &quot;feature&quot; --plain` (for scripts/AI) |

**Search features:**
- **Fuzzy matching** -- finds &quot;authentication&quot; when searching for &quot;auth&quot;
- **Interactive filters** -- refine your search in real-time with the TUI
- **Live filtering** -- see results update as you type (no Enter needed)

### Draft Workflow

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Create draft | `backlog task create &quot;Feature&quot; --draft`             |
| Draft flow  | `backlog draft create &quot;Spike GraphQL&quot;` → `backlog draft promote 3.1` |
| Demote to draft| `backlog task demote &lt;id&gt;` |

### Board Operations

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Kanban board      | `backlog board` (interactive UI, press &#039;E&#039; to edit in editor) |
| Export board | `backlog board export [file]` (exports Kanban board to markdown) |
| Export with version | `backlog board export --export-version &quot;v1.0.0&quot;` (includes version in export) |

### Statistics &amp; Overview

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Project overview | `backlog overview` (interactive TUI showing project statistics) |

### Web Interface

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Web interface | `backlog browser` (launches web UI on port 6420) |
| Web custom port | `backlog browser --port 8080 --no-open` |

### Documentation

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Create doc | `backlog doc create &quot;API Guidelines&quot;` |
| Create with path | `backlog doc create &quot;Setup Guide&quot; -p guides/setup` |
| Create with type | `backlog doc create &quot;Architecture&quot; -t technical` |
| List docs | `backlog doc list` |
| View doc | `backlog doc view doc-1` |

### Decisions

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Create decision | `backlog decision create &quot;Use PostgreSQL for primary database&quot;` |
| Create with status | `backlog decision create &quot;Migrate to TypeScript&quot; -s proposed` |

### Agent Instructions

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Update agent files | `backlog agents --update-instructions` (updates CLAUDE.md, AGENTS.md, GEMINI.md, .github/copilot-instructions.md) |

### Maintenance

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| Cleanup done tasks | `backlog cleanup` (move old completed tasks to completed folder) |

Full help: `backlog --help`

---

## &lt;img src=&quot;./.github/configuration-256.png&quot; alt=&quot;Configuration&quot; width=&quot;28&quot; height=&quot;28&quot; align=&quot;center&quot;&gt; Configuration

Backlog.md merges the following layers (highest → lowest):

1. CLI flags
2. `backlog/config.yml` (per‑project)
3. `~/backlog/user` (per‑user)
4. Built‑ins

### Configuration Commands

| Action      | Example                                              |
|-------------|------------------------------------------------------|
| View all configs | `backlog config list` |
| Get specific config | `backlog config get defaultEditor` |
| Set config value | `backlog config set defaultEditor &quot;code --wait&quot;` |
| Enable auto-commit | `backlog config set autoCommit true` |
| Bypass git hooks | `backlog config set bypassGitHooks true` |
| Enable cross-branch check | `backlog config set checkActiveBranches true` |
| Set active branch days | `backlog config set activeBranchDays 30` |

### Available Configuration Options

| Key               | Purpose            | Default                       |
|-------------------|--------------------|-------------------------------|
| `defaultAssignee` | Pre‑fill assignee  | `[]`                          |
| `defaultStatus`   | First column       | `To Do`                       |
| `statuses`        | Board columns      | `[To Do, In Progress, Done]`  |
| `dateFormat`      | Date/time format   | `yyyy-mm-dd hh:mm`            |
| `timezonePreference` | Timezone for dates | `UTC`                     |
| `includeDatetimeInDates` | Add time to new dates | `true`              |
| `defaultEditor`   | Editor for &#039;E&#039; key | Platform default (nano/notepad) |
| `defaultPort`     | Web UI port        | `6420`                        |
| `autoOpenBrowser` | Open browser automatically | `true`            |
| `remoteOperations`| Enable remote git operations | `true`           |
| `autoCommit`      | Automatically commit task changes | `false`       |
| `bypassGitHooks`  | Skip git hooks when committing (uses --no-verify) | `false`       |
| `zeroPaddedIds`   | Pad all IDs (tasks, docs, etc.) with leading zeros | `(disabled)`  |
| `checkActiveBranches` | Check task states across active branches for accuracy | `true` |
| `activeBranchDays` | How many days a branch is considered active | `30` |

&gt; **Note**: Set `remoteOperations: false` to work offline. This disables git fetch operations and loads tasks from local branches only, useful when working without network connectivity.

&gt; **Git Control**: By default, `autoCommit` is set to `false`, giving you full control over your git history. Task operations will modify files but won&#039;t automatically commit changes. Set `autoCommit: true` if you prefer automatic commits for each task operation.

&gt; **Git Hooks**: If you have pre-commit hooks (like conventional commits or linters) that interfere with backlog.md&#039;s automated commits, set `bypassGitHooks: true` to skip them using the `--no-verify` flag.

&gt; **Performance**: Cross-branch checking ensures accurate task tracking across all active branches but may impact performance on large repositories. You can disable it by setting `checkActiveBranches: false` for maximum speed, or adjust `activeBranchDays` to control how far back to look for branch activity (lower values = better performance).

&gt; **Date/Time Support**: Backlog.md now supports datetime precision for all dates. New items automatically include time (YYYY-MM-DD HH:mm format in UTC), while existing date-only entries remain unchanged for backward compatibility. Use the migration script `bun src/scripts/migrate-dates.ts` to optionally add time to existing items.

---

## &lt;img src=&quot;./.github/sharing-export-256.png&quot; alt=&quot;Sharing &amp; Export&quot; width=&quot;28&quot; height=&quot;28&quot; align=&quot;center&quot;&gt; Sharing &amp; Export

### Board Export

Export your Kanban board to a clean, shareable markdown file:

```bash
# Export to default Backlog.md file
backlog board export

# Export to custom file
backlog board export project-status.md

# Force overwrite existing file
backlog board export --force

# Export to README.md with board markers
backlog board export --readme

# Include a custom version string in the export
backlog board export --export-version &quot;v1.2.3&quot;
backlog board export --readme --export-version &quot;Release 2024.12.1-beta&quot;
```

Perfect for sharing project status, creating reports, or storing snapshots in version control.

---

&lt;!-- BOARD_START --&gt;

## 📊 Backlog.md Project Status (v1.13.4)

This board was automatically generated by [Backlog.md](https://backlog.md)

Generated on: 2025-09-22 21:36:55

| To Do | In Progress | Done |
| --- | --- | --- |
| **TASK-270** - Prevent command substitution in task creation inputs [@codex] | **TASK-273** - Refactor search [@codex]&lt;br&gt;*#core #search* | └─ **TASK-273.06** - 273.06: Web UI on centralized search [@codex]&lt;br&gt;*#web #search #ui* |
| **TASK-268** - Show agent instruction version status [@codex] | └─ **TASK-24.1** - CLI: Kanban board milestone view [@codex] | └─ **TASK-273.05** - 273.05: Server endpoints on shared store/search [@codex]&lt;br&gt;*#server #search #infra* |
| **TASK-267** - Add agent instruction version metadata [@codex] |  | └─ **TASK-273.04** - 273.04: CLI &amp; TUI search integration [@codex]&lt;br&gt;*#cli #tui #search* |
| **TASK-262** - TUI: Show all configured status columns in Kanban [@codex]&lt;br&gt;*#tui #board #kanban #config #parity* |  | └─ **TASK-273.03** - 273.03: Build core Fuse search service [@codex]&lt;br&gt;*#core #search* |
| **TASK-260** - Web UI: Add filtering to All Tasks view [@codex]&lt;br&gt;*#web-ui #filters #ui* |  | └─ **TASK-273.02** - 273.02: Introduce shared content store [@codex]&lt;br&gt;*#core #infra #search* |
| **TASK-259** - Add task list filters for Status and Priority&lt;br&gt;*#tui #filters #ui* |  | └─ **TASK-273.01** - 273.01: Migrate domain types to rawContent [@codex]&lt;br&gt;*#core #types #search* |
| **TASK-257** - Deep link URLs for tasks in board and list views |  | **TASK-272** - Adopt npm trusted publishing for releases [@codex] |
| **TASK-200** - Add Claude Code integration with workflow commands during init&lt;br&gt;*#enhancement #developer-experience* |  | **TASK-269** - Refactor backlog init agent selection [@codex] |
| **TASK-244** - TUI: add live updates via watch in task list and kanban [@codex]&lt;br&gt;*#tui #watcher #enhancement* |  | **TASK-271** - Fix acceptance criteria section removal when list emptied [@codex] |
| **TASK-218** - Update documentation and tests for sequences&lt;br&gt;*#sequences #documentation #testing* |  | **TASK-266** - Fix Implementation Notes heading truncation in web UI [@codex]&lt;br&gt;*#web-ui #bug* |
| **TASK-217** - Create web UI for sequences with drag-and-drop&lt;br&gt;*#sequences #web-ui #frontend* |  | **TASK-265** - Web UI: Enhance all tasks view with in-progress highlighting and done tasks toggle [@web-ui-agent]&lt;br&gt;*#ui #enhancement* |
| └─ **TASK-217.03** - Sequences web UI: move tasks and update dependencies&lt;br&gt;*#sequences* |  | **TASK-264** - TUI: Fix regression in task popup scrolling with arrow keys [@codex]&lt;br&gt;*#bug #tui #regression* |
| └─ **TASK-217.04** - Sequences web UI: tests&lt;br&gt;*#sequences* |  |  |
| └─ **TASK-217.02** - Sequences web UI: list sequences&lt;br&gt;*#sequences* |  |  |
| **TASK-243** - Enable TUI task reordering with Shift+Arrow keys [@codex]&lt;br&gt;*#tui #ui #enhancement* |  |  |
| **TASK-240** - Improve binary resolution on Apple Silicon (Rosetta/arch mismatch) [@codex]&lt;br&gt;*#packaging #bug #macos* |  |  |
| **TASK-239** - Feature: Auto-link tasks to documents/decisions + backlinks [@codex]&lt;br&gt;*#web #enhancement #docs* |  |  |
| **TASK-222** - Improve task and subtask visualization in web UI |  |  |
| **TASK-208** - Add paste-as-markdown support in Web UI&lt;br&gt;*#web-ui #enhancement #markdown* |  |  |

&lt;!-- BOARD_END --&gt;

### License

Backlog.md is released under the **MIT License** – do anything, just give credit. See [LICENSE](LICEN

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[winfunc/opcode]]></title>
            <link>https://github.com/winfunc/opcode</link>
            <guid>https://github.com/winfunc/opcode</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:51 GMT</pubDate>
            <description><![CDATA[A powerful GUI app and Toolkit for Claude Code - Create custom agents, manage interactive Claude Code sessions, run secure background agents, and more.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/winfunc/opcode">winfunc/opcode</a></h1>
            <p>A powerful GUI app and Toolkit for Claude Code - Create custom agents, manage interactive Claude Code sessions, run secure background agents, and more.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 17,445</p>
            <p>Forks: 1,290</p>
            <p>Stars today: 130 stars today</p>
            <h2>README</h2><pre>
&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;src-tauri/icons/icon.png&quot; alt=&quot;opcode Logo&quot; width=&quot;120&quot; height=&quot;120&quot;&gt;

  &lt;h1&gt;opcode&lt;/h1&gt;
  
  &lt;p&gt;
    &lt;strong&gt;A powerful GUI app and Toolkit for Claude Code&lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;strong&gt;Create custom agents, manage interactive Claude Code sessions, run secure background agents, and more.&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;#features&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Features-✨-blue?style=for-the-badge&quot; alt=&quot;Features&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;#installation&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Install-🚀-green?style=for-the-badge&quot; alt=&quot;Installation&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;#usage&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Usage-📖-purple?style=for-the-badge&quot; alt=&quot;Usage&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;#development&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Develop-🛠️-orange?style=for-the-badge&quot; alt=&quot;Development&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://discord.com/invite/KYwhHVzUsY&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-Join-5865F2?style=for-the-badge&amp;logo=discord&amp;logoColor=white&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

![457013521-6133a738-d0cb-4d3e-8746-c6768c82672c](https://github.com/user-attachments/assets/a028de9e-d881-44d8-bae5-7326ab3558b9)



https://github.com/user-attachments/assets/6bceea0f-60b6-4c3e-a745-b891de00b8d0



&gt; [!TIP]
&gt; **⭐ Star the repo and follow [@getAsterisk](https://x.com/getAsterisk) on X for early access to `asteria-swe-v0`**.

&gt; [!NOTE]
&gt; This project is not affiliated with, endorsed by, or sponsored by Anthropic. Claude is a trademark of Anthropic, PBC. This is an independent developer project using Claude.

## 🌟 Overview

**opcode** is a powerful desktop application that transforms how you interact with Claude Code. Built with Tauri 2, it provides a beautiful GUI for managing your Claude Code sessions, creating custom agents, tracking usage, and much more.

Think of opcode as your command center for Claude Code - bridging the gap between the command-line tool and a visual experience that makes AI-assisted development more intuitive and productive.

## 📋 Table of Contents

- [🌟 Overview](#-overview)
- [✨ Features](#-features)
  - [🗂️ Project &amp; Session Management](#️-project--session-management)
  - [🤖 CC Agents](#-cc-agents)
  
  - [📊 Usage Analytics Dashboard](#-usage-analytics-dashboard)
  - [🔌 MCP Server Management](#-mcp-server-management)
  - [⏰ Timeline &amp; Checkpoints](#-timeline--checkpoints)
  - [📝 CLAUDE.md Management](#-claudemd-management)
- [📖 Usage](#-usage)
  - [Getting Started](#getting-started)
  - [Managing Projects](#managing-projects)
  - [Creating Agents](#creating-agents)
  - [Tracking Usage](#tracking-usage)
  - [Working with MCP Servers](#working-with-mcp-servers)
- [🚀 Installation](#-installation)
- [🔨 Build from Source](#-build-from-source)
- [🛠️ Development](#️-development)
- [🔒 Security](#-security)
- [🤝 Contributing](#-contributing)
- [📄 License](#-license)
- [🙏 Acknowledgments](#-acknowledgments)

## ✨ Features

### 🗂️ **Project &amp; Session Management**
- **Visual Project Browser**: Navigate through all your Claude Code projects in `~/.claude/projects/`
- **Session History**: View and resume past coding sessions with full context
- **Smart Search**: Find projects and sessions quickly with built-in search
- **Session Insights**: See first messages, timestamps, and session metadata at a glance

### 🤖 **CC Agents**
- **Custom AI Agents**: Create specialized agents with custom system prompts and behaviors
- **Agent Library**: Build a collection of purpose-built agents for different tasks
- **Background Execution**: Run agents in separate processes for non-blocking operations
- **Execution History**: Track all agent runs with detailed logs and performance metrics



### 📊 **Usage Analytics Dashboard**
- **Cost Tracking**: Monitor your Claude API usage and costs in real-time
- **Token Analytics**: Detailed breakdown by model, project, and time period
- **Visual Charts**: Beautiful charts showing usage trends and patterns
- **Export Data**: Export usage data for accounting and analysis

### 🔌 **MCP Server Management**
- **Server Registry**: Manage Model Context Protocol servers from a central UI
- **Easy Configuration**: Add servers via UI or import from existing configs
- **Connection Testing**: Verify server connectivity before use
- **Claude Desktop Import**: Import server configurations from Claude Desktop

### ⏰ **Timeline &amp; Checkpoints**
- **Session Versioning**: Create checkpoints at any point in your coding session
- **Visual Timeline**: Navigate through your session history with a branching timeline
- **Instant Restore**: Jump back to any checkpoint with one click
- **Fork Sessions**: Create new branches from existing checkpoints
- **Diff Viewer**: See exactly what changed between checkpoints

### 📝 **CLAUDE.md Management**
- **Built-in Editor**: Edit CLAUDE.md files directly within the app
- **Live Preview**: See your markdown rendered in real-time
- **Project Scanner**: Find all CLAUDE.md files in your projects
- **Syntax Highlighting**: Full markdown support with syntax highlighting

## 📖 Usage

### Getting Started

1. **Launch opcode**: Open the application after installation
2. **Welcome Screen**: Choose between CC Agents or Projects
3. **First Time Setup**: opcode will automatically detect your `~/.claude` directory

### Managing Projects

```
Projects → Select Project → View Sessions → Resume or Start New
```

- Click on any project to view its sessions
- Each session shows the first message and timestamp
- Resume sessions directly or start new ones

### Creating Agents

```
CC Agents → Create Agent → Configure → Execute
```

1. **Design Your Agent**: Set name, icon, and system prompt
2. **Configure Model**: Choose between available Claude models
3. **Set Permissions**: Configure file read/write and network access
4. **Execute Tasks**: Run your agent on any project

### Tracking Usage

```
Menu → Usage Dashboard → View Analytics
```

- Monitor costs by model, project, and date
- Export data for reports
- Set up usage alerts (coming soon)

### Working with MCP Servers

```
Menu → MCP Manager → Add Server → Configure
```

- Add servers manually or via JSON
- Import from Claude Desktop configuration
- Test connections before using

## 🚀 Installation

### Prerequisites

- **Claude Code CLI**: Install from [Claude&#039;s official site](https://claude.ai/code)

### Release Executables Will Be Published Soon

## 🔨 Build from Source

### Prerequisites

Before building opcode from source, ensure you have the following installed:

#### System Requirements

- **Operating System**: Windows 10/11, macOS 11+, or Linux (Ubuntu 20.04+)
- **RAM**: Minimum 4GB (8GB recommended)
- **Storage**: At least 1GB free space

#### Required Tools

1. **Rust** (1.70.0 or later)
   ```bash
   # Install via rustup
   curl --proto &#039;=https&#039; --tlsv1.2 -sSf https://sh.rustup.rs | sh
   ```

2. **Bun** (latest version)
   ```bash
   # Install bun
   curl -fsSL https://bun.sh/install | bash
   ```

3. **Git**
   ```bash
   # Usually pre-installed, but if not:
   # Ubuntu/Debian: sudo apt install git
   # macOS: brew install git
   # Windows: Download from https://git-scm.com
   ```

4. **Claude Code CLI**
   - Download and install from [Claude&#039;s official site](https://claude.ai/code)
   - Ensure `claude` is available in your PATH

#### Platform-Specific Dependencies

**Linux (Ubuntu/Debian)**
```bash
# Install system dependencies
sudo apt update
sudo apt install -y \
  libwebkit2gtk-4.1-dev \
  libgtk-3-dev \
  libayatana-appindicator3-dev \
  librsvg2-dev \
  patchelf \
  build-essential \
  curl \
  wget \
  file \
  libssl-dev \
  libxdo-dev \
  libsoup-3.0-dev \
  libjavascriptcoregtk-4.1-dev
```

**macOS**
```bash
# Install Xcode Command Line Tools
xcode-select --install

# Install additional dependencies via Homebrew (optional)
brew install pkg-config
```

**Windows**
- Install [Microsoft C++ Build Tools](https://visualstudio.microsoft.com/visual-cpp-build-tools/)
- Install [WebView2](https://developer.microsoft.com/microsoft-edge/webview2/) (usually pre-installed on Windows 11)

### Build Steps

1. **Clone the Repository**
   ```bash
   git clone https://github.com/getAsterisk/opcode.git
   cd opcode
   ```

2. **Install Frontend Dependencies**
   ```bash
   bun install
   ```

3. **Build the Application**
   
   **For Development (with hot reload)**
   ```bash
   bun run tauri dev
   ```
   
   **For Production Build**
   ```bash
   # Build the application
   bun run tauri build
   
   # The built executable will be in:
   # - Linux: src-tauri/target/release/
   # - macOS: src-tauri/target/release/
   # - Windows: src-tauri/target/release/
   ```

4. **Platform-Specific Build Options**
   
   **Debug Build (faster compilation, larger binary)**
   ```bash
   bun run tauri build --debug
   ```
   
   **Universal Binary for macOS (Intel + Apple Silicon)**
   ```bash
   bun run tauri build --target universal-apple-darwin
   ```

### Troubleshooting

#### Common Issues

1. **&quot;cargo not found&quot; error**
   - Ensure Rust is installed and `~/.cargo/bin` is in your PATH
   - Run `source ~/.cargo/env` or restart your terminal

2. **Linux: &quot;webkit2gtk not found&quot; error**
   - Install the webkit2gtk development packages listed above
   - On newer Ubuntu versions, you might need `libwebkit2gtk-4.0-dev`

3. **Windows: &quot;MSVC not found&quot; error**
   - Install Visual Studio Build Tools with C++ support
   - Restart your terminal after installation

4. **&quot;claude command not found&quot; error**
   - Ensure Claude Code CLI is installed and in your PATH
   - Test with `claude --version`

5. **Build fails with &quot;out of memory&quot;**
   - Try building with fewer parallel jobs: `cargo build -j 2`
   - Close other applications to free up RAM

#### Verify Your Build

After building, you can verify the application works:

```bash
# Run the built executable directly
# Linux/macOS
./src-tauri/target/release/opcode

# Windows
./src-tauri/target/release/opcode.exe
```

### Build Artifacts

The build process creates several artifacts:

- **Executable**: The main opcode application
- **Installers** (when using `tauri build`):
  - `.deb` package (Linux)
  - `.AppImage` (Linux)
  - `.dmg` installer (macOS)
  - `.msi` installer (Windows)
  - `.exe` installer (Windows)

All artifacts are located in `src-tauri/target/release/`.

## 🛠️ Development

### Tech Stack

- **Frontend**: React 18 + TypeScript + Vite 6
- **Backend**: Rust with Tauri 2
- **UI Framework**: Tailwind CSS v4 + shadcn/ui
- **Database**: SQLite (via rusqlite)
- **Package Manager**: Bun

### Project Structure

```
opcode/
├── src/                   # React frontend
│   ├── components/        # UI components
│   ├── lib/               # API client &amp; utilities
│   └── assets/            # Static assets
├── src-tauri/             # Rust backend
│   ├── src/
│   │   ├── commands/      # Tauri command handlers
│   │   ├── checkpoint/    # Timeline management
│   │   └── process/       # Process management
│   └── tests/             # Rust test suite
└── public/                # Public assets
```

### Development Commands

```bash
# Start development server
bun run tauri dev

# Run frontend only
bun run dev

# Type checking
bunx tsc --noEmit

# Run Rust tests
cd src-tauri &amp;&amp; cargo test

# Format code
cd src-tauri &amp;&amp; cargo fmt
```

## 🔒 Security

opcode prioritizes your privacy and security:

1. **Process Isolation**: Agents run in separate processes
2. **Permission Control**: Configure file and network access per agent
3. **Local Storage**: All data stays on your machine
4. **No Telemetry**: No data collection or tracking
5. **Open Source**: Full transparency through open source code

## 🤝 Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### Areas for Contribution

- 🐛 Bug fixes and improvements
- ✨ New features and enhancements
- 📚 Documentation improvements
- 🎨 UI/UX enhancements
- 🧪 Test coverage
- 🌐 Internationalization

## 📄 License

This project is licensed under the AGPL License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Built with [Tauri](https://tauri.app/) - The secure framework for building desktop apps
- [Claude](https://claude.ai) by Anthropic

---

&lt;div align=&quot;center&quot;&gt;
  &lt;p&gt;
    &lt;strong&gt;Made with ❤️ by the &lt;a href=&quot;https://asterisk.so/&quot;&gt;Asterisk&lt;/a&gt;&lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href=&quot;https://github.com/getAsterisk/opcode/issues&quot;&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href=&quot;https://github.com/getAsterisk/opcode/issues&quot;&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;


## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=getAsterisk/opcode&amp;type=Date)](https://www.star-history.com/#getAsterisk/opcode&amp;Date)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[immich-app/immich]]></title>
            <link>https://github.com/immich-app/immich</link>
            <guid>https://github.com/immich-app/immich</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:50 GMT</pubDate>
            <description><![CDATA[High performance self-hosted photo and video management solution.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/immich-app/immich">immich-app/immich</a></h1>
            <p>High performance self-hosted photo and video management solution.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 77,594</p>
            <p>Forks: 4,107</p>
            <p>Stars today: 106 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt; 
  &lt;br/&gt;
  &lt;a href=&quot;https://opensource.org/license/agpl-v3&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-AGPL_v3-blue.svg?color=3F51B5&amp;style=for-the-badge&amp;label=License&amp;logoColor=000000&amp;labelColor=ececec&quot; alt=&quot;License: AGPLv3&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://discord.immich.app&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/discord/979116623879368755.svg?label=Discord&amp;logo=Discord&amp;style=for-the-badge&amp;logoColor=000000&amp;labelColor=ececec&quot; alt=&quot;Discord&quot;/&gt;
  &lt;/a&gt;
  &lt;br/&gt;
  &lt;br/&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;design/immich-logo-stacked-light.svg&quot; width=&quot;300&quot; title=&quot;Login With Custom URL&quot;&gt;
&lt;/p&gt;
&lt;h3 align=&quot;center&quot;&gt;High performance self-hosted photo and video management solution&lt;/h3&gt;
&lt;br/&gt;
&lt;a href=&quot;https://immich.app&quot;&gt;
&lt;img src=&quot;design/immich-screenshots.png&quot; title=&quot;Main Screenshot&quot;&gt;
&lt;/a&gt;
&lt;br/&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;readme_i18n/README_ca_ES.md&quot;&gt;Català&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_es_ES.md&quot;&gt;Español&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_fr_FR.md&quot;&gt;Français&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_it_IT.md&quot;&gt;Italiano&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_ja_JP.md&quot;&gt;日本語&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_ko_KR.md&quot;&gt;한국어&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_de_DE.md&quot;&gt;Deutsch&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_nl_NL.md&quot;&gt;Nederlands&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_tr_TR.md&quot;&gt;Türkçe&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_zh_CN.md&quot;&gt;中文&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_uk_UA.md&quot;&gt;Українська&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_ru_RU.md&quot;&gt;Русский&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_pt_BR.md&quot;&gt;Português Brasileiro&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_sv_SE.md&quot;&gt;Svenska&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_ar_JO.md&quot;&gt;العربية&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_vi_VN.md&quot;&gt;Tiếng Việt&lt;/a&gt;
  &lt;a href=&quot;readme_i18n/README_th_TH.md&quot;&gt;ภาษาไทย&lt;/a&gt;
&lt;/p&gt;

## Disclaimer

- ⚠️ The project is under **very active** development.
- ⚠️ Expect bugs and breaking changes.
- ⚠️ **Do not use the app as the only way to store your photos and videos.**
- ⚠️ Always follow [3-2-1](https://www.backblaze.com/blog/the-3-2-1-backup-strategy/) backup plan for your precious photos and videos!

&gt; [!NOTE]
&gt; You can find the main documentation, including installation guides, at https://immich.app/.

## Links

- [Documentation](https://immich.app/docs)
- [About](https://immich.app/docs/overview/introduction)
- [Installation](https://immich.app/docs/install/requirements)
- [Roadmap](https://immich.app/roadmap)
- [Demo](#demo)
- [Features](#features)
- [Translations](https://immich.app/docs/developer/translations)
- [Contributing](https://immich.app/docs/overview/support-the-project)

## Demo

Access the demo [here](https://demo.immich.app). For the mobile app, you can use `https://demo.immich.app` for the `Server Endpoint URL`.

### Login credentials

| Email           | Password |
| --------------- | -------- |
| demo@immich.app | demo     |

## Features

| Features                                     | Mobile | Web |
| :------------------------------------------- | ------ | --- |
| Upload and view videos and photos            | Yes    | Yes |
| Auto backup when the app is opened           | Yes    | N/A |
| Prevent duplication of assets                | Yes    | Yes |
| Selective album(s) for backup                | Yes    | N/A |
| Download photos and videos to local device   | Yes    | Yes |
| Multi-user support                           | Yes    | Yes |
| Album and Shared albums                      | Yes    | Yes |
| Scrubbable/draggable scrollbar               | Yes    | Yes |
| Support raw formats                          | Yes    | Yes |
| Metadata view (EXIF, map)                    | Yes    | Yes |
| Search by metadata, objects, faces, and CLIP | Yes    | Yes |
| Administrative functions (user management)   | No     | Yes |
| Background backup                            | Yes    | N/A |
| Virtual scroll                               | Yes    | Yes |
| OAuth support                                | Yes    | Yes |
| API Keys                                     | N/A    | Yes |
| LivePhoto/MotionPhoto backup and playback    | Yes    | Yes |
| Support 360 degree image display             | No     | Yes |
| User-defined storage structure               | Yes    | Yes |
| Public Sharing                               | Yes    | Yes |
| Archive and Favorites                        | Yes    | Yes |
| Global Map                                   | Yes    | Yes |
| Partner Sharing                              | Yes    | Yes |
| Facial recognition and clustering            | Yes    | Yes |
| Memories (x years ago)                       | Yes    | Yes |
| Offline support                              | Yes    | No  |
| Read-only gallery                            | Yes    | Yes |
| Stacked Photos                               | Yes    | Yes |
| Tags                                         | No     | Yes |
| Folder View                                  | Yes    | Yes |

## Translations

Read more about translations [here](https://immich.app/docs/developer/translations).

&lt;a href=&quot;https://hosted.weblate.org/engage/immich/&quot;&gt;
&lt;img src=&quot;https://hosted.weblate.org/widget/immich/immich/multi-auto.svg&quot; alt=&quot;Translation status&quot; /&gt;
&lt;/a&gt;

## Repository activity

![Activities](https://repobeats.axiom.co/api/embed/9e86d9dc3ddd137161f2f6d2e758d7863b1789cb.svg &quot;Repobeats analytics image&quot;)

## Star history

&lt;a href=&quot;https://star-history.com/#immich-app/immich&amp;Date&quot;&gt;
 &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=immich-app/immich&amp;type=Date&amp;theme=dark&quot; /&gt;
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=immich-app/immich&amp;type=Date&quot; /&gt;
   &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=immich-app/immich&amp;type=Date&quot; width=&quot;100%&quot; /&gt;
 &lt;/picture&gt;
&lt;/a&gt;

## Contributors

&lt;a href=&quot;https://github.com/alextran1502/immich/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=immich-app/immich&quot; width=&quot;100%&quot;/&gt;
&lt;/a&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[Expensify/App]]></title>
            <link>https://github.com/Expensify/App</link>
            <guid>https://github.com/Expensify/App</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:49 GMT</pubDate>
            <description><![CDATA[Welcome to New Expensify: a complete re-imagination of financial collaboration, centered around chat. Help us build the next generation of Expensify by sharing feedback and contributing to the code.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Expensify/App">Expensify/App</a></h1>
            <p>Welcome to New Expensify: a complete re-imagination of financial collaboration, centered around chat. Help us build the next generation of Expensify by sharing feedback and contributing to the code.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 4,444</p>
            <p>Forks: 3,389</p>
            <p>Stars today: 7 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://new.expensify.com&quot;&gt;
        &lt;img src=&quot;https://raw.githubusercontent.com/Expensify/App/main/web/favicon.png&quot; width=&quot;64&quot; height=&quot;64&quot; alt=&quot;New Expensify Icon&quot;&gt;
    &lt;/a&gt;
    &lt;h1&gt;
        &lt;a href=&quot;https://new.expensify.com&quot;&gt;
            New Expensify
        &lt;/a&gt;
    &lt;/h1&gt;
&lt;/div&gt;

#### Table of Contents
* [Local Development](#local-development)
* [Testing on browsers in simulators and emulators](#testing-on-browsers-in-simulators-and-emulators)
* [Running The Tests](#running-the-tests)
* [Debugging](#debugging)

#### Additional Reading
* [Application Philosophy](contributingGuides/philosophies/INDEX.md)
* [API Details](contributingGuides/API.md)
* [Contributing to Expensify](contributingGuides/CONTRIBUTING.md)
* [Expensify Code of Conduct](CODE_OF_CONDUCT.md)
* [Contributor License Agreement](CLA.md)
* [React StrictMode](contributingGuides/STRICT_MODE.md)
* [Left Hand Navigation(LHN)](contributingGuides/LEFT_HAND_NAVIGATION.md)
* [HybridApp - additional info &amp; troubleshooting](contributingGuides/HYBRID_APP.md)

----

# Local development
These instructions should get you set up ready to work on New Expensify 🙌

## Getting Started
1. Install `nvm` then `node` &amp; `npm`: `brew install nvm &amp;&amp; nvm install`
2. Install `watchman`: `brew install watchman`
3. Install dependencies: `npm install`
4. Install `mkcert`: `brew install mkcert` followed by `npm run setup-https`. If you are not using macOS, follow the instructions [here](https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation).
5. Create a host entry in your local hosts file, `/etc/hosts` for dev.new.expensify.com pointing to localhost:
```
127.0.0.1 dev.new.expensify.com
```

You can use any IDE or code editing tool for developing on any platform. Use your favorite!

## Recommended `node` setup
In order to have more consistent builds, we use a strict `node` and `npm` version as defined in the `package.json` `engines` field and `.nvmrc` file. `npm install` will fail if you do not use the version defined, so it is recommended to install `node` via `nvm` for easy node version management. Automatic `node` version switching can be installed for [`zsh`](https://github.com/nvm-sh/nvm#zsh) or [`bash`](https://github.com/nvm-sh/nvm#bash) using `nvm`.

## Configuring HTTPS
The webpack development server now uses https. If you&#039;re using a mac, you can simply run `npm run setup-https`.

If you&#039;re using another operating system, you will need to ensure `mkcert` is installed, and then follow the instructions in the repository to generate certificates valid for `dev.new.expensify.com` and `localhost`. The certificate should be named `certificate.pem` and the key should be named `key.pem`. They should be placed in `config/webpack`.

## Running the web app 🕸
* To run the **development web app**: `npm run web`
* Changes applied to Javascript will be applied automatically via WebPack as configured in `webpack.dev.ts`

## Running the iOS app 📱
For an M1 Mac, read this [SO](https://stackoverflow.com/questions/64901180/how-to-run-cocoapods-on-apple-silicon-m1) for installing cocoapods.

* If you haven&#039;t already, install Xcode tools and make sure to install the optional &quot;iOS Platform&quot; package as well. This installation may take awhile.
    * After installation, check in System Settings that there&#039;s no update for Xcode. Otherwise, you may encounter issues later that don&#039;t explain that you solve them by updating Xcode.
* Install project gems, including cocoapods, using bundler to ensure everyone uses the same versions. In the project root, run: `bundle install`
    * If you get the error `Could not find &#039;bundler&#039;`, install the bundler gem first: `gem install bundler` and try again.
    * If you are using MacOS and get the error `Gem::FilePermissionError` when trying to install the bundler gem, you&#039;re likely using system Ruby, which requires administrator permission to modify. To get around this, install another version of Ruby with a version manager like [rbenv](https://github.com/rbenv/rbenv#installation).
* Before installing iOS dependencies, you need to obtain a token from Mapbox to download their SDKs. Please run `npm run configure-mapbox` and follow the instructions.
    * For help with MapBox token, you can see [this Slack thread](https://expensify.slack.com/archives/C01GTK53T8Q/p1692740856745279?thread_ts=1692322511.804599&amp;cid=C01GTK53T8Q)
* To install the iOS dependencies, run: `npm install &amp;&amp; npm run pod-install`
* If you are an Expensify employee and want to point the emulator to your local VM, follow [this](https://stackoverflow.com/c/expensify/questions/7699)
* To run a on a **Development Simulator**: `npm run ios`
* Changes applied to Javascript will be applied automatically, any changes to native code will require a recompile

If you want to run the app on an actual physical iOS device, please follow the instructions [here](https://github.com/Expensify/App/blob/main/contributingGuides/HOW_TO_BUILD_APP_ON_PHYSICAL_IOS_DEVICE.md).

## Running the Android app 🤖
* Before installing Android dependencies, you need to obtain a token from Mapbox to download their SDKs. Please run `npm run configure-mapbox` and follow the instructions. If you already did this step for iOS, there is no need to repeat this step.
* Go through the official React-Native instructions on [this page](https://reactnative.dev/docs/environment-setup?guide=native&amp;platform=android) to start running the app on android.
* If you are an Expensify employee and want to point the emulator to your local VM, follow [this](https://stackoverflow.com/c/expensify/questions/7699)
* To run a on a **Development Emulator**: `npm run android`
* Changes applied to Javascript will be applied automatically, any changes to native code will require a recompile

### Enabling prebuilt `react-native` artifacts on Android
#### Disabling build from source

By default, `react-native` is built from source when building the Android app. However, you can enable prebuilt artifacts to speed up the build process:

   - Open `android/gradle.properties` (for Standalone NewDot) or `Mobile-Expensify/Android/gradle.properties` (for HybridApp)
   - Set `patchedArtifacts.forceBuildFromSource=false`

#### Configuring GitHub CLI

To use prebuilt artifacts, you need to have GitHub CLI installed and configured:

1. Install GitHub CLI by following the instructions from [cli.github.com](https://cli.github.com/)

2. Create a GitHub Personal Access Token:
   - Go to [GitHub Settings &gt; Developer Settings &gt; Personal Access Tokens](https://github.com/settings/tokens)
   - Click &quot;Generate new token (classic)&quot;
   - Select the following scopes:
     - `repo`
     - `read:org`
     - `gist`
     - `read:packages`
   - Copy the generated token

3. Login to GitHub CLI:
   ```bash
   echo &quot;YOUR_TOKEN&quot; | gh auth login --with-token
   ```
4. Verify the login was successful:
   ```bash
   gh auth status
   ```
   You should see a message confirming you are authenticated with your GitHub account.

After completing these steps, you should be able to build Android apps with prebuilt `react-native` artifacts.

## Running the MacOS desktop app 🖥
* To run the **Development app**, run: `npm run desktop`, this will start a new Electron process running on your MacOS desktop in the `dist/Mac` folder.

## Receiving Mobile Push Notifications
To receive mobile push notifications in the development build while hitting the Staging or Production API, you need to use the production airship config.
### Android

#### HybridApp

Add `inProduction = true` to [Mobile-Expensify/Android/assets/airshipconfig.properties](https://github.com/Expensify/Mobile-Expensify/blob/main/Android/assets/airshipconfig.properties)

#### Standalone

Copy the [production config](https://github.com/Expensify/App/blob/d7c1256f952c0020344d809ee7299b49a4c70db2/android/app/src/main/assets/airshipconfig.properties#L1-L7) to the [development config](https://github.com/Expensify/App/blob/d7c1256f952c0020344d809ee7299b49a4c70db2/android/app/src/development/assets/airshipconfig.properties#L1-L8).

### iOS

#### HybridApp

Set `inProduction` to `true` in [Mobile-Expensify/iOS/AirshipConfig/Debug/AirshipConfig.plist](https://github.com/Expensify/Mobile-Expensify/blob/ab67becf5e8610c8df9b4da3132501153c7291a1/iOS/AirshipConfig/Debug/AirshipConfig.plist#L8)

#### Standalone

Replace the [development key and secret](https://github.com/Expensify/App/blob/d7c1256f952c0020344d809ee7299b49a4c70db2/ios/AirshipConfig.plist#L7-L10) with the [production values](https://github.com/Expensify/App/blob/d7c1256f952c0020344d809ee7299b49a4c70db2/ios/AirshipConfig.plist#L11-L14).

## Troubleshooting
1. If you are having issues with **_Getting Started_**, please reference [React Native&#039;s Documentation](https://reactnative.dev/docs/environment-setup)
2. If you are running into CORS errors like (in the browser dev console)
   ```sh
   Access to fetch at &#039;https://www.expensify.com/api/BeginSignIn&#039; from origin &#039;http://localhost:8080&#039; has been blocked by CORS policy
   ```
   You probably have a misconfigured `.env` file - remove it (`rm .env`) and try again

**Note:** Expensify engineers that will be testing with the API in your local dev environment please refer to [these additional instructions](https://stackoverflow.com/c/expensify/questions/7699/7700).

## Environment variables
Creating an `.env` file is not necessary. We advise external contributors against it. It can lead to errors when
variables referenced here get updated since your local `.env` file is ignored.

- `NEW_EXPENSIFY_URL` - The root URL used for the website
- `SECURE_EXPENSIFY_URL` - The URL used to hit the Expensify secure API
- `EXPENSIFY_URL` - The URL used to hit the Expensify API
- `EXPENSIFY_PARTNER_NAME` - Constant used for the app when authenticating.
- `EXPENSIFY_PARTNER_PASSWORD` - Another constant used for the app when authenticating. (This is OK to be public)
- `PUSHER_APP_KEY` - Key used to authenticate with Pusher.com
- `SECURE_NGROK_URL` - Secure URL used for `ngrok` when testing
- `NGROK_URL` - URL used for `ngrok` when testing
- `USE_NGROK` - Flag to turn `ngrok` testing on or off
- `USE_WDYR` - Flag to turn [`Why Did You Render`](https://github.com/welldone-software/why-did-you-render) testing on or off
- `USE_WEB_PROXY`⚠️- Used in web/desktop development, it starts a server along the local development server to proxy
   requests to the backend. External contributors should set this to `true` otherwise they&#039;ll have CORS errors.
   If you don&#039;t want to start the proxy server set this explicitly to `false`
- `CAPTURE_METRICS` (optional) - Set this to `true` to capture performance metrics and see them in Flipper
   see [PERFORMANCE.md](contributingGuides/PERFORMANCE.md#performance-metrics-opt-in-on-local-release-builds) for more information
- `ONYX_METRICS` (optional) - Set this to `true` to capture even more performance metrics and see them in Flipper
   see [React-Native-Onyx#benchmarks](https://github.com/Expensify/react-native-onyx#benchmarks) for more information
- `E2E_TESTING` (optional) - This needs to be set to `true` when running the e2e tests for performance regression testing.
   This happens usually automatically, read [this](tests/e2e/README.md) for more information

&gt; If your changes to .env aren&#039;t having an effect, try `rm -rf .rock`, then re-run `npm run ios` or `npm run android`

----

# Testing on browsers in simulators and emulators

The development server is reached through the HTTPS protocol, and any client that access the development server needs a certificate.

You create this certificate by following the instructions in [`Configuring HTTPS`](#configuring-https) of this readme. When accessing the website served from the development server on browsers in iOS simulator or Android emulator, these virtual devices need to have the same certificate installed. Follow the steps below to install them.

#### Pre-requisite for Android flow
1. Open any emulator using Android Studio
2. Use `adb push &quot;$(mkcert -CAROOT)/rootCA.pem&quot; /storage/emulated/0/Download/` to push certificate to install in Download folder.
3. Install the certificate as CA certificate from the settings. On the Android emulator, this option can be found in Settings &gt; Security &gt; Encryption &amp; Credentials &gt; Install a certificate &gt; CA certificate.
4. Close the emulator.

**Note:** If you want to run app on `https://127.0.0.1:8082`, then just install the certificate and use `adb reverse tcp:8082 tcp:8082` on every startup.

#### Android Flow
1. Run `npm run setupNewDotWebForEmulators android`
2. Select the emulator you want to run if prompted. (If single emulator is available, then it will open automatically)
3. Let the script execute till the message `🎉 Done!`.

**Note:** If you want to run app on `https://dev.new.expensify.com:8082`, then just do the Android flow and use `npm run startAndroidEmulator` to start the Android Emulator every time (It will configure the emulator).


Possible Scenario:
The flow may fail to root with error `adbd cannot run as root in production builds`. In this case, please refer to https://stackoverflow.com/a/45668555. Or use `https://127.0.0.1:8082` for less hassle.

#### iOS Flow
1. Run `npm run setupNewDotWebForEmulators ios`
2. Select the emulator you want to run if prompted. (If single emulator is available, then it will open automatically)
3. Let the script execute till the message `🎉 Done!`.

#### All Flow
1. Run `npm run setupNewDotWebForEmulators all` or `npm run setupNewDotWebForEmulators`
2. Check if the iOS flow runs first and then Android flow runs.
3. Let the script execute till the message `🎉 Done!`.

----

# Running the tests
## Unit tests
Unit tests are valuable when you want to test one component. They should be short, fast, and ideally only test one thing.
Often times in order to write a unit test, you may need to mock data, a component, or library. We use the library [Jest](https://jestjs.io/)
to help run our Unit tests.

* To run the **Jest unit tests**: `npm run test`
* UI tests guidelines can be found [here](tests/ui/README.md)

## Performance tests
We use Reassure for monitoring performance regression. More detailed information can be found [here](tests/perf-test/README.md):

----

# Debugging
### iOS
1. If running on the iOS simulator pressing `⌘D` will open the debugging menu.
2. This will allow you to attach a debugger in your IDE, React Developer Tools, or your browser.
3. For more information on how to attach a debugger, see [React Native Debugging Documentation](https://reactnative.dev/docs/debugging#chrome-developer-tools)

Alternatively, you can also set up debugger using [Flipper](https://fbflipper.com/). After installation, press `⌘D` and select &quot;Open Debugger&quot;. This will open Flipper window. To view data stored by Onyx, go to Plugin Manager and install `async-storage` plugin.

## Android
Our React Native Android app now uses the `Hermes` JS engine which requires your browser for remote debugging. These instructions are specific to Chrome since that&#039;s what the Hermes documentation provided.
1. Navigate to `chrome://inspect`
2. Use the `Configure...` button to add the Metro server address (typically `localhost:8081`, check your `Metro` output)
3. You should now see a &quot;Hermes React Native&quot; target with an &quot;inspect&quot; link which can be used to bring up a debugger. If you don&#039;t see the &quot;inspect&quot; link, make sure the Metro server is running
4. You can now use the Chrome debug tools. See [React Native Debugging Hermes](https://reactnative.dev/docs/hermes#debugging-hermes-using-google-chromes-devtools)

## Web

To make it easier to test things in web, we expose the Onyx object to the window, so you can easily do `Onyx.set(&#039;bla&#039;, 1)`.

----

# Release Profiler
Often, performance issue debugging occurs in debug builds, which can introduce errors from elements such as JS Garbage Collection, Hermes debug markers, or LLDB pauses.

`react-native-release-profiler` facilitates profiling within release builds for accurate local problem-solving and broad performance analysis in production to spot regressions or collect extensive device data. Therefore, we will utilize the production build version

### Getting Started with Source Maps
To accurately profile your application, generating source maps for Android and iOS is crucial. Here&#039;s how to enable them:
1. Enable source maps on Android
Ensure the following is set in your app&#039;s `android/app/build.gradle` file.

    ```jsx
    project.ext.react = [
        enableHermes: true,
        hermesFlagsRelease: [&quot;-O&quot;, &quot;-output-source-map&quot;], // &lt;-- here, plus whichever flag was required to set this away from default
    ]
    ```

2. Enable source maps on IOS
Within Xcode head to the build phase - `Bundle React Native code and images`.

    ```jsx
    export SOURCEMAP_FILE=&quot;$(pwd)/../main.jsbundle.map&quot; // &lt;-- here;

    export NODE_BINARY=node
    ../node_modules/react-native/scripts/react-native-xcode.sh
    ```
3. Install the necessary packages and CocoaPods dependencies:
    ```jsx
    npm i &amp;&amp; npm run pod-install
    ```
4. Depending on the platform you are targeting, run your Android/iOS app in production mode.
5. Upon completion, the generated source map can be found at:
  Android: `android/app/build/generated/sourcemaps/react/productionRelease/index.android.bundle.map`
  IOS: `main.jsbundle.map`
  web: `dist/merged-source-map.js.map`

### Recording a Trace:
1. Ensure you have generated the source map as outlined above.
2. Launch the app in production mode.
3. Navigate to the feature you wish to profile.
4. Initiate the profiling session by tapping with four fingers (on mobile) or `cmd+d` (on web) to open the menu and selecting **`Use Profiling`**.
5. Close the menu and interact with the app.
6. After completing your interactions, tap with four fingers or `cmd+d` again and select to stop profiling.
7. You will be presented with a **`Share`** option to export the trace, which includes a trace file (`Profile&lt;app version&gt;.cpuprofile`) and build info (`AppInfo&lt;app version&gt;.json`).

Build info:
```jsx
{
    appVersion: &quot;1.0.0&quot;,
    environment: &quot;production&quot;,
    platform: &quot;IOS&quot;,
    totalMemory: &quot;3GB&quot;,
    usedMemory: &quot;300MB&quot;
}
```

### How to symbolicate trace record:
1. You have two files: `AppInfo&lt;app version&gt;.json` and `Profile&lt;app version&gt;.cpuprofile`
2. Place the `Profile&lt;app version&gt;.cpuprofile` file at the root of your project.
3. If you have already generated a source map from the steps above for this branch, you can skip to the next step. Otherwise, obtain the app version from `AppInfo&lt;app version&gt;.json` switch to that branch and generate the source map as described.

`IMPORTANT:` You should generate the source map from the same branch as the trace was recorded.

4. Use the following commands to symbolicate the trace for Android and iOS, respectively:
Android: `npm run symbolicate-release:android`
IOS: `npm run symbolicate-release:ios`
web: `npm run symbolicate-release:web`
5. A new file named `Profile_trace_for_&lt;app version&gt;-converted.json` will appear in your project&#039;s root folder.
6. Open this file in your tool of choice:
    - SpeedScope ([https://www.speedscope.app](https://www.speedscope.app/))
    - Perfetto UI (https://ui.perfetto.dev/)
    - Google Chrome&#039;s Tracing UI (chrome://tracing)

----
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[element-hq/element-web]]></title>
            <link>https://github.com/element-hq/element-web</link>
            <guid>https://github.com/element-hq/element-web</guid>
            <pubDate>Thu, 25 Sep 2025 00:04:48 GMT</pubDate>
            <description><![CDATA[A glossy Matrix collaboration client for the web.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/element-hq/element-web">element-hq/element-web</a></h1>
            <p>A glossy Matrix collaboration client for the web.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 12,102</p>
            <p>Forks: 2,292</p>
            <p>Stars today: 5 stars today</p>
            <h2>README</h2><pre>[![Chat](https://img.shields.io/matrix/element-web:matrix.org?logo=matrix)](https://matrix.to/#/#element-web:matrix.org)
![Tests](https://github.com/element-hq/element-web/actions/workflows/tests.yaml/badge.svg)
![Static Analysis](https://github.com/element-hq/element-web/actions/workflows/static_analysis.yaml/badge.svg)
[![Localazy](https://img.shields.io/endpoint?url=https%3A%2F%2Fconnect.localazy.com%2Fstatus%2Felement-web%2Fdata%3Fcontent%3Dall%26title%3Dlocalazy%26logo%3Dtrue)](https://localazy.com/p/element-web)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=element-web&amp;metric=alert_status)](https://sonarcloud.io/summary/new_code?id=element-web)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=element-web&amp;metric=coverage)](https://sonarcloud.io/summary/new_code?id=element-web)
[![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=element-web&amp;metric=vulnerabilities)](https://sonarcloud.io/summary/new_code?id=element-web)
[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=element-web&amp;metric=bugs)](https://sonarcloud.io/summary/new_code?id=element-web)

# Element

Element (formerly known as Vector and Riot) is a Matrix web client built using the [Matrix
JS SDK](https://github.com/matrix-org/matrix-js-sdk).

# Supported Environments

Element has several tiers of support for different environments:

- Supported
    - Definition:
        - Issues **actively triaged**, regressions **block** the release
    - Last 2 major versions of Chrome, Firefox, and Edge on desktop OSes
    - Last 2 versions of Safari
    - Latest release of official Element Desktop app on desktop OSes
    - Desktop OSes means macOS, Windows, and Linux versions for desktop devices
      that are actively supported by the OS vendor and receive security updates
- Best effort
    - Definition:
        - Issues **accepted**, regressions **do not block** the release
        - The wider Element Products (including Element Call and the Enterprise Server Suite) do still not officially support these browsers.
        - The element web project and its contributors should keep the client functioning and gracefully degrade where other sibling features (E.g. Element Call) may not function.
    - Last major release of Firefox ESR and Chrome/Edge Extended Stable
- Community Supported
    - Definition:
        - Issues **accepted**, regressions **do not block** the release
        - Community contributions are welcome to support these issues
    - Mobile web for current stable version of Chrome, Firefox, and Safari on Android, iOS, and iPadOS
- Not supported
    - Definition: Issues only affecting unsupported environments are **closed**
    - Everything else

The period of support for these tiers should last until the releases specified above, plus 1 app release cycle(2 weeks). In the case of Firefox ESR this is extended further to allow it land in Debian Stable.

For accessing Element on an Android or iOS device, we currently recommend the
native apps [element-android](https://github.com/element-hq/element-android)
and [element-ios](https://github.com/element-hq/element-ios).

# Getting Started

The easiest way to test Element is to just use the hosted copy at &lt;https://app.element.io&gt;.
The `develop` branch is continuously deployed to &lt;https://develop.element.io&gt;
for those who like living dangerously.

To host your own instance of Element see [Installing Element Web](docs/install.md).

To install Element as a desktop application, see [Running as a desktop app](#running-as-a-desktop-app) below.

# Important Security Notes

## Separate domains

We do not recommend running Element from the same domain name as your Matrix
homeserver. The reason is the risk of XSS (cross-site-scripting)
vulnerabilities that could occur if someone caused Element to load and render
malicious user generated content from a Matrix API which then had trusted
access to Element (or other apps) due to sharing the same domain.

We have put some coarse mitigations into place to try to protect against this
situation, but it&#039;s still not good practice to do it in the first place. See
&lt;https://github.com/element-hq/element-web/issues/1977&gt; for more details.

## Configuration best practices

Unless you have special requirements, you will want to add the following to
your web server configuration when hosting Element Web:

- The `X-Frame-Options: SAMEORIGIN` header, to prevent Element Web from being
  framed and protect from [clickjacking][owasp-clickjacking].
- The `frame-ancestors &#039;self&#039;` directive to your `Content-Security-Policy`
  header, as the modern replacement for `X-Frame-Options` (though both should be
  included since not all browsers support it yet, see
  [this][owasp-clickjacking-csp]).
- The `X-Content-Type-Options: nosniff` header, to [disable MIME
  sniffing][mime-sniffing].
- The `X-XSS-Protection: 1; mode=block;` header, for basic XSS protection in
  legacy browsers.

[mime-sniffing]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#mime_sniffing
[owasp-clickjacking-csp]: https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html#content-security-policy-frame-ancestors-examples
[owasp-clickjacking]: https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html

If you are using nginx, this would look something like the following:

```
add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection &quot;1; mode=block&quot;;
add_header Content-Security-Policy &quot;frame-ancestors &#039;self&#039;&quot;;
```

For Apache, the configuration looks like:

```
Header set X-Frame-Options SAMEORIGIN
Header set X-Content-Type-Options nosniff
Header set X-XSS-Protection &quot;1; mode=block&quot;
Header set Content-Security-Policy &quot;frame-ancestors &#039;self&#039;&quot;
```

Note: In case you are already setting a `Content-Security-Policy` header
elsewhere, you should modify it to include the `frame-ancestors` directive
instead of adding that last line.

# Building From Source

Element is a modular webapp built with modern ES6 and uses a Node.js build system.
Ensure you have the latest LTS version of Node.js installed.

Using `yarn` instead of `npm` is recommended. Please see the Yarn [install
guide](https://classic.yarnpkg.com/en/docs/install) if you do not have it already.

1. Install or update `node.js` so that your `node` is at least the current recommended LTS.
1. Install `yarn` if not present already.
1. Clone the repo: `git clone https://github.com/element-hq/element-web.git`.
1. Switch to the element-web directory: `cd element-web`.
1. Install the prerequisites: `yarn install`.
    - If you&#039;re using the `develop` branch, then it is recommended to set up a
      proper development environment (see [Setting up a dev
      environment](./developer_guide.md#setting-up-a-dev-environment) below). Alternatively, you
      can use &lt;https://develop.element.io&gt; - the continuous integration release of
      the develop branch.
1. Configure the app by copying `config.sample.json` to `config.json` and
   modifying it. See the [configuration docs](docs/config.md) for details.
1. `yarn dist` to build a tarball to deploy. Untaring this file will give
   a version-specific directory containing all the files that need to go on your
   web server.

Note that `yarn dist` is not supported on Windows, so Windows users can run `yarn build`,
which will build all the necessary files into the `webapp` directory. The version of Element
will not appear in Settings without using the dist script. You can then mount the
`webapp` directory on your web server to actually serve up the app, which is
entirely static content.

# Running as a Desktop app

Element can also be run as a desktop app, wrapped in Electron. You can download a
pre-built version from &lt;https://element.io/get-started&gt; or, if you prefer,
build it yourself.

To build it yourself, follow the instructions at &lt;https://github.com/element-hq/element-desktop&gt;.

Many thanks to @aviraldg for the initial work on the Electron integration.

The [configuration docs](docs/config.md#desktop-app-configuration) show how to override the desktop app&#039;s default settings if desired.

# config.json

Element supports a variety of settings to configure default servers, behaviour, themes, etc.
See the [configuration docs](docs/config.md) for more details.

# Labs Features

Some features of Element may be enabled by flags in the `Labs` section of the settings.
Some of these features are described in [labs.md](https://github.com/element-hq/element-web/blob/develop/docs/labs.md).

# Caching requirements

Element requires the following URLs not to be cached, when/if you are serving Element from your own webserver:

```
/config.*.json
/i18n
/home
/sites
/index.html
```

We also recommend that you force browsers to re-validate any cached copy of Element on page load by configuring your
webserver to return `Cache-Control: no-cache` for `/`. This ensures the browser will fetch a new version of Element on
the next page load after it&#039;s been deployed. Note that this is already configured for you in the nginx config of our
Dockerfile.

# Development

Please read through the following:

1. [Developer guide](./developer_guide.md)
2. [Code style](./code_style.md)
3. [Contribution guide](./CONTRIBUTING.md)

# Translations

To add a new translation, head to the [translating doc](docs/translating.md).

For a developer guide, see the [translating dev doc](docs/translating-dev.md).

# Triaging issues

Issues are triaged by community members and the Web App Team, following the [triage process](https://github.com/element-hq/element-meta/wiki/Triage-process).

We use [issue labels](https://github.com/element-hq/element-meta/wiki/Issue-labelling) to sort all incoming issues.

## Copyright &amp; License

Copyright (c) 2014-2017 OpenMarket Ltd
Copyright (c) 2017 Vector Creations Ltd
Copyright (c) 2017-2025 New Vector Ltd

This software is multi licensed by New Vector Ltd (Element). It can be used either:

(1) for free under the terms of the GNU Affero General Public License (as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version); OR

(2) for free under the terms of the GNU General Public License (as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version); OR

(3) under the terms of a paid-for Element Commercial License agreement between you and Element (the terms of which may vary depending on what you and Element have agreed to).
Unless required by applicable law or agreed to in writing, software distributed under the Licenses is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the Licenses for the specific language governing permissions and limitations under the Licenses.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
    </channel>
</rss>