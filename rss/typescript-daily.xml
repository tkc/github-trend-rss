<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for typescript - TypeScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for typescript.</description>
        <lastBuildDate>Mon, 28 Apr 2025 00:04:55 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[rowboatlabs/rowboat]]></title>
            <link>https://github.com/rowboatlabs/rowboat</link>
            <guid>https://github.com/rowboatlabs/rowboat</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:55 GMT</pubDate>
            <description><![CDATA[AI-powered multi-agent builder]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/rowboatlabs/rowboat">rowboatlabs/rowboat</a></h1>
            <p>AI-powered multi-agent builder</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,836</p>
            <p>Forks: 145</p>
            <p>Stars today: 329 stars today</p>
            <h2>README</h2><pre>![ui](/assets/banner.png)

&lt;h2 align=&quot;center&quot;&gt;Let AI build multi-agent workflows for you in minutes&lt;/h2&gt;
&lt;h5 align=&quot;center&quot;&gt;

[Quickstart](#quick-start) | [Docs](https://docs.rowboatlabs.com/) | [Website](https://www.rowboatlabs.com/) |  [Discord](https://discord.gg/jHhUKkKHn8) 

&lt;/h5&gt;

- ‚ú® **Start from an idea -&gt; copilot builds your multi-agent workflows**
   - E.g. &quot;Build me an assistant for a food delivery company to handle delivery status and missing items. Include the necessary tools.&quot;
- üåê **Connect MCP servers**
   - Add the MCP servers in settings -&gt; import the tools into Rowboat.     
- üìû **Integrate into your app using the HTTP API or Python SDK**
   - Grab the project ID and generated API key from settings and use the API.

Powered by OpenAI&#039;s Agents SDK, Rowboat is the fastest way to build multi-agents!

## Quick start
1. Set your OpenAI key
      ```bash
   export OPENAI_API_KEY=your-openai-api-key
   ```
      
2. Clone the repository and start Rowboat docker
   ```bash
   git clone git@github.com:rowboatlabs/rowboat.git
   cd rowboat
   docker-compose up --build
   ```

3. Access the app at [http://localhost:3000](http://localhost:3000).

## Demo

#### Create a multi-agent assistant with MCP tools by chatting with Rowboat
[![Screenshot 2025-04-23 at 00 25 31](https://github.com/user-attachments/assets/c8a41622-8e0e-459f-becb-767503489866)](https://youtu.be/YRTCw9UHRbU)

## Integrate with Rowboat agents

There are 2 ways to integrate with the agents you create in Rowboat

1. HTTP API
   - You can use the API directly at [http://localhost:3000/api/v1/](http://localhost:3000/api/v1/)
   - See [API Docs](https://docs.rowboatlabs.com/using_the_api/) for details
   ```bash
   curl --location &#039;http://localhost:3000/api/v1/&lt;PROJECT_ID&gt;/chat&#039; \
   --header &#039;Content-Type: application/json&#039; \
   --header &#039;Authorization: Bearer &lt;API_KEY&gt;&#039; \
   --data &#039;{
       &quot;messages&quot;: [
           {
               &quot;role&quot;: &quot;user&quot;,
               &quot;content&quot;: &quot;tell me the weather in london in metric units&quot;
           }
       ],
       &quot;state&quot;: null
   }&#039;
   ```
   

2. Python SDK
   You can use the included Python SDK to interact with the Agents
   ```
   pip install rowboat
   ```

   See [SDK Docs](https://docs.rowboatlabs.com/using_the_sdk/) for details. Here is a quick example:
   ```python
   from rowboat import Client, StatefulChat
   from rowboat.schema import UserMessage, SystemMessage

   # Initialize the client
   client = Client(
       host=&quot;http://localhost:3000&quot;,
       project_id=&quot;&lt;PROJECT_ID&gt;&quot;,
       api_key=&quot;&lt;API_KEY&gt;&quot;
   )

   # Create a stateful chat session (recommended)
   chat = StatefulChat(client)
   response = chat.run(&quot;What&#039;s the weather in London?&quot;)
   print(response)

   # Or use the low-level client API
   messages = [
       SystemMessage(role=&#039;system&#039;, content=&quot;You are a helpful assistant&quot;),
       UserMessage(role=&#039;user&#039;, content=&quot;Hello, how are you?&quot;)
   ]
   
   # Get response
   response = client.chat(messages=messages)
   print(response.messages[-1].content)
   ```


Refer to [Docs](https://docs.rowboatlabs.com/) to learn how to start building agents with Rowboat.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[exa-labs/exa-mcp-server]]></title>
            <link>https://github.com/exa-labs/exa-mcp-server</link>
            <guid>https://github.com/exa-labs/exa-mcp-server</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:54 GMT</pubDate>
            <description><![CDATA[Claude can perform Web Search | Exa with MCP (Model Context Protocol)]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/exa-labs/exa-mcp-server">exa-labs/exa-mcp-server</a></h1>
            <p>Claude can perform Web Search | Exa with MCP (Model Context Protocol)</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,306</p>
            <p>Forks: 105</p>
            <p>Stars today: 118 stars today</p>
            <h2>README</h2><pre># Exa MCP Server üîç
[![npm version](https://badge.fury.io/js/exa-mcp-server.svg)](https://www.npmjs.com/package/exa-mcp-server)
[![smithery badge](https://smithery.ai/badge/exa)](https://smithery.ai/server/exa)

A Model Context Protocol (MCP) server lets AI assistants like Claude use the Exa AI Search API for web searches. This setup allows AI models to get real-time web information in a safe and controlled way.

Demo video https://www.loom.com/share/ac676f29664e4c6cb33a2f0a63772038?sid=0e72619f-5bfc-415d-a705-63d326373f60


## What is MCP? ü§î

The Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.

## What does this server do? üöÄ

The Exa MCP server:
- Enables AI assistants to perform web searches using Exa&#039;s powerful search API
- Provides structured search results including titles, URLs, and content snippets
- Caches recent searches as resources for reference
- Handles rate limiting and error cases gracefully
- Supports real-time web crawling for fresh content


## Prerequisites üìã

Before you begin, ensure you have:

- [Node.js](https://nodejs.org/) (v18 or higher)
- [Claude Desktop](https://claude.ai/download) installed
- An [Exa API key](https://dashboard.exa.ai/api-keys)
- Git installed

You can verify your Node.js installation by running:
```bash
node --version  # Should show v18.0.0 or higher
```

## Installation üõ†Ô∏è

### NPM Installation

```bash
npm install -g exa-mcp-server
```

### Using Smithery

To install the Exa MCP server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/exa):

```bash
npx -y @smithery/cli install exa --client claude
```

### Manual Installation

1. Clone the repository:

```bash
git clone https://github.com/exa-labs/exa-mcp-server.git
cd exa-mcp-server
```

2. Install dependencies:

```bash
npm install
```

3. Build the project:

```bash
npm run build
```

4. Create a global link (this makes the server executable from anywhere):

```bash
npm link
```

## Configuration ‚öôÔ∏è

### 1. Configure Claude Desktop to recognize the Exa MCP server

You can find claude_desktop_config.json inside the settings of Claude Desktop app:

Open the Claude Desktop app and enable Developer Mode from the top-left menu bar. 

Once enabled, open Settings (also from the top-left menu bar) and navigate to the Developer Option, where you&#039;ll find the Edit Config button. Clicking it will open the claude_desktop_config.json file, allowing you to make the necessary edits. 

OR (if you want to open claude_desktop_config.json from terminal)

#### For macOS:

1. Open your Claude Desktop configuration:

```bash
code ~/Library/Application\ Support/Claude/claude_desktop_config.json
```

#### For Windows:

1. Open your Claude Desktop configuration:

```powershell
code %APPDATA%\Claude\claude_desktop_config.json
```

### 2. Add the Exa server configuration:

```json
{
  &quot;mcpServers&quot;: {
    &quot;exa&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [&quot;/path/to/exa-mcp-server/build/index.js&quot;],
      &quot;env&quot;: {
        &quot;EXA_API_KEY&quot;: &quot;your-api-key-here&quot;
      }
    }
  }
}
```

Replace `your-api-key-here` with your actual Exa API key from [dashboard.exa.ai/api-keys](https://dashboard.exa.ai/api-keys).

### 3. Available Tools &amp; Tool Selection

The Exa MCP server includes the following tools:

- **web_search_exa**: Performs real-time web searches with optimized results and content extraction.
- **research_paper_search**: Specialized search focused on academic papers and research content.
- **twitter_search**: Dedicated Twitter/X.com search that finds tweets, profiles, and conversations.
- **company_research**: Comprehensive company research tool that crawls company websites to gather detailed information about businesses.
- **crawling**: Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL.
- **competitor_finder**: Identifies competitors of a company by searching for businesses offering similar products or services.
- **linkedin_search**: Search LinkedIn for companies and people using Exa AI. Simply include company names, person names, or specific LinkedIn URLs in your query.

You can choose which tools to enable by adding the `--tools` parameter to your Claude Desktop configuration:

#### Specify which tools to enable:

```json
{
  &quot;mcpServers&quot;: {
    &quot;exa&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;/path/to/exa-mcp-server/build/index.js&quot;,
        &quot;--tools=web_search_exa,research_paper_search,twitter_search,company_research,crawling,competitor_finder,linkedin_search&quot;
      ],
      &quot;env&quot;: {
        &quot;EXA_API_KEY&quot;: &quot;your-api-key-here&quot;
      }
    }
  }
}
```

For enabling multiple tools, use a comma-separated list:

```json
{
  &quot;mcpServers&quot;: {
    &quot;exa&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;/path/to/exa-mcp-server/build/index.js&quot;,
        &quot;--tools=web_search_exa,research_paper_search,twitter_search,company_research,crawling,competitor_finder,linkedin_search&quot;
      ],
      &quot;env&quot;: {
        &quot;EXA_API_KEY&quot;: &quot;your-api-key-here&quot;
      }
    }
  }
}
```

If you don&#039;t specify any tools, all tools enabled by default will be used.

### 4. Restart Claude Desktop

For the changes to take effect:

1. Completely quit Claude Desktop (not just close the window)
2. Start Claude Desktop again
3. Look for the üîå icon to verify the Exa server is connected

## Using via NPX

If you prefer to run the server directly, you can use npx:

```bash
# Run with all tools enabled by default
npx exa-mcp-server

# Enable specific tools only
npx exa-mcp-server --tools=web_search_exa

# Enable multiple tools
npx exa-mcp-server --tools=web_search_exa,research_paper_search

# List all available tools
npx exa-mcp-server --list-tools
```

## Usage üéØ

Once configured, you can ask Claude to perform web searches. Here are some example prompts:

```
Can you search for recent developments in quantum computing?
```

```
Find and analyze recent research papers about climate change solutions.
```

```
Search Twitter for posts from @elonmusk about SpaceX.
```

```
Find tweets from @samaltman that were published in the last week about AI safety.
```

```
Research the company exa.ai and find information about their pricing and features.
```

```
Extract the content from this research paper: https://arxiv.org/pdf/1706.03762
```

```
Find competitors for a company that provides web search API services, excluding exa.ai from the results.
```

```
Find the LinkedIn profile for Anthropic company.
```

```
Search for data scientists at OpenAI on LinkedIn.
```

The server will:

1. Process the search request
2. Query the Exa API with optimal settings (including live crawling)
3. Return formatted results to Claude
4. Cache the search for future reference


## Testing with MCP Inspector üîç

You can test the server directly using the MCP Inspector:

```bash
npx @modelcontextprotocol/inspector node ./build/index.js
```

This opens an interactive interface where you can explore the server&#039;s capabilities, execute search queries, and view cached search results.

## Troubleshooting üîß

### Common Issues

1. **Server Not Found**
   * Verify the npm link is correctly set up
   * Check Claude Desktop configuration syntax
   * Ensure Node.js is properly installed

2. **API Key Issues**
   * Confirm your EXA_API_KEY is valid
   * Check the EXA_API_KEY is correctly set in the Claude Desktop config
   * Verify no spaces or quotes around the API key

3. **Connection Issues**
   * Restart Claude Desktop completely
   * Check Claude Desktop logs:
   
   ```bash
   # macOS
   tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
   
   # Windows
   type &quot;%APPDATA%\Claude\logs\mcp*.log&quot;
   ```

## Acknowledgments üôè

* [Exa AI](https://exa.ai) for their powerful search API
* [Model Context Protocol](https://modelcontextprotocol.io) for the MCP specification
* [Anthropic](https://anthropic.com) for Claude Desktop
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[kortix-ai/suna]]></title>
            <link>https://github.com/kortix-ai/suna</link>
            <guid>https://github.com/kortix-ai/suna</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:53 GMT</pubDate>
            <description><![CDATA[Suna - Open Source Generalist AI Agent]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/kortix-ai/suna">kortix-ai/suna</a></h1>
            <p>Suna - Open Source Generalist AI Agent</p>
            <p>Language: TypeScript</p>
            <p>Stars: 7,905</p>
            <p>Forks: 883</p>
            <p>Stars today: 1,450 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;

# Suna - Open Source Generalist AI Agent

(that acts on your behalf)

![Suna Screenshot](frontend/public/banner.png)

Suna is a fully open source AI assistant that helps you accomplish real-world tasks with ease. Through natural conversation, Suna becomes your digital companion for research, data analysis, and everyday challenges‚Äîcombining powerful capabilities with an intuitive interface that understands what you need and delivers results.

Suna&#039;s powerful toolkit includes seamless browser automation to navigate the web and extract data, file management for document creation and editing, web crawling and extended search capabilities, command-line execution for system tasks, website deployment, and integration with various APIs and services. These capabilities work together harmoniously, allowing Suna to solve your complex problems and automate workflows through simple conversations!

[![License](https://img.shields.io/badge/License-Apache--2.0-blue)](./license)
[![Discord Follow](https://dcbadge.limes.pink/api/server/Py6pCBUUPw?style=flat)](https://discord.gg/Py6pCBUUPw)
[![Twitter Follow](https://img.shields.io/twitter/follow/kortixai)](https://x.com/kortixai)
[![GitHub Repo stars](https://img.shields.io/github/stars/kortix-ai/suna)](https://github.com/kortix-ai/suna)
[![Issues](https://img.shields.io/github/issues/kortix-ai/suna
)](https://github.com/kortix-ai/suna/labels/bug)
&lt;/div&gt;


## Table of Contents

- [Suna Architecture](#project-architecture)
  - [Backend API](#backend-api)
  - [Frontend](#frontend)
  - [Agent Docker](#agent-docker)
  - [Supabase Database](#supabase-database)
- [Run Locally / Self-Hosting](#run-locally--self-hosting)
  - [Requirements](#requirements)
  - [Prerequisites](#prerequisites)
  - [Installation Steps](#installation-steps)
- [Acknowledgements](#acknowledgements)
- [License](#license)

## Project Architecture

![Architecture Diagram](docs/images/diagram.png)

Suna consists of four main components:

### Backend API
Python/FastAPI service that handles REST endpoints, thread management, and LLM integration with Anthropic, and others via LiteLLM.

### Frontend
Next.js/React application providing a responsive UI with chat interface, dashboard, etc.

### Agent Docker
Isolated execution environment for every agent - with browser automation, code interpreter, file system access, tool integration, and security features.

### Supabase Database
Handles data persistence with authentication, user management, conversation history, file storage, agent state, analytics, and real-time subscriptions.

## Use Cases

1. **Competitor Analysis** ([Watch](https://www.suna.so/share/5ee791ac-e19c-4986-a61c-6d0659d0e5bc)) - *&quot;Analyze the market for my next company in the healthcare industry, located in the UK. Give me the major players, their market size, strengths, and weaknesses, and add their website URLs. Once done, generate a PDF report.&quot;*

2. **VC List** ([Watch](https://www.suna.so/share/804d20a3-cf1c-4adb-83bb-0e77cc6adeac)) - *&quot;Give me the list of the most important VC Funds in the United States based on Assets Under Management. Give me website URLs, and if possible an email to reach them out.&quot;*

3. **Looking for Candidates** ([Watch](https://www.suna.so/share/3ae581b0-2db8-4c63-b324-3b8d29762e74)) - *&quot;Go on LinkedIn, and find me 10 profiles available - they are not working right now - for a junior software engineer position, who are located in Munich, Germany. They should have at least one bachelor&#039;s degree in Computer Science or anything related to it, and 1-year of experience in any field/role.&quot;*

4. **Planning Company Trip** ([Watch](https://www.suna.so/share/725e64a0-f1e2-4bb6-8a1f-703c2833fd72)) - *&quot;Generate me a route plan for my company. We should go to California. We&#039;ll be in 8 people. Compose the trip from the departure (Paris, France) to the activities we can do considering that the trip will be 7 days long - departure on the 21st of Apr 2025. Check the weather forecast and temperature for the upcoming days, and based on that, you can plan our activities (outdoor vs indoor).&quot;*

5. **Working on Excel** ([Watch](https://www.suna.so/share/128f23a4-51cd-42a6-97a0-0b458b32010e)) - *&quot;My company asked me to set up an Excel spreadsheet with all the information about Italian lottery games (Lotto, 10eLotto, and Million Day). Based on that, generate and send me a spreadsheet with all the basic information (public ones).&quot;*

6. **Automate Event Speaker Prospecting** ([Watch](https://www.suna.so/share/7a7592ea-ed44-4c69-bcb5-5f9bb88c188c)) - *&quot;Find 20 AI ethics speakers from Europe who&#039;ve spoken at conferences in the past year. Scrapes conference sites, cross-references LinkedIn and YouTube, and outputs contact info + talk summaries.&quot;*

7. **Summarize and Cross-Reference Scientific Papers** ([Watch](https://www.suna.so/share/c2081b3c-786e-4e7c-9bf4-46e9b23bb662)) - *&quot;Research and compare scientific papers talking about Alcohol effects on our bodies during the last 5 years. Generate a report about the most important scientific papers talking about the topic I wrote before.&quot;*

8. **Research + First Contact Draft** ([Watch](https://www.suna.so/share/6b6296a6-8683-49e5-9ad0-a32952d12c44)) - *&quot;Research my potential customers (B2B) on LinkedIn. They should be in the clean tech industry. Find their websites and their email addresses. After that, based on the company profile, generate a personalized first contact email where I present my company which is offering consulting services to cleantech companies to maximize their profits and reduce their costs.&quot;*

9. **SEO Analysis** ([Watch](https://www.suna.so/share/43491cb0-cd6c-45f0-880c-66ddc8c4b842)) - *&quot;Based on my website suna.so, generate an SEO report analysis, find top-ranking pages by keyword clusters, and identify topics I&#039;m missing.&quot;*

10. **Generate a Personal Trip** ([Watch](https://www.suna.so/share/37b31907-8349-4f63-b0e5-27ca597ed02a)) - *&quot;Generate a personal trip to London, with departure from Bangkok on the 1st of May. The trip will last 10 days. Find an accommodation in the center of London, with a rating on Google reviews of at least 4.5. Find me interesting outdoor activities to do during the journey. Generate a detailed itinerary plan.&quot;*

11. **Recently Funded Startups** ([Watch](https://www.suna.so/share/8b2a897e-985a-4d5e-867b-15239274f764)) - *&quot;Go on Crunchbase, Dealroom, and TechCrunch, filter by Series A funding rounds in the SaaS Finance Space, and build a report with company data, founders, and contact info for outbound sales.&quot;*

12. **Scrape Forum Discussions** ([Watch](https://www.suna.so/share/7d7a5d93-a20d-48b0-82cc-e9a876e9fd04)) - *&quot;I need to find the best beauty centers in Rome, but I want to find them by using open forums that speak about this topic. Go on Google, and scrape the forums by looking for beauty center discussions located in Rome. Then generate a list of 5 beauty centers with the best comments about them.&quot;*

## Run Locally / Self-Hosting

Suna can be self-hosted on your own infrastructure. Follow these steps to set up your own instance.

### Requirements

You&#039;ll need the following components:
- A Supabase project for database and authentication
- Redis database for caching and session management
- Daytona sandbox for secure agent execution
- Python 3.11 for the API backend
- API keys for LLM providers (Anthropic)
- Tavily API key for enhanced search capabilities
- Firecrawl API key for web scraping capabilities

### Prerequisites

1. **Supabase**:
   - Create a new [Supabase project](https://supabase.com/dashboard/projects)
   - Save your project&#039;s API URL, anon key, and service role key for later use
   - Install the [Supabase CLI](https://supabase.com/docs/guides/cli/getting-started)

2. **Redis**: Set up a Redis instance using one of these options:
   - [Upstash Redis](https://upstash.com/) (recommended for cloud deployments)
   - Local installation:
     - [Mac](https://formulae.brew.sh/formula/redis): `brew install redis`
     - [Linux](https://redis.io/docs/getting-started/installation/install-redis-on-linux/): Follow distribution-specific instructions
     - [Windows](https://redis.io/docs/getting-started/installation/install-redis-on-windows/): Use WSL2 or Docker
   - Docker Compose (included in our setup):
     - If you&#039;re using our Docker Compose setup, Redis is included and configured automatically
     - No additional installation is needed
   - Save your Redis connection details for later use (not needed if using Docker Compose)

3. **Daytona**:
   - Create an account on [Daytona](https://app.daytona.io/)
   - Generate an API key from your account settings
   - Go to [Images](https://app.daytona.io/dashboard/images)
   - Click &quot;Add Image&quot;
   - Enter `adamcohenhillel/kortix-suna:0.0.20` as the image name
   - Set `/usr/bin/supervisord -n -c /etc/supervisor/conf.d/supervisord.conf` as the Entrypoint

4. **LLM API Keys**:
   - Obtain an API key [Anthropic](https://www.anthropic.com/)
   - While other providers should work via [LiteLLM](https://github.com/BerriAI/litellm), Anthropic is recommended ‚Äì the prompt needs to be adjusted for other providers to output correct XML for tool calls.

5. **Search API Key** (Optional):
   - For enhanced search capabilities, obtain an [Tavily API key](https://tavily.com/)
   - For web scraping capabilities, obtain a [Firecrawl API key](https://firecrawl.dev/)
  

6. **RapidAPI API Key** (Optional):
   - To enable API services like LinkedIn, and others, you&#039;ll need a RapidAPI key
   - Each service requires individual activation in your RapidAPI account:
     1. Locate the service&#039;s `base_url` in its corresponding file (e.g., `&quot;https://linkedin-data-scraper.p.rapidapi.com&quot;` in [`backend/agent/tools/data_providers/LinkedinProvider.py`](backend/agent/tools/data_providers/LinkedinProvider.py))
     2. Visit that specific API on the RapidAPI marketplace
     3. Subscribe to the service (many offer free tiers with limited requests)
     4. Once subscribed, the service will be available to your agent through the API Services tool

### Installation Steps

1. **Clone the repository**:
```bash
git clone https://github.com/kortix-ai/suna.git
cd suna
```

2. **Configure backend environment**:
```bash
cd backend
cp .env.example .env  # Create from example if available, or use the following template
```

Edit the `.env` file and fill in your credentials:
```bash
NEXT_PUBLIC_URL=&quot;http://localhost:3000&quot;

# Supabase credentials from step 1
SUPABASE_URL=your_supabase_url
SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key

# Redis credentials from step 2
REDIS_HOST=your_redis_host
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password
REDIS_SSL=True  # Set to False for local Redis without SSL

# Daytona credentials from step 3
DAYTONA_API_KEY=your_daytona_api_key
DAYTONA_SERVER_URL=&quot;https://app.daytona.io/api&quot;
DAYTONA_TARGET=&quot;us&quot;

# Anthropic
ANTHROPIC_API_KEY=

# OpenAI API:
OPENAI_API_KEY=your_openai_api_key

# Optional but recommended
TAVILY_API_KEY=your_tavily_api_key  # For enhanced search capabilities
FIRECRAWL_API_KEY=your_firecrawl_api_key  # For web scraping capabilities
RAPID_API_KEY=
```

3. **Set up Supabase database**:
```bash
# Login to Supabase CLI
supabase login

# Link to your project (find your project reference in the Supabase dashboard)
supabase link --project-ref your_project_reference_id

# Push database migrations
supabase db push
```

Then, go to the Supabase web platform again -&gt; choose your project -&gt; Project Settings -&gt; Data API -&gt; And in the &quot;Exposed Schema&quot; ass &quot;basejump&quot; if not already there

4. **Configure frontend environment**:
```bash
cd ../frontend
cp .env.example .env.local  # Create from example if available, or use the following template
```

   Edit the `.env.local` file:
```
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
NEXT_PUBLIC_BACKEND_URL=&quot;http://localhost:8000/api&quot;  # Use this for local development
NEXT_PUBLIC_URL=&quot;http://localhost:3000&quot;
```

   Note: If you&#039;re using Docker Compose, use the container name instead of localhost:
```
NEXT_PUBLIC_BACKEND_URL=&quot;http://backend:8000/api&quot;  # Use this when running with Docker Compose
```

5. **Install dependencies**:
```bash
# Install frontend dependencies
cd frontend
npm install

# Install backend dependencies
cd ../backend
pip install -r requirements.txt
```

6. **Start the application**:

   In one terminal, start the frontend:
```bash
cd frontend
npm run dev
```

   In another terminal, start the backend:
```bash
cd backend
python api.py
```

5-6. **Docker Compose Alternative**:

Before running with Docker Compose, make sure your environment files are properly configured:
- In `backend/.env`, set all the required environment variables as described above
  - For Redis configuration, use `REDIS_HOST=redis` instead of localhost
  - The Docker Compose setup will automatically set these Redis environment variables:
    ```
    REDIS_HOST=redis
    REDIS_PORT=6379
    REDIS_PASSWORD=
    REDIS_SSL=False
    ```
- In `frontend/.env.local`, make sure to set `NEXT_PUBLIC_BACKEND_URL=&quot;http://backend:8000/api&quot;` to use the container name

Then run:
```bash
export GITHUB_REPOSITORY=&quot;your-github-username/repo-name&quot;
docker compose -f docker-compose.ghcr.yaml up
```

If you&#039;re building the images locally instead of using pre-built ones:
```bash
docker compose up
```

The Docker Compose setup includes a Redis service that will be used by the backend automatically.


7. **Access Suna**:
   - Open your browser and navigate to `http://localhost:3000`
   - Sign up for an account using the Supabase authentication
   - Start using your self-hosted Suna instance!

## Acknowledgements

### Main Contributors
- [Adam Cohen Hillel](https://x.com/adamcohenhillel)
- [Dat-lequoc](https://x.com/datlqqq)
- [Marko Kraemer](https://twitter.com/markokraemer)

### Technologies
- [Daytona](https://daytona.io/) - Secure agent execution environment
- [Supabase](https://supabase.com/) -
- [Playwright](https://playwright.dev/) - Browser automation
- [OpenAI](https://openai.com/) - LLM provider
- [Anthropic](https://www.anthropic.com/) - LLM provider
- [Tavily](https://tavily.com/) - Search capabilities
- [Firecrawl](https://firecrawl.dev/) - Web scraping capabilities
- [RapidAPI](https://rapidapi.com/) - API services


## License

Kortix Suna is licensed under the Apache License, Version 2.0. See [LICENSE](./LICENSE) for the full license text.

</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[omnivore-app/omnivore]]></title>
            <link>https://github.com/omnivore-app/omnivore</link>
            <guid>https://github.com/omnivore-app/omnivore</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:52 GMT</pubDate>
            <description><![CDATA[Omnivore is a complete, open source read-it-later solution for people who like reading.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/omnivore-app/omnivore">omnivore-app/omnivore</a></h1>
            <p>Omnivore is a complete, open source read-it-later solution for people who like reading.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 14,696</p>
            <p>Forks: 1,145</p>
            <p>Stars today: 66 stars today</p>
            <h2>README</h2><pre># Omnivore

[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/omnivore-app/omnivore/run-tests.yaml?branch=main)](https://github.com/omnivore-app/omnivore/actions/workflows/run-tests.yaml)
[![Discord](https://img.shields.io/discord/844965259462311966?label=Join%20our%20Discord)](https://discord.gg/h2z5rppzz9)
[![Mastodon Follow](https://img.shields.io/mastodon/follow/109458738600914558?domain=https%3A%2F%2Fpkm.social)](https://pkm.social/@omnivore)
[![Twitter Follow](https://img.shields.io/twitter/follow/omnivoreapp)](https://twitter.com/OmnivoreApp)
![GitHub](https://img.shields.io/github/license/omnivore-app/omnivore)

&lt;img align=&quot;right&quot; src=&quot;https://avatars.githubusercontent.com/u/70113176?s=400&amp;u=506b21d9f019f3160963c010ef363667fb24c7c9&amp;v=4&quot; height=&quot;150px&quot; alt=&quot;Omnivore Logo&quot;&gt;

[Omnivore](https://omnivore.app) is a complete, open source read-it-later solution for people who like text.

We built Omnivore because we love reading and we want it to be more social. Join us!

- Highlighting, notes, search, and sharing
- Full keyboard navigation
- Automatically saves your place in long articles
- Add newsletter articles via email (with substack support!)
- PDF support
- [Web app](https://omnivore.app/) written in Node.js and TypeScript
- [Native iOS app](https://omnivore.app/install/ios) ([source](https://github.com/omnivore-app/omnivore/tree/main/apple))
- [Android app](https://omnivore.app/install/android) ([source](https://github.com/omnivore-app/omnivore/tree/main/android/Omnivore))
- Progressive web app for Android users
- Browser extensions for [Chrome](https://omnivore.app/install/chrome), [Safari](https://omnivore.app/install/safari), [Firefox](https://omnivore.app/install/firefox), and [Edge](https://omnivore.app/install/edge)
- Labels (aka tagging)
- Offline support
- Text to speech (iOS only)
- [Logseq](https://logseq.com/) support via our [Logseq Plugin](https://github.com/omnivore-app/logseq-omnivore)
- [Obsidian](https://obsidian.md/) support via our [Obsidian Plugin](https://github.com/omnivore-app/obsidian-omnivore)

Every single part is fully open source! Fork it, extend it, or deploy it to your own server.

A guide for running a self hosted server can be found [here](./self-hosting/GUIDE.md)

&lt;img width=&quot;981&quot; alt=&quot;web-screenshot-listview&quot; src=&quot;https://github.com/omnivore-app/omnivore/assets/75189/df7c797a-4255-42f4-a686-ad94866cb580&quot;&gt;

## Join us on Discord! :speech_balloon:

We&#039;re building our community on Discord. [Join us!](https://discord.gg/h2z5rppzz9)

Read more about Omnivore on our blog. &lt;https://blog.omnivore.app/p/getting-started-with-omnivore&gt;

## Shoutouts :tada:

Omnivore takes advantage of some great open source software:

- [TypeScript](https://www.typescriptlang.org/) - Most of our backend and frontend are written in TypeScript.
- [Next.js](https://nextjs.org/) - Our frontend is a Next.JS app and is hosted on [Vercel](https://vercel.com/).
- [SWR](https://swr.vercel.app/) - We do all our data fetching on the web using SWR.
- [Stitches](https://stitches.dev/) - We use Stitches on the frontend to style our components.
- [Mozilla Readability](https://github.com/mozilla/readability) - We use Mozilla&#039;s Readability library to make pages easier to read.
- [Swift GraphQL](https://www.swift-graphql.com/) - We generate our GraphQL queries on iOS using Swift GraphQL.
- [Apollo GraphQL](https://www.apollographql.com/) - We generate our GraphQL queries on Android using Apollo GraphQL.
- [Radix](https://www.radix-ui.com/) - We use Radix UI&#039;s components on our frontend.
- [PDF.js](https://github.com/mozilla/pdf.js) - PDF.js is used to have open source pdf functionality. 
- And many more awesome libraries, just checkout our package files to see what we are using.

## Importing Libraries

Check out our [docs](https://docs.omnivore.app/using/importing.html) for information on importing your data from other apps.

## How to setup local development :computer:

The easiest way to get started with local development is to use `docker compose up`. This will start a postgres container, our web frontend, an API server, and our content fetching microservice.

### Requirements for development

Omnivore is written in TypeScript and JavaScript.

- [Node.js](https://nodejs.org/) (v18.16) and [Yarn](https://classic.yarnpkg.com/lang/en/) -- Versions are managed by [Volta](https://docs.volta.sh/guide/getting-started).
- [Chromium](https://www.chromium.org/chromium-projects/) -- See below for installation info.

### Running the web and API services

#### 1. Start docker compose

```bash
git clone https://github.com/omnivore-app/omnivore
cd omnivore
docker compose up
```

This will start postgres, initialize the database, and start the web and api services.

#### 2. Open the browser

Open &lt;http://localhost:3000&gt; and confirm Omnivore is running

#### 3. Login with the test account

During database setup docker compose creates an account `demo@omnivore.app`, password: `demo_password`.

Go to &lt;http://localhost:3000/&gt; in your browser and choose `Continue with Email` to login.

### Frontend Development

If you want to work on just the frontend of Omnivore you can run the backend services
with docker compose and the frontend locally:

```bash
docker compose up api content-fetch
cd packages/web
cp .env.template .env.local
yarn dev
```

You will need to configure some values in the new `.env.local` file. These are
the values for running the `web` service directly on your host machine and
running `api` and `content-fetch` within docker:

```sh
NEXT_PUBLIC_BASE_URL=http://localhost:3000
NEXT_PUBLIC_HIGHLIGHTS_BASE_URL=http://localhost:3000
NEXT_PUBLIC_LOCAL_BASE_URL=http://localhost:3000
NEXT_PUBLIC_SERVER_BASE_URL=http://localhost:4000
NEXT_PUBLIC_LOCAL_SERVER_BASE_URL=http://localhost:4000
```

### Running the puppeteer-parse service outside of Docker

To save pages you need to run the `puppeteer-parse` service.

#### 1. Install and configure Chromium

```bash
brew install chromium --no-quarantine
export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export CHROMIUM_PATH=`which chromium`
```

#### 2. Navigate to the service directory, setup your env file, and install dependencies

```bash
cd packages/puppeteer-parse
cp .env.example .env
yarn
```

#### 3. Start the service

```bash
yarn start
```

This will start the puppeteer-parse service on port 9090.

In your browser go to &lt;http://localhost:3000/home&gt;, click the `Add Link` button,
and enter a URL such as `https://blog.omnivore.app/p/getting-started-with-omnivore`.

You should see a Chromium window open and navigate to your link. When the service
is done fetching your content you will see it in your library.

## How to deploy to your own server

A guide for running a self hosted server can be found [here](./self-hosting/GUIDE.md)

## License

Omnivore and our extensions to Readability.js are under the AGPL-3.0 license.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[linkwarden/linkwarden]]></title>
            <link>https://github.com/linkwarden/linkwarden</link>
            <guid>https://github.com/linkwarden/linkwarden</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:51 GMT</pubDate>
            <description><![CDATA[‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è Self-hosted collaborative bookmark manager to collect, organize, and preserve webpages, articles, and documents.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/linkwarden/linkwarden">linkwarden/linkwarden</a></h1>
            <p>‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è Self-hosted collaborative bookmark manager to collect, organize, and preserve webpages, articles, and documents.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 11,613</p>
            <p>Forks: 440</p>
            <p>Stars today: 80 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;./assets/logo.png&quot; width=&quot;100px&quot; /&gt;
  &lt;h1&gt;Linkwarden&lt;/h1&gt;
  &lt;h3&gt;Bookmark Preservation for Individuals and Teams&lt;/h3&gt;

&lt;a href=&quot;https://discord.com/invite/CtuYV47nuJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1117993124669702164?logo=discord&amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/LinkwardenHQ&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/linkwarden&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=36942308&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Hacker%20News-280-%23FF6600&quot;&gt;&lt;/img&gt;&lt;/a&gt;

&lt;a href=&quot;https://github.com/linkwarden/linkwarden/releases&quot;&gt;&lt;img alt=&quot;GitHub release&quot; src=&quot;https://img.shields.io/github/v/release/linkwarden/linkwarden&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/linkwarden&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/all/linkwarden&quot; alt=&quot;Open Collective&quot;&gt;&lt;/a&gt;

&lt;/div&gt;

&lt;div align=&#039;center&#039;&gt;

[¬´ LAUNCH DEMO ¬ª](https://demo.linkwarden.app)

[Cloud](https://cloud.linkwarden.app) ¬∑ [Website](https://linkwarden.app) ¬∑ [Features](https://github.com/linkwarden/linkwarden#features) ¬∑ [Docs](https://docs.linkwarden.app)

&lt;/div&gt;

## Intro &amp; motivation

**Linkwarden is a self-hosted, open-source collaborative bookmark manager to collect, organize and archive webpages.**

The objective is to organize useful webpages and articles you find across the web in one place, and since useful webpages can go away (see the inevitability of [Link Rot](https://www.howtogeek.com/786227/what-is-link-rot-and-how-does-it-threaten-the-web/)), Linkwarden also saves a copy of each webpage as a Screenshot and PDF, ensuring accessibility even if the original content is no longer available.

Additionally, Linkwarden is designed with collaboration in mind, sharing links with the public and/or allowing multiple users to work together seamlessly.

&gt; [!TIP]  
&gt; Our official [Cloud](https://linkwarden.app/#pricing) offering provides the simplest way to begin using Linkwarden and it&#039;s the preferred choice for many due to its time-saving benefits. &lt;br&gt; Your subscription supports our hosting infrastructure and ongoing development. &lt;br&gt; Alternatively, if you prefer self-hosting Linkwarden, you can do so by following our [Installation documentation](https://docs.linkwarden.app/self-hosting/installation).

&lt;img src=&quot;./assets/dashboard.png&quot; /&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;./assets/all_links.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/list_view.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/all_collections.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/manage_team.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/readable_view.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/preserved_formats.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/public_page.jpg&quot; width=&quot;23%&quot; /&gt;

&lt;img src=&quot;./assets/light_dashboard.jpg&quot; width=&quot;23%&quot; /&gt;
&lt;/div&gt;

## Features

- üì∏ Auto capture a screenshot, PDF, single html file, and readable view of each webpage.
- üèõÔ∏è Send your webpage to Wayback Machine ([archive.org](https://archive.org)) for a snapshot. (Optional)
- ‚ú® Local AI Tagging to automatically tag your links based on their content (Optional).
- üìÇ Organize links by collection, sub-collection, name, description and multiple tags.
- üë• Collaborate on gathering links in a collection.
- üéõÔ∏è Customize the permissions of each member.
- üåê Share your collected links and preserved formats with the world.
- üìå Pin your favorite links to dashboard.
- üîç Full text search, filter and sort for easy retrieval.
- üì± Responsive design and supports most modern browsers.
- üåì Dark/Light mode support.
- üß© Browser extension. [Star it here!](https://github.com/linkwarden/browser-extension)
- üîÑ Browser Synchronization (using [Floccus](https://floccus.org)!)
- ‚¨áÔ∏è Import and export your bookmarks.
- üîê SSO integration. (Enterprise and Self-hosted users only)
- üì¶ Installable Progressive Web App (PWA).
- üçé iOS Shortcut to save Links to Linkwarden.
- üîë API keys.
- ‚úÖ Bulk actions.
- üë• User administration.
- üåê Support for Other Languages (i18n).
- üìÅ Image and PDF Uploads.
- üé® Custom Icons for Links and Collections.
- üîî RSS Feed Subscription.
- ‚ú® And many more features. (Literally!)

## Like what we&#039;re doing? Give us a Star ‚≠ê

![Star Us](https://raw.githubusercontent.com/linkwarden/linkwarden/main/assets/star_repo.gif)

## We&#039;re building our Community üåê

Join and follow us in the following platforms to stay up to date about the most recent features and for support:

&lt;a href=&quot;https://discord.com/invite/CtuYV47nuJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1117993124669702164?logo=discord&amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;https://twitter.com/LinkwardenHQ&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/linkwarden&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;https://fosstodon.org/@linkwarden&quot;&gt;&lt;img src=&quot;https://img.shields.io/mastodon/follow/110748840237143200?domain=https%3A%2F%2Ffosstodon.org&quot; alt=&quot;Mastodon&quot;&gt;&lt;/a&gt;

## Suggestions

We _usually_ go after the [popular suggestions](https://github.com/linkwarden/linkwarden/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc). Feel free to open a [new issue](https://github.com/linkwarden/linkwarden/issues/new?assignees=&amp;labels=enhancement&amp;projects=&amp;template=feature_request.md&amp;title=) to suggest one - others might be interested too! :)

## Roadmap

Make sure to check out our [public roadmap](https://github.com/orgs/linkwarden/projects/1).

## Community Projects

Here are some community-maintained projects that are built around Linkwarden:

- [My Links](https://apps.apple.com/ca/app/my-links-for-linkwarden/id6504573402) - iOS and MacOS Apps, maintained by [JGeek00](https://github.com/JGeek00).
- [LinkDroid](https://fossdroid.com/a/linkdroid-for-linkwarden.html) - Android App with share sheet integration, [source code](https://github.com/Dacid99/LinkDroid-for-Linkwarden).
- [LinkGuardian](https://github.com/Elbullazul/LinkGuardian) - An Android client for Linkwarden. Built with Kotlin and Jetpack compose.
- [StarWarden](https://github.com/rtuszik/starwarden) - A browser extension to save your starred GitHub repositories to Linkwarden.

## Development

If you want to contribute, Thanks! Start by checking our [public roadmap](https://github.com/orgs/linkwarden/projects/1), there you&#039;ll see a [README for contributers](https://github.com/orgs/linkwarden/projects/1?pane=issue&amp;itemId=34708277) for the rest of the info on how to contribute and the main tech stack.

## Security

If you found a security vulnerability, please do **not** create a public issue, instead send an email to [security@linkwarden.app](mailto:security@linkwarden.app) stating the vulnerability. Thanks!

## Support &lt;3

Other than using our official [Cloud](https://linkwarden.app/#pricing) offering, any [donations](https://opencollective.com/linkwarden) are highly appreciated as well!

Here are the other ways to support/cheer this project:

- Starring this repository.
- Joining us on [Discord](https://discord.com/invite/CtuYV47nuJ).
- Referring Linkwarden to a friend.

If you did any of the above, Thanksss! Otherwise thanks.

## Thanks to All the Contributors üí™

Huge thanks to these guys for spending their time helping Linkwarden grow. They rock! ‚ö°Ô∏è

&lt;img src=&quot;https://contributors-img.web.app/image?repo=linkwarden/linkwarden&quot; alt=&quot;Contributors&quot;/&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[hcengineering/platform]]></title>
            <link>https://github.com/hcengineering/platform</link>
            <guid>https://github.com/hcengineering/platform</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:50 GMT</pubDate>
            <description><![CDATA[Huly ‚Äî All-in-One Project Management Platform (alternative to Linear, Jira, Slack, Notion, Motion)]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/hcengineering/platform">hcengineering/platform</a></h1>
            <p>Huly ‚Äî All-in-One Project Management Platform (alternative to Linear, Jira, Slack, Notion, Motion)</p>
            <p>Language: TypeScript</p>
            <p>Stars: 20,582</p>
            <p>Forks: 1,325</p>
            <p>Stars today: 81 stars today</p>
            <h2>README</h2><pre># Huly Platform

[![X (formerly Twitter) Follow](https://img.shields.io/twitter/follow/huly_io?style=for-the-badge)](https://x.com/huly_io)
![GitHub License](https://img.shields.io/github/license/hcengineering/platform?style=for-the-badge)

‚≠êÔ∏è Your star shines on us. Star us on GitHub!

## About

The Huly Platform is a robust framework designed to accelerate the development of business applications, such as CRM systems. 
This repository includes several applications, such as Chat, Project Management, CRM, HRM, and ATS. 
Various teams are building products on top of the Platform, including [Huly](https://huly.io) and [TraceX](https://tracex.co).

![Huly](https://repository-images.githubusercontent.com/392073243/6d27d5cc-38cd-4d88-affe-bb88b393180c)

## Self-Hosting

If you&#039;re primarily interested in self-hosting Huly without the intention to modify or contribute to its development, please use [huly-selfhost](https://github.com/hcengineering/huly-selfhost). 
This project offers a convenient method to host Huly using `docker`, designed for ease of use and quick setup. Explore this option to effortlessly enjoy Huly on your own server.

## Activity

![Alt](https://repobeats.axiom.co/api/embed/c42c99e21691fa60ea61b5cdf11c2e0647621534.svg &quot;Repobeats analytics image&quot;)

## Table of Content

- [Huly Platform](#huly-platform)
  - [About](#about)
  - [Self-Hosting](#self-hosting)
  - [Activity](#activity)
  - [Table of Content](#table-of-content)
  - [Pre-requisites](#pre-requisites)
  - [Verification](#verification)
  - [Installation](#installation)
  - [Build and run](#build-and-run)
  - [Run in development mode](#run-in-development-mode)
  - [Update project structure and database](#update-project-structure-and-database)
  - [Troubleshooting](#troubleshooting)
  - [Build \&amp; Watch](#build--watch)
  - [Tests](#tests)
    - [Unit tests](#unit-tests)
    - [UI tests](#ui-tests)
  - [Package publishing](#package-publishing)
  - [Additional testing](#additional-testing)

## Pre-requisites

- Before proceeding, ensure that your system meets the following requirements:
  - [Node.js](https://nodejs.org/en/download/) (v20.11.0 is required)
  - [Docker](https://docs.docker.com/get-docker/)
  - [Docker Compose](https://docs.docker.com/compose/install/)

## Verification

To verify the installation, perform the following checks in your terminal:

- Ensure that the `docker` commands are available:
  ```bash
  docker --version
  docker compose version
## Fast start

```bash
sh ./scripts/fast-start.sh
```

## Installation

You need Microsoft&#039;s [rush](https://rushjs.io) to install application.

1. Install Rush globally using the command:
   ```bash
   npm install -g @microsoft/rush
2. Navigate to the repository root and run the following commands:
   ```bash
   rush install
   rush build
Alternatively, you can just execute:

```bash
sh ./scripts/presetup-rush.sh
```

## Build and run

Development environment setup requires Docker to be installed on system.

Support is available for both amd64 and arm64 containers on Linux and macOS.

```bash
cd ./dev/
rush build    # Will build all the required packages. 
# rush rebuild  # could be used to omit build cache.
rush bundle   # Will prepare bundles.
rush package  # Will build all webpack packages.
rush validate # Will validate all sources with typescript and generate d.ts files required for ts-node execution.
rush svelte-check # Optional. svelte files validation using svelte-check.
rush docker:build   # Will build Docker containers for all applications in the local Docker environment.
rush docker:up # Will set up all the containers
```

Be aware `rush docker:build` will automatically execute all required phases like build, bundle, package.

Alternatively, you can just execute:

```bash
sh ./scripts/build.sh
```

By default, Docker volumes named dev_db, dev_elastic, and dev_files will be created for the MongoDB, Elasticsearch, and MinIO instances.

Before you can begin, you need to create a workspace and an account and associate it with the workspace.

```bash
cd ./tool # dev/tool in the repository root
rushx run-local create-workspace ws1 -w DevWorkspace # Create workspace
rushx run-local create-account user1 -p 1234 -f John -l Appleseed # Create account
rushx run-local configure ws1 --list --enable &#039;*&#039; # Enable all modules, even if they are not yet intended to be used by a wide audience.
rushx run-local assign-workspace user1 ws1 # Assign workspace to user.
rushx run-local confirm-email user1 # To allow the creation of additional test workspaces.

```

Alternatively, you can just execute:

```bash
sh ./scripts/create-workspace.sh
```

Add the following line to your /etc/hosts file

```
127.0.0.1 host.docker.internal
```

Accessing the URL http://host.docker.internal:8087 will lead you to the app in development mode.

Limitations:

- Local installation does not support sending emails, thus disabling functionalities such as password recovery and email notifications.

## Run in development mode

Development mode allows for live reloading and a smoother development process.

```bash
cd dev/prod
rush validate
rushx dev-server
```

Then go to http://localhost:8080

Click on &quot;Login with password&quot; link on the bottom of the right panel and use the following login credentials:

```plain
Email: user1
Password: 1234
Workspace: ws1
```

## Update project structure and database

If the project&#039;s structure is updated, it may be necessary to relink and rebuild the projects.

```bash
rush update
rush build
```

It may also be necessary to upgrade the running database.

```bash
cd ./dev/tool
rushx upgrade -f
```

## Troubleshooting

If a build fails, but the code is correct, try to delete the [build cache](https://rushjs.io/pages/maintainer/build_cache/) and retry.

```bash
# from the project root
rm -rf common/temp/build-cache
```

## Build &amp; Watch

For development purpose `rush build:watch` action could be used.

It includes build and validate phases in watch mode.

## Tests

### Unit tests

```bash
rush test # To execute all tests

rushx test # For individual test execution inside a package directory
```

### UI tests

```bash
cd ./tests
rush build
rush bundle
rush docker:build
## creates test Docker containers and sets up test database
./prepare.sh
## runs UI tests
rushx uitest
```

To execute tests in the development environment, please follow these steps:

```bash
cd ./tests
./create-local.sh ## use ./restore-local.sh if you only want to restore the workspace to a predefined initial state for sanity.
cd ./sanity
rushx dev-uitest # To execute all tests against the development environment.
rushx dev-debug -g &#039;pattern&#039; # To execute tests in debug mode with only the matching test pattern.
```

## Package publishing

```bash
node ./common/scripts/bump.js -p projectName
```

## Additional testing

This project is tested with BrowserStack.

&lt;sub&gt;&lt;sup&gt;&amp;copy; 2025 &lt;a href=&quot;https://hardcoreeng.com&quot;&gt;Hardcore Engineering Inc&lt;/a&gt;.&lt;/sup&gt;&lt;/sub&gt;

</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[th-ch/youtube-music]]></title>
            <link>https://github.com/th-ch/youtube-music</link>
            <guid>https://github.com/th-ch/youtube-music</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:49 GMT</pubDate>
            <description><![CDATA[YouTube Music Desktop App bundled with custom plugins (and built-in ad blocker / downloader)]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/th-ch/youtube-music">th-ch/youtube-music</a></h1>
            <p>YouTube Music Desktop App bundled with custom plugins (and built-in ad blocker / downloader)</p>
            <p>Language: TypeScript</p>
            <p>Stars: 19,020</p>
            <p>Forks: 984</p>
            <p>Stars today: 60 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;

# YouTube Music

[![GitHub release](https://img.shields.io/github/release/th-ch/youtube-music.svg?style=for-the-badge&amp;logo=youtube-music)](https://github.com/th-ch/youtube-music/releases/)
[![GitHub license](https://img.shields.io/github/license/th-ch/youtube-music.svg?style=for-the-badge)](https://github.com/th-ch/youtube-music/blob/master/license)
[![eslint code style](https://img.shields.io/badge/code_style-eslint-5ed9c7.svg?style=for-the-badge)](https://github.com/th-ch/youtube-music/blob/master/eslint.config.mjs)
[![Build status](https://img.shields.io/github/actions/workflow/status/th-ch/youtube-music/build.yml?branch=master&amp;style=for-the-badge&amp;logo=youtube-music)](https://GitHub.com/th-ch/youtube-music/releases/)
[![GitHub All Releases](https://img.shields.io/github/downloads/th-ch/youtube-music/total?style=for-the-badge&amp;logo=youtube-music)](https://GitHub.com/th-ch/youtube-music/releases/)
[![AUR](https://img.shields.io/aur/version/youtube-music-bin?color=blueviolet&amp;style=for-the-badge&amp;logo=youtube-music)](https://aur.archlinux.org/packages/youtube-music-bin)
[![Known Vulnerabilities](https://snyk.io/test/github/th-ch/youtube-music/badge.svg)](https://snyk.io/test/github/th-ch/youtube-music)

&lt;/div&gt;

![Screenshot](web/screenshot.png &quot;Screenshot&quot;)


&lt;div align=&quot;center&quot;&gt;
	&lt;a href=&quot;https://github.com/th-ch/youtube-music/releases/latest&quot;&gt;
		&lt;img src=&quot;web/youtube-music.svg&quot; width=&quot;400&quot; height=&quot;100&quot; alt=&quot;YouTube Music SVG&quot;&gt;
	&lt;/a&gt;
&lt;/div&gt;

Read this in other languages: [üá∞üá∑](./docs/readme/README-ko.md), [üá´üá∑](./docs/readme/README-fr.md), [üáÆüá∏](./docs/readme/README-is.md), [üá®üá± üá™üá∏](./docs/readme/README-es.md), [üá∑üá∫](./docs/readme/README-ru.md), [üá≠üá∫](./docs/readme/README-hu.md), [üáßüá∑](./docs/readme/README-pt.md), [üáØüáµ](./docs/readme/README-ja.md)

**Electron wrapper around YouTube Music featuring:**

- Native look &amp; feel, aims at keeping the original interface
- Framework for custom plugins: change YouTube Music to your needs (style, content, features), enable/disable plugins in
  one click

## Demo Image

|                          Player Screen (album color theme &amp; ambient light)                                |
|:---------------------------------------------------------------------------------------------------------:|
|![Screenshot1](https://github.com/th-ch/youtube-music/assets/16558115/53efdf73-b8fa-4d7b-a235-b96b91ea77fc)|

## Content

- [Features](#features)
- [Available plugins](#available-plugins)
- [Translation](#translation)
- [Download](#download)
  - [Arch Linux](#arch-linux)
  - [MacOS](#macos)
  - [Windows](#windows)
    - [How to install without a network connection? (in Windows)](#how-to-install-without-a-network-connection-in-windows)
- [Themes](#themes)
- [Dev](#dev)
- [Build your own plugins](#build-your-own-plugins)
  - [Creating a plugin](#creating-a-plugin)
  - [Common use cases](#common-use-cases)
- [Build](#build)
- [Production Preview](#production-preview)
- [Tests](#tests)
- [License](#license)
- [FAQ](#faq)

## Features:

- **Auto confirm when paused** (Always Enabled): disable
  the [&quot;Continue Watching?&quot;](https://user-images.githubusercontent.com/61631665/129977894-01c60740-7ec6-4bf0-9a2c-25da24491b0e.png)
  popup that pause music after a certain time

 - And more ...

## Available plugins:

- **Ad Blocker**: Block all ads and tracking out of the box

- **Album Actions**: Adds Undislike, Dislike, Like, and Unlike buttons to apply this to all songs in a playlist or album

- **Album Color Theme**: Applies a dynamic theme and visual effects based on the album color palette

- **Ambient Mode**: Applies a lighting effect by casting gentle colors from the video, into your screen‚Äôs background

- **Audio Compressor**: Apply compression to audio (lowers the volume of the loudest parts of the signal and raises the
  volume of the softest parts)

- **Blur Navigation Bar**: makes navigation bar transparent and blurry

- **Bypass Age Restrictions**: bypass YouTube&#039;s age verification

- **Captions Selector**: Enable captions

- **Compact Sidebar**: Always set the sidebar in compact mode

- **Crossfade**: Crossfade between songs

- **Disable Autoplay**: Makes every song start in &quot;paused&quot; mode

- **[Discord](https://discord.com/) Rich Presence**: Show your friends what you listen to
  with [Rich Presence](https://user-images.githubusercontent.com/28219076/104362104-a7a0b980-5513-11eb-9744-bb89eabe0016.png)

- **Downloader**: downloads
  MP3 [directly from the interface](https://user-images.githubusercontent.com/61631665/129977677-83a7d067-c192-45e1-98ae-b5a4927393be.png) [(youtube-dl)](https://github.com/ytdl-org/youtube-dl)

- **Equalizer**: add filters to boost or cut specific range of frequencies (e.g. bass booster)

- **Exponential Volume**: Makes the volume
  slider [exponential](https://greasyfork.org/en/scripts/397686-youtube-music-fix-volume-ratio/) so it&#039;s easier to
  select lower volumes

- **In-App Menu**: [gives bars a fancy, dark look](https://user-images.githubusercontent.com/78568641/112215894-923dbf00-8c29-11eb-95c3-3ce15db27eca.png)

  &gt; (see [this post](https://github.com/th-ch/youtube-music/issues/410#issuecomment-952060709) if you have problem
  accessing the menu after enabling this plugin and hide-menu option)

- **Scrobbler**: Adds scrobbling support for [Last.fm](https://www.last.fm/) and [ListenBrainz](https://listenbrainz.org/)

- **Lumia Stream**: Adds [Lumia Stream](https://lumiastream.com/) support

- **Lyrics Genius**: Adds lyrics support for most songs

- **Music Together**: Share a playlist with others. When the host plays a song, everyone else will hear the same song

- **Navigation**: Next/Back navigation arrows directly integrated in the interface, like in your favorite browser

- **No Google Login**: Remove Google login buttons and links from the interface

- **Notifications**: Display a notification when a song starts
  playing ([interactive notifications](https://user-images.githubusercontent.com/78568641/114102651-63ce0e00-98d0-11eb-9dfe-c5a02bb54f9c.png)
  are available on windows)

- **Picture-in-picture**: allows to switch the app to picture-in-picture mode

- **Playback Speed**: Listen fast, listen
  slow! [Adds a slider that controls song speed](https://user-images.githubusercontent.com/61631665/129976003-e55db5ba-bf42-448c-a059-26a009775e68.png)

- **Precise Volume**: Control the volume precisely using mousewheel/hotkeys, with a custom hud and customizable volume
  steps

- **Shortcuts (&amp; MPRIS)**: Allows setting global hotkeys for playback (play/pause/next/previous) +
  disable [media osd](https://user-images.githubusercontent.com/84923831/128601225-afa38c1f-dea8-4209-9f72-0f84c1dd8b54.png)
  by overriding media keys + enable Ctrl/CMD + F to search + enable linux mpris support for
  mediakeys + [custom hotkeys](https://github.com/Araxeus/youtube-music/blob/1e591d6a3df98449bcda6e63baab249b28026148/providers/song-controls.js#L13-L50)
  for [advanced users](https://github.com/th-ch/youtube-music/issues/106#issuecomment-952156902)

- **Skip Disliked Song**: Skips disliked songs

- **Skip Silences**: Automatically skip silenced sections

- [**SponsorBlock**](https://github.com/ajayyy/SponsorBlock): Automatically Skips non-music parts like intro/outro or
  parts of music videos where the song isn&#039;t playing

- **Synced Lyrics**: Provides synced lyrics to songs, using providers like [LRClib](https://lrclib.net).

- **Taskbar Media Control**: Control playback from
  your [Windows taskbar](https://user-images.githubusercontent.com/78568641/111916130-24a35e80-8a82-11eb-80c8-5021c1aa27f4.png)

- **TouchBar**: Custom TouchBar layout for macOS

- **Tuna OBS**: Integration with [OBS](https://obsproject.com/)&#039;s
  plugin [Tuna](https://obsproject.com/forum/resources/tuna.843/)

- **Video Quality Changer**: Allows changing the video quality with
  a [button](https://user-images.githubusercontent.com/78568641/138574366-70324a5e-2d64-4f6a-acdd-dc2a2b9cecc5.png) on
  the video overlay

- **Video Toggle**: Adds
  a [button](https://user-images.githubusercontent.com/28893833/173663950-63e6610e-a532-49b7-9afa-54cb57ddfc15.png) to
  switch between Video/Song mode. can also optionally remove the whole video tab

- **Visualizer**: Different music visualizers


## Translation

You can help with translation on [Hosted Weblate](https://hosted.weblate.org/projects/youtube-music/).

&lt;a href=&quot;https://hosted.weblate.org/engage/youtube-music/&quot;&gt;
  &lt;img src=&quot;https://hosted.weblate.org/widget/youtube-music/i18n/multi-auto.svg&quot; alt=&quot;translation status&quot; /&gt;
  &lt;img src=&quot;https://hosted.weblate.org/widget/youtube-music/i18n/287x66-black.png&quot; alt=&quot;translation status 2&quot; /&gt;
&lt;/a&gt;

## Download

You can check out the [latest release](https://github.com/th-ch/youtube-music/releases/latest) to quickly find the
latest version.

### Arch Linux

Install the [`youtube-music-bin`](https://aur.archlinux.org/packages/youtube-music-bin) package from the AUR. For AUR installation instructions, take a look at
this [wiki page](https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_packages).

### macOS

You can install the app using Homebrew (see the [cask definition](https://github.com/th-ch/homebrew-youtube-music)):

```bash
brew install th-ch/youtube-music/youtube-music
```

If you install the app manually and get an error &quot;is damaged and can‚Äôt be opened.&quot; when launching the app, run the following in the Terminal:

```bash
/usr/bin/xattr -cr /Applications/YouTube\ Music.app
```

### Windows

You can use the [Scoop package manager](https://scoop.sh) to install the `youtube-music` package from
the [`extras` bucket](https://github.com/ScoopInstaller/Extras).

```bash
scoop bucket add extras
scoop install extras/youtube-music
```

Alternately you can use [Winget](https://learn.microsoft.com/en-us/windows/package-manager/winget/), Windows 11s
official CLI package manager to install the `th-ch.YouTubeMusic` package.

*Note: Microsoft Defender SmartScreen might block the installation since it is from an &quot;unknown publisher&quot;. This is also
true for the manual installation when trying to run the executable(.exe) after a manual download here on github (same
file).*

```bash
winget install th-ch.YouTubeMusic
```

#### How to install without a network connection? (in Windows)

- Download the `*.nsis.7z` file for _your device architecture_ in [release page](https://github.com/th-ch/youtube-music/releases/latest).
  - `x64` for 64-bit Windows
  - `ia32` for 32-bit Windows
  - `arm64` for ARM64 Windows
- Download installer in release page. (`*-Setup.exe`)
- Place them in the **same directory**.
- Run the installer.

## Themes

You can load CSS files to change the look of the application (Options &gt; Visual Tweaks &gt; Themes).

Some predefined themes are available in https://github.com/kerichdev/themes-for-ytmdesktop-player.

## Dev

```bash
git clone https://github.com/th-ch/youtube-music
cd youtube-music
pnpm install --frozen-lockfile
pnpm dev
```

## Build your own plugins

Using plugins, you can:

- manipulate the app - the `BrowserWindow` from electron is passed to the plugin handler
- change the front by manipulating the HTML/CSS

### Creating a plugin

Create a folder in `src/plugins/YOUR-PLUGIN-NAME`:

- `index.ts`: the main file of the plugin
```typescript
import style from &#039;./style.css?inline&#039;; // import style as inline

import { createPlugin } from &#039;@/utils&#039;;

export default createPlugin({
  name: &#039;Plugin Label&#039;,
  restartNeeded: true, // if value is true, ytmusic show restart dialog
  config: {
    enabled: false,
  }, // your custom config
  stylesheets: [style], // your custom style,
  menu: async ({ getConfig, setConfig }) =&gt; {
    // All *Config methods are wrapped Promise&lt;T&gt;
    const config = await getConfig();
    return [
      {
        label: &#039;menu&#039;,
        submenu: [1, 2, 3].map((value) =&gt; ({
          label: `value ${value}`,
          type: &#039;radio&#039;,
          checked: config.value === value,
          click() {
            setConfig({ value });
          },
        })),
      },
    ];
  },
  backend: {
    start({ window, ipc }) {
      window.maximize();

      // you can communicate with renderer plugin
      ipc.handle(&#039;some-event&#039;, () =&gt; {
        return &#039;hello&#039;;
      });
    },
    // it fired when config changed
    onConfigChange(newConfig) { /* ... */ },
    // it fired when plugin disabled
    stop(context) { /* ... */ },
  },
  renderer: {
    async start(context) {
      console.log(await context.ipc.invoke(&#039;some-event&#039;));
    },
    // Only renderer available hook
    onPlayerApiReady(api: YoutubePlayer, context: RendererContext) {
      // set plugin config easily
      context.setConfig({ myConfig: api.getVolume() });
    },
    onConfigChange(newConfig) { /* ... */ },
    stop(_context) { /* ... */ },
  },
  preload: {
    async start({ getConfig }) {
      const config = await getConfig();
    },
    onConfigChange(newConfig) {},
    stop(_context) {},
  },
});
```

### Common use cases

- injecting custom CSS: create a `style.css` file in the same folder then:

```typescript
// index.ts
import style from &#039;./style.css?inline&#039;; // import style as inline

import { createPlugin } from &#039;@/utils&#039;;

export default createPlugin({
  name: &#039;Plugin Label&#039;,
  restartNeeded: true, // if value is true, ytmusic will show a restart dialog
  config: {
    enabled: false,
  }, // your custom config
  stylesheets: [style], // your custom style
  renderer() {} // define renderer hook
});
```

- If you want to change the HTML:

```typescript
import { createPlugin } from &#039;@/utils&#039;;

export default createPlugin({
  name: &#039;Plugin Label&#039;,
  restartNeeded: true, // if value is true, ytmusic will show the restart dialog
  config: {
    enabled: false,
  }, // your custom config
  renderer() {
    // Remove the login button
    document.querySelector(&quot;.sign-in-link.ytmusic-nav-bar&quot;).remove();
  } // define renderer hook
});
```

- communicating between the front and back: can be done using the ipcMain module from electron. See `index.ts` file and
  example in `sponsorblock` plugin.

## Build

1. Clone the repo
2. Follow [this guide](https://pnpm.io/installation) to install `pnpm`
3. Run `pnpm install --frozen-lockfile` to install dependencies
4. Run `pnpm build:OS`

- `pnpm dist:win` - Windows
- `pnpm dist:linux` - Linux (amd64)
- `pnpm dist:linux:deb-arm64` - Linux (arm64 for Debian)
- `pnpm dist:linux:rpm-arm64` - Linux (arm64 for Fedora)
- `pnpm dist:mac` - macOS (amd64)
- `pnpm dist:mac:arm64` - macOS (arm64)

Builds the app for macOS, Linux, and Windows,
using [electron-builder](https://github.com/electron-userland/electron-builder).

## Production Preview

```bash
pnpm start
```

## Tests

```bash
pnpm test
```

Uses [Playwright](https://playwright.dev/) to test the app.

## License

MIT ¬© [th-ch](https://github.com/th-ch/youtube-music)

## FAQ

### Why apps menu isn&#039;t showing up?

If `Hide Menu` option is on - you can show the menu with the &lt;kbd&gt;alt&lt;/kbd&gt; key (or &lt;kbd&gt;\`&lt;/kbd&gt; [backtick] if using
the in-app-menu plugin)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[fastrepl/hyprnote]]></title>
            <link>https://github.com/fastrepl/hyprnote</link>
            <guid>https://github.com/fastrepl/hyprnote</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:48 GMT</pubDate>
            <description><![CDATA[AI Notepad for back-to-back meetings. Local-first & Extensible.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/fastrepl/hyprnote">fastrepl/hyprnote</a></h1>
            <p>AI Notepad for back-to-back meetings. Local-first & Extensible.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,465</p>
            <p>Forks: 66</p>
            <p>Stars today: 252 stars today</p>
            <h2>README</h2><pre>![README banner](https://github.com/user-attachments/assets/44ebe793-004e-4313-8e04-2491ab076bea)

&lt;p align=&quot;center&quot;&gt;
&lt;h1 align=&quot;center&quot;&gt;Hyprnote &lt;i&gt;(Public Beta)&lt;/i&gt;&lt;/h1&gt;
&lt;p align=&quot;center&quot;&gt;AI notepad for meetings. &lt;strong&gt;Local-first &amp; Extensible&lt;/strong&gt;.&lt;/p&gt;
 &lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://hyprnote.com/discord&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Join%20our&amp;message=Discord&amp;color=blue&amp;logo=Discord&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://x.com/tryhyprnote&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Follow%20us%20on&amp;message=X&amp;color=black&amp;logo=x&quot; alt=&quot;X&quot;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/p&gt;
   
## Introduction

**What does Hyprnote do?**

- Records and transcribes your meetings  
- Generates **powerful summaries** from your raw meeting notes

**What‚Äôs special about it?**

- &lt;ins&gt;Works **offline**&lt;/ins&gt; using **open-source models** (_Whisper_ &amp; _Llama_)  
- Highly [extensible](https://docs.hyprnote.com/extensions/), powered by [plugins](https://docs.hyprnote.com/plugins/)

## Installation

```bash
brew tap fastrepl/hyprnote &amp;&amp; brew install hyprnote --cask
```

- [Macos](https://hyprnote.com/download) (public beta)
- [Windows](https://github.com/fastrepl/hyprnote/issues/66) (soon)
- [Linux](https://github.com/fastrepl/hyprnote/issues/67) (maybe)

## Highlights

### Hypercharge your notes
Casually jot stuff down and Hyprnote will craft a meeting note based on your memos.

&lt;img src=&quot;https://github.com/user-attachments/assets/1615a9f0-7a30-44c1-b142-0d1774a84e89&quot; width=&quot;720&quot; /&gt;

### Offline &amp; Privacy
Hyprnote is local-first which means you can be off the grid and it&#039;s perfectly fine.

&lt;img src=&quot;https://github.com/user-attachments/assets/e5014024-3f6a-457a-8f1c-3b183883b782&quot; width=&quot;720&quot; /&gt;

### Extensions &amp; Plugins
Just like VSCode, You can add or create extensions based on your circumstances.

&lt;img src=&quot;https://github.com/user-attachments/assets/341d2e6c-a2c7-432b-95b8-fdc2018838d5&quot; width=&quot;720&quot; /&gt;

&lt;br /&gt;
&lt;br /&gt;

For example, [transcript extension](https://docs.hyprnote.com/extensions/transcript.html) is powered by [listener plugin](https://docs.hyprnote.com/plugins/listener.html).

```ts
useEffect(() =&gt; {
  const channel = new Channel&lt;SessionEvent&gt;();
  listenerCommands.subscribe(channel);

  channel.onmessage = (e) =&gt; {
    if (e.type === &quot;started&quot;) {
      setIsLive(true);
    }
    if (e.type === &quot;stopped&quot;) {
      setIsLive(false);
    }
  };

  return () =&gt; {
    listenerCommands.unsubscribe(channel);
  };
}, []);
```
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[homarr-labs/dashboard-icons]]></title>
            <link>https://github.com/homarr-labs/dashboard-icons</link>
            <guid>https://github.com/homarr-labs/dashboard-icons</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:47 GMT</pubDate>
            <description><![CDATA[Your definitive source for dashboard icons.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/homarr-labs/dashboard-icons">homarr-labs/dashboard-icons</a></h1>
            <p>Your definitive source for dashboard icons.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 5,951</p>
            <p>Forks: 617</p>
            <p>Stars today: 93 stars today</p>
            <h2>README</h2><pre># Dashboard Icons

[![jsDelivr hits](https://img.shields.io/jsdelivr/gh/hy/walkxcode/dashboard-icons?style=flat-square&amp;color=%23A020F0)](https://www.jsdelivr.com/package/gh/walkxcode/dashboard-icons)
[![jsDelivr hits](https://img.shields.io/jsdelivr/gh/hy/homarr-labs/dashboard-icons?style=flat-square&amp;color=%23A020F0)](https://www.jsdelivr.com/package/gh/homarr-labs/dashboard-icons)
[![GitHub Stars](https://img.shields.io/github/stars/homarr-labs/dashboard-icons?style=flat-square&amp;color=yellow)](https://github.com/homarr-labs/dashboard-icons/stargazers)
[![Contributors](https://img.shields.io/github/contributors/homarr-labs/dashboard-icons?style=flat-square&amp;color=blue)](https://github.com/homarr-labs/dashboard-icons/graphs/contributors)

&gt; **Your definitive source for dashboard icons.**

A collection of over 1800 curated icons for services, applications and tools, designed specifically for dashboards and app directories.

**[‚Üí Browse the collection at dashboardicons.com](https://dashboardicons.com)**

## Why Dashboard Icons?

- **Comprehensive Collection**: 1800+ icons for all popular services and tools
- **Consistent Style**: Uniform visual language across different services
- **Multiple Formats**: Available in SVG, PNG, and WEBP to suit your needs
- **Light &amp; Dark Variants**: Icons optimized for both light and dark themes
- **Community-Driven**: Easy process to request missing icons

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://dashboardicons.com&quot;&gt;
    &lt;video width=&quot;650&quot; autoplay loop muted playsinline&gt;
      &lt;source src=&quot;assets/preview.mp4&quot; type=&quot;video/mp4&quot;&gt;
      Your browser does not support the video tag.
    &lt;/video&gt;
  &lt;/a&gt;
&lt;/p&gt;

## Using the Icons

### Website

Find and download icons at [dashboardicons.com](https://dashboardicons.com):

1. Search for the icon you need
2. Click on an icon to view details
3. Choose your preferred format
4. Download or copy the direct link

### Direct Links

Use icons from CDN with this pattern:

```
&lt;Base URL&gt;/&lt;Format&gt;/&lt;Icon Name&gt;.&lt;Format&gt;
```

**Base URL options:**
- jsDelivr (recommended): `https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons`
- GitHub Direct: `https://raw.githubusercontent.com/homarr-labs/dashboard-icons/main`

**Example:**
```html
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/svg/plex.svg&quot; alt=&quot;Plex&quot;&gt;
```

### Technical Details

- **Naming Convention**: Kebab-case (lowercase with hyphens)
  - Example: &quot;Nextcloud Calendar&quot; ‚Üí `nextcloud-calendar`

- **Available Formats**:
  - SVG: Vector format (original source)
  - PNG: 512px height (auto-generated)
  - WEBP: 512px height (auto-generated)

- **Variants**:
  - `-light` suffix for dark backgrounds (e.g., `github-light.svg`)
  - `-dark` suffix for light backgrounds (e.g., `github-dark.svg`)

- **Command Line**:
  ```bash
  # Download with curl
  curl -O https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/svg/nextcloud.svg

  # Download with wget
  wget https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/svg/nextcloud.svg
  ```

## Dashboard Integration

These icons integrate seamlessly with popular dashboard applications:

- [Homarr](https://github.com/ajnart/homarr)
- [Homepage](https://github.com/gethomepage/homepage)
- [Dashy](https://github.com/Lissy93/dashy)

...and many others!

## Contributing

### Request Icons

Need an icon that&#039;s not in our collection?

1. Check the [Contribution Guidelines](CONTRIBUTING.md) for specifications
2. Submit a request using our [issue templates](https://github.com/homarr-labs/dashboard-icons/issues/new/choose)
3. Provide service details and optionally upload the icon
4. Our team will review, optimize, and add it to the collection

### Improve the Repository

Want to help with the repository itself?

- Review our [Contribution Guidelines](CONTRIBUTING.md)
- Fork the repository, make your changes, and submit a pull request
- We welcome help with documentation, website improvements, and maintenance

## Support

- **GitHub Issues**: Report bugs or request icons
- **Email**: [homarr-labs@proton.me](mailto:homarr-labs@proton.me)

## Legal

**Disclaimer**: All product names, trademarks, and registered trademarks are the property of their respective owners. Icons are used for identification purposes only and do not imply endorsement.

**License**: This project is available under the terms of the [LICENSE](LICENSE) file.

---

&lt;p align=&quot;center&quot;&gt;
  Made with ‚ô• by the &lt;a href=&quot;https://github.com/homarr-labs&quot;&gt;Homarr Labs&lt;/a&gt; team and contributors
&lt;/p&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[huggingface/huggingface.js]]></title>
            <link>https://github.com/huggingface/huggingface.js</link>
            <guid>https://github.com/huggingface/huggingface.js</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:46 GMT</pubDate>
            <description><![CDATA[Utilities to use the Hugging Face Hub API]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/huggingface/huggingface.js">huggingface/huggingface.js</a></h1>
            <p>Utilities to use the Hugging Face Hub API</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,624</p>
            <p>Forks: 358</p>
            <p>Stars today: 10 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;br/&gt;
  &lt;picture&gt;
    &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://huggingface.co/datasets/huggingface/documentation-images/raw/main/huggingfacejs-dark.svg&quot;&gt;
    &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://huggingface.co/datasets/huggingface/documentation-images/raw/main/huggingfacejs-light.svg&quot;&gt;
    &lt;img alt=&quot;huggingface javascript library logo&quot; src=&quot;https://huggingface.co/datasets/huggingface/documentation-images/raw/main/huggingfacejs-light.svg&quot; width=&quot;376&quot; height=&quot;59&quot; style=&quot;max-width: 100%;&quot;&gt;
  &lt;/picture&gt;
  &lt;br/&gt;
  &lt;br/&gt;
&lt;/p&gt;

```ts
// Programmatically interact with the Hub

await createRepo({
  repo: { type: &quot;model&quot;, name: &quot;my-user/nlp-model&quot; },
  accessToken: HF_TOKEN
});

await uploadFile({
  repo: &quot;my-user/nlp-model&quot;,
  accessToken: HF_TOKEN,
  // Can work with native File in browsers
  file: {
    path: &quot;pytorch_model.bin&quot;,
    content: new Blob(...)
  }
});

// Use all supported Inference Providers!

await inference.chatCompletion({
  model: &quot;meta-llama/Llama-3.1-8B-Instruct&quot;,
  provider: &quot;sambanova&quot;, // or together, fal-ai, replicate, cohere ‚Ä¶
  messages: [
    {
      role: &quot;user&quot;,
      content: &quot;Hello, nice to meet you!&quot;,
    },
  ],
  max_tokens: 512,
  temperature: 0.5,
});

await inference.textToImage({
  model: &quot;black-forest-labs/FLUX.1-dev&quot;,
  provider: &quot;replicate&quot;,
  inputs: &quot;a picture of a green bird&quot;,
});

// and much more‚Ä¶
```

# Hugging Face JS libraries

This is a collection of JS libraries to interact with the Hugging Face API, with TS types included.

- [@huggingface/inference](packages/inference/README.md): Use all supported (serverless) Inference Providers or switch to Inference Endpoints (dedicated) to make calls to 100,000+ Machine Learning models
- [@huggingface/hub](packages/hub/README.md): Interact with huggingface.co to create or delete repos and commit / download files
- [@huggingface/agents](packages/agents/README.md): Interact with HF models through a natural language interface
- [@huggingface/gguf](packages/gguf/README.md): A GGUF parser that works on remotely hosted files.
- [@huggingface/dduf](packages/dduf/README.md): Similar package for DDUF (DDUF Diffusers Unified Format)
- [@huggingface/tasks](packages/tasks/README.md): The definition files and source-of-truth for the Hub&#039;s main primitives like pipeline tasks, model libraries, etc.
- [@huggingface/jinja](packages/jinja/README.md): A minimalistic JS implementation of the Jinja templating engine, to be used for ML chat templates.
- [@huggingface/space-header](packages/space-header/README.md): Use the Space `mini_header` outside Hugging Face
- [@huggingface/ollama-utils](packages/ollama-utils/README.md): Various utilities for maintaining Ollama compatibility with models on the Hugging Face Hub.


We use modern features to avoid polyfills and dependencies, so the libraries will only work on modern browsers / Node.js &gt;= 18 / Bun / Deno.

The libraries are still very young, please help us by opening issues!

## Installation

### From NPM

To install via NPM, you can download the libraries as needed:

```bash
npm install @huggingface/inference
npm install @huggingface/hub
npm install @huggingface/agents
```

Then import the libraries in your code:

```ts
import { InferenceClient } from &quot;@huggingface/inference&quot;;
import { HfAgent } from &quot;@huggingface/agents&quot;;
import { createRepo, commit, deleteRepo, listFiles } from &quot;@huggingface/hub&quot;;
import type { RepoId } from &quot;@huggingface/hub&quot;;
```

### From CDN or Static hosting

You can run our packages with vanilla JS, without any bundler, by using a CDN or static hosting. Using [ES modules](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/), i.e. `&lt;script type=&quot;module&quot;&gt;`, you can import the libraries in your code:

```html
&lt;script type=&quot;module&quot;&gt;
    import { InferenceClient } from &#039;https://cdn.jsdelivr.net/npm/@huggingface/inference@3.9.2/+esm&#039;;
    import { createRepo, commit, deleteRepo, listFiles } from &quot;https://cdn.jsdelivr.net/npm/@huggingface/hub@1.1.2/+esm&quot;;
&lt;/script&gt;
```

### Deno

```ts
// esm.sh
import { InferenceClient } from &quot;https://esm.sh/@huggingface/inference&quot;
import { HfAgent } from &quot;https://esm.sh/@huggingface/agents&quot;;

import { createRepo, commit, deleteRepo, listFiles } from &quot;https://esm.sh/@huggingface/hub&quot;
// or npm:
import { InferenceClient } from &quot;npm:@huggingface/inference&quot;
import { HfAgent } from &quot;npm:@huggingface/agents&quot;;

import { createRepo, commit, deleteRepo, listFiles } from &quot;npm:@huggingface/hub&quot;
```

## Usage examples

Get your HF access token in your [account settings](https://huggingface.co/settings/tokens).

### @huggingface/inference examples

```ts
import { InferenceClient } from &quot;@huggingface/inference&quot;;

const HF_TOKEN = &quot;hf_...&quot;;

const client = new InferenceClient(HF_TOKEN);

// Chat completion API
const out = await client.chatCompletion({
  model: &quot;meta-llama/Llama-3.1-8B-Instruct&quot;,
  messages: [{ role: &quot;user&quot;, content: &quot;Hello, nice to meet you!&quot; }],
  max_tokens: 512
});
console.log(out.choices[0].message);

// Streaming chat completion API
for await (const chunk of client.chatCompletionStream({
  model: &quot;meta-llama/Llama-3.1-8B-Instruct&quot;,
  messages: [{ role: &quot;user&quot;, content: &quot;Hello, nice to meet you!&quot; }],
  max_tokens: 512
})) {
  console.log(chunk.choices[0].delta.content);
}

/// Using a third-party provider:
await client.chatCompletion({
  model: &quot;meta-llama/Llama-3.1-8B-Instruct&quot;,
  messages: [{ role: &quot;user&quot;, content: &quot;Hello, nice to meet you!&quot; }],
  max_tokens: 512,
  provider: &quot;sambanova&quot;, // or together, fal-ai, replicate, cohere ‚Ä¶
})

await client.textToImage({
  model: &quot;black-forest-labs/FLUX.1-dev&quot;,
  inputs: &quot;a picture of a green bird&quot;,
  provider: &quot;fal-ai&quot;,
})



// You can also omit &quot;model&quot; to use the recommended model for the task
await client.translation({
  inputs: &quot;My name is Wolfgang and I live in Amsterdam&quot;,
  parameters: {
    src_lang: &quot;en&quot;,
    tgt_lang: &quot;fr&quot;,
  },
});

// pass multimodal files or URLs as inputs
await client.imageToText({
  model: &#039;nlpconnect/vit-gpt2-image-captioning&#039;,
  data: await (await fetch(&#039;https://picsum.photos/300/300&#039;)).blob(),
})

// Using your own dedicated inference endpoint: https://hf.co/docs/inference-endpoints/
const gpt2Client = client.endpoint(&#039;https://xyz.eu-west-1.aws.endpoints.huggingface.cloud/gpt2&#039;);
const { generated_text } = await gpt2Client.textGeneration({ inputs: &#039;The answer to the universe is&#039; });

// Chat Completion
const llamaEndpoint = client.endpoint(
  &quot;https://router.huggingface.co/hf-inference/models/meta-llama/Llama-3.1-8B-Instruct&quot;
);
const out = await llamaEndpoint.chatCompletion({
  model: &quot;meta-llama/Llama-3.1-8B-Instruct&quot;,
  messages: [{ role: &quot;user&quot;, content: &quot;Hello, nice to meet you!&quot; }],
  max_tokens: 512,
});
console.log(out.choices[0].message);
```

### @huggingface/hub examples

```ts
import { createRepo, uploadFile, deleteFiles } from &quot;@huggingface/hub&quot;;

const HF_TOKEN = &quot;hf_...&quot;;

await createRepo({
  repo: &quot;my-user/nlp-model&quot;, // or { type: &quot;model&quot;, name: &quot;my-user/nlp-test&quot; },
  accessToken: HF_TOKEN
});

await uploadFile({
  repo: &quot;my-user/nlp-model&quot;,
  accessToken: HF_TOKEN,
  // Can work with native File in browsers
  file: {
    path: &quot;pytorch_model.bin&quot;,
    content: new Blob(...)
  }
});

await deleteFiles({
  repo: { type: &quot;space&quot;, name: &quot;my-user/my-space&quot; }, // or &quot;spaces/my-user/my-space&quot;
  accessToken: HF_TOKEN,
  paths: [&quot;README.md&quot;, &quot;.gitattributes&quot;]
});
```

### @huggingface/agents example

```ts
import { HfAgent, LLMFromHub, defaultTools } from &#039;@huggingface/agents&#039;;

const HF_TOKEN = &quot;hf_...&quot;;

const agent = new HfAgent(
  HF_TOKEN,
  LLMFromHub(HF_TOKEN),
  [...defaultTools]
);


// you can generate the code, inspect it and then run it
const code = await agent.generateCode(&quot;Draw a picture of a cat wearing a top hat. Then caption the picture and read it out loud.&quot;);
console.log(code);
const messages = await agent.evaluateCode(code)
console.log(messages); // contains the data

// or you can run the code directly, however you can&#039;t check that the code is safe to execute this way, use at your own risk.
const messages = await agent.run(&quot;Draw a picture of a cat wearing a top hat. Then caption the picture and read it out loud.&quot;)
console.log(messages);
```

There are more features of course, check each library&#039;s README!

## Formatting &amp; testing

```console
sudo corepack enable
pnpm install

pnpm -r format:check
pnpm -r lint:check
pnpm -r test
```

## Building

```
pnpm -r build
```

This will generate ESM and CJS javascript files in `packages/*/dist`, eg `packages/inference/dist/index.mjs`.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[nocodb/nocodb]]></title>
            <link>https://github.com/nocodb/nocodb</link>
            <guid>https://github.com/nocodb/nocodb</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:45 GMT</pubDate>
            <description><![CDATA[üî• üî• üî• Open Source Airtable Alternative]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/nocodb/nocodb">nocodb/nocodb</a></h1>
            <p>üî• üî• üî• Open Source Airtable Alternative</p>
            <p>Language: TypeScript</p>
            <p>Stars: 54,011</p>
            <p>Forks: 3,800</p>
            <p>Stars today: 40 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot; style=&quot;border-bottom: none&quot;&gt;
    &lt;div&gt;
        &lt;a style=&quot;color:#36f&quot; href=&quot;https://www.nocodb.com&quot;&gt;
            &lt;img src=&quot;/packages/nc-gui/assets/img/icons/512x512.png&quot; width=&quot;80&quot; /&gt;
            &lt;br&gt;
            NocoDB
        &lt;/a&gt;
    &lt;/div&gt;
    The Open Source Airtable Alternative &lt;br&gt;
&lt;/h1&gt;

&lt;p align=&quot;center&quot;&gt;
NocoDB is the fastest and easiest way to build databases online.
&lt;/p&gt;


&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;http://www.nocodb.com&quot;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; ‚Ä¢
    &lt;a href=&quot;https://discord.gg/5RgZmkW&quot;&gt;&lt;b&gt;Discord&lt;/b&gt;&lt;/a&gt; ‚Ä¢
    &lt;a href=&quot;https://community.nocodb.com/&quot;&gt;&lt;b&gt;Community&lt;/b&gt;&lt;/a&gt; ‚Ä¢
    &lt;a href=&quot;https://twitter.com/nocodb&quot;&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt; ‚Ä¢
    &lt;a href=&quot;https://www.reddit.com/r/NocoDB/&quot;&gt;&lt;b&gt;Reddit&lt;/b&gt;&lt;/a&gt; ‚Ä¢
    &lt;a href=&quot;https://docs.nocodb.com/&quot;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;

![video avi](https://github.com/nocodb/nocodb/assets/86527202/e2fad786-f211-4dcb-9bd3-aaece83a6783)

&lt;div align=&quot;center&quot;&gt;

[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263434-75fe793d-42af-49e4-b964-d70920e41655.png&quot;&gt;](markdown/readme/languages/chinese.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263474-787d71e7-3a87-42a8-92a8-be1d1f55413d.png&quot;&gt;](markdown/readme/languages/french.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263531-fae58600-6616-4b43-95a0-5891019dd35d.png&quot;&gt;](markdown/readme/languages/german.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263589-3dbeda9a-0d2e-4bbd-b1fc-691404bb74fb.png&quot;&gt;](markdown/readme/languages/spanish.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263669-f567196a-d4e8-4143-a80a-93d3be32ba90.png&quot;&gt;](markdown/readme/languages/portuguese.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263707-ba4e04a4-268a-4626-91b8-048e572fd9f6.png&quot;&gt;](markdown/readme/languages/italian.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263770-38e3e79d-11d4-472e-ac27-ae0f17cf65c4.png&quot;&gt;](markdown/readme/languages/japanese.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263822-28fce9de-915a-44dc-962d-7a61d340e91d.png&quot;&gt;](markdown/readme/languages/korean.md)
[&lt;img height=&quot;38&quot; src=&quot;https://user-images.githubusercontent.com/61551451/135263888-151d4ad1-7084-4943-97c9-56f28cd40b80.png&quot;&gt;](markdown/readme/languages/russian.md)

&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;markdown/readme/languages/README.md&quot;&gt;&lt;b&gt;See other languages ¬ª&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;img src=&quot;https://static.scarf.sh/a.png?x-pxid=c12a77cc-855e-4602-8a0f-614b2d0da56a&quot; /&gt;

# Join Our Community

&lt;a href=&quot;https://discord.gg/5RgZmkW&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://discordapp.com/api/guilds/661905455894888490/widget.png?style=banner3&quot; alt=&quot;&quot;&gt;
&lt;/a&gt;

[![Stargazers repo roster for @nocodb/nocodb](http://reporoster.com/stars/nocodb/nocodb)](https://github.com/nocodb/nocodb/stargazers)

# Installation

## Docker with SQLite

```bash 
docker run -d \
  --name noco \
  -v &quot;$(pwd)&quot;/nocodb:/usr/app/data/ \
  -p 8080:8080 \
  nocodb/nocodb:latest
  ```

## Docker with PG
```bash
docker run -d \
  --name noco \
  -v &quot;$(pwd)&quot;/nocodb:/usr/app/data/ \
  -p 8080:8080 \
  -e NC_DB=&quot;pg://host.docker.internal:5432?u=root&amp;p=password&amp;d=d1&quot; \
  -e NC_AUTH_JWT_SECRET=&quot;569a1821-0a93-45e8-87ab-eb857f20a010&quot; \
  nocodb/nocodb:latest
```

## Nix

```
nix run github:nocodb/nocodb
```

## NixOS
To use NocoDB as a NixOS module, a flake.nix would be as follows:

```
{
  description = &quot;Bane&#039;s NixOS configuration&quot;;

  inputs = {
    nixpkgs.url = &quot;github:nixos/nixpkgs/nixos-unstable&quot;;
    nocodb.url = &quot;github:nocodb/nocodb&quot;;
  };

  outputs = inputs@{ nixpkgs, nocodb, ... }: {
    nixosConfigurations = {
      hostname = nixpkgs.lib.nixosSystem {
        system = &quot;x86_64-linux&quot;;
        modules = [
          ./configuration.nix
          nocodb.nixosModules.nocodb

          {
            services.nocodb.enable = true;
          }
        ];
      };
    };
  };
}
```

## Auto-upstall
Auto-upstall is a single command that sets up NocoDB on a server for production usage.
Behind the scenes it auto-generates docker-compose for you.

```bash
bash &lt;(curl -sSL http://install.nocodb.com/noco.sh) &lt;(mktemp)
```

Auto-upstall does the following: üïä
- üê≥ Automatically installs all pre-requisites like docker, docker-compose
- üöÄ Automatically installs NocoDB with PostgreSQL, Redis, Minio, Traefik gateway using Docker Compose. üêò üóÑÔ∏è üåê
- üîÑ Automatically upgrades NocoDB to the latest version when you run the command again.
- üîí Automatically setups SSL and also renews it. Needs a domain or subdomain as input while installation.
&gt; install.nocodb.com/noco.sh script can be found [here in our github](https://raw.githubusercontent.com/nocodb/nocodb/develop/docker-compose/1_Auto_Upstall/noco.sh)


## Other Methods

&gt; Binaries are only for quick testing locally.

| Install Method                | Command to install                                                                                                                                                                                                                                                                                                                                                         |
|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| üçè MacOS arm64 &lt;br&gt;(Binary)   | `curl http://get.nocodb.com/macos-arm64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb`                                                                                                                                                                                                                                                                                       |
| üçè MacOS x64 &lt;br&gt;(Binary)     | `curl http://get.nocodb.com/macos-x64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb`                                                                                                                                                                                                                                                                                         |
| üêß Linux arm64 &lt;br&gt;(Binary)   | `curl http://get.nocodb.com/linux-arm64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb`                                                                                                                                                                                                                                                                                       |
| üêß Linux x64 &lt;br&gt;(Binary)     | `curl http://get.nocodb.com/linux-x64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb`                                                                                                                                                                                                                                                                                         |
| ü™ü Windows arm64 &lt;br&gt;(Binary) | `iwr http://get.nocodb.com/win-arm64.exe -OutFile Noco-win-arm64.exe &amp;&amp; .\Noco-win-arm64.exe`                                                                                                                                                                                                                                                                              |
| ü™ü Windows x64 &lt;br&gt;(Binary)   | `iwr http://get.nocodb.com/win-x64.exe -OutFile Noco-win-x64.exe &amp;&amp; .\Noco-win-x64.exe`                                                                                                                                                                                                                                                                                    |


&gt; When running locally access nocodb by visiting: [http://localhost:8080/dashboard](http://localhost:8080/dashboard)

For more installation methods, please refer to [our docs](https://docs.nocodb.com/category/installation)

# Screenshots
![2](https://github.com/nocodb/nocodb/assets/86527202/a127c05e-2121-4af2-a342-128e0e2d0291)
![3](https://github.com/nocodb/nocodb/assets/86527202/674da952-8a06-4848-a0e8-a7b02d5f5c88)
![4](https://github.com/nocodb/nocodb/assets/86527202/cbc5152a-9caf-4f77-a8f7-92a9d06d025b)
![5](https://github.com/nocodb/nocodb/assets/86527202/dc75dfdc-c486-4f5a-a853-2a8f9e6b569a)

![5](https://user-images.githubusercontent.com/35857179/194844886-a17006e0-979d-493f-83c4-0e72f5a9b716.png)
![7](https://github.com/nocodb/nocodb/assets/86527202/be64e619-7295-43e2-aa95-cace4462b17f)
![8](https://github.com/nocodb/nocodb/assets/86527202/4538bf5a-371f-4ec1-a867-8197e5824286)

![8](https://user-images.githubusercontent.com/35857179/194844893-82d5e21b-ae61-41bd-9990-31ad659bf490.png)
![9](https://user-images.githubusercontent.com/35857179/194844897-cfd79946-e413-4c97-b16d-eb4d7678bb79.png)
![10](https://user-images.githubusercontent.com/35857179/194844902-c0122570-0dd5-41cf-a26f-6f8d71fefc99.png)
![11](https://user-images.githubusercontent.com/35857179/194844903-c1e47f40-e782-4f5d-8dce-6449cc70b181.png)
![12](https://user-images.githubusercontent.com/35857179/194844907-09277d3e-cbbf-465c-9165-6afc4161e279.png)

# Features

### Rich Spreadsheet Interface

- ‚ö° &amp;nbsp;Basic Operations: Create, Read, Update and Delete Tables, Columns, and Rows
- ‚ö° &amp;nbsp;Fields Operations: Sort, Filter, Group, Hide / Unhide Columns
- ‚ö° &amp;nbsp;Multiple Views Types: Grid (By default), Gallery, Form, Kanban and Calendar View
- ‚ö° &amp;nbsp;View Permissions Types: Collaborative Views, &amp; Locked Views
- ‚ö° &amp;nbsp;Share Bases / Views: either Public or Private (with Password Protected)
- ‚ö° &amp;nbsp;Variant Cell Types: ID, Links, Lookup, Rollup, SingleLineText, Attachment, Currency, Formula, User, etc
- ‚ö° &amp;nbsp;Access Control with Roles: Fine-grained Access Control at different levels
- ‚ö° &amp;nbsp;and more ...

### App Store for Workflow Automations

We provide different integrations in three main categories. See &lt;a href=&quot;https://docs.nocodb.com/account-settings/oss-specific-details/#app-store&quot; target=&quot;_blank&quot;&gt;App Store&lt;/a&gt; for details.

- ‚ö° &amp;nbsp;Chat: Slack, Discord, Mattermost, and etc
- ‚ö° &amp;nbsp;Email: AWS SES, SMTP, MailerSend, and etc
- ‚ö° &amp;nbsp;Storage: AWS S3, Google Cloud Storage, Minio, and etc

### Programmatic Access

We provide the following ways to let users programmatically invoke actions. You can use a token (either JWT or Social Auth) to sign your requests for authorization to NocoDB.

- ‚ö° &amp;nbsp;REST APIs
- ‚ö° &amp;nbsp;NocoDB SDK

# Contributing

Please refer to [Contribution Guide](https://github.com/nocodb/nocodb/blob/master/.github/CONTRIBUTING.md).

# Why are we building this?

Most internet businesses equip themselves with either spreadsheet or a database to solve their business needs. Spreadsheets are used by Billion+ humans collaboratively every single day. However, we are way off working at similar speeds on databases which are way more powerful tools when it comes to computing. Attempts to solve this with SaaS offerings have meant horrible access controls, vendor lock-in, data lock-in, abrupt price changes &amp; most importantly a glass ceiling on what&#039;s possible in the future.

# Our Mission

Our mission is to provide the most powerful no-code interface for databases that is open source to every single internet business in the world. This would not only democratise access to a powerful computing tool but also bring forth a billion+ people who will have radical tinkering-and-building abilities on the internet.

# License

&lt;p&gt;
This project is licensed under &lt;a href=&quot;./LICENSE&quot;&gt;AGPLv3&lt;/a&gt;.
&lt;/p&gt;

# Contributors

Thank you for your contributions! We appreciate all the contributions from the community.

&lt;a href=&quot;https://github.com/nocodb/nocodb/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=nocodb/nocodb&quot; /&gt;
&lt;/a&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[berty/berty]]></title>
            <link>https://github.com/berty/berty</link>
            <guid>https://github.com/berty/berty</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:44 GMT</pubDate>
            <description><![CDATA[Berty is a secure peer-to-peer messaging app that works with or without internet access, cellular data or trust in the network]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/berty/berty">berty/berty</a></h1>
            <p>Berty is a secure peer-to-peer messaging app that works with or without internet access, cellular data or trust in the network</p>
            <p>Language: TypeScript</p>
            <p>Stars: 8,181</p>
            <p>Forks: 419</p>
            <p>Stars today: 61 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://berty.tech/img/berty.svg&quot; alt=&quot;Berty&quot; title=&quot;Berty&quot; height=&quot;300px&quot; /&gt;
&lt;/h1&gt;

&lt;h3 align=&quot;center&quot;&gt; Berty is an open, secure, offline-first, peer-to-peer and zero trust messaging app &lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://berty.tech&quot;&gt;&lt;img alt=&quot;berty.tech&quot; src=&quot;https://img.shields.io/badge/berty.tech-2845a7?logo=internet-explorer&amp;style=flat&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://crpt.fyi/berty-discord&quot;&gt;&lt;img alt=&quot;discord&quot; src=&quot;https://img.shields.io/badge/discord-gray?logo=discord&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty&quot;&gt;&lt;img alt=&quot;github&quot; src=&quot;https://img.shields.io/badge/@berty-471961?logo=github&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://twitter.com/berty&quot;&gt;&lt;img alt=&quot;twitter&quot; src=&quot;https://img.shields.io/twitter/follow/berty?label=%40berty&amp;style=flat&amp;logo=twitter&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3AJS&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/JS/badge.svg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3AGo&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/Go/badge.svg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3AProtobuf&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/Protobuf/badge.svg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3ARelease&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/Release/badge.svg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3AAndroid&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/Android/badge.svg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3AiOS&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/iOS/badge.svg&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;https://github.com/berty/berty/actions?query=workflow%3AIntegration&quot;&gt;&lt;img src=&quot;https://github.com/berty/berty/workflows/Integration/badge.svg&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://pkg.go.dev/berty.tech/berty/v2/go?tab=subdirectories&quot;&gt;&lt;img alt=&quot;GoDoc&quot; src=&quot;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;logoColor=white&quot; /&gt;&lt;/a&gt;
  &lt;a title=&quot;Crowdin&quot; href=&quot;https://translate.berty.community&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/e/a4cb8d931040fbe4a794322b86de6721/localized.svg&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/berty/berty/releases&quot;&gt;&lt;img alt=&quot;GitHub release&quot; src=&quot;https://img.shields.io/github/v/release/berty/berty&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://www.codefactor.io/repository/github/berty/berty&quot;&gt;&lt;img src=&quot;https://www.codefactor.io/repository/github/berty/berty/badge?s=bf5885a3b2782ead81d91cd423915f2e9ddc9196&quot; alt=&quot;CodeFactor&quot; /&gt;&lt;/a&gt;
  &lt;!--&lt;a href=&quot;https://goreportcard.com/report/berty/berty&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/berty/berty&quot; alt=&quot;Go Report Card&quot;&gt;&lt;/a&gt;--&gt;
  &lt;!--&lt;a href=&quot;https://bump.sh/doc/berty-messenger&quot;/&gt;&lt;img src=&quot;https://img.shields.io/badge/bump.sh-messenger%20api-black&quot; /&gt;&lt;/a&gt;--&gt;
  &lt;!--&lt;a href=&quot;https://bump.sh/doc/berty-protocol&quot;/&gt;&lt;img src=&quot;https://img.shields.io/badge/bump.sh-protocol%20api-black&quot; /&gt;&lt;/a&gt;--&gt;
&lt;/p&gt;

---

## TLDR : Install it!

### Mobile

To use the latest released version, install it from [Google Play](https://play.google.com/store/apps/details?id=tech.berty.android)
or [Apple App Store](https://apps.apple.com/tt/app/berty/id1535500412).

To compile and run the mobile application on your device, see [js/README.md](js/README.md).

### CLI

You can `go run` or `go install` the CLI tool located in `go/cmd/berty`.
The two main command line utilities are:

- `berty mini`: a CLI messaging app using the Wesh Protocol.
- `berty daemon`: a full node manageable through the Wesh Protocol API.

## Introduction

&gt; **Warning**: Berty is still under active development and should not yet be used to exchange sensitive data.

**[Berty](https://berty.tech/)** is a privacy-first messaging application built on top of [the Wesh Protocol](https://berty.tech/docs/protocol/).

- *Secure and private* :
    - Messages are end-to-end encrypted by default
    - Metadata is kept to a minimum
    - No phone number or email address is required to create an account
    - Built to retain its properties even when used on adversarial networks
- *Censorship-resilient*
    - Decentralized, distributed, peer-to-peer and serverless
    - No internet connection is required, thanks to [BLE technology](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy) and [mDNS](https://en.wikipedia.org/wiki/Multicast_DNS).
- *Open* :
    - Free forever and open-source

**Berty** is designed to be used as a communication tool when all other traditional messengers fail. Berty Messenger serves the following use cases:

- When you need to share sensitive information over untrusted networks, for instance while traveling
- If you want to communicate anonymously
- If you want full control over your data and thus don&#039;t want to rely on third-party servers
- In countries that actively monitor and temper with their network, restricting its use and censoring some of its contents
- In areas with weak or no connection at all

Berty is currently developed by **[Berty Technologies](https://berty.tech/about)**, a French nonprofit organization.

**Note: this project is led by a small team made of humans, who make mistakes. Please do not hesitate to point out bugs or missing features.** _See the [contribute section](#contribute) below._

&gt; We cannot promise we will offer you the best application, but we dedicate ourselves to doing our best to create a great one.

### The philosophy behind Berty

We want to contribute to a world where free and secure communications are common and fear of censorship or surveillance are not.

We believe that open-source is more secure, as anyone can examine the code and improve it: this is why we rely on and build open and free software.

As the founding team, our ultimate goal is to progressively relinquish control over Berty and to make it become a truly global community project.

More info on [berty/community](https://github.com/berty/community).

## Development Status

The current Berty implementation is using the [Wesh Protocol](https://berty.tech/docs/protocol/), which means the encryption technique is safe, and it works as a peer-to-peer app!

Alas, Berty has not yet been hardened, so please avoid using it on devices with weak sandboxes, such as unpatchable devices that use old Android versions.

The current Wesh Protocol is _partially implemented_.

The API will continue to evolve in the near future. As such, we cannot yet guarantee none-breaking changes, or any kind of API stability. Be prepared for a rough ride if you start rolling the Wesh Protocol in your application.

_[Subscribe](https://tech.us20.list-manage.com/subscribe/post?u=5ca3993c7f0b8f646dcda714b&amp;id=4d7828715b) to our newsletter if you wish to be notified about the latest features and releases._

**Note: The repositories are being opened progressively, and there will be additional modifications and updates soon.**

## Under the hood

![Berty Messenger High Level Architecture](docs/architecture/Berty_Messenger_Architecture.jpg)

### Wesh Protocol

[![go.dev reference](https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;logoColor=white)](https://pkg.go.dev/berty.tech/berty/v2/go/pkg/bertyprotocol?tab=doc)
[![Code coverage](https://codecov.io/gh/berty/berty/branch/master/graph/badge.svg?token=rBPpNHNNow&amp;flag=go.unittests)](https://codecov.io/gh/berty/berty)

The Wesh Protocol comes with a generic, but full-featured SDK allowing developers to write peer-to-peer applications. You can just focus on high-level features for your app, we will take care of the rest (encryption, identities, network routing, group management, account management, device management, application lifecycle).

The main concept of the _Wesh Protocol_ is called the &quot;group&quot;, a virtual place where multiple devices can share messages and metadata using [OrbitDB](https://github.com/orbitdb), which itself relies on the InterPlanetary File System ([IPFS](https://en.wikipedia.org/wiki/InterPlanetary_File_System))

&lt;!-- _TODO: add usage examples_ --&gt;

Get it:

```
git clone https://github.com/berty/berty
```

### The Berty Messenger

[![Code coverage](https://codecov.io/gh/berty/berty/branch/master/graph/badge.svg?token=rBPpNHNNow&amp;flag=js.unittests)](https://codecov.io/gh/berty/berty)

The Berty Messenger, or simply Berty, is a messaging application written in [React Native](https://reactnative.dev/), that uses the Wesh Protocol through [gomobile-ipfs](https://github.com/ipfs-shipyard/gomobile-ipfs), which, in turns, is using [gomobile](https://github.com/golang/mobile).

## Main items in the repo

- [./go](go): Where all the Golang code lies.
  - [./go/framework/bertybridge](go/framework/bertybridge): The gomobile entrypoint.
  - [./go/cmd/**berty**](go/cmd/berty): The main **Berty CLI**:
    - `berty daemon`: Runs the whole Wesh Protocol instance.
    - `berty mini`: Simple CLI messenger application using Wesh Protocol.
  - [./go/cmd/**rdvp**](go/cmd/rdvp): A Rendez-Vous Point server.
  - [./go/cmd/**welcomebot**](go/cmd/welcomebot): An onboarding bot used during the early phase.
  - [./go/cmd/**testbot**](go/cmd/testbot): A bot used by integration tests and developers.
- [./js](js): Where all the Javascript/Typescript code lies:
  - The **Berty Messenger** application, written in React Native.
- [./docs](docs): Mostly auto-generated documentation.

## Contributing

![Contribute to Berty](https://assets.berty.tech/files/contribute-contribute_v2--Contribute-berty-ultra-light.gif)

We welcome contributions! Your input is deeply appreciated and extremely valuable to us. We thank you in advance for it.

There is no small feat: everyone is encouraged to do what they can to help, based on their ability and interest.

There are plenty of ways to get involved and to help our community, which can roughly be divided in two distinct parts: everything that is related to the code and everything that is not.

To put it simply:

- Code-related = GitHub
- Not code-related = Open a task

Everything about contribution is summed up here: [CONTRIBUTING.MD](https://github.com/berty/community/blob/master/CONTRIBUTING.md)

## Stargazers over time

[![Star History Chart](https://api.star-history.com/svg?repos=berty/berty&amp;type=Date)](https://star-history.com/#berty/berty&amp;Date)

## Other resources

- Official website: https://berty.tech
- Assets: https://assets.berty.tech/
- Application assets &amp; mockups: https://assets.berty.tech/categories/app__v2.4/

## Contact

For a direct contact, see our [contact page](https://berty.tech/contact) of our website. Alternatively, take a look at our [community repository](https://github.com/berty/community/).

## Licensing

¬© 2018-2023 [Berty Technologies](https://berty.tech)

Licensed under the [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) ([`LICENSE-APACHE`](LICENSE-APACHE)) or the [MIT license](https://opensource.org/licenses/MIT) ([`LICENSE-MIT`](LICENSE-MIT)), at your discretion. See the [`COPYRIGHT`](COPYRIGHT) file for more details.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[AmruthPillai/Reactive-Resume]]></title>
            <link>https://github.com/AmruthPillai/Reactive-Resume</link>
            <guid>https://github.com/AmruthPillai/Reactive-Resume</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:43 GMT</pubDate>
            <description><![CDATA[A one-of-a-kind resume builder that keeps your privacy in mind. Completely secure, customizable, portable, open-source and free forever. Try it out today!]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/AmruthPillai/Reactive-Resume">AmruthPillai/Reactive-Resume</a></h1>
            <p>A one-of-a-kind resume builder that keeps your privacy in mind. Completely secure, customizable, portable, open-source and free forever. Try it out today!</p>
            <p>Language: TypeScript</p>
            <p>Stars: 31,019</p>
            <p>Forks: 3,200</p>
            <p>Stars today: 234 stars today</p>
            <h2>README</h2><pre>![Reactive Resume](https://i.imgur.com/FFc4nyZ.jpg)

![App Version](https://img.shields.io/github/package-json/version/AmruthPillai/Reactive-Resume?label=version)
[![Docker Pulls](https://img.shields.io/docker/pulls/amruthpillai/reactive-resume)](https://hub.docker.com/repository/docker/amruthpillai/reactive-resume)
[![GitHub Sponsors](https://img.shields.io/github/sponsors/AmruthPillai)](https://github.com/sponsors/AmruthPillai)
[![Crowdin](https://badges.crowdin.net/reactive-resume/localized.svg)](https://crowdin.com/project/reactive-resume)
[![Discord](https://img.shields.io/discord/1173518977851473940?label=discord&amp;link=https%3A%2F%2Fdiscord.gg%2FhzwkZbyvUW)](https://discord.gg/hzwkZbyvUW)

# Reactive Resume

A free and open-source resume builder that simplifies the process of creating, updating, and sharing your resume.

### [Go to App](https://rxresu.me/) | [Docs](https://docs.rxresu.me/)

## Description

Reactive Resume is a free and open-source resume builder that simplifies the process of creating, updating, and sharing your resume. With zero user tracking or advertising, your privacy is a top priority. The platform is extremely user-friendly and can be self-hosted in less than 30 seconds if you wish to own your data completely.

It&#039;s available in multiple languages and comes packed with features such as real-time editing, dozens of templates, drag-and-drop customisation, and integration with OpenAI for enhancing your writing.

You can share a personalised link of your resume to potential employers, track its views or downloads, and customise your page layout by dragging-and-dropping sections. The platform also supports various font options and provides dozens of templates to choose from. And yes, there&#039;s even a dark mode for a more comfortable viewing experience.

Start creating your standout resume with Reactive Resume today!

## Templates

| Azurill                                                      | Bronzor                                                     | Chikorita                                                   |
| ------------------------------------------------------------ | ----------------------------------------------------------- | ----------------------------------------------------------- |
| &lt;img src=&quot;https://i.imgur.com/jKgo04C.jpeg&quot; width=&quot;200px&quot; /&gt; | &lt;img src=&quot;https://i.imgur.com/DFNQZP2.jpg&quot; width=&quot;200px&quot; /&gt; | &lt;img src=&quot;https://i.imgur.com/Dwv8Y7f.jpg&quot; width=&quot;200px&quot; /&gt; |

| Ditto                                                       | Kakuna                                                      | Nosepass                                                    |
| ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- |
| &lt;img src=&quot;https://i.imgur.com/6c5lASL.jpg&quot; width=&quot;200px&quot; /&gt; | &lt;img src=&quot;https://i.imgur.com/268ML3t.jpg&quot; width=&quot;200px&quot; /&gt; | &lt;img src=&quot;https://i.imgur.com/npRLsPS.jpg&quot; width=&quot;200px&quot; /&gt; |

| Onyx                                                        | Pikachu                                                     | Rhyhorn                                                     |
| ----------------------------------------------------------- | ----------------------------------------------------------- | ----------------------------------------------------------- |
| &lt;img src=&quot;https://i.imgur.com/cxplXOW.jpg&quot; width=&quot;200px&quot; /&gt; | &lt;img src=&quot;https://i.imgur.com/Y9f7qsh.jpg&quot; width=&quot;200px&quot; /&gt; | &lt;img src=&quot;https://i.imgur.com/h4kQxy2.jpg&quot; width=&quot;200px&quot; /&gt; |

## Features

- **Free, forever** and open-source
- No telemetry, user tracking or advertising
- You can self-host the application in less than 30 seconds
- **Available in multiple languages** ([help add/improve your language here](https://translate.rxresu.me/))
- Use your email address (or a throw-away address, no problem) to create an account
- You can also sign in with your GitHub or Google account, and even set up two-factor authentication for extra security
- Create as many resumes as you like under a single account, optimising each resume for every job application based on its description for a higher ATS score
- **Bring your own OpenAI API key** and unlock features such as improving your writing, fixing spelling and grammar or changing the tone of your text in one-click
- Translate your resume into any language using ChatGPT and import it back for easier editing
- Create single page resumes or a resume that spans multiple pages easily
- Customize the colours and layouts to add a personal touch to your resume
- Customise your page layout as you like just by dragging-and-dropping sections
- Create custom sections that are specific to your industry if the existing ones don&#039;t fit
- Jot down personal notes specific to your resume that&#039;s only visible to you
- Lock a resume to prevent making any further edits (useful for master templates)
- **Dozens of templates** to choose from, ranging from professional to modern
- Design your resume using the standardised EuroPass design template
- Supports printing resumes in A4 or Letter page formats
- Design your resume with any font that&#039;s available on [Google Fonts](https://fonts.google.com/)
- **Share a personalised link of your resume** to companies or recruiters for them to get the latest updates
- You can track the number of views or downloads your public resume has received
- Built with state-of-the-art (at the moment) and dependable technologies that&#039;s battle tested and peer reviewed by the open-source community on GitHub
- **MIT License**, so do what you like with the code as long as you credit the original author
- And yes, there‚Äôs a dark mode too üåì

## Built With

- React (Vite), for the frontend
- NestJS, for the backend
- Postgres (primary database)
- Prisma ORM, which frees you to switch to any other relational database with a few minor changes in the code
- Minio (for object storage: to store avatars, resume PDFs and previews)
- Browserless (for headless chrome, to print PDFs and generate previews)
- SMTP Server (to send password recovery emails)
- GitHub/Google OAuth (for quickly authenticating users)
- LinguiJS and Crowdin (for translation management and localization)

## Star History

&lt;a href=&quot;https://star-history.com/#AmruthPillai/Reactive-Resume&amp;Date&quot;&gt;
  &lt;picture&gt;
    &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=AmruthPillai/Reactive-Resume&amp;type=Date&amp;theme=dark&quot; /&gt;
    &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=AmruthPillai/Reactive-Resume&amp;type=Date&quot; /&gt;
    &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=AmruthPillai/Reactive-Resume&amp;type=Date&quot; /&gt;
  &lt;/picture&gt;
&lt;/a&gt;

## License

Reactive Resume is packaged and distributed using the [MIT License](/LICENSE.md) which allows for commercial use, distribution, modification and private use provided that all copies of the software contain the same license and copyright.

_By the community, for the community._  
A passion project by [Amruth Pillai](https://www.amruthpillai.com/)

&lt;p&gt;
  &lt;a href=&quot;https://www.digitalocean.com/?utm_medium=opensource&amp;utm_source=Reactive-Resume&quot;&gt;
    &lt;img src=&quot;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/PoweredByDO/DO_Powered_by_Badge_blue.svg&quot; width=&quot;200px&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[clash-verge-rev/clash-verge-rev]]></title>
            <link>https://github.com/clash-verge-rev/clash-verge-rev</link>
            <guid>https://github.com/clash-verge-rev/clash-verge-rev</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:42 GMT</pubDate>
            <description><![CDATA[A modern GUI client based on Tauri, designed to run in Windows, macOS and Linux for tailored proxy experience]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/clash-verge-rev/clash-verge-rev">clash-verge-rev/clash-verge-rev</a></h1>
            <p>A modern GUI client based on Tauri, designed to run in Windows, macOS and Linux for tailored proxy experience</p>
            <p>Language: TypeScript</p>
            <p>Stars: 56,240</p>
            <p>Forks: 4,360</p>
            <p>Stars today: 135 stars today</p>
            <h2>README</h2><pre>&lt;h1 align=&quot;center&quot;&gt;
  &lt;img src=&quot;./src-tauri/icons/icon.png&quot; alt=&quot;Clash&quot; width=&quot;128&quot; /&gt;
  &lt;br&gt;
  Continuation of &lt;a href=&quot;https://github.com/zzzgydi/clash-verge&quot;&gt;Clash Verge&lt;/a&gt;
  &lt;br&gt;
&lt;/h1&gt;

&lt;h3 align=&quot;center&quot;&gt;
A Clash Meta GUI based on &lt;a href=&quot;https://github.com/tauri-apps/tauri&quot;&gt;Tauri&lt;/a&gt;.
&lt;/h3&gt;

## Preview

| Dark                             | Light                             |
| -------------------------------- | --------------------------------- |
| ![È¢ÑËßà](./docs/preview_dark.png) | ![È¢ÑËßà](./docs/preview_light.png) |

## Install

ËØ∑Âà∞ÂèëÂ∏ÉÈ°µÈù¢‰∏ãËΩΩÂØπÂ∫îÁöÑÂÆâË£ÖÂåÖÔºö[Release page](https://github.com/clash-verge-rev/clash-verge-rev/releases)&lt;br&gt;
Go to the [release page](https://github.com/clash-verge-rev/clash-verge-rev/releases) to download the corresponding installation package&lt;br&gt;
Supports Windows (x64/x86), Linux (x64/arm64) and macOS 10.15+ (intel/apple).

### ÂÆâË£ÖËØ¥ÊòéÂíåÂ∏∏ËßÅÈóÆÈ¢òÔºåËØ∑Âà∞[ÊñáÊ°£È°µ](https://clash-verge-rev.github.io/)Êü•ÁúãÔºö[Doc](https://clash-verge-rev.github.io/)

---

### TG È¢ëÈÅì: [@clash_verge_rev](https://t.me/clash_verge_re)

## Promotion

[ÁãóÁãóÂä†ÈÄü ‚Äî‚Äî ÊäÄÊúØÊµÅÊú∫Âú∫ Doggygo VPN](https://verge.dginv.click/#/register?code=oaxsAGo6)

- È´òÊÄßËÉΩÊµ∑Â§ñÊú∫Âú∫ÔºåÂÖçË¥πËØïÁî®Ôºå‰ºòÊÉ†Â•óÈ§êÔºåËß£ÈîÅÊµÅÂ™í‰ΩìÔºåÂÖ®ÁêÉÈ¶ñÂÆ∂ÊîØÊåÅ Hysteria ÂçèËÆÆ„ÄÇ
- ‰ΩøÁî® Clash Verge ‰∏ìÂ±ûÈÇÄËØ∑ÈìæÊé•Ê≥®ÂÜåÈÄÅ 3 Â§©ÔºåÊØèÂ§© 1G ÊµÅÈáèÂÖçË¥πËØïÁî®Ôºö[ÁÇπÊ≠§Ê≥®ÂÜå](https://verge.dginv.click/#/register?code=oaxsAGo6)
- Clash Verge ‰∏ìÂ±û 8 Êäò‰ºòÊÉ†Á†Å: verge20 (‰ªÖÊúâ 500 ‰ªΩ)
- ‰ºòÊÉ†Â•óÈ§êÊØèÊúà‰ªÖÈúÄ 15.8 ÂÖÉÔºå160G ÊµÅÈáèÔºåÂπ¥‰ªò 8 Êäò
- Êµ∑Â§ñÂõ¢ÈòüÔºåÊó†Ë∑ëË∑ØÈ£éÈô©ÔºåÈ´òËææ 50% Ëøî‰Ω£
- ÈõÜÁæ§Ë¥üËΩΩÂùáË°°ËÆæËÆ°ÔºåÈ´òÈÄü‰∏ìÁ∫ø(ÂÖºÂÆπËÄÅÂÆ¢Êà∑Á´Ø)ÔºåÊûÅ‰ΩéÂª∂ËøüÔºåÊó†ËßÜÊôöÈ´òÂ≥∞Ôºå4K ÁßíÂºÄ
- ÂÖ®ÁêÉÈ¶ñÂÆ∂ Hysteria ÂçèËÆÆÊú∫Âú∫ÔºåÁé∞Â∑≤‰∏äÁ∫øÊõ¥Âø´ÁöÑ `Hysteria2` ÂçèËÆÆ(Clash Verge ÂÆ¢Êà∑Á´ØÊúÄ‰Ω≥Êê≠ÈÖç)
- Ëß£ÈîÅÊµÅÂ™í‰ΩìÂèä ChatGPT
- ÂÆòÁΩëÔºö[https://ÁãóÁãóÂä†ÈÄü.com](https://verge.dginv.click/#/register?code=oaxsAGo6)

## Features

- Âü∫‰∫éÊÄßËÉΩÂº∫Âä≤ÁöÑ Rust Âíå Tauri 2 Ê°ÜÊû∂
- ÂÜÖÁΩÆ[Clash.Meta(mihomo)](https://github.com/MetaCubeX/mihomo)ÂÜÖÊ†∏ÔºåÂπ∂ÊîØÊåÅÂàáÊç¢ `Alpha` ÁâàÊú¨ÂÜÖÊ†∏„ÄÇ
- ÁÆÄÊ¥ÅÁæéËßÇÁöÑÁî®Êà∑ÁïåÈù¢ÔºåÊîØÊåÅËá™ÂÆö‰πâ‰∏ªÈ¢òÈ¢úËâ≤„ÄÅ‰ª£ÁêÜÁªÑ/ÊâòÁõòÂõæÊ†á‰ª•Âèä `CSS Injection`„ÄÇ
- ÈÖçÁΩÆÊñá‰ª∂ÁÆ°ÁêÜÂíåÂ¢ûÂº∫ÔºàMerge Âíå ScriptÔºâÔºåÈÖçÁΩÆÊñá‰ª∂ËØ≠Ê≥ïÊèêÁ§∫„ÄÇ
- Á≥ªÁªü‰ª£ÁêÜÂíåÂÆàÂç´„ÄÅ`TUN(ËôöÊãüÁΩëÂç°)` Ê®°Âºè„ÄÇ
- ÂèØËßÜÂåñËäÇÁÇπÂíåËßÑÂàôÁºñËæë
- WebDav ÈÖçÁΩÆÂ§á‰ªΩÂíåÂêåÊ≠•

### FAQ

Refer to [Doc FAQ Page](https://clash-verge-rev.github.io/faq/windows.html)

### Donation

[ÊçêÂä©Clash Verge RevÁöÑÂºÄÂèë](https://github.com/sponsors/clash-verge-rev)

## Development

See [CONTRIBUTING.md](./CONTRIBUTING.md) for more details.

To run the development server, execute the following commands after all prerequisites for **Tauri** are installed:

```shell
pnpm i
pnpm run check
pnpm dev
```

## Contributions

Issue and PR welcome!

## Acknowledgement

Clash Verge rev was based on or inspired by these projects and so on:

- [zzzgydi/clash-verge](https://github.com/zzzgydi/clash-verge): A Clash GUI based on tauri. Supports Windows, macOS and Linux.
- [tauri-apps/tauri](https://github.com/tauri-apps/tauri): Build smaller, faster, and more secure desktop applications with a web frontend.
- [Dreamacro/clash](https://github.com/Dreamacro/clash): A rule-based tunnel in Go.
- [MetaCubeX/mihomo](https://github.com/MetaCubeX/mihomo): A rule-based tunnel in Go.
- [Fndroid/clash_for_windows_pkg](https://github.com/Fndroid/clash_for_windows_pkg): A Windows/macOS GUI based on Clash.
- [vitejs/vite](https://github.com/vitejs/vite): Next generation frontend tooling. It&#039;s fast!

## License

GPL-3.0 License. See [License here](./LICENSE) for details.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[juice-shop/juice-shop]]></title>
            <link>https://github.com/juice-shop/juice-shop</link>
            <guid>https://github.com/juice-shop/juice-shop</guid>
            <pubDate>Mon, 28 Apr 2025 00:04:41 GMT</pubDate>
            <description><![CDATA[OWASP Juice Shop: Probably the most modern and sophisticated insecure web application]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/juice-shop/juice-shop">juice-shop/juice-shop</a></h1>
            <p>OWASP Juice Shop: Probably the most modern and sophisticated insecure web application</p>
            <p>Language: TypeScript</p>
            <p>Stars: 11,152</p>
            <p>Forks: 12,641</p>
            <p>Stars today: 6 stars today</p>
            <h2>README</h2><pre># ![Juice¬†Shop¬†Logo](https://raw.githubusercontent.com/juice-shop/juice-shop/master/frontend/src/assets/public/images/JuiceShop_Logo_100px.png) OWASP Juice Shop

[![OWASP Flagship](https://img.shields.io/badge/owasp-flagship%20project-48A646.svg)](https://owasp.org/projects/#sec-flagships)
[![GitHub release](https://img.shields.io/github/release/juice-shop/juice-shop.svg)](https://github.com/juice-shop/juice-shop/releases/latest)
[![Twitter Follow](https://img.shields.io/twitter/follow/owasp_juiceshop.svg?style=social&amp;label=Follow)](https://twitter.com/owasp_juiceshop)
[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/owasp_juiceshop?style=social)](https://reddit.com/r/owasp_juiceshop)

![CI/CD Pipeline](https://github.com/juice-shop/juice-shop/workflows/CI/CD%20Pipeline/badge.svg?branch=master)
[![Test Coverage](https://api.codeclimate.com/v1/badges/6206c8f3972bcc97a033/test_coverage)](https://codeclimate.com/github/juice-shop/juice-shop/test_coverage)
[![Maintainability](https://api.codeclimate.com/v1/badges/6206c8f3972bcc97a033/maintainability)](https://codeclimate.com/github/juice-shop/juice-shop/maintainability)
[![Code Climate technical debt](https://img.shields.io/codeclimate/tech-debt/juice-shop/juice-shop)](https://codeclimate.com/github/juice-shop/juice-shop/trends/technical_debt)
[![Cypress tests](https://img.shields.io/endpoint?url=https://dashboard.cypress.io/badge/simple/3hrkhu/master&amp;style=flat&amp;logo=cypress)](https://dashboard.cypress.io/projects/3hrkhu/runs)
[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/223/badge)](https://www.bestpractices.dev/projects/223)
![GitHub stars](https://img.shields.io/github/stars/juice-shop/juice-shop.svg?label=GitHub%20%E2%98%85&amp;style=flat)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md)

&gt; [The most trustworthy online shop out there.](https://twitter.com/dschadow/status/706781693504589824)
&gt; ([@dschadow](https://github.com/dschadow)) ‚Äî
&gt; [The best juice shop on the whole internet!](https://twitter.com/shehackspurple/status/907335357775085568)
&gt; ([@shehackspurple](https://twitter.com/shehackspurple)) ‚Äî
&gt; [Actually the most bug-free vulnerable application in existence!](https://youtu.be/TXAztSpYpvE?t=26m35s)
&gt; ([@vanderaj](https://twitter.com/vanderaj)) ‚Äî
&gt; [First you üòÇüòÇthen you üò¢](https://twitter.com/kramse/status/1073168529405472768)
&gt; ([@kramse](https://twitter.com/kramse)) ‚Äî
&gt; [But this doesn&#039;t have anything to do with juice.](https://twitter.com/coderPatros/status/1199268774626488320)
&gt; ([@coderPatros&#039; wife](https://twitter.com/coderPatros))

OWASP Juice Shop is probably the most modern and sophisticated insecure web application! It can be used in security
trainings, awareness demos, CTFs and as a guinea pig for security tools! Juice Shop encompasses vulnerabilities from the
entire
[OWASP Top Ten](https://owasp.org/www-project-top-ten) along with many other security flaws found in real-world
applications!

![Juice Shop Screenshot Slideshow](screenshots/slideshow.gif)

For a detailed introduction, full list of features and architecture overview please visit the official project page:
&lt;https://owasp-juice.shop&gt;

## Table of contents

- [Setup](#setup)
    - [From Sources](#from-sources)
    - [Packaged Distributions](#packaged-distributions)
    - [Docker Container](#docker-container)
    - [Vagrant](#vagrant)
- [Demo](#demo)
- [Documentation](#documentation)
    - [Node.js version compatibility](#nodejs-version-compatibility)
    - [Troubleshooting](#troubleshooting)
    - [Official companion guide](#official-companion-guide)
- [Contributing](#contributing)
- [References](#references)
- [Merchandise](#merchandise)
- [Donations](#donations)
- [Contributors](#contributors)
- [Licensing](#licensing)

## Setup

&gt; You can find some less common installation variations as well as instructions to run Juice Shop on a variety of cloud computing providers in
&gt; [the _Running OWASP Juice Shop_ documentation](https://pwning.owasp-juice.shop/companion-guide/latest/part1/running.html).

### From Sources

![GitHub repo size](https://img.shields.io/github/repo-size/juice-shop/juice-shop.svg)

1. Install [node.js](#nodejs-version-compatibility)
2. Run `git clone https://github.com/juice-shop/juice-shop.git --depth 1` (or
   clone [your own fork](https://github.com/juice-shop/juice-shop/fork)
   of the repository)
3. Go into the cloned folder with `cd juice-shop`
4. Run `npm install` (only has to be done before first start or when you change the source code)
5. Run `npm start`
6. Browse to &lt;http://localhost:3000&gt;

### Packaged Distributions

[![GitHub release](https://img.shields.io/github/downloads/juice-shop/juice-shop/total.svg)](https://github.com/juice-shop/juice-shop/releases/latest)
[![SourceForge](https://img.shields.io/sourceforge/dm/juice-shop?label=sourceforge%20downloads)](https://sourceforge.net/projects/juice-shop/)
[![SourceForge](https://img.shields.io/sourceforge/dt/juice-shop?label=sourceforge%20downloads)](https://sourceforge.net/projects/juice-shop/)

1. Install a 64bit [node.js](#nodejs-version-compatibility) on your Windows, MacOS or Linux machine
2. Download `juice-shop-&lt;version&gt;_&lt;node-version&gt;_&lt;os&gt;_x64.zip` (or
   `.tgz`) attached to
   [latest release](https://github.com/juice-shop/juice-shop/releases/latest)
3. Unpack and `cd` into the unpacked folder
4. Run `npm start`
5. Browse to &lt;http://localhost:3000&gt;

&gt; Each packaged distribution includes some binaries for `sqlite3` and
&gt; `libxmljs` bound to the OS and node.js version which `npm install` was
&gt; executed on.

### Docker Container

[![Docker Pulls](https://img.shields.io/docker/pulls/bkimminich/juice-shop.svg)](https://hub.docker.com/r/bkimminich/juice-shop)
![Docker Stars](https://img.shields.io/docker/stars/bkimminich/juice-shop.svg)
[![](https://images.microbadger.com/badges/image/bkimminich/juice-shop.svg)](https://microbadger.com/images/bkimminich/juice-shop
&quot;Get your own image badge on microbadger.com&quot;)
[![](https://images.microbadger.com/badges/version/bkimminich/juice-shop.svg)](https://microbadger.com/images/bkimminich/juice-shop
&quot;Get your own version badge on microbadger.com&quot;)

1. Install [Docker](https://www.docker.com)
2. Run `docker pull bkimminich/juice-shop`
3. Run `docker run --rm -p 127.0.0.1:3000:3000 bkimminich/juice-shop`
4. Browse to &lt;http://localhost:3000&gt; (on macOS and Windows browse to
   &lt;http://192.168.99.100:3000&gt; if you are using docker-machine instead of the native docker installation)

### Vagrant

1. Install [Vagrant](https://www.vagrantup.com/downloads.html) and
   [Virtualbox](https://www.virtualbox.org/wiki/Downloads)
2. Run `git clone https://github.com/juice-shop/juice-shop.git` (or
   clone [your own fork](https://github.com/juice-shop/juice-shop/fork)
   of the repository)
3. Run `cd vagrant &amp;&amp; vagrant up`
4. Browse to [192.168.56.110](http://192.168.56.110)

## Demo

Feel free to have a look at the latest version of OWASP Juice Shop:
&lt;http://demo.owasp-juice.shop&gt;

&gt; This is a deployment-test and sneak-peek instance only! You are __not
&gt; supposed__ to use this instance for your own hacking endeavours! No
&gt; guaranteed uptime! Guaranteed stern looks if you break it!

## Documentation

### Node.js version compatibility

![GitHub package.json dynamic](https://img.shields.io/github/package-json/cpu/bkimminich/juice-shop)
![GitHub package.json dynamic](https://img.shields.io/github/package-json/os/bkimminich/juice-shop)

OWASP Juice Shop officially supports the following versions of
[node.js](http://nodejs.org) in line with the official
[node.js LTS schedule](https://github.com/nodejs/LTS) as close as possible. Docker images and packaged distributions are
offered accordingly.

| node.js | Supported                | Tested             | [Packaged Distributions](#packaged-distributions) | [Docker images](#docker-container) from `master` | [Docker images](#docker-container) from `develop` |
|:--------|:-------------------------|:-------------------|:--------------------------------------------------|:-------------------------------------------------|:--------------------------------------------------|
| 23.x    | :x:                      | :x:                |                                                   |                                                  |                                                   |
| 22.x    | :heavy_check_mark:*      | :heavy_check_mark: | Windows (`x64`), MacOS (`x64`), Linux (`x64`)     |                                                  |                                                   |
| 21.x    | ( :heavy_check_mark:*  ) | :heavy_check_mark: | Windows (`x64`), MacOS (`x64`), Linux (`x64`)     |                                                  |                                                   |
| 20.x    | :heavy_check_mark:       | :heavy_check_mark: | Windows (`x64`), MacOS (`x64`), Linux (`x64`)     | `latest` (`linux/amd64`, `linux/arm64`)          | `snapshot` (`linux/amd64`, `linux/arm64`)         |
| 19.x    | ( :heavy_check_mark: )   | :x:                |                                                   |                                                  |                                                   |
| 18.x    | :heavy_check_mark:       | :heavy_check_mark: | Windows (`x64`), MacOS (`x64`), Linux (`x64`)     |                                                  |                                                   |
| &lt;18.x   | :x:                      | :x:                |                                                   |                                                  |                                                   |

Juice Shop is automatically tested _only on the latest `.x` minor version_ of each node.js version mentioned above!
There is no guarantee that older minor node.js releases will always work with Juice Shop!
Please make sure you stay up to date with your chosen version.

\*=:warning: _There are no pre-built binaries for `libxmljs` available for Node.js versions greater than 20.x. In order to build Juice Shop from source locally, you need to have all C++ build tools installed that are needed to compile those binaries locally. In the packaged distributions theses binaries are already included. We are working on a pure JavaScript replacement of `libxmljs` in [#2421](https://github.com/juice-shop/juice-shop/issues/2421). Contributions are highly welcome!_

### Troubleshooting

[![Gitter](http://img.shields.io/badge/gitter-join%20chat-1dce73.svg)](https://gitter.im/bkimminich/juice-shop)

If you need help with the application setup please check our
[our existing _Troubleshooting_](https://pwning.owasp-juice.shop/companion-guide/latest/part4/troubleshooting.html)
guide. If this does not solve your issue please post your specific problem or question in the
[Gitter Chat](https://gitter.im/bkimminich/juice-shop) where community members can best try to help you.

:stop_sign: **Please avoid opening GitHub issues for support requests or questions!**

### Official companion guide

[![Write Goodreads Review](https://img.shields.io/badge/goodreads-write%20review-49557240.svg)](https://www.goodreads.com/review/edit/49557240)

OWASP Juice Shop comes with an official companion guide eBook. It will give you a complete overview of all
vulnerabilities found in the application including hints how to spot and exploit them. In the appendix you will even
find complete step-by-step solutions to every challenge. Extensive documentation of
[custom re-branding](https://pwning.owasp-juice.shop/companion-guide/latest/part4/customization.html),
[CTF-support](https://pwning.owasp-juice.shop/companion-guide/latest/part4/ctf.html),
[trainer&#039;s guide](https://pwning.owasp-juice.shop/companion-guide/latest/part4/trainers.html)
and much more is also included.

[Pwning OWASP Juice Shop](https://leanpub.com/juice-shop) is published under
[CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/)
and is available **for free** in PDF, Kindle and ePub format on LeanPub. You can also
[browse the full content online](https://pwning.owasp-juice.shop)!

[&lt;img alt=&quot;Pwning OWASP Juice Shop cover&quot; src=&quot;https://raw.githubusercontent.com/juice-shop/pwning-juice-shop/master/docs/modules/ROOT/assets/images/cover.jpg&quot; width=&quot;200&quot;/&gt;](https://leanpub.com/juice-shop)
[&lt;img alt=&quot;Pwning OWASP Juice Shop back cover&quot; src=&quot;https://raw.githubusercontent.com/juice-shop/pwning-juice-shop/master/docs/modules/ROOT/assets/images/introduction/back.jpg&quot; width=&quot;200&quot;/&gt;](https://leanpub.com/juice-shop)

## Contributing

[![GitHub contributors](https://img.shields.io/github/contributors/bkimminich/juice-shop.svg)](https://github.com/juice-shop/juice-shop/graphs/contributors)
[![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)
[![Crowdin](https://d322cqt584bo4o.cloudfront.net/owasp-juice-shop/localized.svg)](https://crowdin.com/project/owasp-juice-shop)
![GitHub issues by-label](https://img.shields.io/github/issues/bkimminich/juice-shop/help%20wanted.svg)
![GitHub issues by-label](https://img.shields.io/github/issues/bkimminich/juice-shop/good%20first%20issue.svg)

We are always happy to get new contributors on board! Please check
[CONTRIBUTING.md](CONTRIBUTING.md) to learn how to
[contribute to our codebase](CONTRIBUTING.md#code-contributions) or the
[translation into different languages](CONTRIBUTING.md#i18n-contributions)!

## References

Did you write a blog post, magazine article or do a podcast about or mentioning OWASP Juice Shop? Or maybe you held or
joined a conference talk or meetup session, a hacking workshop or public training where this project was mentioned?

Add it to our ever-growing list of [REFERENCES.md](REFERENCES.md) by forking and opening a Pull Request!

## Merchandise

* On [Spreadshirt.com](http://shop.spreadshirt.com/juiceshop) and
  [Spreadshirt.de](http://shop.spreadshirt.de/juiceshop) you can get some swag (Shirts, Hoodies, Mugs) with the official
  OWASP Juice Shop logo
* On
  [StickerYou.com](https://www.stickeryou.com/products/owasp-juice-shop/794)
  you can get variants of the OWASP Juice Shop logo as single stickers to decorate your laptop with. They can also print
  magnets, iron-ons, sticker sheets and temporary tattoos.

## Donations

[![](https://img.shields.io/badge/support-owasp%20juice%20shop-blue)](https://owasp.org/donate/?reponame=www-project-juice-shop&amp;title=OWASP+Juice+Shop)

The OWASP Foundation gratefully accepts donations via Stripe. Projects such as Juice Shop can then request reimbursement
for expenses from the Foundation. If you&#039;d like to express your support of the Juice Shop project, please make sure to
tick the &quot;Publicly list me as a supporter of OWASP Juice Shop&quot; checkbox on the donation form. You can find our more
about donations and how they are used here:

&lt;https://pwning.owasp-juice.shop/companion-guide/latest/part3/donations.html&gt;

## Contributors

The OWASP Juice Shop Project Leaders are:

- [Bj√∂rn Kimminich](https://github.com/bkimminich) aka `bkimminich` [![Keybase PGP](https://img.shields.io/keybase/pgp/bkimminich)](https://keybase.io/bkimminich)
- [Jannik Hollenbach](https://github.com/J12934) aka `J12934`

For a list of all contributors to the OWASP Juice Shop please visit our
[HALL_OF_FAME.md](HALL_OF_FAME.md).

## Licensing

[![license](https://img.shields.io/github/license/bkimminich/juice-shop.svg)](LICENSE)

This program is free software: you can redistribute it and/or modify it under the terms of the [MIT license](LICENSE).
OWASP Juice Shop and any contributions are Copyright ¬© by Bjoern Kimminich &amp; the OWASP Juice Shop contributors
2014-2025.

![Juice Shop Logo](https://raw.githubusercontent.com/bkimminich/juice-shop/master/frontend/src/assets/public/images/JuiceShop_Logo_400px.png)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
    </channel>
</rss>