<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for typescript - TypeScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for typescript.</description>
        <lastBuildDate>Fri, 01 Aug 2025 00:06:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[puppeteer/puppeteer]]></title>
            <link>https://github.com/puppeteer/puppeteer</link>
            <guid>https://github.com/puppeteer/puppeteer</guid>
            <pubDate>Fri, 01 Aug 2025 00:06:04 GMT</pubDate>
            <description><![CDATA[JavaScript API for Chrome and Firefox]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/puppeteer/puppeteer">puppeteer/puppeteer</a></h1>
            <p>JavaScript API for Chrome and Firefox</p>
            <p>Language: TypeScript</p>
            <p>Stars: 91,385</p>
            <p>Forks: 9,243</p>
            <p>Stars today: 26 stars today</p>
            <h2>README</h2><pre># Puppeteer

[![build](https://github.com/puppeteer/puppeteer/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/puppeteer/puppeteer/actions/workflows/ci.yml)
[![npm puppeteer package](https://img.shields.io/npm/v/puppeteer.svg)](https://npmjs.org/package/puppeteer)

&lt;img src=&quot;https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png&quot; height=&quot;200&quot; align=&quot;right&quot;/&gt;

&gt; Puppeteer is a JavaScript library which provides a high-level API to control
&gt; Chrome or Firefox over the
&gt; [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) or [WebDriver BiDi](https://pptr.dev/webdriver-bidi).
&gt; Puppeteer runs in the headless (no visible UI) by default

## [Get started](https://pptr.dev/docs) | [API](https://pptr.dev/api) | [FAQ](https://pptr.dev/faq) | [Contributing](https://pptr.dev/contributing) | [Troubleshooting](https://pptr.dev/troubleshooting)

## Installation

```bash npm2yarn
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.
```

## Example

```ts
import puppeteer from &#039;puppeteer&#039;;
// Or import puppeteer from &#039;puppeteer-core&#039;;

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto(&#039;https://developer.chrome.com/&#039;);

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box using accessible input name.
await page.locator(&#039;aria/Search&#039;).fill(&#039;automate beyond recorder&#039;);

// Wait and click on first result.
await page.locator(&#039;.devsite-result-item-link&#039;).click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator(&#039;text/Customize and automate&#039;)
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el =&gt; el.textContent);

// Print the full title.
console.log(&#039;The title of this blog post is &quot;%s&quot;.&#039;, fullTitle);

await browser.close();
```
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[Canner/WrenAI]]></title>
            <link>https://github.com/Canner/WrenAI</link>
            <guid>https://github.com/Canner/WrenAI</guid>
            <pubDate>Fri, 01 Aug 2025 00:06:03 GMT</pubDate>
            <description><![CDATA[‚ö°Ô∏èWren AI is your GenBI Agent, that you can query any database with natural language, get accurate SQL(Text-to-SQL), charts(Text-to-Charts) & AI-generated insights in seconds.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Canner/WrenAI">Canner/WrenAI</a></h1>
            <p>‚ö°Ô∏èWren AI is your GenBI Agent, that you can query any database with natural language, get accurate SQL(Text-to-SQL), charts(Text-to-Charts) & AI-generated insights in seconds.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 9,161</p>
            <p>Forks: 938</p>
            <p>Stars today: 119 stars today</p>
            <h2>README</h2><pre>
&lt;p align=&quot;center&quot; id=&quot;top&quot;&gt;
  &lt;a href=&quot;https://getwren.ai/?utm_source=github&amp;utm_medium=title&amp;utm_campaign=readme&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;./misc/wrenai_logo.png&quot;&gt;
      &lt;img src=&quot;./misc/wrenai_logo_white.png&quot; width=&quot;300px&quot;&gt;
    &lt;/picture&gt;
    &lt;h1 align=&quot;center&quot;&gt;Wren AI - Open-Source GenBI Agent&lt;/h1&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a aria-label=&quot;Follow us on X&quot; href=&quot;https://x.com/getwrenai&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/-@getwrenai-blue?style=for-the-badge&amp;logo=x&amp;logoColor=white&amp;labelColor=gray&amp;logoWidth=20&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;Releases&quot; href=&quot;https://github.com/canner/WrenAI/releases&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/github/v/release/canner/WrenAI?logo=github&amp;label=GitHub%20Release&amp;color=blue&amp;style=for-the-badge&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;License&quot; href=&quot;https://github.com/Canner/WrenAI/blob/main/LICENSE&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/github/license/canner/WrenAI?color=blue&amp;style=for-the-badge&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://docs.getwren.ai&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/badge/docs-online-brightgreen?style=for-the-badge&quot; alt=&quot;Docs&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;Join the community on GitHub&quot; href=&quot;https://discord.gg/5DvshJqG8Z&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/-JOIN%20THE%20COMMUNITY-blue?style=for-the-badge&amp;logo=discord&amp;logoColor=white&amp;labelColor=grey&amp;logoWidth=20&quot;&gt;
  &lt;/a&gt;
  &lt;a aria-label=&quot;Canner&quot; href=&quot;https://cannerdata.com/?utm_source=github&amp;utm_medium=badge&amp;utm_campaign=readme&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%A7%A1-Made%20by%20Canner-blue?style=for-the-badge&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://trendshift.io/repositories/9263&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/9263&quot; alt=&quot;Canner%2FWrenAI | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;

&gt; Wren AI is your GenBI Agent, that you can query any database with natural language ‚Üí get accurate SQL(Text-to-SQL), charts(Text-to-Charts) &amp; AI-generated insights in seconds. ‚ö°Ô∏è

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;./misc/workflow.png&quot;&gt;
&lt;/p&gt;

## üòç Demos

https://github.com/user-attachments/assets/f9c1cb34-5a95-4580-8890-ec9644da4160

[Watch GenBI Demo](https://github.com/user-attachments/assets/90ad1d35-bb1e-490b-9676-b29863ff090b)

## ü§ñ Features

|                    | What you get | Why it matters |
|--------------------|--------------|----------------|
| **Talk to Your Data** | Ask in any language ‚Üí precise SQL &amp; answers | Slash the SQL learning curveÔªø |
| **GenBI Insights** | AI-written summaries, charts &amp; reports | Decision-ready context in one clickÔªø |
| **Semantic Layer** | MDL models encode schema, metrics, joins | Keeps LLM outputs accurate &amp; governedÔªø |
| **Embed via API**  | Generate queries &amp; charts inside your apps ([API Docs](https://wrenai.readme.io/reference/cloud-getting-started)) | Build custom agents, SaaS features, chatbotsÔªø ([Streamlit Live Demo](https://huggingface.co/spaces/getWrenAI/wrenai-cloud-api-demo)) |

ü§© [Learn more about GenBI](https://getwren.ai/genbi?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme)

## üöÄ Getting Started

Using Wren AI is super simple, you can set it up within 3 minutes, and start to interact with your data!

- Visit our [Install in your local environment](http://docs.getwren.ai/oss/installation?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme).
- Visit the [Usage Guides](https://docs.getwren.ai/oss/guide/connect/overview?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) to learn more about how to use Wren AI.
- Or just start with [Wren AI Cloud](https://getwren.ai/?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) our Managed Cloud Service. ([OSS vs. Commercial Plans](https://docs.getwren.ai/oss/overview/cloud_vs_self_host)).

## üèóÔ∏è Architecture

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;./misc/how_wrenai_works.png&quot;&gt;
&lt;/p&gt;

üëâ [Learn more about our Design](https://getwren.ai/post/how-we-design-our-semantic-engine-for-llms-the-backbone-of-the-semantic-layer-for-llm-architecture?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme)


## üîå Data Sources

If your data source is not listed here, vote for it in our [GitHub discussion thread](https://github.com/Canner/WrenAI/discussions/327). It will be a valuable input for us to decide on the next supported data sources.
- Athena (Trino)
- Redshift
- BigQuery
- DuckDB
- PostgreSQL
- MySQL
- Microsoft SQL Server
- ClickHouse
- Oracle
- Trino
- Snowflake

## ü§ñ LLM Models

Wren AI supports integration with various Large Language Models (LLMs), including but not limited to:
- OpenAI Models
- Azure OpenAI Models
- DeepSeek Models
- Google AI Studio ‚Äì Gemini Models
- Vertex AI Models (Gemini + Anthropic)
- Bedrock Models
- Anthropic API Models
- Groq Models
- Ollama Models
- Databricks Models

Check [configuration examples here](https://github.com/Canner/WrenAI/tree/main/wren-ai-service/docs/config_examples)!

&gt; [!CAUTION]
&gt; The performance of Wren AI depends significantly on the capabilities of the LLM you choose. We strongly recommend using the most powerful model available for optimal results. Using less capable models may lead to reduced performance, slower response times, or inaccurate outputs.

## üìö Documentation

Visit [Wren AI documentation](https://docs.getwren.ai/oss/overview/introduction?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) to view the full documentation.

## üì™ Keep Posted?

[Subscribe our blog](https://www.getwren.ai/blog/?utm_source=github&amp;utm_medium=content&amp;utm_campaign=readme) and [Follow our LinkedIn](https://www.linkedin.com/company/wrenai)

## üõ†Ô∏è Contribution

1.	Star ‚≠ê the repo to show support (it really helps).
2.	Open an issue for bugs, ideas, or discussions.
3.	Read [Contribution Guidelines](https://github.com/Canner/WrenAI/blob/main/CONTRIBUTING.md) for setup &amp; PR guidelines.

## ‚≠êÔ∏è Community

- Join 1.3k+ developers in our [Discord](https://discord.gg/5DvshJqG8Z) for real-time help and roadmap previews.
- If there are any issues, please visit [GitHub Issues](https://github.com/Canner/WrenAI/issues).
- Explore our [public roadmap](https://wrenai.notion.site/) to stay updated on upcoming features and improvements!

Please note that our [Code of Conduct](./CODE_OF_CONDUCT.md) applies to all Wren AI community channels. Users are **highly encouraged** to read and adhere to them to avoid repercussions.

## üéâ Our Contributors
&lt;a href=&quot;https://github.com/canner/wrenAI/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=Canner/WrenAI&quot; /&gt;
&lt;/a&gt;

&lt;p align=&quot;right&quot;&gt;
  &lt;a href=&quot;#top&quot;&gt;‚¨ÜÔ∏è Back to Top&lt;/a&gt;
&lt;/p&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[fastrepl/hyprnote]]></title>
            <link>https://github.com/fastrepl/hyprnote</link>
            <guid>https://github.com/fastrepl/hyprnote</guid>
            <pubDate>Fri, 01 Aug 2025 00:06:02 GMT</pubDate>
            <description><![CDATA[Local-first AI Notepad for Private Meetings]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/fastrepl/hyprnote">fastrepl/hyprnote</a></h1>
            <p>Local-first AI Notepad for Private Meetings</p>
            <p>Language: TypeScript</p>
            <p>Stars: 3,660</p>
            <p>Forks: 185</p>
            <p>Stars today: 174 stars today</p>
            <h2>README</h2><pre>![github_banner_v2](https://github.com/user-attachments/assets/e5fac942-1a51-4180-9d64-f508db705f9d)

&lt;p align=&quot;center&quot;&gt;
  &lt;p align=&quot;center&quot;&gt;AI notepad for &lt;strong&gt;private&lt;/strong&gt; meetings. Not a single byte of data leaves your device.&lt;/p&gt;
  &lt;p align=&quot;center&quot;&gt;
   &lt;a href=&quot;https://deepwiki.com/fastrepl/hyprnote&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg&quot; alt=&quot;Ask DeepWiki&quot;&gt;&lt;/a&gt;
   &lt;a href=&quot;https://hyprnote.com/discord&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Join%20our&amp;message=Discord&amp;color=blue&amp;logo=Discord&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
   &lt;a href=&quot;https://x.com/tryhyprnote&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Follow%20us%20on&amp;message=X&amp;color=black&amp;logo=x&quot; alt=&quot;X&quot;&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/p&gt;
   
## What is Hyprnote?

Hyprnote is a local-first AI notepad designed for people in back-to-back meetings.

- Listens to your meetings while you write
- Crafts smart summaries based on your quick notes
- Runs completely **offline** using open-source models like Whisper or HyprLLM

No clouds. No leaks. Just your notes‚Äîon your machine.

## Installation

```bash
brew tap fastrepl/hyprnote &amp;&amp; brew install hyprnote --cask
```

- [macOS](https://hyprnote.com/download) (public beta)
- [Windows](https://github.com/fastrepl/hyprnote/issues/66) (soon)
- [Linux](https://github.com/fastrepl/hyprnote/issues/67) (of course)

## Highlights

### Realtime Transcript
Watch a live transcript update as the meeting unfolds‚Äîaccurate, fast, and fully local.
&lt;img width=&quot;959&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/d24b8b43-a052-44cd-803e-daa3ff600a9c&quot; /&gt;

### From Memos to Summaries
Jot things down during your call. Hyprnote turns them into a polished meeting summary‚Äîcontext-aware and easy to share.
&lt;img width=&quot;959&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/489f9239-1a32-4217-9d74-554906687fe1&quot; /&gt;

### Truly Local
No internet? No problem. Hyprnote works offline by default and keeps everything on your device.

![offline](https://github.com/user-attachments/assets/c6649a63-3d41-40ea-a1fd-8c0713ad91bc)

### Bring Your Own LLM
Prefer something custom? You can swap in your own language model:

- Run local models via Ollama
- Use approved third-party APIs like Gemini, Claude, or Azure-hosted GPT
- Stay compliant with whatever your org allows

Hyprnote plays nice with whatever stack you‚Äôre running.

&lt;img width=&quot;912&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/717dc39a-3359-46d6-a92f-51de56907750&quot; /&gt;

### Note Templates
Prefer a certain style? Choose from predefined templates like bullet points, agenda-based, or paragraph summary. Or create your own.

&lt;img width=&quot;959&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/d826a854-4b6f-415c-9e97-270f517c0868&quot; /&gt;

### Autonomy Selector
Control how much freedom the AI takes:

- Stick strictly to your quick notes
- Let Hyprnote improvise and reframe based on the full conversation

&lt;img width=&quot;912&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/7de5c74f-5d99-46ec-8a5f-a38fb62bafb1&quot; /&gt;

### AI Chat
Ask follow-ups right inside your notes:

- &quot;What were the action items?&quot;
- &quot;Rewrite this in simpler language&quot;
- &quot;Translate to Spanish&quot;

&lt;img width=&quot;959&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/52b7dc14-906f-445f-91f9-b0089d40a495&quot; /&gt;


### Integrations
- Apple Calendar, Contacts
- Obsidian
- Coming soon: Notion, Slack, Hubspot, Salesforce

&lt;img width=&quot;912&quot; height=&quot;712&quot; alt=&quot;image&quot; src=&quot;https://github.com/user-attachments/assets/ab559e54-fda5-4c8c-97d7-ba1b9d134cc8&quot; /&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[linkwarden/linkwarden]]></title>
            <link>https://github.com/linkwarden/linkwarden</link>
            <guid>https://github.com/linkwarden/linkwarden</guid>
            <pubDate>Fri, 01 Aug 2025 00:06:01 GMT</pubDate>
            <description><![CDATA[‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è Self-hosted collaborative bookmark manager to collect, read, annotate, and fully preserve what matters, all in one place.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/linkwarden/linkwarden">linkwarden/linkwarden</a></h1>
            <p>‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è Self-hosted collaborative bookmark manager to collect, read, annotate, and fully preserve what matters, all in one place.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 13,479</p>
            <p>Forks: 523</p>
            <p>Stars today: 70 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;./assets/logo.png&quot; width=&quot;100px&quot; /&gt;
  &lt;h1&gt;Linkwarden&lt;/h1&gt;
  &lt;h3&gt;Bookmarks, Evolved&lt;/h3&gt;

&lt;a href=&quot;https://discord.com/invite/CtuYV47nuJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1117993124669702164?logo=discord&amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/LinkwardenHQ&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/linkwarden&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=36942308&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Hacker%20News-280-%23FF6600&quot;&gt;&lt;/img&gt;&lt;/a&gt;

&lt;a href=&quot;https://github.com/linkwarden/linkwarden/releases&quot;&gt;&lt;img alt=&quot;GitHub release&quot; src=&quot;https://img.shields.io/github/v/release/linkwarden/linkwarden&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://crowdin.com/project/linkwarden&quot;&gt;
&lt;img src=&quot;https://badges.crowdin.net/linkwarden/localized.svg&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://opencollective.com/linkwarden&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/all/linkwarden&quot; alt=&quot;Open Collective&quot;&gt;&lt;/a&gt;

&lt;/div&gt;

&lt;div align=&#039;center&#039;&gt;

[¬´ LAUNCH DEMO ¬ª](https://demo.linkwarden.app)

[Cloud](https://cloud.linkwarden.app) ¬∑ [Website](https://linkwarden.app) ¬∑ [Features](https://github.com/linkwarden/linkwarden#features) ¬∑ [Docs](https://docs.linkwarden.app)

&lt;img src=&quot;./assets/home.png&quot; /&gt;

&lt;/div&gt;

## Intro &amp; motivation

**Linkwarden is a self-hosted, open-source collaborative bookmark manager to collect, read, annotate, and fully preserve what matters, all in one place.**

The objective is to organize useful webpages and articles you find across the web in one place, and since useful webpages can go away (see the inevitability of [Link Rot](https://en.wikipedia.org/wiki/Link_rot)), Linkwarden also saves a copy of each webpage as a Screenshot and PDF, ensuring accessibility even if the original content is no longer available.

In addition to preservation, Linkwarden provides a user-friendly reading and annotation experience that blends the simplicity of a ‚Äúread-it-later‚Äù tool with the reliability of a web archive. Whether you‚Äôre highlighting key ideas, jotting down thoughts, or revisiting content long after it‚Äôs disappeared from the web, Linkwarden keeps your knowledge accessible and organized.

Linkwarden is also designed with collaboration in mind, enabling you to share links with the public and/or collaborate seamlessly with multiple users.

&gt; [!TIP]  
&gt; Our official [Cloud](https://linkwarden.app/#pricing) offering provides the simplest way to begin using Linkwarden and it&#039;s the preferred choice for many due to its time-saving benefits. &lt;br&gt; Your subscription supports our hosting infrastructure and ongoing development. &lt;br&gt; Alternatively, if you prefer self-hosting Linkwarden, you can do so by following our [Installation documentation](https://docs.linkwarden.app/self-hosting/installation).

## Features

- üì∏ Auto capture a screenshot, PDF, and single html file of each webpage.
- üìñ Reader view of the webpage, with the ability to highlight and annotate text.
- üèõÔ∏è Send your webpage to Wayback Machine ([archive.org](https://archive.org)) for a snapshot. (Optional)
- ‚ú® Local AI Tagging to automatically tag your links based on their content (Optional).
- üìÇ Organize links by collection, sub-collection, name, description and multiple tags.
- üë• Collaborate on gathering links in a collection.
- üéõÔ∏è Customize the permissions of each member.
- üåê Share your collected links and preserved formats with the world.
- üìå Pin your favorite links to dashboard.
- üîç Full text search, filter and sort for easy retrieval.
- üì± Responsive design and supports most modern browsers.
- üåì Dark/Light mode support.
- üß© Browser extension. [Star it here!](https://github.com/linkwarden/browser-extension)
- üîÑ Browser Synchronization (using [Floccus](https://floccus.org)!)
- ‚¨áÔ∏è Import and export your bookmarks.
- üîê SSO integration. (Enterprise and Self-hosted users only)
- üì¶ Installable Progressive Web App (PWA).
- üçé iOS Shortcut to save Links to Linkwarden.
- üîë API keys.
- ‚úÖ Bulk actions.
- üë• User administration.
- üåê Support for Other Languages (i18n).
- üìÅ Image and PDF Uploads.
- üé® Custom Icons for Links and Collections.
- üîî RSS Feed Subscription.
- ‚ú® And many more features. (Literally!)

## Like what we&#039;re doing? Give us a Star ‚≠ê

![Star Us](https://raw.githubusercontent.com/linkwarden/linkwarden/main/assets/star_repo.gif)

## We&#039;re building our Community üåê

Join and follow us in the following platforms to stay up to date about the most recent features and for support:

&lt;a href=&quot;https://discord.com/invite/CtuYV47nuJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1117993124669702164?logo=discord&amp;style=flat&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;https://twitter.com/LinkwardenHQ&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/linkwarden&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;https://fosstodon.org/@linkwarden&quot;&gt;&lt;img src=&quot;https://img.shields.io/mastodon/follow/110748840237143200?domain=https%3A%2F%2Ffosstodon.org&quot; alt=&quot;Mastodon&quot;&gt;&lt;/a&gt;

## Suggestions

We _usually_ go after the [popular suggestions](https://github.com/linkwarden/linkwarden/issues?q=is%3Aissue%20is%3Aopen%20sort%3Areactions-%2B1-desc). Feel free to open a [new issue](https://github.com/linkwarden/linkwarden/issues/new?assignees=&amp;labels=enhancement&amp;projects=&amp;template=feature_request.md&amp;title=) to suggest one - others might be interested too! :)

## Roadmap

Make sure to check out our [public roadmap](https://github.com/orgs/linkwarden/projects/1).

## Community Projects

Here are some community-maintained projects that are built around Linkwarden:

- [My Links](https://apps.apple.com/ca/app/my-links-for-linkwarden/id6504573402) - iOS and MacOS Apps, maintained by [JGeek00](https://github.com/JGeek00).
- [LinkDroid](https://fossdroid.com/a/linkdroid-for-linkwarden.html) - Android App with share sheet integration, [source code](https://github.com/Dacid99/LinkDroid-for-Linkwarden).
- [LinkGuardian](https://github.com/Elbullazul/LinkGuardian) - An Android client for Linkwarden. Built with Kotlin and Jetpack compose.
- [StarWarden](https://github.com/rtuszik/starwarden) - A browser extension to save your starred GitHub repositories to Linkwarden.

## Development

If you want to contribute, Thanks! Start by choosing one of our [popular suggestions](https://github.com/linkwarden/linkwarden/issues?q=is%3Aissue%20is%3Aopen%20sort%3Areactions-%2B1-desc), just please stay in touch with [@daniel31x13](https://github.com/daniel31x13) before starting.

# Translations

If you want to help us translate Linkwarden to your language, please check out our [Crowdin page](https://crowdin.com/project/linkwarden) and start translating. We would love to have your help!

To start translating a new language, please create an issue so we can set it up for you. New languages will be added once they reach at least 50% translation completion.

&lt;a href=&quot;https://crowdin.com/project/linkwarden&quot;&gt;
&lt;img src=&quot;https://badges.crowdin.net/linkwarden/localized.svg&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt;

## Security

If you found a security vulnerability, please do **not** create a public issue, instead send an email to [security@linkwarden.app](mailto:security@linkwarden.app) stating the vulnerability. Thanks!

## Support &lt;3

Other than using our official [Cloud](https://linkwarden.app/#pricing) offering, any [donations](https://opencollective.com/linkwarden) are highly appreciated as well!

Here are the other ways to support/cheer this project:

- Starring this repository.
- Joining us on [Discord](https://discord.com/invite/CtuYV47nuJ).
- Referring Linkwarden to a friend.

If you did any of the above, Thanksss! Otherwise thanks.

## Thanks to All the Contributors üí™

Huge thanks to these guys for spending their time helping Linkwarden grow. They rock! ‚ö°Ô∏è

&lt;img src=&quot;https://contributors-img.web.app/image?repo=linkwarden/linkwarden&quot; alt=&quot;Contributors&quot;/&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[puckeditor/puck]]></title>
            <link>https://github.com/puckeditor/puck</link>
            <guid>https://github.com/puckeditor/puck</guid>
            <pubDate>Fri, 01 Aug 2025 00:06:00 GMT</pubDate>
            <description><![CDATA[The visual editor for React]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/puckeditor/puck">puckeditor/puck</a></h1>
            <p>The visual editor for React</p>
            <p>Language: TypeScript</p>
            <p>Stars: 7,198</p>
            <p>Forks: 504</p>
            <p>Stars today: 27 stars today</p>
            <h2>README</h2><pre>&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;

&lt;div align=&quot;center&quot;&gt;

&lt;a href=&quot;https://puckeditor.com&quot;&gt;
  &lt;picture&gt;
    &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://res.cloudinary.com/die3nptcg/image/upload/Puck_Logo_White_RGB_j2rwgg.svg&quot; height=&quot;100px&quot; aria-label=&quot;Puck logo&quot;&gt;
    &lt;img src=&quot;https://res.cloudinary.com/die3nptcg/image/upload/Puck_Logo_Black_RGB_dqsjag.svg&quot; height=&quot;100px&quot; aria-label=&quot;Puck logo&quot;&gt;
  &lt;/picture&gt;
&lt;/a&gt;

_The visual editor for React_

[Documentation](https://puckeditor.com/docs) ‚Ä¢ [Demo](https://demo.puckeditor.com/edit) ‚Ä¢ [Discord](https://discord.gg/V9mDAhuxyZ) ‚Ä¢ [Contributing](https://github.com/puckeditor/puck/blob/main/CONTRIBUTING.md)

‚≠êÔ∏è Enjoying Puck? Please [leave a star](https://github.com/puckeditor/puck)!

&lt;br /&gt;

[![GIF showing a page being created in the Puck Editor, with components being added, arranged, and customized in real time](https://github.com/user-attachments/assets/25e1ae25-ca5e-450f-afa0-01816830b731)](https://demo.puckeditor.com/edit)

&lt;/div&gt;

## What is Puck?

Puck is a modular, open-source visual editor for React.js. You can use Puck to build custom drag-and-drop experiences with your own application and React components.

Because Puck is just a React component, it plays well with all React.js environments, including Next.js. You own your data and there‚Äôs no vendor lock-in.

Puck is also [licensed under MIT](https://github.com/puckeditor/puck?tab=MIT-1-ov-file#readme), making it suitable for both internal systems and commercial applications.

## Quick start

Install the package:

```sh
npm i @measured/puck --save # or npx create-puck-app my-app
```

Render the editor:

```jsx
// Editor.jsx
import { Puck } from &quot;@measured/puck&quot;;
import &quot;@measured/puck/puck.css&quot;;

// Create Puck component config
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: &quot;text&quot;,
        },
      },
      render: ({ children }) =&gt; {
        return &lt;h1&gt;{children}&lt;/h1&gt;;
      },
    },
  },
};

// Describe the initial data
const initialData = {};

// Save the data to your database
const save = (data) =&gt; {};

// Render Puck editor
export function Editor() {
  return &lt;Puck config={config} data={initialData} onPublish={save} /&gt;;
}
```

Render the page:

```jsx
// Page.jsx
import { Render } from &quot;@measured/puck&quot;;
import &quot;@measured/puck/puck.css&quot;;

export function Page() {
  return &lt;Render config={config} data={data} /&gt;;
}
```

## Recipes

Use `create-puck-app` to quickly spin up a a pre-configured app based on our provided [recipes](https://github.com/measuredco/puck/tree/main/recipes):

```sh
npx create-puck-app my-app
```

Available recipes include:

- [**next**](https://github.com/measuredco/puck/tree/main/recipes/next): Next.js example, using App Router and static page generation
- [**remix**](https://github.com/measuredco/puck/tree/main/recipes/remix): Remix Run v2 example, using dynamic routes at root-level
- [**react-router**](https://github.com/measuredco/puck/tree/main/recipes/react-router): React Router v7 app example, using dynamic routes to create pages at any level

## Community

- [Discord server](https://discord.gg/D9e4E3MQVZ) for discussions
- [awesome-puck](https://github.com/measuredco/awesome-puck) community repo for plugins, custom fields &amp; more

## Get support

If you have any questions about Puck, please open a [GitHub issue](https://github.com/measuredco/puck/issues) or join us on [Discord](https://discord.gg/D9e4E3MQVZ).

Or [book a discovery call](https://app.cal.com/chrisvxd/puck-enquiry/) for hands-on support and consultancy.

## License

MIT ¬© [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[wasp-lang/open-saas]]></title>
            <link>https://github.com/wasp-lang/open-saas</link>
            <guid>https://github.com/wasp-lang/open-saas</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:59 GMT</pubDate>
            <description><![CDATA[A free, open-source SaaS app starter for React & Node.js with superpowers. Full-featured. Community-driven.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/wasp-lang/open-saas">wasp-lang/open-saas</a></h1>
            <p>A free, open-source SaaS app starter for React & Node.js with superpowers. Full-featured. Community-driven.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 11,973</p>
            <p>Forks: 1,277</p>
            <p>Stars today: 104 stars today</p>
            <h2>README</h2><pre>## Welcome to your new SaaS App! üéâ
&lt;a href=&quot;https://www.producthunt.com/products/open-saas?embed=true&amp;utm_source=badge-featured&amp;utm_medium=badge&amp;utm_source=badge-open&amp;#0045;saas&amp;#0045;2&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=991058&amp;theme=neutral&amp;t=1753776395137&quot; alt=&quot;Open&amp;#0032;SaaS - The&amp;#0032;open&amp;#0045;source&amp;#0032;SaaS&amp;#0032;boilerplate&amp;#0032;with&amp;#0032;superpowers&amp;#0033; | Product Hunt&quot; style=&quot;width: 250px; height: 54px;&quot; width=&quot;250&quot; height=&quot;54&quot; /&gt;&lt;/a&gt;

https://github.com/user-attachments/assets/3856276b-23e9-455e-a564-b5f26f4f0e98

You&#039;ve decided to build a SaaS app with the Open SaaS template. Great choice! 

This template is:

1. fully open-source
2. completely free to use and distribute
3. comes with a ton of features out of the box!
4. focused on free, open-source services, where possible

üßë‚Äçüíª Check it out in action here: [OpenSaaS.sh](https://opensaas.sh)  
üìö Check out the Docs here: [Open SaaS Docs](https://docs.opensaas.sh)

## What&#039;s inside?

The template itself is built on top of some very powerful tools and frameworks, including:

- üêù [Wasp](https://wasp.sh) - a full-stack React, NodeJS, Prisma framework with superpowers
- üöÄ [Astro](https://starlight.astro.build/) - Astro&#039;s lightweight &quot;Starlight&quot; template for documentation and blog
- üí∏ [Stripe](https://stripe.com) or [Lemon Squeezy](https://lemonsqueezy.com/) (with Polar.sh and Paddle coming soon!) - for products and payments
- üíÖ [ShadCN UI](https://tailwindcss.com) - for components &amp; styling (plus admin dashboard!)
- üìà [Plausible](https://plausible.io) or [Google](https://analytics.google.com/) Analytics
- ü§ñ [OpenAI](https://openai.com) - OpenAI API w/ function calling example
- üì¶ [AWS S3](https://aws.amazon.com/s3/) - for file uploads
- üìß [SendGrid](https://sendgrid.com), [MailGun](https://mailgun.com), or SMTP - for email sending
- üß™ [Playwright](https://playwright.dev) - end-to-end tests with Playwright

Because we&#039;re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

- üîê [Full-stack Authentication](https://wasp.sh/docs/auth/overview) - Email verified + social Auth in a few lines of code.
- ‚õë [End-to-end Type Safety](https://wasp.sh/docs/data-model/operations/overview) - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
- ü§ñ [Jobs](https://wasp.sh/docs/advanced/jobs) - Run cron jobs in the background or set up queues simply by defining a function in the config file.
- üöÄ [One-command Deploy](https://wasp.sh/docs/advanced/deployment/overview) - Easily deploy your DB, Server, &amp; Client with one commaned to [Railway](https://railway.app) or [Fly.io](https://fly.io) via the CLI. Or deploy manually to any other hosting serivce of your choice.

You also get access to Wasp&#039;s diverse, helpful community if you get stuck or need help.
- ü§ù [Wasp Discord](https://discord.gg/aCamt5wCpS)

## Getting Started

### Simple Instructions

First, to install the latest version of [Wasp](https://wasp.sh/) on macOS, Linux, or Windows with WSL, run the following command:
```bash
curl -sSL https://get.wasp.sh/installer.sh | sh
```

Then, create a new SaaS app with the following command:

```bash
wasp new -t saas
```

This will create a **clean copy of the Open SaaS template** into a new directory, and you can start building your SaaS app right away!

### Detailed Instructions

For everything you need to know about getting started and using this template, check out the [Open SaaS Docs](https://docs.opensaas.sh).

We&#039;ve documented everything in great detail, including installation instructions, pulling updates to the template, guides for integrating services, SEO, deployment, and more. üöÄ

## Getting Help &amp; Providing Feedback

There are two ways to get help or provide feedback (and we try to always respond quickly!):
1. [Open an issue](https://github.com/wasp-lang/open-saas/issues)
2. [Wasp Discord](https://discord.gg/aCamt5wCpS) -- please direct questions to the #üôãquestions forum channel

## Contributing

Note that we&#039;ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.

We could always use some help tying up loose ends: contributions are welcome! Check out [CONTRIBUTING.md](/CONTRIBUTING.md) for more details.

</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[linshenkx/prompt-optimizer]]></title>
            <link>https://github.com/linshenkx/prompt-optimizer</link>
            <guid>https://github.com/linshenkx/prompt-optimizer</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:58 GMT</pubDate>
            <description><![CDATA[‰∏ÄÊ¨æÊèêÁ§∫ËØç‰ºòÂåñÂô®ÔºåÂä©Âäõ‰∫éÁºñÂÜôÈ´òË¥®ÈáèÁöÑÊèêÁ§∫ËØç]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/linshenkx/prompt-optimizer">linshenkx/prompt-optimizer</a></h1>
            <p>‰∏ÄÊ¨æÊèêÁ§∫ËØç‰ºòÂåñÂô®ÔºåÂä©Âäõ‰∫éÁºñÂÜôÈ´òË¥®ÈáèÁöÑÊèêÁ§∫ËØç</p>
            <p>Language: TypeScript</p>
            <p>Stars: 11,720</p>
            <p>Forks: 1,421</p>
            <p>Stars today: 375 stars today</p>
            <h2>README</h2><pre># Prompt Optimizer (ÊèêÁ§∫ËØç‰ºòÂåñÂô®) üöÄ

&lt;div align=&quot;center&quot;&gt;

[English](README_EN.md) | [‰∏≠Êñá](README.md)

[![GitHub stars](https://img.shields.io/github/stars/linshenkx/prompt-optimizer)](https://github.com/linshenkx/prompt-optimizer/stargazers)
![Chrome Web Store Users](https://img.shields.io/chrome-web-store/users/cakkkhboolfnadechdlgdcnjammejlna?style=flat&amp;label=Chrome%20Users&amp;link=https%3A%2F%2Fchromewebstore.google.com%2Fdetail%2F%25E6%258F%2590%25E7%25A4%25BA%25E8%25AF%258D%25E4%25BC%2598%25E5%258C%2596%25E5%2599%25A8%2Fcakkkhboolfnadechdlgdcnjammejlna)

[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
[![Docker Pulls](https://img.shields.io/docker/pulls/linshen/prompt-optimizer)](https://hub.docker.com/r/linshen/prompt-optimizer)
![GitHub forks](https://img.shields.io/github/forks/linshenkx/prompt-optimizer?style=flat)
[![Deploy with Vercel](https://img.shields.io/badge/Vercel-indigo?style=flat&amp;logo=vercel)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Flinshenkx%2Fprompt-optimizer)

[Âú®Á∫ø‰ΩìÈ™å](https://prompt.always200.com) | [Âø´ÈÄüÂºÄÂßã](#Âø´ÈÄüÂºÄÂßã) | [Â∏∏ËßÅÈóÆÈ¢ò](#Â∏∏ËßÅÈóÆÈ¢ò) | [ChromeÊèí‰ª∂](https://chromewebstore.google.com/detail/prompt-optimizer/cakkkhboolfnadechdlgdcnjammejlna)

[ÂºÄÂèëÊñáÊ°£](dev.md) | [VercelÈÉ®ÁΩ≤ÊåáÂçó](docs/user/deployment/vercel.md) | [MCPÈÉ®ÁΩ≤‰ΩøÁî®ËØ¥Êòé](docs/user/mcp-server.md) | [DeepWikiÊñáÊ°£](https://deepwiki.com/linshenkx/prompt-optimizer) | [ZReadÊñáÊ°£](https://zread.ai/linshenkx/prompt-optimizer)

&lt;/div&gt;

## üìñ È°πÁõÆÁÆÄ‰ªã

Prompt OptimizerÊòØ‰∏Ä‰∏™Âº∫Â§ßÁöÑAIÊèêÁ§∫ËØç‰ºòÂåñÂ∑•ÂÖ∑ÔºåÂ∏ÆÂä©‰Ω†ÁºñÂÜôÊõ¥Â•ΩÁöÑAIÊèêÁ§∫ËØçÔºåÊèêÂçáAIËæìÂá∫Ë¥®Èáè„ÄÇÊîØÊåÅWebÂ∫îÁî®„ÄÅÊ°åÈù¢Â∫îÁî®„ÄÅChromeÊèí‰ª∂ÂíåDockerÈÉ®ÁΩ≤ÂõõÁßç‰ΩøÁî®ÊñπÂºè„ÄÇ

### üé• ÂäüËÉΩÊºîÁ§∫

&lt;div align=&quot;center&quot;&gt;
  &lt;p&gt;&lt;b&gt;1. ËßíËâ≤ÊâÆÊºîÂØπËØùÔºöÊøÄÂèëÂ∞èÊ®°ÂûãÊΩúÂäõ&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;Âú®ËøΩÊ±ÇÊàêÊú¨ÊïàÁõäÁöÑÁîü‰∫ßÊàñÊ≥®ÈáçÈöêÁßÅÁöÑÊú¨Âú∞ÂåñÂú∫ÊôØ‰∏≠ÔºåÁªìÊûÑÂåñÁöÑÊèêÁ§∫ËØçËÉΩËÆ©Â∞èÊ®°ÂûãÁ®≥ÂÆöÂú∞ËøõÂÖ•ËßíËâ≤ÔºåÊèê‰æõÊ≤âÊµ∏Âºè„ÄÅÈ´ò‰∏ÄËá¥ÊÄßÁöÑËßíËâ≤ÊâÆÊºî‰ΩìÈ™åÔºåÊúâÊïàÊøÄÂèëÂÖ∂ÊΩúÂäõ„ÄÇ&lt;/p&gt;
  &lt;img src=&quot;images/demo/cat-maid-roleplay.png&quot; alt=&quot;Áå´Â•≥‰ªÜËßíËâ≤ÊâÆÊºîÊºîÁ§∫&quot; width=&quot;85%&quot;&gt;
  &lt;br&gt;
  &lt;p&gt;&lt;b&gt;2. Áü•ËØÜÂõæË∞±ÊèêÂèñÔºö‰øùÈöúÁîü‰∫ßÁéØÂ¢ÉÁöÑÁ®≥ÂÆöÊÄß&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;Âú®ÈúÄË¶ÅÁ®ãÂ∫èÂåñÂ§ÑÁêÜÁöÑÁîü‰∫ßÁéØÂ¢É‰∏≠ÔºåÈ´òË¥®ÈáèÁöÑÊèêÁ§∫ËØçËÉΩÊòæËëóÈôç‰ΩéÂØπÊ®°ÂûãÊô∫ËÉΩÁ®ãÂ∫¶ÁöÑË¶ÅÊ±ÇÔºå‰ΩøÂæóÊõ¥ÁªèÊµéÁöÑÂ∞èÊ®°Âûã‰πüËÉΩÁ®≥ÂÆöËæìÂá∫ÂèØÈù†ÁöÑÊåáÂÆöÊ†ºÂºè„ÄÇÊú¨Â∑•ÂÖ∑Êó®Âú®ËæÖÂä©ÂºÄÂèëËÄÖÂø´ÈÄüËææÂà∞Ê≠§ÁõÆÁöÑÔºå‰ªéËÄåÂä†ÈÄüÂºÄÂèë„ÄÅ‰øùÈöúÁ®≥ÂÆöÔºåÂÆûÁé∞ÈôçÊú¨Â¢ûÊïà„ÄÇ&lt;/p&gt;
  &lt;img src=&quot;images/demo/knowledge-graph-extractor.png&quot; alt=&quot;Áü•ËØÜÂõæË∞±ÊèêÂèñÊºîÁ§∫&quot; width=&quot;85%&quot;&gt;
  &lt;br&gt;
  &lt;p&gt;&lt;b&gt;3. ËØóÊ≠åÂÜô‰ΩúÔºöËæÖÂä©ÂàõÊÑèÊé¢Á¥¢‰∏éÈúÄÊ±ÇÂÆöÂà∂&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;ÂΩìÈù¢ÂØπ‰∏Ä‰∏™Âº∫Â§ßÁöÑAIÔºåÊàë‰ª¨ÁöÑÁõÆÊ†á‰∏çÂè™ÊòØÂæóÂà∞‰∏Ä‰∏™‚ÄúÂ•Ω‚ÄùÁ≠îÊ°àÔºåËÄåÊòØÂæóÂà∞‰∏Ä‰∏™‚ÄúÊàë‰ª¨ÊÉ≥Ë¶ÅÁöÑ‚ÄùÁã¨ÁâπÁ≠îÊ°à„ÄÇÊú¨Â∑•ÂÖ∑ËÉΩÂ∏ÆÂä©Áî®Êà∑Â∞Ü‰∏Ä‰∏™Ê®°Á≥äÁöÑÁÅµÊÑüÔºàÂ¶Ç‚ÄúÂÜôÈ¶ñËØó‚ÄùÔºâÁªÜÂåñ‰∏∫ÂÖ∑‰ΩìÁöÑÈúÄÊ±ÇÔºàÂÖ≥‰∫é‰ªÄ‰πà‰∏ªÈ¢ò„ÄÅ‰ΩïÁßçÊÑèË±°„ÄÅ‰ΩïÁßçÊÉÖÊÑüÔºâÔºåËæÖÂä©ÊÇ®Êé¢Á¥¢„ÄÅÂèëÊéòÂπ∂Á≤æÁ°ÆË°®ËææËá™Â∑±ÁöÑÂàõÊÑèÔºå‰∏éAIÂÖ±ÂàõÁã¨‰∏ÄÊó†‰∫åÁöÑ‰ΩúÂìÅ„ÄÇ&lt;/p&gt;
  &lt;img src=&quot;images/demo/poetry-writing.png&quot; alt=&quot;ËØóÊ≠åÂàõ‰ΩúÊºîÁ§∫&quot; width=&quot;85%&quot;&gt;
&lt;/div&gt;

## ‚ú® Ê†∏ÂøÉÁâπÊÄß

- üéØ **Êô∫ËÉΩ‰ºòÂåñ**Ôºö‰∏ÄÈîÆ‰ºòÂåñÊèêÁ§∫ËØçÔºåÊîØÊåÅÂ§öËΩÆËø≠‰ª£ÊîπËøõÔºåÊèêÂçáAIÂõûÂ§çÂáÜÁ°ÆÂ∫¶
- üìù **ÂèåÊ®°Âºè‰ºòÂåñ**ÔºöÊîØÊåÅÁ≥ªÁªüÊèêÁ§∫ËØç‰ºòÂåñÂíåÁî®Êà∑ÊèêÁ§∫ËØç‰ºòÂåñÔºåÊª°Ë∂≥‰∏çÂêå‰ΩøÁî®Âú∫ÊôØ
- üîÑ **ÂØπÊØîÊµãËØï**ÔºöÊîØÊåÅÂéüÂßãÊèêÁ§∫ËØçÂíå‰ºòÂåñÂêéÊèêÁ§∫ËØçÁöÑÂÆûÊó∂ÂØπÊØîÔºåÁõ¥ËßÇÂ±ïÁ§∫‰ºòÂåñÊïàÊûú
- ü§ñ **Â§öÊ®°ÂûãÈõÜÊàê**ÔºöÊîØÊåÅOpenAI„ÄÅGemini„ÄÅDeepSeek„ÄÅÊô∫Ë∞±AI„ÄÅSiliconFlowÁ≠â‰∏ªÊµÅAIÊ®°Âûã
- üîí **ÂÆâÂÖ®Êû∂ÊûÑ**ÔºöÁ∫ØÂÆ¢Êà∑Á´ØÂ§ÑÁêÜÔºåÊï∞ÊçÆÁõ¥Êé•‰∏éAIÊúçÂä°ÂïÜ‰∫§‰∫íÔºå‰∏çÁªèËøá‰∏≠Èó¥ÊúçÂä°Âô®
- üì± **Â§öÁ´ØÊîØÊåÅ**ÔºöÂêåÊó∂Êèê‰æõWebÂ∫îÁî®„ÄÅÊ°åÈù¢Â∫îÁî®„ÄÅChromeÊèí‰ª∂ÂíåDockerÈÉ®ÁΩ≤ÂõõÁßç‰ΩøÁî®ÊñπÂºè
- üîê **ËÆøÈóÆÊéßÂà∂**ÔºöÊîØÊåÅÂØÜÁ†Å‰øùÊä§ÂäüËÉΩÔºå‰øùÈöúÈÉ®ÁΩ≤ÂÆâÂÖ®
- üß© **MCPÂçèËÆÆÊîØÊåÅ**ÔºöÊîØÊåÅModel Context Protocol (MCP) ÂçèËÆÆÔºåÂèØ‰∏éClaude DesktopÁ≠âMCPÂÖºÂÆπÂ∫îÁî®ÈõÜÊàê

## Âø´ÈÄüÂºÄÂßã

### 1. ‰ΩøÁî®Âú®Á∫øÁâàÊú¨ÔºàÊé®ËçêÔºâ

Áõ¥Êé•ËÆøÈóÆÔºö[https://prompt.always200.com](https://prompt.always200.com)

È°πÁõÆÊòØÁ∫ØÂâçÁ´ØÈ°πÁõÆÔºåÊâÄÊúâÊï∞ÊçÆÂè™Â≠òÂÇ®Âú®ÊµèËßàÂô®Êú¨Âú∞Ôºå‰∏ç‰ºö‰∏ä‰º†Ëá≥‰ªª‰ΩïÊúçÂä°Âô®ÔºåÂõ†Ê≠§Áõ¥Êé•‰ΩøÁî®Âú®Á∫øÁâàÊú¨‰πüÊòØÂÆâÂÖ®ÂèØÈù†ÁöÑ

### 2. VercelÈÉ®ÁΩ≤
ÊñπÂºè1Ôºö‰∏ÄÈîÆÈÉ®ÁΩ≤Âà∞Ëá™Â∑±ÁöÑVercel(Êñπ‰æøÔºå‰ΩÜÂêéÁª≠Êó†Ê≥ïËá™Âä®Êõ¥Êñ∞)Ôºö
   [![ÈÉ®ÁΩ≤Âà∞ Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Flinshenkx%2Fprompt-optimizer)

ÊñπÂºè2: ForkÈ°πÁõÆÂêéÂú®Vercel‰∏≠ÂØºÂÖ•ÔºàÊé®ËçêÔºå‰ΩÜÈúÄÂèÇËÄÉÈÉ®ÁΩ≤ÊñáÊ°£ËøõË°åÊâãÂä®ËÆæÁΩÆÔºâÔºö
   - ÂÖàForkÈ°πÁõÆÂà∞Ëá™Â∑±ÁöÑGitHub
   - ÁÑ∂ÂêéÂú®Vercel‰∏≠ÂØºÂÖ•ËØ•È°πÁõÆ
   - ÂèØË∑üË∏™Ê∫êÈ°πÁõÆÊõ¥Êñ∞Ôºå‰æø‰∫éÂêåÊ≠•ÊúÄÊñ∞ÂäüËÉΩÂíå‰øÆÂ§ç
- ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáèÔºö
  - `ACCESS_PASSWORD`ÔºöËÆæÁΩÆËÆøÈóÆÂØÜÁ†ÅÔºåÂêØÁî®ËÆøÈóÆÈôêÂà∂
  - `VITE_OPENAI_API_KEY`Á≠âÔºöÈÖçÁΩÆÂêÑAIÊúçÂä°ÂïÜÁöÑAPIÂØÜÈí•

Êõ¥Â§öËØ¶ÁªÜÁöÑÈÉ®ÁΩ≤Ê≠•È™§ÂíåÊ≥®ÊÑè‰∫ãÈ°πÔºåËØ∑Êü•ÁúãÔºö
- [VercelÈÉ®ÁΩ≤ÊåáÂçó](docs/user/deployment/vercel.md)

### 3. ‰∏ãËΩΩÊ°åÈù¢Â∫îÁî®
‰ªé [GitHub Releases](https://github.com/linshenkx/prompt-optimizer/releases) ‰∏ãËΩΩÊúÄÊñ∞ÁâàÊú¨„ÄÇÊàë‰ª¨‰∏∫ÂêÑÂπ≥Âè∞Êèê‰æõ**ÂÆâË£ÖÁ®ãÂ∫è**Âíå**ÂéãÁº©ÂåÖ**‰∏§ÁßçÊ†ºÂºè„ÄÇ

- **ÂÆâË£ÖÁ®ãÂ∫è (Êé®Ëçê)**: Â¶Ç `*.exe`, `*.dmg`, `*.AppImage` Á≠â„ÄÇ**Âº∫ÁÉàÊé®Ëçê‰ΩøÁî®Ê≠§ÊñπÂºèÔºåÂõ†‰∏∫ÂÆÉÊîØÊåÅËá™Âä®Êõ¥Êñ∞**„ÄÇ
- **ÂéãÁº©ÂåÖ**: Â¶Ç `*.zip`„ÄÇËß£ÂéãÂç≥Áî®Ôºå‰ΩÜÊó†Ê≥ïËá™Âä®Êõ¥Êñ∞„ÄÇ

**Ê°åÈù¢Â∫îÁî®Ê†∏ÂøÉ‰ºòÂäø**:
- ‚úÖ **Êó†Ë∑®ÂüüÈôêÂà∂**Ôºö‰Ωú‰∏∫ÂéüÁîüÊ°åÈù¢Â∫îÁî®ÔºåÂÆÉËÉΩÂΩªÂ∫ïÊëÜËÑ±ÊµèËßàÂô®Ë∑®ÂüüÔºàCORSÔºâÈóÆÈ¢òÁöÑÂõ∞Êâ∞„ÄÇËøôÊÑèÂë≥ÁùÄÊÇ®ÂèØ‰ª•Áõ¥Êé•ËøûÊé•‰ªª‰ΩïAIÊúçÂä°Êèê‰æõÂïÜÁöÑAPIÔºåÂåÖÊã¨Êú¨Âú∞ÈÉ®ÁΩ≤ÁöÑOllamaÊàñÊúâ‰∏•Ê†ºÂÆâÂÖ®Á≠ñÁï•ÁöÑÂïÜ‰∏öAPIÔºåËé∑ÂæóÊúÄÂÆåÊï¥„ÄÅÊúÄÁ®≥ÂÆöÁöÑÂäüËÉΩ‰ΩìÈ™å„ÄÇ
- ‚úÖ **Ëá™Âä®Êõ¥Êñ∞**ÔºöÈÄöËøáÂÆâË£ÖÁ®ãÂ∫èÔºàÂ¶Ç `.exe`, `.dmg`ÔºâÂÆâË£ÖÁöÑÁâàÊú¨ÔºåËÉΩÂ§üËá™Âä®Ê£ÄÊü•Âπ∂Êõ¥Êñ∞Âà∞ÊúÄÊñ∞Áâà„ÄÇ
- ‚úÖ **Áã¨Á´ãËøêË°å**ÔºöÊó†ÈúÄ‰æùËµñÊµèËßàÂô®ÔºåÊèê‰æõÊõ¥Âø´ÁöÑÂìçÂ∫îÂíåÊõ¥‰Ω≥ÁöÑÊÄßËÉΩ„ÄÇ

### 4. ÂÆâË£ÖChromeÊèí‰ª∂
1. ‰ªéChromeÂïÜÂ∫óÂÆâË£ÖÔºàÁî±‰∫éÂÆ°ÊâπËæÉÊÖ¢ÔºåÂèØËÉΩ‰∏çÊòØÊúÄÊñ∞ÁöÑÔºâÔºö[ChromeÂïÜÂ∫óÂú∞ÂùÄ](https://chromewebstore.google.com/detail/prompt-optimizer/cakkkhboolfnadechdlgdcnjammejlna)
2. ÁÇπÂáªÂõæÊ†áÂç≥ÂèØÊâìÂºÄÊèêÁ§∫ËØç‰ºòÂåñÂô®

### 5. DockerÈÉ®ÁΩ≤
&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•Áúã Docker ÈÉ®ÁΩ≤ÂëΩ‰ª§&lt;/summary&gt;

```bash
# ËøêË°åÂÆπÂô®ÔºàÈªòËÆ§ÈÖçÁΩÆÔºâ
docker run -d -p 8081:80 --restart unless-stopped --name prompt-optimizer linshen/prompt-optimizer

# ËøêË°åÂÆπÂô®ÔºàÈÖçÁΩÆAPIÂØÜÈí•ÂíåËÆøÈóÆÂØÜÁ†ÅÔºâ
docker run -d -p 8081:80 \
  -e VITE_OPENAI_API_KEY=your_key \
  -e ACCESS_USERNAME=your_username \  # ÂèØÈÄâÔºåÈªòËÆ§‰∏∫&quot;admin&quot;
  -e ACCESS_PASSWORD=your_password \  # ËÆæÁΩÆËÆøÈóÆÂØÜÁ†Å
  --restart unless-stopped \
  --name prompt-optimizer \
  linshen/prompt-optimizer
```
&lt;/details&gt;

&gt; **ÂõΩÂÜÖÈïúÂÉè**: Â¶ÇÊûúDocker HubËÆøÈóÆËæÉÊÖ¢ÔºåÂèØ‰ª•Â∞Ü‰∏äËø∞ÂëΩ‰ª§‰∏≠ÁöÑ `linshen/prompt-optimizer` ÊõøÊç¢‰∏∫ `registry.cn-guangzhou.aliyuncs.com/prompt-optimizer/prompt-optimizer`

### 6. Docker ComposeÈÉ®ÁΩ≤
&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•Áúã Docker Compose ÈÉ®ÁΩ≤Ê≠•È™§&lt;/summary&gt;

```bash
# 1. ÂÖãÈöÜ‰ªìÂ∫ì
git clone https://github.com/linshenkx/prompt-optimizer.git
cd prompt-optimizer

# 2. ÂèØÈÄâÔºöÂàõÂª∫.envÊñá‰ª∂ÈÖçÁΩÆAPIÂØÜÈí•ÂíåËÆøÈóÆËÆ§ËØÅ
cp env.local.example .env
# ÁºñËæë .env Êñá‰ª∂ÔºåÂ°´ÂÖ•ÂÆûÈôÖÁöÑ API ÂØÜÈí•ÂíåÈÖçÁΩÆ

# 3. ÂêØÂä®ÊúçÂä°
docker compose up -d

# 4. Êü•ÁúãÊó•Âøó
docker compose logs -f

# 5. ËÆøÈóÆÊúçÂä°
Web ÁïåÈù¢Ôºöhttp://localhost:8081
MCP ÊúçÂä°Âô®Ôºöhttp://localhost:8081/mcp
```
&lt;/details&gt;

‰Ω†ËøòÂèØ‰ª•Áõ¥Êé•ÁºñËæëdocker-compose.ymlÊñá‰ª∂ÔºåËá™ÂÆö‰πâÈÖçÁΩÆÔºö
&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•Áúã docker-compose.yml Á§∫‰æã&lt;/summary&gt;

```yaml
services:
  prompt-optimizer:
    # ‰ΩøÁî®Docker HubÈïúÂÉè
    image: linshen/prompt-optimizer:latest
    # Êàñ‰ΩøÁî®ÈòøÈáå‰∫ëÈïúÂÉèÔºàÂõΩÂÜÖÁî®Êà∑Êé®ËçêÔºâ
    # image: registry.cn-guangzhou.aliyuncs.com/prompt-optimizer/prompt-optimizer:latest
    container_name: prompt-optimizer
    restart: unless-stopped
    ports:
      - &quot;8081:80&quot;  # WebÂ∫îÁî®Á´ØÂè£ÔºàÂåÖÂê´MCPÊúçÂä°Âô®ÔºåÈÄöËøá/mcpË∑ØÂæÑËÆøÈóÆÔºâ
    environment:
      # APIÂØÜÈí•ÈÖçÁΩÆ
      - VITE_OPENAI_API_KEY=your_openai_key
      - VITE_GEMINI_API_KEY=your_gemini_key
      # ËÆøÈóÆÊéßÂà∂ÔºàÂèØÈÄâÔºâ
      - ACCESS_USERNAME=admin
      - ACCESS_PASSWORD=your_password
```
&lt;/details&gt;

### 7. MCP Server ‰ΩøÁî®ËØ¥Êòé
&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•Áúã MCP Server ‰ΩøÁî®ËØ¥Êòé&lt;/summary&gt;

Prompt Optimizer Áé∞Âú®ÊîØÊåÅ Model Context Protocol (MCP) ÂçèËÆÆÔºåÂèØ‰ª•‰∏é Claude Desktop Á≠âÊîØÊåÅ MCP ÁöÑ AI Â∫îÁî®ÈõÜÊàê„ÄÇ

ÂΩìÈÄöËøá Docker ËøêË°åÊó∂ÔºåMCP Server ‰ºöËá™Âä®ÂêØÂä®ÔºåÂπ∂ÂèØÈÄöËøá `http://ip:port/mcp` ËÆøÈóÆ„ÄÇ

#### ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ

MCP Server ÈúÄË¶ÅÈÖçÁΩÆ API ÂØÜÈí•ÊâçËÉΩÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ‰∏ªË¶ÅÁöÑ MCP ‰∏ìÂ±ûÈÖçÁΩÆÔºö

```bash
# MCP ÊúçÂä°Âô®ÈÖçÁΩÆ
MCP_DEFAULT_MODEL_PROVIDER=openai  # ÂèØÈÄâÂÄºÔºöopenai, gemini, deepseek, siliconflow, zhipu, custom
MCP_LOG_LEVEL=info                 # Êó•ÂøóÁ∫ßÂà´
```

#### Docker ÁéØÂ¢É‰∏ã‰ΩøÁî® MCP

Âú® Docker ÁéØÂ¢É‰∏≠ÔºåMCP Server ‰ºö‰∏é Web Â∫îÁî®‰∏ÄËµ∑ËøêË°åÔºåÊÇ®ÂèØ‰ª•ÈÄöËøá Web Â∫îÁî®ÁöÑÁõ∏ÂêåÁ´ØÂè£ËÆøÈóÆ MCP ÊúçÂä°ÔºåË∑ØÂæÑ‰∏∫ `/mcp`„ÄÇ

‰æãÂ¶ÇÔºåÂ¶ÇÊûúÊÇ®Â∞ÜÂÆπÂô®ÁöÑ 80 Á´ØÂè£Êò†Â∞ÑÂà∞‰∏ªÊú∫ÁöÑ 8081 Á´ØÂè£Ôºö
```bash
docker run -d -p 8081:80 \
  -e VITE_OPENAI_API_KEY=your-openai-key \
  -e MCP_DEFAULT_MODEL_PROVIDER=openai \
  --name prompt-optimizer \
  linshen/prompt-optimizer
```

ÈÇ£‰πà MCP Server Â∞ÜÂèØ‰ª•ÈÄöËøá `http://localhost:8081/mcp` ËÆøÈóÆ„ÄÇ

#### Claude Desktop ÈõÜÊàêÁ§∫‰æã

Ë¶ÅÂú® Claude Desktop ‰∏≠‰ΩøÁî® Prompt OptimizerÔºåÊÇ®ÈúÄË¶ÅÂú® Claude Desktop ÁöÑÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†ÊúçÂä°ÈÖçÁΩÆ„ÄÇ

1. ÊâæÂà∞ Claude Desktop ÁöÑÈÖçÁΩÆÁõÆÂΩïÔºö
   - Windows: `%APPDATA%\Claude\services`
   - macOS: `~/Library/Application Support/Claude/services`
   - Linux: `~/.config/Claude/services`

2. ÁºñËæëÊàñÂàõÂª∫ `services.json` Êñá‰ª∂ÔºåÊ∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö

```json
{
  &quot;services&quot;: [
    {
      &quot;name&quot;: &quot;Prompt Optimizer&quot;,
      &quot;url&quot;: &quot;http://localhost:8081/mcp&quot;
    }
  ]
}
```

ËØ∑Á°Æ‰øùÂ∞Ü `localhost:8081` ÊõøÊç¢‰∏∫ÊÇ®ÂÆûÈôÖÈÉ®ÁΩ≤ Prompt Optimizer ÁöÑÂú∞ÂùÄÂíåÁ´ØÂè£„ÄÇ

#### ÂèØÁî®Â∑•ÂÖ∑

- **optimize-user-prompt**: ‰ºòÂåñÁî®Êà∑ÊèêÁ§∫ËØç‰ª•ÊèêÈ´ò LLM ÊÄßËÉΩ
- **optimize-system-prompt**: ‰ºòÂåñÁ≥ªÁªüÊèêÁ§∫ËØç‰ª•ÊèêÈ´ò LLM ÊÄßËÉΩ
- **iterate-prompt**: ÂØπÂ∑≤ÁªèÊàêÁÜü/ÂÆåÂñÑÁöÑÊèêÁ§∫ËØçËøõË°åÂÆöÂêëËø≠‰ª£‰ºòÂåñ

Êõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑Êü•Áúã [MCP ÊúçÂä°Âô®Áî®Êà∑ÊåáÂçó](docs/user/mcp-server.md)„ÄÇ
&lt;/details&gt;

## ‚öôÔ∏è APIÂØÜÈí•ÈÖçÁΩÆ

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•ÁúãAPIÂØÜÈí•ÈÖçÁΩÆÊñπÊ≥ï&lt;/summary&gt;

### ÊñπÂºè‰∏ÄÔºöÈÄöËøáÁïåÈù¢ÈÖçÁΩÆÔºàÊé®ËçêÔºâ
1. ÁÇπÂáªÁïåÈù¢Âè≥‰∏äËßíÁöÑ&quot;‚öôÔ∏èËÆæÁΩÆ&quot;ÊåâÈíÆ
2. ÈÄâÊã©&quot;Ê®°ÂûãÁÆ°ÁêÜ&quot;ÈÄâÈ°πÂç°
3. ÁÇπÂáªÈúÄË¶ÅÈÖçÁΩÆÁöÑÊ®°ÂûãÔºàÂ¶ÇOpenAI„ÄÅGemini„ÄÅDeepSeekÁ≠âÔºâ
4. Âú®ÂºπÂá∫ÁöÑÈÖçÁΩÆÊ°Ü‰∏≠ËæìÂÖ•ÂØπÂ∫îÁöÑAPIÂØÜÈí•
5. ÁÇπÂáª&quot;‰øùÂ≠ò&quot;Âç≥ÂèØ

ÊîØÊåÅÁöÑÊ®°ÂûãÔºöOpenAI„ÄÅGemini„ÄÅDeepSeek„ÄÅZhipuÊô∫Ë∞±„ÄÅSiliconFlow„ÄÅËá™ÂÆö‰πâAPIÔºàOpenAIÂÖºÂÆπÊé•Âè£Ôºâ

Èô§‰∫ÜAPIÂØÜÈí•ÔºåÊÇ®ËøòÂèØ‰ª•Âú®Ê®°ÂûãÈÖçÁΩÆÁïåÈù¢‰∏∫ÊØè‰∏™Ê®°ÂûãÂçïÁã¨ËÆæÁΩÆÈ´òÁ∫ßLLMÂèÇÊï∞„ÄÇËøô‰∫õÂèÇÊï∞ÈÄöËøá‰∏Ä‰∏™Âêç‰∏∫ `llmParams` ÁöÑÂ≠óÊÆµËøõË°åÈÖçÁΩÆÔºåÂÆÉÂÖÅËÆ∏ÊÇ®‰ª•ÈîÆÂÄºÂØπÁöÑÂΩ¢ÂºèÊåáÂÆöLLM SDKÊîØÊåÅÁöÑ‰ªª‰ΩïÂèÇÊï∞Ôºå‰ªéËÄåÊõ¥Á≤æÁªÜÂú∞ÊéßÂà∂Ê®°ÂûãË°å‰∏∫„ÄÇ

**È´òÁ∫ßLLMÂèÇÊï∞ÈÖçÁΩÆÁ§∫‰æãÔºö**
- **OpenAI/ÂÖºÂÆπAPI**: `{&quot;temperature&quot;: 0.7, &quot;max_tokens&quot;: 4096, &quot;timeout&quot;: 60000}`
- **Gemini**: `{&quot;temperature&quot;: 0.8, &quot;maxOutputTokens&quot;: 2048, &quot;topP&quot;: 0.95}`
- **DeepSeek**: `{&quot;temperature&quot;: 0.5, &quot;top_p&quot;: 0.9, &quot;frequency_penalty&quot;: 0.1}`

ÊúâÂÖ≥ `llmParams` ÁöÑÊõ¥ËØ¶ÁªÜËØ¥ÊòéÂíåÈÖçÁΩÆÊåáÂçóÔºåËØ∑ÂèÇÈòÖ [LLMÂèÇÊï∞ÈÖçÁΩÆÊåáÂçó](docs/developer/llm-params-guide.md)„ÄÇ

### ÊñπÂºè‰∫åÔºöÈÄöËøáÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
DockerÈÉ®ÁΩ≤Êó∂ÈÄöËøá `-e` ÂèÇÊï∞ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáèÔºö

```bash
-e VITE_OPENAI_API_KEY=your_key
-e VITE_GEMINI_API_KEY=your_key
-e VITE_DEEPSEEK_API_KEY=your_key
-e VITE_ZHIPU_API_KEY=your_key
-e VITE_SILICONFLOW_API_KEY=your_key
-e VITE_CUSTOM_API_KEY=your_custom_api_key
-e VITE_CUSTOM_API_BASE_URL=your_custom_api_base_url
-e VITE_CUSTOM_API_MODEL=your_custom_model_name
```

&lt;/details&gt;

## Êú¨Âú∞ÂºÄÂèë
ËØ¶ÁªÜÊñáÊ°£ÂèØÊü•Áúã [ÂºÄÂèëÊñáÊ°£](dev.md)

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•ÁúãÊú¨Âú∞ÂºÄÂèëÂëΩ‰ª§&lt;/summary&gt;

```bash
# 1. ÂÖãÈöÜÈ°πÁõÆ
git clone https://github.com/linshenkx/prompt-optimizer.git
cd prompt-optimizer

# 2. ÂÆâË£Ö‰æùËµñ
pnpm install

# 3. ÂêØÂä®ÂºÄÂèëÊúçÂä°
pnpm dev               # ‰∏ªÂºÄÂèëÂëΩ‰ª§ÔºöÊûÑÂª∫core/uiÂπ∂ËøêË°åwebÂ∫îÁî®
pnpm dev:web          # ‰ªÖËøêË°åwebÂ∫îÁî®
pnpm dev:fresh        # ÂÆåÊï¥ÈáçÁΩÆÂπ∂ÈáçÊñ∞ÂêØÂä®ÂºÄÂèëÁéØÂ¢É
```
&lt;/details&gt;

## üó∫Ô∏è ÂºÄÂèëË∑ØÁ∫ø

- [x] Âü∫Á°ÄÂäüËÉΩÂºÄÂèë
- [x] WebÂ∫îÁî®ÂèëÂ∏É
- [x] ChromeÊèí‰ª∂ÂèëÂ∏É
- [x] ÂõΩÈôÖÂåñÊîØÊåÅ
- [x] ÊîØÊåÅÁ≥ªÁªüÊèêÁ§∫ËØç‰ºòÂåñÂíåÁî®Êà∑ÊèêÁ§∫ËØç‰ºòÂåñ
- [x] Ê°åÈù¢Â∫îÁî®ÂèëÂ∏É
- [x] mcpÊúçÂä°ÂèëÂ∏É

ËØ¶ÁªÜÁöÑÈ°πÁõÆÁä∂ÊÄÅÂèØÊü•Áúã [È°πÁõÆÁä∂ÊÄÅÊñáÊ°£](docs/project-status.md)

## üìñ Áõ∏ÂÖ≥ÊñáÊ°£

- [ÊñáÊ°£Á¥¢Âºï](docs/README.md) - ÊâÄÊúâÊñáÊ°£ÁöÑÁ¥¢Âºï
- [ÊäÄÊúØÂºÄÂèëÊåáÂçó](docs/developer/technical-development-guide.md) - ÊäÄÊúØÊ†àÂíåÂºÄÂèëËßÑËåÉ
- [LLMÂèÇÊï∞ÈÖçÁΩÆÊåáÂçó](docs/developer/llm-params-guide.md) - È´òÁ∫ßLLMÂèÇÊï∞ÈÖçÁΩÆËØ¶ÁªÜËØ¥Êòé
- [È°πÁõÆÁªìÊûÑ](docs/developer/project-structure.md) - ËØ¶ÁªÜÁöÑÈ°πÁõÆÁªìÊûÑËØ¥Êòé
- [È°πÁõÆÁä∂ÊÄÅ](docs/project/project-status.md) - ÂΩìÂâçËøõÂ∫¶ÂíåËÆ°Âàí
- [‰∫ßÂìÅÈúÄÊ±Ç](docs/project/prd.md) - ‰∫ßÂìÅÈúÄÊ±ÇÊñáÊ°£
- [VercelÈÉ®ÁΩ≤ÊåáÂçó](docs/user/deployment/vercel.md) - VercelÈÉ®ÁΩ≤ËØ¶ÁªÜËØ¥Êòé


## Star History

&lt;a href=&quot;https://star-history.com/#linshenkx/prompt-optimizer&amp;Date&quot;&gt;
 &lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://api.star-history.com/svg?repos=linshenkx/prompt-optimizer&amp;type=Date&amp;theme=dark&quot; /&gt;
   &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://api.star-history.com/svg?repos=linshenkx/prompt-optimizer&amp;type=Date&quot; /&gt;
   &lt;img alt=&quot;Star History Chart&quot; src=&quot;https://api.star-history.com/svg?repos=linshenkx/prompt-optimizer&amp;type=Date&quot; /&gt;
 &lt;/picture&gt;
&lt;/a&gt;

## Â∏∏ËßÅÈóÆÈ¢ò

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•ÁúãÂ∏∏ËßÅÈóÆÈ¢òËß£Á≠î&lt;/summary&gt;

### APIËøûÊé•ÈóÆÈ¢ò

#### Q1: ‰∏∫‰ªÄ‰πàÈÖçÁΩÆÂ•ΩAPIÂØÜÈí•Âêé‰ªçÁÑ∂Êó†Ê≥ïËøûÊé•Âà∞Ê®°ÂûãÊúçÂä°Ôºü
**A**: Â§ßÂ§öÊï∞ËøûÊé•Â§±Ë¥•ÊòØÁî±**Ë∑®ÂüüÈóÆÈ¢ò**ÔºàCORSÔºâÂØºËá¥ÁöÑ„ÄÇÁî±‰∫éÊú¨È°πÁõÆÊòØÁ∫ØÂâçÁ´ØÂ∫îÁî®ÔºåÊµèËßàÂô®Âá∫‰∫éÂÆâÂÖ®ËÄÉËôë‰ºöÈòªÊ≠¢Áõ¥Êé•ËÆøÈóÆ‰∏çÂêåÊ∫êÁöÑAPIÊúçÂä°„ÄÇÊ®°ÂûãÊúçÂä°Â¶ÇÊú™Ê≠£Á°ÆÈÖçÁΩÆCORSÁ≠ñÁï•Ôºå‰ºöÊãíÁªùÊù•Ëá™ÊµèËßàÂô®ÁöÑÁõ¥Êé•ËØ∑Ê±Ç„ÄÇ

#### Q2: Â¶Ç‰ΩïËß£ÂÜ≥Êú¨Âú∞OllamaÁöÑËøûÊé•ÈóÆÈ¢òÔºü
**A**: OllamaÂÆåÂÖ®ÊîØÊåÅOpenAIÊ†áÂáÜÊé•Âè£ÔºåÂè™ÈúÄÈÖçÁΩÆÊ≠£Á°ÆÁöÑË∑®ÂüüÁ≠ñÁï•Ôºö
1. ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè `OLLAMA_ORIGINS=*` ÂÖÅËÆ∏‰ªªÊÑèÊù•Ê∫êÁöÑËØ∑Ê±Ç
2. Â¶Ç‰ªçÊúâÈóÆÈ¢òÔºåËÆæÁΩÆ `OLLAMA_HOST=0.0.0.0:11434` ÁõëÂê¨‰ªªÊÑèIPÂú∞ÂùÄ

#### Q3: Â¶Ç‰ΩïËß£ÂÜ≥ÂïÜ‰∏öAPIÔºàÂ¶ÇNvidiaÁöÑDS API„ÄÅÂ≠óËäÇË∑≥Âä®ÁöÑÁÅ´Â±±APIÔºâÁöÑË∑®ÂüüÈóÆÈ¢òÔºü
**A**: Ëøô‰∫õÂπ≥Âè∞ÈÄöÂ∏∏Êúâ‰∏•Ê†ºÁöÑË∑®ÂüüÈôêÂà∂ÔºåÊé®Ëçê‰ª•‰∏ãËß£ÂÜ≥ÊñπÊ°àÔºö

1. **‰ΩøÁî®Vercel‰ª£ÁêÜ**Ôºà‰æøÊç∑ÊñπÊ°àÔºâ
   - ‰ΩøÁî®Âú®Á∫øÁâàÊú¨Ôºö[prompt.always200.com](https://prompt.always200.com)
   - ÊàñËá™Ë°åÈÉ®ÁΩ≤Âà∞VercelÂπ≥Âè∞
   - Âú®Ê®°ÂûãËÆæÁΩÆ‰∏≠ÂãæÈÄâ&quot;‰ΩøÁî®Vercel‰ª£ÁêÜ&quot;ÈÄâÈ°π
   - ËØ∑Ê±ÇÊµÅÂêëÔºöÊµèËßàÂô®‚ÜíVercel‚ÜíÊ®°ÂûãÊúçÂä°Êèê‰æõÂïÜ
   - ËØ¶ÁªÜÊ≠•È™§ËØ∑ÂèÇËÄÉ [VercelÈÉ®ÁΩ≤ÊåáÂçó](docs/user/deployment/vercel.md)

2. **‰ΩøÁî®Ëá™ÈÉ®ÁΩ≤ÁöÑAPI‰∏≠ËΩ¨ÊúçÂä°**ÔºàÂèØÈù†ÊñπÊ°àÔºâ
   - ÈÉ®ÁΩ≤Â¶ÇOneAPIÁ≠âÂºÄÊ∫êAPIËÅöÂêà/‰ª£ÁêÜÂ∑•ÂÖ∑
   - Âú®ËÆæÁΩÆ‰∏≠ÈÖçÁΩÆ‰∏∫Ëá™ÂÆö‰πâAPIÁ´ØÁÇπ
   - ËØ∑Ê±ÇÊµÅÂêëÔºöÊµèËßàÂô®‚Üí‰∏≠ËΩ¨ÊúçÂä°‚ÜíÊ®°ÂûãÊúçÂä°Êèê‰æõÂïÜ

#### Q4: Vercel‰ª£ÁêÜÊúâ‰ªÄ‰πàÁº∫ÁÇπÊàñÈ£éÈô©Ôºü
**A**: ‰ΩøÁî®Vercel‰ª£ÁêÜÂèØËÉΩ‰ºöËß¶ÂèëÊüê‰∫õÊ®°ÂûãÊúçÂä°Êèê‰æõÂïÜÁöÑÈ£éÊéßÊú∫Âà∂„ÄÇÈÉ®ÂàÜÂéÇÂïÜÂèØËÉΩ‰ºöÂ∞ÜÊù•Ëá™VercelÁöÑËØ∑Ê±ÇÂà§ÂÆö‰∏∫‰ª£ÁêÜË°å‰∏∫Ôºå‰ªéËÄåÈôêÂà∂ÊàñÊãíÁªùÊúçÂä°„ÄÇÂ¶ÇÈÅáÊ≠§ÈóÆÈ¢òÔºåÂª∫ËÆÆ‰ΩøÁî®Ëá™ÈÉ®ÁΩ≤ÁöÑ‰∏≠ËΩ¨ÊúçÂä°„ÄÇ

#### Q5: ÊàëÂ∑≤Ê≠£Á°ÆÈÖçÁΩÆÊú¨Âú∞Ê®°ÂûãÔºàÂ¶ÇOllamaÔºâÁöÑË∑®ÂüüÁ≠ñÁï•Ôºå‰∏∫‰ªÄ‰πà‰ΩøÁî®Âú®Á∫øÁâà‰æùÁÑ∂Êó†Ê≥ïËøûÊé•Ôºü
**A**: ËøôÊòØÁî±ÊµèËßàÂô®ÁöÑ**Ê∑∑ÂêàÂÜÖÂÆπÔºàMixed ContentÔºâÂÆâÂÖ®Á≠ñÁï•**ÂØºËá¥ÁöÑ„ÄÇÂá∫‰∫éÂÆâÂÖ®ËÄÉËôëÔºåÊµèËßàÂô®‰ºöÈòªÊ≠¢ÂÆâÂÖ®ÁöÑHTTPSÈ°µÈù¢ÔºàÂ¶ÇÂú®Á∫øÁâàÔºâÂêë‰∏çÂÆâÂÖ®ÁöÑHTTPÂú∞ÂùÄÔºàÂ¶ÇÊÇ®ÁöÑÊú¨Âú∞OllamaÊúçÂä°ÔºâÂèëÈÄÅËØ∑Ê±Ç„ÄÇ

**Ëß£ÂÜ≥ÊñπÊ°à**Ôºö
‰∏∫‰∫ÜÁªïËøáÊ≠§ÈôêÂà∂ÔºåÊÇ®ÈúÄË¶ÅËÆ©Â∫îÁî®ÂíåAPIÂ§Ñ‰∫éÂêå‰∏ÄÁßçÂçèËÆÆ‰∏ãÔºà‰æãÂ¶ÇÔºåÈÉΩÊòØHTTPÔºâ„ÄÇÊé®Ëçê‰ª•‰∏ãÂá†ÁßçÊñπÂºèÔºö
1. **‰ΩøÁî®Ê°åÈù¢Áâà**ÔºöÊ°åÈù¢Â∫îÁî®Ê≤°ÊúâÊµèËßàÂô®ÈôêÂà∂ÔºåÊòØËøûÊé•Êú¨Âú∞Ê®°ÂûãÊúÄÁ®≥ÂÆöÂèØÈù†ÁöÑÊñπÂºè„ÄÇ
2. **dockerÈÉ®ÁΩ≤**ÔºödockerÈÉ®ÁΩ≤‰πüÊòØhttp
3. **‰ΩøÁî®ChromeÊèí‰ª∂**ÔºöÊèí‰ª∂Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ã‰πüÂèØ‰ª•ÁªïËøáÈÉ®ÂàÜÂÆâÂÖ®ÈôêÂà∂„ÄÇ

&lt;/details&gt;


## ü§ù ÂèÇ‰∏éË¥°ÁåÆ

&lt;details&gt;
&lt;summary&gt;ÁÇπÂáªÊü•ÁúãË¥°ÁåÆÊåáÂçó&lt;/summary&gt;

1. Fork Êú¨‰ªìÂ∫ì
2. ÂàõÂª∫ÁâπÊÄßÂàÜÊîØ (`git checkout -b feature/AmazingFeature`)
3. Êèê‰∫§Êõ¥Êîπ (`git commit -m &#039;Ê∑ªÂä†Êüê‰∏™ÁâπÊÄß&#039;`)
4. Êé®ÈÄÅÂà∞ÂàÜÊîØ (`git push origin feature/AmazingFeature`)
5. Êèê‰∫§ Pull Request

ÊèêÁ§∫Ôºö‰ΩøÁî®cursorÂ∑•ÂÖ∑ÂºÄÂèëÊó∂ÔºåÂª∫ËÆÆÂú®Êèê‰∫§Ââç:
1. ‰ΩøÁî®&quot;code_review&quot;ËßÑÂàôËøõË°å‰ª£Á†ÅÂÆ°Êü•
2. ÊåâÁÖßÂÆ°Êü•Êä•ÂëäÊ†ºÂºèÊ£ÄÊü•:
   - ÂèòÊõ¥ÁöÑÊï¥‰Ωì‰∏ÄËá¥ÊÄß
   - ‰ª£Á†ÅË¥®ÈáèÂíåÂÆûÁé∞ÊñπÂºè
   - ÊµãËØïË¶ÜÁõñÊÉÖÂÜµ
   - ÊñáÊ°£ÂÆåÂñÑÁ®ãÂ∫¶
3. Ê†πÊçÆÂÆ°Êü•ÁªìÊûúËøõË°å‰ºòÂåñÂêéÂÜçÊèê‰∫§

&lt;/details&gt;

## üëè Ë¥°ÁåÆËÄÖÂêçÂçï

ÊÑüË∞¢ÊâÄÊúâ‰∏∫È°πÁõÆÂÅöÂá∫Ë¥°ÁåÆÁöÑÂºÄÂèëËÄÖÔºÅ

&lt;a href=&quot;https://github.com/linshenkx/prompt-optimizer/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=linshenkx/prompt-optimizer&quot; alt=&quot;Ë¥°ÁåÆËÄÖ&quot; /&gt;
&lt;/a&gt;

## üìÑ ÂºÄÊ∫êÂçèËÆÆ

Êú¨È°πÁõÆÈááÁî® [MIT](LICENSE) ÂçèËÆÆÂºÄÊ∫ê„ÄÇ

---

Â¶ÇÊûúËøô‰∏™È°πÁõÆÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåËØ∑ËÄÉËôëÁªôÂÆÉ‰∏Ä‰∏™ Star ‚≠êÔ∏è

## üë• ËÅîÁ≥ªÊàë‰ª¨

- Êèê‰∫§ Issue
- ÂèëËµ∑ Pull Request
- Âä†ÂÖ•ËÆ®ËÆ∫ÁªÑ</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[microsoft/playwright]]></title>
            <link>https://github.com/microsoft/playwright</link>
            <guid>https://github.com/microsoft/playwright</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:57 GMT</pubDate>
            <description><![CDATA[Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/microsoft/playwright">microsoft/playwright</a></h1>
            <p>Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 75,445</p>
            <p>Forks: 4,407</p>
            <p>Stars today: 56 stars today</p>
            <h2>README</h2><pre># üé≠ Playwright

[![npm version](https://img.shields.io/npm/v/playwright.svg)](https://www.npmjs.com/package/playwright) &lt;!-- GEN:chromium-version-badge --&gt;[![Chromium version](https://img.shields.io/badge/chromium-139.0.7258.42-blue.svg?logo=google-chrome)](https://www.chromium.org/Home)&lt;!-- GEN:stop --&gt; &lt;!-- GEN:firefox-version-badge --&gt;[![Firefox version](https://img.shields.io/badge/firefox-141.0-blue.svg?logo=firefoxbrowser)](https://www.mozilla.org/en-US/firefox/new/)&lt;!-- GEN:stop --&gt; &lt;!-- GEN:webkit-version-badge --&gt;[![WebKit version](https://img.shields.io/badge/webkit-26.0-blue.svg?logo=safari)](https://webkit.org/)&lt;!-- GEN:stop --&gt; [![Join Discord](https://img.shields.io/badge/join-discord-informational)](https://aka.ms/playwright/discord)

## [Documentation](https://playwright.dev) | [API reference](https://playwright.dev/docs/api/class-playwright)

Playwright is a framework for Web Testing and Automation. It allows testing [Chromium](https://www.chromium.org/Home), [Firefox](https://www.mozilla.org/en-US/firefox/new/) and [WebKit](https://webkit.org/) with a single API. Playwright is built to enable cross-browser web automation that is **ever-green**, **capable**, **reliable** and **fast**.

|          | Linux | macOS | Windows |
|   :---   | :---: | :---: | :---:   |
| Chromium &lt;!-- GEN:chromium-version --&gt;139.0.7258.42&lt;!-- GEN:stop --&gt; | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| WebKit &lt;!-- GEN:webkit-version --&gt;26.0&lt;!-- GEN:stop --&gt; | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| Firefox &lt;!-- GEN:firefox-version --&gt;141.0&lt;!-- GEN:stop --&gt; | :white_check_mark: | :white_check_mark: | :white_check_mark: |

Headless execution is supported for all browsers on all platforms. Check out [system requirements](https://playwright.dev/docs/intro#system-requirements) for details.

Looking for Playwright for [Python](https://playwright.dev/python/docs/intro), [.NET](https://playwright.dev/dotnet/docs/intro), or [Java](https://playwright.dev/java/docs/intro)?

## Installation

Playwright has its own test runner for end-to-end tests, we call it Playwright Test.

### Using init command

The easiest way to get started with Playwright Test is to run the init command.

```Shell
# Run from your project&#039;s root directory
npm init playwright@latest
# Or create a new project
npm init playwright@latest new-project
```

This will create a configuration file, optionally add examples, a GitHub Action workflow and a first test example.spec.ts. You can now jump directly to writing assertions section.

### Manually

Add dependency and install browsers.

```Shell
npm i -D @playwright/test
# install supported browsers
npx playwright install
```

You can optionally install only selected browsers, see [install browsers](https://playwright.dev/docs/cli#install-browsers) for more details. Or you can install no browsers at all and use existing [browser channels](https://playwright.dev/docs/browsers).

* [Getting started](https://playwright.dev/docs/intro)
* [API reference](https://playwright.dev/docs/api/class-playwright)

## Capabilities

### Resilient ‚Ä¢ No flaky tests

**Auto-wait**. Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - a primary cause of flaky tests.

**Web-first assertions**. Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.

**Tracing**. Configure test retry strategy, capture execution trace, videos and screenshots to eliminate flakes.

### No trade-offs ‚Ä¢ No limits

Browsers run web content belonging to different origins in different processes. Playwright is aligned with the architecture of the modern browsers and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.

**Multiple everything**. Test scenarios that span multiple tabs, multiple origins and multiple users. Create scenarios with different contexts for different users and run them against your server, all in one test.

**Trusted events**. Hover elements, interact with dynamic controls and produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.

Test frames, pierce Shadow DOM. Playwright selectors pierce shadow DOM and allow entering frames seamlessly.

### Full isolation ‚Ä¢ Fast execution

**Browser contexts**. Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.

**Log in once**. Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.

### Powerful Tooling

**[Codegen](https://playwright.dev/docs/codegen)**. Generate tests by recording your actions. Save them into any language.

**[Playwright inspector](https://playwright.dev/docs/inspector)**. Inspect page, generate selectors, step through the test execution, see click points and explore execution logs.

**[Trace Viewer](https://playwright.dev/docs/trace-viewer)**. Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source and many more.

Looking for Playwright for [TypeScript](https://playwright.dev/docs/intro), [JavaScript](https://playwright.dev/docs/intro), [Python](https://playwright.dev/python/docs/intro), [.NET](https://playwright.dev/dotnet/docs/intro), or [Java](https://playwright.dev/java/docs/intro)?

## Examples

To learn how to run these Playwright Test examples, check out our [getting started docs](https://playwright.dev/docs/intro).

#### Page screenshot

This code snippet navigates to Playwright homepage and saves a screenshot.

```TypeScript
import { test } from &#039;@playwright/test&#039;;

test(&#039;Page Screenshot&#039;, async ({ page }) =&gt; {
  await page.goto(&#039;https://playwright.dev/&#039;);
  await page.screenshot({ path: `example.png` });
});
```

#### Mobile and geolocation

This snippet emulates Mobile Safari on a device at given geolocation, navigates to maps.google.com, performs the action and takes a screenshot.

```TypeScript
import { test, devices } from &#039;@playwright/test&#039;;

test.use({
  ...devices[&#039;iPhone 13 Pro&#039;],
  locale: &#039;en-US&#039;,
  geolocation: { longitude: 12.492507, latitude: 41.889938 },
  permissions: [&#039;geolocation&#039;],
})

test(&#039;Mobile and geolocation&#039;, async ({ page }) =&gt; {
  await page.goto(&#039;https://maps.google.com&#039;);
  await page.getByText(&#039;Your location&#039;).click();
  await page.waitForRequest(/.*preview\/pwa/);
  await page.screenshot({ path: &#039;colosseum-iphone.png&#039; });
});
```

#### Evaluate in browser context

This code snippet navigates to example.com, and executes a script in the page context.

```TypeScript
import { test } from &#039;@playwright/test&#039;;

test(&#039;Evaluate in browser context&#039;, async ({ page }) =&gt; {
  await page.goto(&#039;https://www.example.com/&#039;);
  const dimensions = await page.evaluate(() =&gt; {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight,
      deviceScaleFactor: window.devicePixelRatio
    }
  });
  console.log(dimensions);
});
```

#### Intercept network requests

This code snippet sets up request routing for a page to log all network requests.

```TypeScript
import { test } from &#039;@playwright/test&#039;;

test(&#039;Intercept network requests&#039;, async ({ page }) =&gt; {
  // Log and continue all network requests
  await page.route(&#039;**&#039;, route =&gt; {
    console.log(route.request().url());
    route.continue();
  });
  await page.goto(&#039;http://todomvc.com&#039;);
});
```

## Resources

* [Documentation](https://playwright.dev)
* [API reference](https://playwright.dev/docs/api/class-playwright/)
* [Contribution guide](CONTRIBUTING.md)
* [Changelog](https://github.com/microsoft/playwright/releases)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[devlikeapro/waha]]></title>
            <link>https://github.com/devlikeapro/waha</link>
            <guid>https://github.com/devlikeapro/waha</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:56 GMT</pubDate>
            <description><![CDATA[WAHA - WhatsApp HTTP API (REST API) that you can configure in a click! 3 engines: WEBJS (browser based), NOWEB (websocket nodejs), GOWS (websocket go)]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/devlikeapro/waha">devlikeapro/waha</a></h1>
            <p>WAHA - WhatsApp HTTP API (REST API) that you can configure in a click! 3 engines: WEBJS (browser based), NOWEB (websocket nodejs), GOWS (websocket go)</p>
            <p>Language: TypeScript</p>
            <p>Stars: 2,358</p>
            <p>Forks: 646</p>
            <p>Stars today: 349 stars today</p>
            <h2>README</h2><pre># WAHA

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;./logo.png&quot; style=&#039;border-radius: 50%&#039; width=&#039;150&#039;/&gt;
&lt;/p&gt;

**WAHA** - **W**hats**A**pp **H**TTP **A**PI (REST API) that you can install on your own server and run in less than 5 minutes!

[![Docker Pulls](https://img.shields.io/docker/pulls/devlikeapro/waha)](https://hub.docker.com/r/devlikeapro/waha)

- Documentation: [https://waha.devlike.pro/](https://waha.devlike.pro/)
- Dashboard Example: [https://waha.devlike.pro/dashboard](https://waha.devlike.pro/dashboard)
- Swagger Example: [https://waha.devlike.pro/swagger](https://waha.devlike.pro/swagger)

# Tables of Contents

&lt;!-- toc --&gt;

- [Quick start](#quick-start)
  * [Requirements](#requirements)
  * [Send your first message](#send-your-first-message)
    + [1. Download image](#1-download-image)
    + [2. Run WhatsApp HTTP API](#2-run-whatsapp-http-api)
    + [3. Start a new session](#3-start-a-new-session)
    + [4. Get and scan QR](#4-get-and-scan-qr)
    + [5. Get the screenshot](#5-get-the-screenshot)
    + [6. Send a text message](#6-send-a-text-message)
  * [What is next?](#what-is-next)
- [Development](#development)
  * [Start the project](#start-the-project)

&lt;!-- tocstop --&gt;

# Quick start

## Requirements

Only thing that you must have - installed docker. Please follow the original
instruction &lt;a href=&quot;https://docs.docker.com/get-docker/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;how to install docker -&gt;&lt;/a&gt;.

When you are ready - come back and follows the below steps to send the first text message to WhatsApp via HTTP API!

## Send your first message

Let&#039;s go over steps that allow you to send your first text message via WhatsApp HTTP API!

### 1. Download image

Assuming you have installed [Docker](https://docs.docker.com/get-docker/), let&#039;s download the image.


```bash
docker pull devlikeapro/waha
```


```bash
docker login -u devlikeapro -p {KEY}
docker pull devlikeapro/waha-plus
docker logout
```

Read more about how to get `PASSWORD` for [**‚ûï WAHA Plus**](https://waha.devlike.pro/docs/how-to/waha-plus/)

### 2. Run WhatsApp HTTP API

Run WhatsApp HTTP API:

```bash
docker run -it --rm -p 3000:3000/tcp --name waha devlikeapro/waha

# It prints logs and the last line must be
# WhatsApp HTTP API is running on: http://[::1]:3000
```

Open the link in your browser [http://localhost:3000/](http://localhost:3000/) and you&#039;ll see API documentation
(Swagger).


### 3. Start a new session

To start a new session you should have your mobile phone with installed WhatsApp application close to you.

Please go and read how what we&#039;ll need to a bit
later:
&lt;a href=&quot;https://faq.whatsapp.com/381777293328336/?helpref=hc_fnav&quot; target=&quot;_blank&quot;&gt;
How to log in - the instruction on WhatsApp site
&lt;/a&gt;

When your ready - find `POST /api/sessions`, click on **Try it out**, then **Execute** a bit below.


The example payload:
```json
{
  &quot;name&quot;: &quot;default&quot;
}
```


By using the request with `name` values you can start multiple session (WhatsApp accounts) inside the single docker container in Plus


### 4. Get and scan QR

Find `GET /api/screenshot` and execute it, it shows you QR code.


**Scan the QR with your cell phone&#039;s WhatsApp app.**


### 5. Get the screenshot

Execute `GET /api/screenshot` after a few seconds after scanning the QR - it&#039;ll show you the screenshot of you Whatsapp
instance. If you can get the actual screenshot - then you&#039;re ready to start sending messages!


### 6. Send a text message

Let&#039;s send a text message - find `POST /api/sendText`  in [swagger](http://localhost:3000/) and change `chatId` this
way: use a phone international phone number without `+` symbol and add `@c.us` at the end.

For phone number `12132132131` the `chatId` is  `12132132131@c.us`.

The example payload:
```json
{
  &quot;chatId&quot;: &quot;12132132130@c.us&quot;,
  &quot;text&quot;: &quot;Hi there!&quot;,
  &quot;session&quot;: &quot;default&quot;
}
```

Also, you can use `curl` and send POST request like this:

```bash
# Phone without +
export PHONE=12132132130
curl -d &quot;{\&quot;chatId\&quot;: \&quot;${PHONE}@c.us\&quot;, \&quot;text\&quot;: \&quot;Hello from WhatsApp HTTP API\&quot; }&quot; -H &quot;Content-Type: application/json&quot; -X POST http://localhost:3000/api/sendText
```

## What is next?
[Go and read the full documentation!](https://waha.devlike.pro/docs/overview/introduction/)

# Development

## Start the project
1. Clone the repository
2. Make sure you&#039;re using node&gt;=22 (check [.nvmrc](/.nvmrc) to get the version)
3. Run the following commands:
```bash
# Install dependencies
yarn install
# Fetch and compile proto files
yarn gows:proto
# Run
yarn start
# open http://localhost:3000
```</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[payloadcms/payload]]></title>
            <link>https://github.com/payloadcms/payload</link>
            <guid>https://github.com/payloadcms/payload</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:55 GMT</pubDate>
            <description><![CDATA[Payload is the open-source, fullstack Next.js framework, giving you instant backend superpowers. Get a full TypeScript backend and admin panel instantly. Use Payload as a headless CMS or for building powerful applications.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/payloadcms/payload">payloadcms/payload</a></h1>
            <p>Payload is the open-source, fullstack Next.js framework, giving you instant backend superpowers. Get a full TypeScript backend and admin panel instantly. Use Payload as a headless CMS or for building powerful applications.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 36,632</p>
            <p>Forks: 2,745</p>
            <p>Stars today: 26 stars today</p>
            <h2>README</h2><pre>&lt;a href=&quot;https://payloadcms.com&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;https://l4wlsi8vxy8hre4v.public.blob.vercel-storage.com/github-banner-new-logo.jpg&quot; alt=&quot;Payload headless CMS Admin panel built with React&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;p align=&quot;left&quot;&gt;
  &lt;a href=&quot;https://github.com/payloadcms/payload/actions&quot;&gt;&lt;img alt=&quot;GitHub Workflow Status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/payloadcms/payload/main.yml?style=flat-square&quot;&gt;&lt;/a&gt;
  &amp;nbsp;
  &lt;a href=&quot;https://discord.gg/payload&quot;&gt;&lt;img alt=&quot;Discord&quot; src=&quot;https://img.shields.io/discord/967097582721572934?label=Discord&amp;color=7289da&amp;style=flat-square&quot; /&gt;&lt;/a&gt;
  &amp;nbsp;
  &lt;a href=&quot;https://www.npmjs.com/package/payload&quot;&gt;&lt;img alt=&quot;npm&quot; src=&quot;https://img.shields.io/npm/dw/payload?style=flat-square&quot; /&gt;&lt;/a&gt;
  &amp;nbsp;
  &lt;a href=&quot;https://github.com/payloadcms/payload/graphs/contributors&quot;&gt;&lt;img alt=&quot;npm&quot; src=&quot;https://img.shields.io/github/contributors-anon/payloadcms/payload?color=yellow&amp;style=flat-square&quot; /&gt;&lt;/a&gt;
  &amp;nbsp;
  &lt;a href=&quot;https://www.npmjs.com/package/payload&quot;&gt;&lt;img alt=&quot;npm&quot; src=&quot;https://img.shields.io/npm/v/payload?style=flat-square&quot; /&gt;&lt;/a&gt;
  &amp;nbsp;
  &lt;a href=&quot;https://twitter.com/payloadcms&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/follow-payloadcms-1DA1F2?logo=twitter&amp;style=flat-square&quot; alt=&quot;Payload Twitter&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr/&gt;
&lt;h4&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://payloadcms.com/docs/getting-started/what-is-payload&quot; rel=&quot;dofollow&quot;&gt;&lt;strong&gt;Explore the Docs&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;¬∑&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://payloadcms.com/community-help&quot; rel=&quot;dofollow&quot;&gt;&lt;strong&gt;Community Help&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;¬∑&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/payloadcms/payload/discussions/1539&quot; rel=&quot;dofollow&quot;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;¬∑&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://www.g2.com/products/payload-cms/reviews#reviews&quot; rel=&quot;dofollow&quot;&gt;&lt;strong&gt;View G2 Reviews&lt;/strong&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;hr/&gt;

&gt; [!IMPORTANT]
&gt; üéâ &lt;strong&gt;We&#039;ve released 3.0!&lt;/strong&gt; Star this repo or keep an eye on it to follow along.

Payload is the first-ever Next.js native CMS that can install directly in your existing `/app` folder. It&#039;s the start of a new era for headless CMS.

&lt;h3&gt;Benefits over a regular CMS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Deploy anywhere, including serverless on Vercel for free&lt;/li&gt;
  &lt;li&gt;Combine your front+backend in the same &lt;code&gt;/app&lt;/code&gt; folder if you want&lt;/li&gt;
  &lt;li&gt;Don&#039;t sign up for yet another SaaS - Payload is open source&lt;/li&gt;
  &lt;li&gt;Query your database in React Server Components&lt;/li&gt;
  &lt;li&gt;Both admin and backend are 100% extensible&lt;/li&gt;
  &lt;li&gt;No vendor lock-in&lt;/li&gt;
  &lt;li&gt;Never touch ancient WP code again&lt;/li&gt;
  &lt;li&gt;Build faster, never hit a roadblock&lt;/li&gt;
&lt;/ul&gt;

## Quickstart

Before beginning to work with Payload, make sure you have all of the [required software](https://payloadcms.com/docs/getting-started/installation).

```text
pnpx create-payload-app@latest
```

**If you&#039;re new to Payload, you should start with the website template** (`pnpx create-payload-app@latest -t website`). It shows how to do _everything_ - including custom Rich Text blocks, on-demand revalidation, live preview, and more. It comes with a frontend built with Tailwind all in one `/app` folder.

## One-click templates

Jumpstart your next project by starting with a pre-made template. These are production-ready, end-to-end solutions designed to get you to market as fast as possible.

### [üåê Website](https://github.com/payloadcms/payload/tree/main/templates/website)

Build any kind of website, blog, or portfolio from small to enterprise. Comes with a fully functional front-end built with RSCs and Tailwind.

We&#039;re constantly adding more templates to our [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates). If you maintain your own template, consider adding the `payload-template` topic to your GitHub repository for others to find.

- [Official Templates](https://github.com/payloadcms/payload/tree/main/templates)
- [Community Templates](https://github.com/topics/payload-template)

## ‚ú® Features

- Completely free and open-source
- Next.js native, built to run inside _your_ `/app` folder
- Use server components to extend Payload UI
- Query your database directly in server components, no need for REST / GraphQL
- Fully TypeScript with automatic types for your data
- [Auth out of the box](https://payloadcms.com/docs/authentication/overview)
- [Versions and drafts](https://payloadcms.com/docs/versions/overview)
- [Localization](https://payloadcms.com/docs/configuration/localization)
- [Block-based layout builder](https://payloadcms.com/docs/fields/blocks)
- [Customizable React admin](https://payloadcms.com/docs/admin/overview)
- [Lexical rich text editor](https://payloadcms.com/docs/fields/rich-text)
- [Conditional field logic](https://payloadcms.com/docs/fields/overview#conditional-logic)
- Extremely granular [Access Control](https://payloadcms.com/docs/access-control/overview)
- [Document and field-level hooks](https://payloadcms.com/docs/hooks/overview) for every action Payload provides
- Intensely fast API
- Highly secure thanks to HTTP-only cookies, CSRF protection, and more

&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/payloadcms/payload/discussions&quot;&gt;&lt;strong&gt;Request Feature&lt;/strong&gt;&lt;/a&gt;

## üóíÔ∏è Documentation

Check out the [Payload website](https://payloadcms.com/docs/getting-started/what-is-payload) to find in-depth documentation for everything that Payload offers.

Migrating from v2 to v3? Check out the [3.0 Migration Guide](https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx) on how to do it.

## üôã Contributing

If you want to add contributions to this repository, please follow the instructions in [contributing.md](./CONTRIBUTING.md).

## üìö Examples

The [Examples Directory](./examples) is a great resource for learning how to setup Payload in a variety of different ways, but you can also find great examples in our blog and throughout our social media.

If you&#039;d like to run the examples, you can use `create-payload-app` to create a project from one:

```sh
npx create-payload-app --example example_name
```

You can see more examples at:

- [Examples Directory](./examples)
- [Payload Blog](https://payloadcms.com/blog)
- [Payload YouTube](https://www.youtube.com/@payloadcms)

## üîå Plugins

Payload is highly extensible and allows you to install or distribute plugins that add or remove functionality. There are both officially-supported and community-supported plugins available. If you maintain your own plugin, consider adding the `payload-plugin` topic to your GitHub repository for others to find.

- [Official Plugins](https://github.com/orgs/payloadcms/repositories?q=topic%3Apayload-plugin)
- [Community Plugins](https://github.com/topics/payload-plugin)

## üö® Need help?

There are lots of good conversations and resources in our Github Discussions board and our Discord Server. If you&#039;re struggling with something, chances are, someone&#039;s already solved what you&#039;re up against. :point_down:

- [GitHub Discussions](https://github.com/payloadcms/payload/discussions)
- [GitHub Issues](https://github.com/payloadcms/payload/issues)
- [Discord](https://t.co/30APlsQUPB)
- [Community Help](https://payloadcms.com/community-help)

## ‚≠ê Like what we&#039;re doing? Give us a star

![payload-github-star](https://cms.payloadcms.com/media/payload-github-star.gif)

## üëè Thanks to all our contributors

&lt;img align=&quot;left&quot; src=&quot;https://contributors-img.web.app/image?repo=payloadcms/payload&quot;/&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[DefinitelyTyped/DefinitelyTyped]]></title>
            <link>https://github.com/DefinitelyTyped/DefinitelyTyped</link>
            <guid>https://github.com/DefinitelyTyped/DefinitelyTyped</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:54 GMT</pubDate>
            <description><![CDATA[The repository for high quality TypeScript type definitions.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped/DefinitelyTyped</a></h1>
            <p>The repository for high quality TypeScript type definitions.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 50,120</p>
            <p>Forks: 30,463</p>
            <p>Stars today: 8 stars today</p>
            <h2>README</h2><pre># Definitely Typed

&gt; The repository for _high quality_ TypeScript type definitions.

_You can also read this README in [Espa√±ol](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.es.md), [ÌïúÍµ≠Ïñ¥](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ko.md), [–†—É—Å—Å–∫–∏–π](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ru.md), [ÁÆÄ‰Ωì‰∏≠Êñá](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.zh-Hans.md), [Portugu√™s](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.pt.md), [Italiano](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.it.md), [Êó•Êú¨Ë™û](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.ja.md) and [Fran√ßais](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.fr.md)!_

_Link to [Admin manual](./docs/admin.md)_

## !!! Important! This repo has recently changed layout! !!!

Definitely Typed has recently changed to a proper `pnpm` monorepo; you may want to reread this document for changes to the layout of packages in this repo.

At the very least, you may want to `git clean -fdx` the repo (or `node ./scripts/clean-node-modules.js` on Windows) to clean up `node_modules` and run `pnpm install --filter .` to install the workspace root. See further sections for more info on `pnpm install`.

## Current status

This section tracks the health of the repository and publishing process.
It may be helpful for contributors experiencing any issues with their PRs and packages.

- Most recent build [type-checked/linted](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint) cleanly: [![Build status](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml/badge.svg?branch=master&amp;event=push)](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml?query=branch%3Amaster+event%3Apush)
- All packages are type-checking/linting cleanly: [![Build status](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml/badge.svg?branch=master&amp;event=schedule)](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/CI.yml?query=branch%3Amaster+event%3Aschedule)
- All packages are being [published to npm](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/publisher) in under an hour and a half: [![Publish Status](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-publisher.yml/badge.svg)](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-publisher.yml)
- [typescript-bot](https://github.com/typescript-bot) has been active on Definitely Typed: [![Activity Status](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-typescript-bot.yml/badge.svg)](https://github.com/DefinitelyTyped/DefinitelyTyped/actions/workflows/watchdog-typescript-bot.yml)
- Current [infrastructure status updates](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/44317)

If anything here seems wrong or any of the above are failing, please let us know in [the Definitely Typed channel on the TypeScript Community Discord server](https://discord.gg/typescript).

## What are declaration files and how do I get them?

See the [TypeScript handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html).

### npm

This is the preferred method. For example:

```sh
npm install --save-dev @types/node
```

To install typings for a scoped module, remove the `@` and add double-underscore after the scope. For example, to install typings for `@babel/preset-env`:

```sh
npm install --save-dev @types/babel__preset-env
```

The types should then be automatically included by the compiler.
You may need to add a `types` reference if you&#039;re not using modules:

```ts
/// &lt;reference types=&quot;node&quot; /&gt;
```

See more in the [handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html).

For an npm package &quot;foo&quot;, typings for it will be at &quot;@types/foo&quot;.

If your package has typings specified using the `types` or `typings` key in its `package.json`, the npm registry will display that the package has available bindings like so:

![image](https://user-images.githubusercontent.com/30049719/228748963-56fabfd1-9101-42c2-9891-b586b775b01e.png)

If you still can&#039;t find the typings, just look for any &quot;.d.ts&quot; files in the package and manually include them with a `/// &lt;reference path=&quot;&quot; /&gt;`.

### Support Window

Definitely Typed only tests packages on versions of TypeScript that are less than 2 years old.

&lt;img src=&quot;docs/support-window.svg#gh-light-mode-only&quot; style=&quot;width:100%&quot;&gt;
&lt;img src=&quot;docs/support-window.svg#gh-dark-mode-only&quot; style=&quot;width:100%&quot;&gt;

&lt;details&gt;
&lt;summary&gt;Older versions of TypeScript&lt;/summary&gt;

`@types` packages have tags for versions of TypeScript that they explicitly support, so you can usually get older versions of packages that predate the 2-year window.
For example, if you run `npm dist-tags @types/react`, you&#039;ll see that TypeScript 2.5 can use types for react@16.0, whereas TypeScript 2.6 and 2.7 can use types for react@16.4:

| Tag    | Version |
| ------ | ------- |
| latest | 16.9.23 |
| ts2.0  | 15.0.1  |
| ...    | ...     |
| ts2.5  | 16.0.36 |
| ts2.6  | 16.4.7  |
| ts2.7  | 16.4.7  |
| ...    | ...     |

#### TypeScript 1.*

- Manually download from the `master` branch of this repository and place them in your project
- ~~[Typings](https://github.com/typings/typings)~~ (use preferred alternatives, typings is deprecated)
- ~~[NuGet](https://nuget.org/packages?q=DefinitelyTyped)~~ (use preferred alternatives, nuget DT type publishing has been turned off)

You may need to add manual [references](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html).

&lt;/details&gt;

## How can I contribute?

Definitely Typed only works because of contributions by users like you!

### Testing

Before you share your improvement with the world, use the types yourself by creating a `typename.d.ts` file in your project and filling out its exports:

```ts
declare module &quot;libname&quot; {
    // Types inside here
    export function helloWorldMessage(): string;
}
```

#### Test editing an existing package

You can edit the types directly in `node_modules/@types/foo/index.d.ts` to validate your changes, then bring the changes to this repo with the steps below.

Alternatively, you can use [module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) to extend existing types from the DT module or use the `declare module` technique above which will override the version in `node_modules`.

#### Adding tests to a new package

Add to your `tsconfig.json`:

```json
&quot;baseUrl&quot;: &quot;types&quot;,
&quot;typeRoots&quot;: [&quot;types&quot;],
```

Create `types/foo/index.d.ts` containing declarations for the module &quot;foo&quot;.
You should now be able to import from `&quot;foo&quot;` in your code and it will route to the new type definition.
Then build _and_ run the code to make sure your type definition actually corresponds to what happens at runtime.

Once you&#039;ve tested your definitions with real code, make a [PR](#make-a-pull-request)
then follow the instructions to [edit an existing package](#edit-an-existing-package) or
[create a new package](#create-a-new-package).

### Make a pull request

Once you&#039;ve tested your package, you can share it on Definitely Typed.

1. [Fork](https://guides.github.com/activities/forking/) this repository.
1. Clone it.
   - The Definitely Typed repo is large; you may want to consider using a [&quot;blobless clone&quot;](https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/#user-content-blobless-clones) to save time and space by passing `--filter=blob:none` when running `git clone`.
1. Install [node](https://nodejs.org/).
1. Run `pnpm install`.
   - `pnpm install` will install the _entire_
     repository, including packages you may not be editing. If you&#039;d like to install only a subset,
     you can run `pnpm install -w --filter &quot;{./types/foo}...&quot;` to install `@types/foo` and all of
     its dependencies. If you need to run tests for packages that _depend_ on `@types/foo`, you can run `pnpm install -w --filter &quot;...{./types/foo}...&quot;` to pull in all related packages for testing.

&gt; [!NOTE]
&gt; If you are using Windows, you may find that `git clean` does not remove the `node_modules` directory or hangs when doing so. If you need to remove `node_modules`, you can run `pnpm clean-node-modules` to reset the repo.

We use a bot to let a large number of pull requests to DefinitelyTyped be handled entirely in a self-service manner. You can read more about [why and how here](https://devblogs.microsoft.com/typescript/changes-to-how-we-manage-definitelytyped/). Here is a handy reference showing the life cycle of a pull request to DT:

&lt;img src=&quot;https://raw.githubusercontent.com/microsoft/DefinitelyTyped-tools/main/packages/mergebot/docs/dt-mergebot-lifecycle.svg&quot;&gt;

#### Edit an existing package

- Make changes. Remember to [edit tests](#my-package-teststs).
  If you make breaking changes, do not forget to [update a major version](#if-a-library-is-updated-to-a-new-major-version-with-breaking-changes-how-should-i-update-its-type-declaration-package).
- [Run `pnpm test &lt;package to test&gt;`](#running-tests).

When you make a PR to edit an existing package, `dt-bot` should @-mention the package&#039;s owners.
If it doesn&#039;t, you can do so yourself in the comment associated with the PR.

#### Create a new package

If you are the library author and your package is written in TypeScript, [bundle the generated declaration files](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html) in your package instead of publishing to Definitely Typed.
You can also generate declaration files from JavaScript files, using JSDoc for type annotations.

If you are adding typings for an npm package, create a directory with the same name.
If the package you are adding typings for is not on npm, make sure the name you choose for it does not conflict with the name of a package on npm.
(You can use `npm info &lt;my-package&gt;` to check for the existence of the `&lt;my-package&gt;` package.)

Your package should have this structure:

| File                                           | Purpose                                                                                              |
| ---------------------------------------------- | ---------------------------------------------------------------------------------------------------- |
| `index.d.ts`                                   | This contains the typings for the package.                                                           |
| [`&lt;my-package&gt;-tests.ts`](#my-package-teststs) | This contains sample code which tests the typings. This code does _not_ run, but it is type-checked. |
| [`tsconfig.json`](#tsconfigjson)               | This allows you to run `tsc` within the package.                                                     |
| [`.eslintrc.json`](#linter-eslintrcjson)       | (Rarely) Needed only to disable lint rules written for eslint.                                       |
| [`package.json`](#packagejson)                 | Contains metadata for the package, including its name, version and dependencies.                     |
| [`.npmignore`](#npmignore)                     | Specifies which files are intended to be included in the package.                                    |

Generate these by running `npx dts-gen --dt --name &lt;my-package&gt; --template module`.
See all options at [dts-gen](https://github.com/microsoft/DefinitelyTyped-tools/tree/main/packages/dts-gen).

If you have `.d.ts` files besides `index.d.ts`, make sure that they are referenced either in `index.d.ts` or the tests.

Definitely Typed members routinely monitor for new PRs, though keep in mind that the number of other PRs may slow things down.

For a good example package, see [base64-js](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/a2ff1d2088143cbacc15786c7f3b0ec67179523c/types/base64-js).

#### Removing a package

When a package [bundles](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html) its own types, types should be removed from Definitely Typed to avoid confusion.

You can remove it by running `pnpm run not-needed &lt;typingsPackageName&gt; &lt;asOfVersion&gt; [&lt;libraryName&gt;]`.

- `&lt;typingsPackageName&gt;`: This is the name of the directory to delete.
- `&lt;asOfVersion&gt;`: A stub will be published to `@types/&lt;typingsPackageName&gt;` with this version. Should be higher than any currently published version and should be a version of `&lt;libraryName&gt;` on npm.
- `&lt;libraryName&gt;`: Name of npm package that replaces the Definitely Typed types. Usually this is identical to `&lt;typingsPackageName&gt;`, in which case you can omit it.

If a package was never on Definitely Typed, it does not need to be added to `notNeededPackages.json`.

#### Running tests

Test your changes by running `pnpm test &lt;package to test&gt;` where `&lt;package to test&gt;` is the name of your package.
You need to run this from the DefinitelyTyped directory because individual package.jsons don&#039;t define test scripts.

This script uses [dtslint](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint) to run the TypeScript compiler against your dts files.

Once you have all your changes ready, use `pnpm run test-all` to see how your changes affect other modules.

##### @arethetypeswrong/cli (`attw`) checks

dtslint includes module format and `package.json` configuration checks from [@arethetypeswrong/cli](https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli). The checks run only if a SemVer-major-compatible implementation package can be found on npm to compare against the DefinitelyTyped package. (DefinitelyTyped packages marked as `nonNpm` in their `package.json` are skipped.)

Many packages currently fail the `attw` checks and need to be fixed. To allow us to make incremental progress, failed `attw` checks do not fail the `dtslint` run when the package is listed in `failingPackages` in [`attw.json`](./attw.json), but they will still be reported in the `pnpm test my-package` output. If you fix the package, remove it from `failingPackages` so that `attw` checks can start failing `dtslint` runs.

All problems reported by `attw` have documentation linked in the output. Some rules of thumb to help avoid problems:

- The `package.json` in the DefinitelyTyped package must have matching `type` and `exports` fields if the implementation package uses them in its `package.json`. For example, if an implementation `package.json` looks like:

  ```json
  {
      &quot;name&quot;: &quot;my-package&quot;,
      &quot;version&quot;: &quot;1.0.1&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;main&quot;: &quot;dist/cjs/index.cjs&quot;,
      &quot;exports&quot;: {
          &quot;.&quot;: {
              &quot;import&quot;: &quot;./dist/esm/index.js&quot;,
              &quot;require&quot;: &quot;./dist/cjs/index.cjs&quot;
          },
          &quot;./subpath&quot;: {
              &quot;import&quot;: &quot;./dist/esm/subpath.js&quot;,
              &quot;require&quot;: &quot;./dist/cjs/subpath.cjs&quot;
          }
      }
  }
  ```

  then the DefinitelyTyped `package.json` should look something like:

  ```json5
  {
      &quot;name&quot;: &quot;@types/my-package&quot;,
      &quot;version&quot;: &quot;1.0.9999&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;types&quot;: &quot;index.d.ts&quot;,
      &quot;exports&quot;: {
          &quot;.&quot;: {
              &quot;import&quot;: &quot;./index.d.ts&quot;,
              &quot;require&quot;: &quot;./index.d.cts&quot;
          },
          &quot;./subpath&quot;: {
              &quot;import&quot;: &quot;./subpath.d.ts&quot;,
               &quot;require&quot;: &quot;./subpath.d.cts&quot;
          }
      }
  }
  ```

  Notice that each `exports` subpath is reflected, and each JavaScript file has a corresponding declaration file with a matching file extension‚Äîa `.d.ts` file types a `.js` file, not a `.mjs` or `.cjs` file!

- When the implementation package uses `module.exports = ...`, the DefinitelyTyped package should use `export =`, not `export default`. (Alternatively, if the `module.exports` is just an object of named properties, the DefinitelyTyped package can use a series of named exports.) The most common obstacle to correcting this problem is confusion about how to export types in addition to the primary export. For example, assume these types are incorrectly using `export default`:

  ```ts
  export interface Options {
      // ...
  }
  export default function doSomething(options: Options): void;
  ```

  Changing the `export default` to an `export =` creates an error:

  ```ts
  export interface Options {
      // ...
  }
  declare function doSomething(options: Options): void;
  export = doSomething;
  // ^^^^^^^^^^^^^^^^^
  // Error: An export assignment cannot be used in a module with other exported elements.
  ```

  To fix this, move the types inside a namespace with the same name as the function:

  ```ts
  declare namespace doSomething {
      export interface Options {
          // ...
      }
  }
  declare function doSomething(options: doSomething.Options): void;
  export = doSomething;
  ```

If you need help fixing a problem, please ask in the DefinitelyTyped channel on the [TypeScript Community Discord server](https://discord.gg/typescript).

#### Naming

If you are adding typings for an npm package, create a directory with the same name.
If the package you are adding typings for is not on npm, set `&quot;nonNpm&quot;: true` in the `package.json`, and make sure the name you choose for it does not conflict with the name of a package on npm.
(You can use `npm info &lt;my-package&gt;` to check for the existence of the `&lt;my-package&gt;` package.)

In rare occasions, `nonNpm` may be set to `&quot;conflict&quot;`, which incidates that there is a package on npm with the same name, but the types intentionally conflict with that package.
This can be true for packages which define an environment like `@types/node` or for dummy packages like `aws-lambda`. Avoid using `&quot;conflict&quot;` where possible.

#### `&lt;my-package&gt;-tests.ts`

There should be a `&lt;my-package&gt;-tests.ts` file, which is considered your test file, along with any `*.ts` files it imports.
If you don&#039;t see any test files in the module&#039;s folder, create a `&lt;my-package&gt;-tests.ts`.
These files are used to validate the API exported from the `*.d.ts` files which are shipped as `@types/&lt;my-package&gt;`.
They do not themselves ship.

Changes to the `*.d.ts` files should include a corresponding `*.ts` file change which shows the API being used, so that someone doesn&#039;t accidentally break code you depend on.
For example, this change to a function in a `.d.ts` file adding a new param to a function:

`index.d.ts`:

```diff
- export function twoslash(body: string): string
+ export function twoslash(body: string, config?: { version: string }): string
```

`&lt;my-package&gt;-tests.ts`:

```diff
import {twoslash} from &quot;./&quot;

// $ExpectType string
const result = twoslash(&quot;//&quot;)

+ // Handle options param
+ const resultWithOptions = twoslash(&quot;//&quot;, { version: &quot;3.7&quot; })
+ // When the param is incorrect
+ // @ts-expect-error
+ const resultWithOptions = twoslash(&quot;//&quot;, {  })
```

If you&#039;re wondering where to start with test code, the examples in the README of the original package are a great place to start.

You can [validate your changes](#running-tests) with `npm test &lt;package to test&gt;` from the root of this repo, which takes changed files into account.

Use `$ExpectType` to assert that an expression is of a given type and `@ts-expect-error` to assert that a compile error. Examples:

```js
// $ExpectType void
f(1);

// @ts-expect-error
f(&quot;one&quot;);
```

For more details, see [dtslint](https://github.com/Microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint#write-tests) readme.

##### Linter: `.eslintrc.json`

If for some reason a lint rule needs to be disabled, disable it for a specific line:

```ts
// eslint-disable-next-line no-const-enum
const enum Const {
    One,
}
const enum Enum { // eslint-disable-line no-const-enum
    Two,
}
```

You can still disable rules with an .eslintrc.json, but should not in new packages.
Disabling

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[outline/outline]]></title>
            <link>https://github.com/outline/outline</link>
            <guid>https://github.com/outline/outline</guid>
            <pubDate>Fri, 01 Aug 2025 00:05:53 GMT</pubDate>
            <description><![CDATA[The fastest knowledge base for growing teams. Beautiful, realtime collaborative, feature packed, and markdown compatible.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/outline/outline">outline/outline</a></h1>
            <p>The fastest knowledge base for growing teams. Beautiful, realtime collaborative, feature packed, and markdown compatible.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 33,822</p>
            <p>Forks: 2,743</p>
            <p>Stars today: 200 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/31465/34380645-bd67f474-eb0b-11e7-8d03-0151c1730654.png&quot; height=&quot;29&quot; /&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;i&gt;A fast, collaborative, knowledge base for your team built using React and Node.js.&lt;br/&gt;Try out Outline using our hosted version at &lt;a href=&quot;https://www.getoutline.com&quot;&gt;www.getoutline.com&lt;/a&gt;.&lt;/i&gt;
  &lt;br/&gt;
  &lt;img width=&quot;1640&quot; alt=&quot;screenshot&quot; src=&quot;https://user-images.githubusercontent.com/380914/110356468-26374600-7fef-11eb-9f6a-f2cc2c8c6590.png&quot;&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://circleci.com/gh/outline/outline&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/outline/outline.svg?style=shield&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;http://www.typescriptlang.org&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%3C%2F%3E-TypeScript-%230074c1.svg&quot; alt=&quot;TypeScript&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat&quot; alt=&quot;Prettier&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/styled-components/styled-components&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/style-%F0%9F%92%85%20styled--components-orange.svg&quot; alt=&quot;Styled Components&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://translate.getoutline.com/project/outline&quot; alt=&quot;Localized&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/outline/localized.svg&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

This is the source code that runs [**Outline**](https://www.getoutline.com) and all the associated services. If you want to use Outline then you don&#039;t need to run this code, we offer a hosted version of the app at [getoutline.com](https://www.getoutline.com). You can also find documentation on using Outline in [our guide](https://docs.getoutline.com/s/guide).

If you&#039;d like to run your own copy of Outline or contribute to development then this is the place for you.

# Installation

Please see the [documentation](https://docs.getoutline.com/s/hosting/) for running your own copy of Outline in a production configuration.

If you have questions or improvements for the docs please create a thread in [GitHub discussions](https://github.com/outline/outline/discussions).

# Development

There is a short guide for [setting up a development environment](https://docs.getoutline.com/s/hosting/doc/local-development-5hEhFRXow7) if you wish to contribute changes, fixes, and improvements to Outline.

## Contributing

Outline is built and maintained by a small team ‚Äì we&#039;d love your help to fix bugs and add features!

Before submitting a pull request _please_ discuss with the core team by creating or commenting in an issue on [GitHub](https://www.github.com/outline/outline/issues) ‚Äì we&#039;d also love to hear from you in the [discussions](https://www.github.com/outline/outline/discussions). This way we can ensure that an approach is agreed on before code is written. This will result in a much higher likelihood of your code being accepted.

If you‚Äôre looking for ways to get started, here&#039;s a list of ways to help us improve Outline:

- [Translation](docs/TRANSLATION.md) into other languages
- Issues with [`good first issue`](https://github.com/outline/outline/labels/good%20first%20issue) label
- Performance improvements, both on server and frontend
- Developer happiness and documentation
- Bugs and other issues listed on GitHub

## Architecture

If you&#039;re interested in contributing or learning more about the Outline codebase
please refer to the [architecture document](docs/ARCHITECTURE.md) first for a high level overview of how the application is put together.

## Debugging

In development Outline outputs simple logging to the console, prefixed by categories. In production it outputs JSON logs, these can be easily parsed by your preferred log ingestion pipeline.

HTTP logging is disabled by default, but can be enabled by setting the `DEBUG=http` environment variable.

## Tests

We aim to have sufficient test coverage for critical parts of the application and aren&#039;t aiming for 100% unit test coverage. All API endpoints and anything authentication related should be thoroughly tested.

To add new tests, write your tests with [Jest](https://facebook.github.io/jest/) and add a file with `.test.js` extension next to the tested code.

```shell
# To run all tests
make test

# To run backend tests in watch mode
make watch
```

Once the test database is created with `make test` you may individually run
frontend and backend tests directly.

```shell
# To run backend tests
yarn test:server

# To run a specific backend test
yarn test:server myTestFile

# To run frontend tests
yarn test:app
```

## Migrations

Sequelize is used to create and run migrations, for example:

```shell
yarn sequelize migration:generate --name my-migration
yarn sequelize db:migrate
```

Or to run migrations on test database:

```shell
yarn sequelize db:migrate --env test
```

# Activity

![Alt](https://repobeats.axiom.co/api/embed/ff2e4e6918afff1acf9deb72d1ba6b071d586178.svg &quot;Repobeats analytics image&quot;)

# License

Outline is [BSL 1.1 licensed](LICENSE).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
    </channel>
</rss>