<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for typescript - TypeScript Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for typescript.</description>
        <lastBuildDate>Fri, 27 Jun 2025 00:05:27 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[mui/base-ui]]></title>
            <link>https://github.com/mui/base-ui</link>
            <guid>https://github.com/mui/base-ui</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:27 GMT</pubDate>
            <description><![CDATA[Unstyled UI components for building accessible web apps and design systems. From the creators of Radix, Floating UI, and Material UI.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/mui/base-ui">mui/base-ui</a></h1>
            <p>Unstyled UI components for building accessible web apps and design systems. From the creators of Radix, Floating UI, and Material UI.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 3,751</p>
            <p>Forks: 152</p>
            <p>Stars today: 147 stars today</p>
            <h2>README</h2><pre># Base¬†UI

From the creators of Radix, Floating¬†UI, and Material¬†UI, Base¬†UI is an unstyled UI component library for building accessible user interfaces.

---

## Documentation

To get started, check out the [Base¬†UI documentation](https://base-ui.com/react/overview/quick-start).

## Contributing

Read our [contributing guide](/CONTRIBUTING.md) to learn about our development process, how to propose bug fixes and improvements, and how to build and test your changes.

## Releases

To see the latest updates, check out the [releases](https://base-ui.com/react/overview/releases).

## Community

- **Discord** For community support, questions, and tips, join our [Discord](https://discord.gg/g6C3hUtuxz).
- **X** To stay up-to-date on new releases and announcements follow [Base¬†UI on X](https://x.com/base_ui).
- **Bluesky** We&#039;re also on [Bluesky](https://bsky.app/profile/base-ui.com).

## Team

- **Colm Tuite** (Radix) [@colmtuite](https://x.com/colmtuite)
- **Vlad Moroz** (Radix) [@vladyslavmoroz](https://x.com/vladyslavmoroz)
- **James Nelson** (Floating¬†UI) [@atomiksdev](https://x.com/atomiksdev)
- **Micha≈Ç Dudak** (Material¬†UI) [@michaldudak](https://x.com/michaldudak)
- **Marija Najdova** (Material¬†UI + Fluent¬†UI) [@marijanajdova](https://x.com/marijanajdova)
- **Albert Yu** (Material¬†UI) [@mj12albert](https://github.com/mj12albert)

## License

This project is licensed under the terms of the [MIT license](/LICENSE).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[twentyhq/twenty]]></title>
            <link>https://github.com/twentyhq/twenty</link>
            <guid>https://github.com/twentyhq/twenty</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:26 GMT</pubDate>
            <description><![CDATA[Building a modern alternative to Salesforce, powered by the community.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/twentyhq/twenty">twentyhq/twenty</a></h1>
            <p>Building a modern alternative to Salesforce, powered by the community.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 29,075</p>
            <p>Forks: 3,402</p>
            <p>Stars today: 203 stars today</p>
            <h2>README</h2><pre>&lt;br /&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.producthunt.com/products/twenty-crm&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/product-hunt-banner-light.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/product-hunt-banner-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/product-hunt-banner-light.png&quot; alt=&quot;Product Hunt Banner&quot; /&gt;
    &lt;/picture&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;br /&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.twenty.com&quot;&gt;
    &lt;img src=&quot;./packages/twenty-website/public/images/core/logo.svg&quot; width=&quot;100px&quot; alt=&quot;Twenty logo&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h2 align=&quot;center&quot; &gt;The #1 Open-Source CRM &lt;/h2&gt;

&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://twenty.com&quot;&gt;üåê Website&lt;/a&gt; ¬∑ &lt;a href=&quot;https://twenty.com/developers&quot;&gt;üìö Documentation&lt;/a&gt; ¬∑ &lt;a href=&quot;https://github.com/orgs/twentyhq/projects/1&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/planner-icon.svg&quot; width=&quot;12&quot; height=&quot;12&quot;/&gt; Roadmap &lt;/a&gt; ¬∑ &lt;a href=&quot;https://discord.gg/cx5n4Jzs57&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/discord-icon.svg&quot; width=&quot;12&quot; height=&quot;12&quot;/&gt; Discord&lt;/a&gt; ¬∑ &lt;a href=&quot;https://www.figma.com/file/xt8O9mFeLl46C5InWwoMrN/Twenty&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/figma-icon.png&quot;  width=&quot;12&quot; height=&quot;12&quot;/&gt;  Figma&lt;/a&gt;&lt;/p&gt; 
&lt;br /&gt;


&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.twenty.com&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/github-cover-dark.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/github-cover-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/github-cover-light.png&quot; alt=&quot;Cover&quot; /&gt;
    &lt;/picture&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;br /&gt;

# Installation 

See:  
üöÄ [Self-hosting](https://twenty.com/developers/section/self-hosting)  
üñ•Ô∏è [Local Setup](https://twenty.com/developers/local-setup)  

# Does the world need another CRM?

We built Twenty for three reasons:

**CRMs are too expensive, and users are trapped.** Companies use locked-in customer data to hike prices. It shouldn&#039;t be that way.

**A fresh start is required to build a better experience.** We can learn from past mistakes and craft a cohesive experience inspired by new UX patterns from tools like Notion, Airtable or Linear.

**We believe in Open-source and community.** Hundreds of developers are already building Twenty together. Once we have plugin capabilities, a whole ecosystem will grow around it.

&lt;br /&gt;

# What You Can Do With Twenty

Please feel free to flag any specific needs you have by creating an issue.   

Below are a few features we have implemented to date:

+ [Personalize layouts with filters, sort, group by, kanban and table views](#personalize-layouts-with-filters-sort-group-by-kanban-and-table-views)
+ [Customize your objects and fields](#customize-your-objects-and-fields)
+ [Create and manage permissions with custom roles](#create-and-manage-permissions-with-custom-roles)
+ [Automate workflow with triggers and actions](#automate-workflow-with-triggers-and-actions)
+ [Emails, calendar events, files, and more](#emails-calendar-events-files-and-more)


## Personalize layouts with filters, sort, group by, kanban and table views

&lt;p align=&quot;center&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/views-dark.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/views-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/views-light.png&quot; alt=&quot;Companies Kanban Views&quot; /&gt;
    &lt;/picture&gt;
&lt;/p&gt;

## Customize your objects and fields

&lt;p align=&quot;center&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/data-model-dark.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/data-model-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/data-model-light.png&quot; alt=&quot;Setting Custom Objects&quot; /&gt;
    &lt;/picture&gt;
&lt;/p&gt;

## Create and manage permissions with custom roles

&lt;p align=&quot;center&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/permissions-dark.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/permissions-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/permissions-light.png&quot; alt=&quot;Permissions&quot; /&gt;
    &lt;/picture&gt;
&lt;/p&gt;

## Automate workflow with triggers and actions

&lt;p align=&quot;center&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/workflows-dark.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/workflows-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/workflows-light.png&quot; alt=&quot;Workflows&quot; /&gt;
    &lt;/picture&gt;
&lt;/p&gt;

## Emails, calendar events, files, and more

&lt;p align=&quot;center&quot;&gt;
    &lt;picture&gt;
      &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/plus-other-features-dark.png&quot; /&gt;
      &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://raw.githubusercontent.com/twentyhq/twenty/refs/heads/main/packages/twenty-website/public/images/readme/plus-other-features-light.png&quot; /&gt;
      &lt;img src=&quot;./packages/twenty-website/public/images/readme/plus-other-features-light.png&quot; alt=&quot;Other Features&quot; /&gt;
    &lt;/picture&gt;
&lt;/p&gt;

&lt;br /&gt;

# Stack
- [TypeScript](https://www.typescriptlang.org/)
- [Nx](https://nx.dev/)
- [NestJS](https://nestjs.com/), with [BullMQ](https://bullmq.io/), [PostgreSQL](https://www.postgresql.org/), [Redis](https://redis.io/)
- [React](https://reactjs.org/), with [Recoil](https://recoiljs.org/), [Emotion](https://emotion.sh/) and [Lingui](https://lingui.dev/)



# Thanks

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.chromatic.com/&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/chromatic.png&quot; height=&quot;30&quot; alt=&quot;Chromatic&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://greptile.com&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/greptile.png&quot; height=&quot;30&quot; alt=&quot;Greptile&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://sentry.io/&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/sentry.png&quot; height=&quot;30&quot; alt=&quot;Sentry&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://crowdin.com/&quot;&gt;&lt;img src=&quot;./packages/twenty-website/public/images/readme/crowdin.png&quot; height=&quot;30&quot; alt=&quot;Crowdin&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

  Thanks to these amazing services that we use and recommend for UI testing (Chromatic), code review (Greptile), catching bugs (Sentry) and translating (Crowdin).


# Join the Community

- Star the repo
- Subscribe to releases (watch -&gt; custom -&gt; releases)
- Follow us on [Twitter](https://twitter.com/twentycrm) or [LinkedIn](https://www.linkedin.com/company/twenty/) 
- Join our [Discord](https://discord.gg/cx5n4Jzs57)
- Improve translations on [Crowdin](https://twenty.crowdin.com/twenty) 
- [Contributions](https://github.com/twentyhq/twenty/contribute) are, of course, most welcome! 
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[AykutSarac/jsoncrack.com]]></title>
            <link>https://github.com/AykutSarac/jsoncrack.com</link>
            <guid>https://github.com/AykutSarac/jsoncrack.com</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:25 GMT</pubDate>
            <description><![CDATA[‚ú® Innovative and open-source visualization application that transforms various data formats, such as JSON, YAML, XML, CSV and more, into interactive graphs.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/AykutSarac/jsoncrack.com">AykutSarac/jsoncrack.com</a></h1>
            <p>‚ú® Innovative and open-source visualization application that transforms various data formats, such as JSON, YAML, XML, CSV and more, into interactive graphs.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 38,378</p>
            <p>Forks: 2,559</p>
            <p>Stars today: 297 stars today</p>
            <h2>README</h2><pre>&lt;!-- PROJECT LOGO --&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/AykutSarac/jsoncrack.com&quot;&gt;
   &lt;img src=&quot;./public/assets/192.png&quot; height=&quot;50&quot; alt=&quot;Logo&quot;&gt;
  &lt;/a&gt;

  &lt;h1 align=&quot;center&quot;&gt;JSON Crack&lt;/h1&gt;

  &lt;p align=&quot;center&quot;&gt;
    The open-source JSON Editor.
    &lt;br /&gt;
    &lt;a href=&quot;https://jsoncrack.com&quot;&gt;&lt;strong&gt;Learn more ¬ª&lt;/strong&gt;&lt;/a&gt;
    &lt;br /&gt;
    &lt;br /&gt;
    &lt;a href=&quot;https://todiagram.com&quot;&gt;ToDiagram&lt;/a&gt;
    ¬∑
    &lt;a href=&quot;https://discord.gg/yVyTtCRueq&quot;&gt;Discord&lt;/a&gt;
    ¬∑
    &lt;a href=&quot;https://jsoncrack.com&quot;&gt;Website&lt;/a&gt;
    ¬∑
    &lt;a href=&quot;https://github.com/AykutSarac/jsoncrack.com/issues&quot;&gt;Issues&lt;/a&gt;
    ¬∑
    &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=AykutSarac.jsoncrack-vscode&quot;&gt;VS Code&lt;/a&gt;
  &lt;/p&gt;
&lt;/p&gt;

&lt;!-- ABOUT THE PROJECT --&gt;

## About the Project

&lt;img width=&quot;100%&quot; alt=&quot;booking-screen&quot; src=&quot;./public/assets/editor.webp&quot;&gt;

## Visualize JSON into interactive graphs

JSON Crack is a tool for visualizing JSON data in a structured, interactive graphs, making it easier to explore, format, and validate JSON. It offers features like converting JSON to other formats (CSV, YAML), generating JSON Schema, executing queries, and exporting visualizations as images. Designed for both readability and usability.

* **Visualizer**: Instantly convert JSON, YAML, CSV, XML, and TOML into interactive graphs or trees in dark or light mode.
* **Convert**: Seamlessly transform data formats, like JSON to CSV or XML to JSON, for easy sharing.
* **Format &amp; Validate**: Beautify and validate JSON, YAML, and CSV for clear and accurate data.
* **Code Generation**: Generate TypeScript interfaces, Golang structs, and JSON Schema.
* **JSON Schema**: Create JSON Schema, mock data, and validate various data formats.
* **Advanced Tools**: Decode JWT, randomize data, and run jq or JSON path queries.
* **Export Image**: Download your visualization as PNG, JPEG, or SVG.
* **Privacy**: All data processing is local; nothing is stored on our servers.

## Recognition

&lt;a href=&quot;https://news.ycombinator.com/item?id=32626873&quot;&gt;
  &lt;img
    style=&quot;width: 250px; height: 54px;&quot; width=&quot;250&quot; height=&quot;54&quot;
    alt=&quot;Featured on Hacker News&quot;
    src=&quot;https://hackernews-badge.vercel.app/api?id=32626873&quot;
  /&gt;
&lt;/a&gt;

&lt;a href=&quot;https://producthunt.com/posts/JSON-Crack?utm_source=badge-featured&amp;utm_medium=badge&amp;utm_souce=badge-jsoncrack&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=332281&amp;theme=light&quot; alt=&quot;JSON Crack | Product Hunt&quot; style=&quot;width: 250px; height: 54px;&quot; width=&quot;250&quot; height=&quot;54&quot; /&gt;&lt;/a&gt;

### Built With

- [Next.js](https://nextjs.org/?ref=jsoncrack.com)
- [React.js](https://reactjs.org/?ref=jsoncrack.com)
- [Reaflow](https://reaflow.dev/?ref=jsoncrack.com)
- [Monaco Editor](https://github.com/suren-atoyan/monaco-react)

## Stay Up-to-Date

JSON Crack officially launched as v1.0 on the 17th of February 2022 and we&#039;ve come a long way so far. Watch **releases** of this repository to be notified of future updates:

&lt;a href=&quot;https://github.com/AykutSarac/jsoncrack.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/AykutSarac/jsoncrack.com&quot; alt=&quot;Star at GitHub&quot; /&gt;&lt;/a&gt;

&lt;!-- GETTING STARTED --&gt;

## Getting Started

To get a local copy up and running, please follow these simple steps.

### Prerequisites

Here is what you need to be able to run JSON Crack.

- Node.js (Version: &gt;=18.x)
- Pnpm _(recommended)_


## Development

### Setup

1. Clone the repo into a public GitHub repository (or fork https://github.com/AykutSarac/jsoncrack.com/fork). If you plan to distribute the code, read the [`LICENSE`](/LICENSE.md) for additional details.

   ```sh
   git clone https://github.com/AykutSarac/jsoncrack.com.git
   ```

2. Go to the project folder

   ```sh
   cd jsoncrack.com
   ```

3. Install packages

   ```sh
   pnpm install
   ```

4. Run the project

   ```sh
   pnpm dev

   # Running on http://localhost:3000/
   ```

### Docker

üê≥ A [`Dockerfile`](Dockerfile) is provided in the root of the repository.
If you want to run JSON Crack locally:

```console
# Build a Docker image with:
docker compose build

# Run locally with `docker-compose`
docker compose up

# Go to http://localhost:8888
```

&lt;!-- LICENSE --&gt;

## License

See [`LICENSE`](/LICENSE.md) for more information.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[Portkey-AI/gateway]]></title>
            <link>https://github.com/Portkey-AI/gateway</link>
            <guid>https://github.com/Portkey-AI/gateway</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:24 GMT</pubDate>
            <description><![CDATA[A blazing fast AI Gateway with integrated guardrails. Route to 200+ LLMs, 50+ AI Guardrails with 1 fast & friendly API.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Portkey-AI/gateway">Portkey-AI/gateway</a></h1>
            <p>A blazing fast AI Gateway with integrated guardrails. Route to 200+ LLMs, 50+ AI Guardrails with 1 fast & friendly API.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 8,293</p>
            <p>Forks: 615</p>
            <p>Stars today: 31 stars today</p>
            <h2>README</h2><pre>
&lt;p align=&quot;right&quot;&gt;
   &lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&quot;./.github/README.cn.md&quot;&gt;‰∏≠Êñá&lt;/a&gt; | &lt;a href=&quot;./.github/README.jp.md&quot;&gt;Êó•Êú¨Ë™û&lt;/a&gt;
&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;

&lt;a href=&quot;https://portkey.sh/report-github&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/siddharthsambharia-portkey/Portkey-Product-Images/refs/heads/main/LLM%20Report%20Campaign%20Frame.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;
&lt;br&gt;

# AI Gateway
#### Route to 250+ LLMs with 1 fast &amp; friendly API

&lt;img src=&quot;https://cfassets.portkey.ai/sdk.gif&quot; width=&quot;550px&quot; alt=&quot;Portkey AI Gateway Demo showing LLM routing capabilities&quot; style=&quot;margin-left:-35px&quot;&gt;

[Docs](https://portkey.wiki/gh-1) | [Enterprise](https://portkey.wiki/gh-2) | [Hosted Gateway](https://portkey.wiki/gh-3) | [Changelog](https://portkey.wiki/gh-4) | [API Reference](https://portkey.wiki/gh-5)


[![License](https://img.shields.io/github/license/Ileriayo/markdown-badges)](./LICENSE)
[![Discord](https://img.shields.io/discord/1143393887742861333)](https://portkey.wiki/gh-6)
[![Twitter](https://img.shields.io/twitter/url/https/twitter/follow/portkeyai?style=social&amp;label=Follow%20%40PortkeyAI)](https://portkey.wiki/gh-7)
[![npm version](https://badge.fury.io/js/%40portkey-ai%2Fgateway.svg)](https://portkey.wiki/gh-8)
[![Better Stack Badge](https://uptime.betterstack.com/status-badges/v1/monitor/q94g.svg)](https://portkey.wiki/gh-9)

&lt;a href=&quot;https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?stackName=portkey-gateway&amp;templateURL=https://portkey-gateway-ec2-quicklaunch.s3.us-east-1.amazonaws.com/portkey-gateway-ec2-quicklaunch.template.yaml&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Deploy_to_EC2-232F3E?style=for-the-badge&amp;logo=amazonwebservices&amp;logoColor=white&quot; alt=&quot;Deploy to AWS EC2&quot; width=&quot;105&quot;/&gt;&lt;/a&gt; [![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/Portkey-AI/gateway)
&lt;/div&gt;

&lt;br/&gt;

The [**AI Gateway**](https://portkey.wiki/gh-10) is designed for fast, reliable &amp; secure routing to 1600+ language, vision, audio, and image models. It is a lightweight, open-source, and enterprise-ready solution that allows you to integrate with any language model in under 2 minutes.

- [x] **Blazing fast** (&lt;1ms latency) with a tiny footprint (122kb)
- [x] **Battle tested**, with over 10B tokens processed everyday
- [x] **Enterprise-ready** with enhanced security, scale, and custom deployments

&lt;br&gt;

#### What can you do with the AI Gateway?
- Integrate with any LLM in under 2 minutes - [Quickstart](#quickstart-2-mins)
- Prevent downtimes through **[automatic retries](https://portkey.wiki/gh-11)** and **[fallbacks](https://portkey.wiki/gh-12)**
- Scale AI apps with **[load balancing](https://portkey.wiki/gh-13)** and **[conditional routing](https://portkey.wiki/gh-14)**
- Protect your AI deployments with **[guardrails](https://portkey.wiki/gh-15)**
- Go beyond text with **[multi-modal capabilities](https://portkey.wiki/gh-16)**
- Finally, explore **[agentic workflow](https://portkey.wiki/gh-17)** integrations

&lt;br&gt;&lt;br&gt;

&gt; [!TIP]
&gt; Starring this repo helps more developers discover the AI Gateway üôèüèª
&gt;
&gt; ![star-2](https://github.com/user-attachments/assets/53597dce-6333-4ecc-a154-eb05532954e4)
&gt; 
&lt;br&gt;


&lt;br&gt;

## Quickstart (2 mins)

### 1. Setup your AI Gateway

```bash
# Run the gateway locally (needs Node.js and npm)
npx @portkey-ai/gateway
```
&gt; The Gateway is running on `http://localhost:8787/v1`
&gt; 
&gt; The Gateway Console is running on `http://localhost:8787/public/`

&lt;sup&gt;
Deployment guides:
&amp;nbsp; &lt;a href=&quot;https://portkey.wiki/gh-18&quot;&gt;&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cfassets.portkey.ai/logo/dew-color.svg&quot; /&gt; Portkey Cloud (Recommended)&lt;/a&gt;
&amp;nbsp; &lt;a href=&quot;./docs/installation-deployments.md#docker&quot;&gt;&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/docker/3776AB&quot; /&gt; Docker&lt;/a&gt;
&amp;nbsp; &lt;a href=&quot;./docs/installation-deployments.md#nodejs-server&quot;&gt;&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/node.js/3776AB&quot; /&gt; Node.js&lt;/a&gt;
&amp;nbsp; &lt;a href=&quot;./docs/installation-deployments.md#cloudflare-workers&quot;&gt;&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/cloudflare/3776AB&quot; /&gt; Cloudflare&lt;/a&gt;
&amp;nbsp; &lt;a href=&quot;./docs/installation-deployments.md#replit&quot;&gt;&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/replit/3776AB&quot; /&gt; Replit&lt;/a&gt;
&amp;nbsp; &lt;a href=&quot;./docs/installation-deployments.md&quot;&gt; Others...&lt;/a&gt;

&lt;/sup&gt;

### 2. Make your first request

&lt;!-- &lt;details open&gt;
&lt;summary&gt;Python Example&lt;/summary&gt; --&gt;
```python
# pip install -qU portkey-ai

from portkey_ai import Portkey

# OpenAI compatible client
client = Portkey(
    provider=&quot;openai&quot;, # or &#039;anthropic&#039;, &#039;bedrock&#039;, &#039;groq&#039;, etc
    Authorization=&quot;sk-***&quot; # the provider API key
)

# Make a request through your AI Gateway
client.chat.completions.create(
    messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;What&#039;s the weather like?&quot;}],
    model=&quot;gpt-4o-mini&quot;
)
```



&lt;sup&gt;Supported Libraries:
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/javascript/3776AB&quot; /&gt; JS](https://portkey.wiki/gh-19)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/python/3776AB&quot; /&gt; Python](https://portkey.wiki/gh-20)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/gnubash/3776AB&quot; /&gt; REST](https://portkey.sh/gh-84)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/openai/3776AB&quot; /&gt; OpenAI SDKs](https://portkey.wiki/gh-21)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/langchain/3776AB&quot; /&gt; Langchain](https://portkey.wiki/gh-22)
&amp;nbsp; [LlamaIndex](https://portkey.wiki/gh-23)
&amp;nbsp; [Autogen](https://portkey.wiki/gh-24)
&amp;nbsp; [CrewAI](https://portkey.wiki/gh-25)
&amp;nbsp; [More..](https://portkey.wiki/gh-26)
&lt;/sup&gt;

On the Gateway Console (`http://localhost:8787/public/`) you can see all of your local logs in one place.

&lt;img src=&quot;https://github.com/user-attachments/assets/362bc916-0fc9-43f1-a39e-4bd71aac4a3a&quot; width=&quot;400&quot; /&gt;


### 3. Routing &amp; Guardrails
`Configs` in the LLM gateway allow you to create routing rules, add reliability and setup guardrails.
```python
config = {
  &quot;retry&quot;: {&quot;attempts&quot;: 5},

  &quot;output_guardrails&quot;: [{
    &quot;default.contains&quot;: {&quot;operator&quot;: &quot;none&quot;, &quot;words&quot;: [&quot;Apple&quot;]},
    &quot;deny&quot;: True
  }]
}

# Attach the config to the client
client = client.with_options(config=config)

client.chat.completions.create(
    model=&quot;gpt-4o-mini&quot;,
    messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Reply randomly with Apple or Bat&quot;}]
)

# This would always response with &quot;Bat&quot; as the guardrail denies all replies containing &quot;Apple&quot;. The retry config would retry 5 times before giving up.
```
&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://portkey.ai/blog/content/images/size/w1600/2024/11/image-15.png&quot; width=600 title=&quot;Request flow through Portkey&#039;s AI gateway with retries and guardrails&quot; alt=&quot;Request flow through Portkey&#039;s AI gateway with retries and guardrails&quot;/&gt;
&lt;/div&gt;

You can do a lot more stuff with configs in your AI gateway. [Jump to examples  ‚Üí](https://portkey.wiki/gh-27)

&lt;br/&gt;

### Enterprise Version (Private deployments)

&lt;sup&gt;

[&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cfassets.portkey.ai/amazon-logo.svg&quot; /&gt; AWS](https://portkey.wiki/gh-28)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cfassets.portkey.ai/azure-logo.svg&quot; /&gt; Azure](https://portkey.wiki/gh-29)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/googlecloud/3776AB&quot; /&gt; GCP](https://portkey.wiki/gh-30)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/redhatopenshift/3776AB&quot; /&gt; OpenShift](https://portkey.wiki/gh-31)
&amp;nbsp; [&lt;img height=&quot;12&quot; width=&quot;12&quot; src=&quot;https://cdn.simpleicons.org/kubernetes/3776AB&quot; /&gt; Kubernetes](https://portkey.wiki/gh-85)

&lt;/sup&gt;

The LLM Gateway&#039;s [enterprise version](https://portkey.wiki/gh-86) offers advanced capabilities for **org management**, **governance**, **security** and [more](https://portkey.wiki/gh-87) out of the box. [View Feature Comparison ‚Üí](https://portkey.wiki/gh-32)

The enterprise deployment architecture for supported platforms is available here - [**Enterprise Private Cloud Deployments**](https://portkey.wiki/gh-33)

&lt;a href=&quot;https://portkey.sh/demo-13&quot;&gt;&lt;img src=&quot;https://portkey.ai/blog/content/images/2024/08/Get-API-Key--5-.png&quot; height=50 alt=&quot;Book an enterprise AI gateway demo&quot; /&gt;&lt;/a&gt;&lt;br/&gt;


&lt;br&gt;

&lt;hr&gt;

### AI Engineering Hours

Join weekly community calls every Friday (8 AM PT) to kickstart your AI Gateway implementation! [Happening every Friday](https://portkey.wiki/gh-35)

&lt;a href=&quot;https://portkey.wiki/gh-35&quot;&gt;&lt;img width=&quot;500&quot; src=&quot;https://github.com/user-attachments/assets/c2885699-f197-4289-b819-21eb839fbae1&quot; /&gt;&lt;/a&gt;

Minutes of Meetings [published here](https://portkey.wiki/gh-36).


&lt;hr&gt;

### LLMs in Prod&#039;25

Insights from analyzing 2 trillion+ tokens, across 90+ regions and 650+ teams in production. What to expect from this report:
- Trends shaping AI adoption and LLM provider growth.
- Benchmarks to optimize speed, cost and reliability.
- Strategies to scale production-grade AI systems.

&lt;a href=&quot;https://portkey.sh/report-github&quot;&gt;&lt;img width=&quot;500&quot; src=&quot;https://raw.githubusercontent.com/siddharthsambharia-portkey/Portkey-Product-Images/refs/heads/main/LLM%20Report%20Campaign%20Image.png&quot; /&gt;&lt;/a&gt;

&lt;a href=&quot;https://portkey.sh/report-github&quot;&gt;**Get the Report**&lt;/a&gt;
&lt;hr&gt;


## Core Features
### Reliable Routing
- &lt;a href=&quot;https://portkey.wiki/gh-37&quot;&gt;**Fallbacks**&lt;/a&gt;: Fallback to another provider or model on failed requests using the LLM gateway. You can specify the errors on which to trigger the fallback. Improves reliability of your application.
- &lt;a href=&quot;https://portkey.wiki/gh-38&quot;&gt;**Automatic Retries**&lt;/a&gt;: Automatically retry failed requests up to 5 times. An exponential backoff strategy spaces out retry attempts to prevent network overload.
- &lt;a href=&quot;https://portkey.wiki/gh-39&quot;&gt;**Load Balancing**&lt;/a&gt;: Distribute LLM requests across multiple API keys or AI providers with weights to ensure high availability and optimal performance.
- &lt;a href=&quot;https://portkey.wiki/gh-40&quot;&gt;**Request Timeouts**&lt;/a&gt;: Manage unruly LLMs &amp; latencies by setting up granular request timeouts, allowing automatic termination of requests that exceed a specified duration.
- &lt;a href=&quot;https://portkey.wiki/gh-41&quot;&gt;**Multi-modal LLM Gateway**&lt;/a&gt;: Call vision, audio (text-to-speech &amp; speech-to-text), and image generation models from multiple providers  ‚Äî all using the familiar OpenAI signature
- &lt;a href=&quot;https://portkey.wiki/gh-42&quot;&gt;**Realtime APIs**&lt;/a&gt;: Call realtime APIs launched by OpenAI through the integrate websockets server.

### Security &amp; Accuracy
- &lt;a href=&quot;https://portkey.wiki/gh-88&quot;&gt;**Guardrails**&lt;/a&gt;: Verify your LLM inputs and outputs to adhere to your specified checks. Choose from the 40+ pre-built guardrails to ensure compliance with security and accuracy standards. You can &lt;a href=&quot;https://portkey.wiki/gh-43&quot;&gt;bring your own guardrails&lt;/a&gt; or choose from our &lt;a href=&quot;https://portkey.wiki/gh-44&quot;&gt;many partners&lt;/a&gt;.
- [**Secure Key Management**](https://portkey.wiki/gh-45): Use your own keys or generate virtual keys on the fly.
- [**Role-based access control**](https://portkey.wiki/gh-46): Granular access control for your users, workspaces and API keys.
- &lt;a href=&quot;https://portkey.wiki/gh-47&quot;&gt;**Compliance &amp; Data Privacy**&lt;/a&gt;: The AI gateway is SOC2, HIPAA, GDPR, and CCPA compliant.

### Cost Management
- [**Smart caching**](https://portkey.wiki/gh-48): Cache responses from LLMs to reduce costs and improve latency. Supports simple and semantic* caching.
- [**Usage analytics**](https://portkey.wiki/gh-49): Monitor and analyze your AI and LLM usage, including request volume, latency, costs and error rates.
- [**Provider optimization***](https://portkey.wiki/gh-89): Automatically switch to the most cost-effective provider based on usage patterns and pricing models.

### Collaboration &amp; Workflows
- &lt;a href=&quot;https://portkey.ai/docs/integrations/agents&quot;&gt;**Agents Support**&lt;/a&gt;: Seamlessly integrate with popular agent frameworks to build complex AI applications. The gateway seamlessly integrates with [Autogen](https://portkey.wiki/gh-50), [CrewAI](https://portkey.wiki/gh-51), [LangChain](https://portkey.wiki/gh-52), [LlamaIndex](https://portkey.wiki/gh-53), [Phidata](https://portkey.wiki/gh-54), [Control Flow](https://portkey.wiki/gh-55), and even [Custom Agents](https://portkey.wiki/gh-56).
- [**Prompt Template Management***](https://portkey.wiki/gh-57): Create, manage and version your prompt templates collaboratively through a universal prompt playground.
&lt;br/&gt;&lt;br/&gt;

&lt;sup&gt;
*&amp;nbsp;Available in hosted and enterprise versions
&lt;/sup&gt;

&lt;br&gt;

## Cookbooks

### ‚òÑÔ∏è Trending
- Use models from [Nvidia NIM](/cookbook/providers/nvidia.ipynb) with AI Gateway
- Monitor [CrewAI Agents](/cookbook/monitoring-agents/CrewAI_with_Telemetry.ipynb) with Portkey!
- Comparing [Top 10 LMSYS Models](/cookbook/use-cases/LMSYS%20Series/comparing-top10-LMSYS-models-with-Portkey.ipynb) with AI Gateway.

### üö® Latest
* [Create Synthetic Datasets using Nemotron](/cookbook/use-cases/Nemotron_GPT_Finetuning_Portkey.ipynb)
* [Use the LLM Gateway with Vercel&#039;s AI SDK](/cookbook/integrations/vercel-ai.md)
* [Monitor Llama Agents with Portkey&#039;s LLM Gateway](/cookbook/monitoring-agents/Llama_Agents_with_Telemetry.ipynb)

[View all cookbooks ‚Üí](https://portkey.wiki/gh-58)
&lt;br/&gt;&lt;br/&gt;

## Supported Providers

Explore Gateway integrations with [45+ providers](https://portkey.wiki/gh-59) and [8+ agent frameworks](https://portkey.wiki/gh-90).

|                                                                                                                            | Provider                                                                                      | Support | Stream |
| -------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- | ------- | ------ |
| &lt;img src=&quot;docs/images/openai.png&quot; width=35 /&gt;                                                                              | [OpenAI](https://portkey.wiki/gh-60)                           | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;docs/images/azure.png&quot; width=35&gt;                                                                                 | [Azure OpenAI](https://portkey.wiki/gh-61)               | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;docs/images/anyscale.png&quot; width=35&gt;                                                                              | [Anyscale](https://portkey.wiki/gh-62) | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/2/2d/Google-favicon-2015.png&quot; width=35&gt;                           | [Google Gemini](https://portkey.wiki/gh-63)             | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;docs/images/anthropic.png&quot; width=35&gt;                                                                             | [Anthropic](https://portkey.wiki/gh-64)                     | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;docs/images/cohere.png&quot; width=35&gt;                                                                                | [Cohere](https://portkey.wiki/gh-65)                           | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://assets-global.website-files.com/64f6f2c0e3f4c5a91c1e823a/654693d569494912cfc0c0d4_favicon.svg&quot; width=35&gt; | [Together AI](https://portkey.wiki/gh-66)                 | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://www.perplexity.ai/favicon.svg&quot; width=35&gt;                                                                 | [Perplexity](https://portkey.wiki/gh-67)                | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://docs.mistral.ai/img/favicon.ico&quot; width=35&gt;                                                               | [Mistral](https://portkey.wiki/gh-68)                      | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://docs.nomic.ai/img/nomic-logo.png&quot; width=35&gt;                                                              | [Nomic](https://portkey.wiki/gh-69)                             | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://files.readme.io/d38a23e-small-studio-favicon.png&quot; width=35&gt;                                              | [AI21](https://portkey.wiki/gh-91)                                    | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://platform.stability.ai/small-logo-purple.svg&quot; width=35&gt;                                                   | [Stability AI](https://portkey.wiki/gh-71)               | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://deepinfra.com/_next/static/media/logo.4a03fd3d.svg&quot; width=35&gt;                                            | [DeepInfra](https://portkey.sh/gh-92)                               | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://ollama.com/public/ollama.png&quot; width=35&gt;                                                                  | [Ollama](https://portkey.wiki/gh-72)                           | ‚úÖ       | ‚úÖ      |
| &lt;img src=&quot;https://novita.ai/favicon.ico&quot; width=35&gt;                                                                         | [Novita AI](https://portkey.wiki/gh-73)                              | ‚úÖ       | ‚úÖ      | `/chat/completions`, `/completions` |


&gt; [View the complete list of 200+ supported models here](https://portkey.wiki/gh-74)
&lt;br&gt;

&lt;br&gt;

## Agents
Gateway seamlessly integrates with popular agent frameworks. [Read the documentation here](https://portkey.wiki/gh-75).


| Framework | Call 200+ LLMs | Advanced Routing | Caching | Logging &amp; Tracing* | Observability* | Prompt Management* |
|------------------------------|--------|-------------|---------|------|---------------|-------------------|
| [Autogen](https://portkey.wiki/gh-93)    | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |
| [CrewAI](https://portkey.wiki/gh-94)             | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |
| [LangChain](https://portkey.wiki/gh-95)             | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |
| [Phidata](https://portkey.wiki/gh-96)             | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |
| [Llama Index](https://portkey.wiki/gh-97)             | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |
| [Control Flow](https://portkey.wiki/gh-98) | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |
| [Build Your Own Agents](https://portkey.wiki/gh-99) | ‚úÖ     | ‚úÖ          | ‚úÖ      | ‚úÖ   | ‚úÖ            | ‚úÖ                |

&lt;br&gt;

*Available on the [hosted app](https://portkey.wiki/gh-76). For detailed documentation [click here](https://portkey.wiki/gh-100).


## Gateway Enterprise Version
Make your AI app more &lt;ins&gt;reliable&lt;/ins&gt; and &lt;ins&gt;forward compatible&lt;/ins&gt;, while ensuring complete &lt;ins&gt;data security&lt;/ins&gt; and &lt;ins&gt;privacy&lt;/ins&gt;.

‚úÖ&amp;nbsp; Secure Key Management - for role-based access control and tracking &lt;br&gt;
‚úÖ&amp;nbsp; Simple &amp; Semantic Caching - to serve repeat queries faster &amp; save costs &lt;br&gt;
‚úÖ&amp;nbsp; Access Control &amp; Inbound Rules - to control which IPs and Geos can connect to your deployments &lt;br&gt;
‚úÖ&amp;nbsp; PII Redaction - to automatically remove sensitive data from your requests to prevent indavertent exposure &lt;br&gt;
‚úÖ&amp;nbsp; SOC2, ISO, HIPAA, GDPR Compliances - for best security practices &lt;br&gt;
‚úÖ&amp;nbsp; Professional Support - along with feature prioritization &lt;br&gt;

[Schedule a call to discuss enterprise deployments](https://portkey.sh/demo-13)

&lt;br&gt;


## Contributing

The easiest way to contribute is to pick an issue with the `good first issue` tag üí™. Read the contribution guidelines [here](/.github/CONTRIBUTING.md).

Bug Report? [File here](https://portkey.wiki/gh-78) | Feature Request? [File here](https://portkey.wiki/gh-78)


### Getting Started with the Community
Join our weekly AI Engineering Hours every Friday (8 AM PT) to:
- Meet other contributors and community members
- Learn advanced Gateway features and implementation patterns
- Share your experiences and get help
- Stay updated with the latest development priorities

[Join the next session ‚Üí](https://portkey.wiki/gh-101) |

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[vitejs/vite]]></title>
            <link>https://github.com/vitejs/vite</link>
            <guid>https://github.com/vitejs/vite</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:23 GMT</pubDate>
            <description><![CDATA[Next generation frontend tooling. It's fast!]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/vitejs/vite">vitejs/vite</a></h1>
            <p>Next generation frontend tooling. It's fast!</p>
            <p>Language: TypeScript</p>
            <p>Stars: 73,766</p>
            <p>Forks: 6,882</p>
            <p>Stars today: 235 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://vite.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
    &lt;img width=&quot;180&quot; src=&quot;https://vite.dev/logo.svg&quot; alt=&quot;Vite logo&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://npmjs.com/package/vite&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/vite.svg&quot; alt=&quot;npm package&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://nodejs.org/en/about/previous-releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/node/v/vite.svg&quot; alt=&quot;node compatibility&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/vitejs/vite/actions/workflows/ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/vitejs/vite/actions/workflows/ci.yml/badge.svg?branch=main&quot; alt=&quot;build status&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://pr.new/vitejs/vite&quot;&gt;&lt;img src=&quot;https://developer.stackblitz.com/img/start_pr_dark_small.svg&quot; alt=&quot;Start new PR in StackBlitz Codeflow&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://chat.vite.dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-discord-blue?style=flat&amp;logo=discord&quot; alt=&quot;discord chat&quot;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;

# Vite ‚ö°

&gt; Next Generation Frontend Tooling

- üí° Instant Server Start
- ‚ö°Ô∏è Lightning Fast HMR
- üõ†Ô∏è Rich Features
- üì¶ Optimized Build
- üî© Universal Plugin Interface
- üîë Fully Typed APIs

Vite (French word for &quot;quick&quot;, pronounced [`/vit/`](https://cdn.jsdelivr.net/gh/vitejs/vite@main/docs/public/vite.mp3), like &quot;veet&quot;) is a new breed of frontend build tooling that significantly improves the frontend development experience. It consists of two major parts:

- A dev server that serves your source files over [native ES modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), with [rich built-in features](https://vite.dev/guide/features.html) and astonishingly fast [Hot Module Replacement (HMR)](https://vite.dev/guide/features.html#hot-module-replacement).

- A [build command](https://vite.dev/guide/build.html) that bundles your code with [Rollup](https://rollupjs.org), pre-configured to output highly optimized static assets for production.

In addition, Vite is highly extensible via its [Plugin API](https://vite.dev/guide/api-plugin.html) and [JavaScript API](https://vite.dev/guide/api-javascript.html) with full typing support.

[Read the Docs to Learn More](https://vite.dev).

## Packages

| Package                                         | Version (click for changelogs)                                                                                                    |
| ----------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------- |
| [vite](packages/vite)                           | [![vite version](https://img.shields.io/npm/v/vite.svg?label=%20)](packages/vite/CHANGELOG.md)                                    |
| [@vitejs/plugin-legacy](packages/plugin-legacy) | [![plugin-legacy version](https://img.shields.io/npm/v/@vitejs/plugin-legacy.svg?label=%20)](packages/plugin-legacy/CHANGELOG.md) |
| [create-vite](packages/create-vite)             | [![create-vite version](https://img.shields.io/npm/v/create-vite.svg?label=%20)](packages/create-vite/CHANGELOG.md)               |

## Contribution

See [Contributing Guide](CONTRIBUTING.md).

## License

[MIT](LICENSE).

## Sponsors

&lt;p align=&quot;center&quot;&gt;
  &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/sponsors/yyx990803&quot;&gt;
    &lt;img alt=&quot;sponsors&quot; src=&quot;https://sponsors.vuejs.org/vite.svg?v2&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[lucide-icons/lucide]]></title>
            <link>https://github.com/lucide-icons/lucide</link>
            <guid>https://github.com/lucide-icons/lucide</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:22 GMT</pubDate>
            <description><![CDATA[Beautiful & consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/lucide-icons/lucide">lucide-icons/lucide</a></h1>
            <p>Beautiful & consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 17,846</p>
            <p>Forks: 864</p>
            <p>Stars today: 47 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/lucide-icons/lucide#gh-light-mode-only&quot;&gt;
    &lt;img src=&quot;https://lucide.dev/lucide-logo-repo.svg#gh-light-mode-only&quot; alt=&quot;Lucide - Beautiful &amp; consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons.&quot; width=&quot;480&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/lucide-icons/lucide#gh-dark-mode-only&quot;&gt;
    &lt;img src=&quot;https://lucide.dev/lucide-logo-repo-dark.svg#gh-dark-mode-only&quot; alt=&quot;Lucide - Beautiful &amp; consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons.&quot; width=&quot;480&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/lucide-icons/lucide/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/l/lucide&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://www.figma.com/community/plugin/939567362549682242/Lucide-Icons&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Figma-F24E1E?logo=figma&amp;logoColor=white&quot; alt=&quot;figma installs&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/lucide-icons/lucide/actions/workflows/release.yml&quot;&gt;&lt;img src=&quot;https://github.com/lucide-icons/lucide/actions/workflows/release.yml/badge.svg&quot; alt=&quot;build status&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://discord.gg/EH6nSts&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/723074157486800936?label=chat&amp;logo=discord&amp;logoColor=%23ffffff&amp;colorB=%237289DA&quot; alt=&quot;discord chat&quot;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://lucide.dev/icons/&quot;&gt;Icons&lt;/a&gt;
  ¬∑
  &lt;a href=&quot;https://lucide.dev/guide/&quot;&gt;Guide&lt;/a&gt;
  ¬∑
  &lt;a href=&quot;https://lucide.dev/packages&quot;&gt;Packages&lt;/a&gt;
  ¬∑
  &lt;a href=&quot;https://lucide.dev/license&quot;&gt;License&lt;/a&gt;
  ¬∑
  &lt;a href=&quot;https://lucide.dev/showcase&quot;&gt;Showcase&lt;/a&gt;
&lt;/p&gt;

# Lucide

Lucide is an open-source icon library that provides 1000+ vector (svg) files for displaying icons and symbols in digital and non-digital projects. The library aims to make it easier for designers and developers to incorporate icons into their projects by providing several official [packages](https://lucide.dev/packages) to make it easier to use these icons in your project.

## Packages

| Logo | Package | Version | Downloads | Links |
| ---- | ------- | ------- | --------- | ----- |
| &lt;img src=&quot;https://lucide.dev/framework-logos/js.svg&quot; alt=&quot;JS logo&quot; width=&quot;48&quot;&gt; | **`lucide`** | [![npm](https://img.shields.io/npm/v/lucide)](https://www.npmjs.com/package/lucide) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide) | [Docs](https://lucide.dev/guide/packages/lucide) ¬∑ [Source](./packages/lucide) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/react.svg&quot; alt=&quot;React logo&quot; width=&quot;48&quot;&gt; | **`lucide-react`** | [![npm](https://img.shields.io/npm/v/lucide-react)](https://www.npmjs.com/package/lucide-react) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-react) | [Docs](https://lucide.dev/guide/packages/lucide-react) ¬∑ [Source](./packages/lucide-react) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/vue.svg&quot; alt=&quot;Vue logo&quot; width=&quot;48&quot;&gt; | **`lucide-vue-next`** | [![npm](https://img.shields.io/npm/v/lucide-vue-next)](https://www.npmjs.com/package/lucide-vue-next) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-vue-next) | [Docs](https://lucide.dev/guide/packages/lucide-vue-next) ¬∑ [Source](./packages/lucide-vue-next) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/svelte.svg&quot; alt=&quot;Svelte logo&quot; width=&quot;48&quot;&gt; | **`lucide-svelte`** | [![npm](https://img.shields.io/npm/v/lucide-svelte)](https://www.npmjs.com/package/lucide-svelte) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-svelte) | [Docs](https://lucide.dev/guide/packages/lucide-svelte) ¬∑ [Source](./packages/lucide-svelte) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/solid.svg&quot; alt=&quot;Solid logo&quot; width=&quot;48&quot;&gt; | **`lucide-solid`** | [![npm](https://img.shields.io/npm/v/lucide-solid)](https://www.npmjs.com/package/lucide-solid) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-solid) | [Docs](https://lucide.dev/guide/packages/lucide-solid) ¬∑ [Source](./packages/lucide-solid) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/preact.svg&quot; alt=&quot;Preact logo&quot; width=&quot;48&quot;&gt; | **`lucide-preact`** | [![npm](https://img.shields.io/npm/v/lucide-preact)](https://www.npmjs.com/package/lucide-preact) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-preact) | [Docs](https://lucide.dev/guide/packages/lucide-preact) ¬∑ [Source](./packages/lucide-preact) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/react-native.svg&quot; alt=&quot;React Native logo&quot; width=&quot;48&quot;&gt; | **`lucide-react-native`** | [![npm](https://img.shields.io/npm/v/lucide-react-native)](https://www.npmjs.com/package/lucide-react-native) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-react-native) | [Docs](https://lucide.dev/guide/packages/lucide-react-native) ¬∑ [Source](./packages/lucide-react-native) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/angular.svg&quot; alt=&quot;Angular logo&quot; width=&quot;48&quot;&gt; | **`lucide-angular`** | [![npm](https://img.shields.io/npm/v/lucide-angular)](https://www.npmjs.com/package/lucide-angular) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-angular) | [Docs](https://lucide.dev/guide/packages/lucide-angular) ¬∑ [Source](./packages/lucide-angular) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/astro.svg&quot; alt=&quot;Astro logo&quot; width=&quot;48&quot;&gt; | **`@lucide/astro`** | [![npm](https://img.shields.io/npm/v/@lucide/astro)](https://www.npmjs.com/package/@lucide/astro) | ![NPM Downloads](https://img.shields.io/npm/dw/@lucide/astro) | [Docs](https://lucide.dev/guide/packages/lucide-astro) ¬∑ [Source](./packages/astro) |
| &lt;img src=&quot;https://lucide.dev/framework-logos/svg.svg&quot; alt=&quot;SVG logo&quot; width=&quot;48&quot;&gt; | **`lucide-static`** | [![npm](https://img.shields.io/npm/v/lucide-static)](https://www.npmjs.com/package/lucide-static) | ![NPM Downloads](https://img.shields.io/npm/dw/lucide-static) | [Docs](https://lucide.dev/guide/packages/lucide-static) ¬∑ [Source](./packages/lucide-static) |

### Figma

The lucide figma plugin.

Visit [Figma community page](https://www.figma.com/community/plugin/939567362549682242/Lucide-Icons) to install the plugin.

&lt;img width=&quot;420&quot; src=&quot;https://www.figma.com/community/plugin/939567362549682242/thumbnail&quot; alt=&quot;Figma Lucide Cover&quot;&gt;

## Contributing

For more info on how to contribute please see the [contribution guidelines](https://github.com/lucide-icons/lucide/blob/main/CONTRIBUTING.md).

Caught a mistake or want to contribute to the documentation? [Edit this page on Github](https://github.com/lucide-icons/lucide/blob/main/README.md)

## Community

Join the community on our [Discord](https://discord.gg/EH6nSts) server!

## License

Lucide is totally free for commercial use and personal use, this software is licensed under the [ISC License](https://github.com/lucide-icons/lucide/blob/main/LICENSE).

## Credits

Thank you to all the people who contributed to Lucide!

&lt;a href=&quot;https://github.com/lucide-icons/lucide/graphs/contributors&quot;&gt;

&lt;img src=&quot;https://opencollective.com/lucide-icons/contributors.svg?width=800&quot; /&gt;
&lt;/a&gt;

## Sponsors

&lt;a href=&quot;https://vercel.com?utm_source=lucide&amp;utm_campaign=oss&quot;&gt;
  &lt;img src=&quot;docs/public/vercel.svg&quot; alt=&quot;Powered by Vercel&quot; width=&quot;200&quot; /&gt;
&lt;/a&gt;

&lt;a href=&quot;https://www.digitalocean.com/?refcode=b0877a2caebd&amp;utm_campaign=Referral_Invite&amp;utm_medium=Referral_Program&amp;utm_source=badge&quot;&gt;&lt;img src=&quot;docs/public/digitalocean.svg&quot; width=&quot;200&quot; alt=&quot;DigitalOcean Referral Badge&quot; /&gt;&lt;/a&gt;

### Awesome backers üç∫

&lt;a href=&quot;https://www.scipress.io?utm_source=lucide&quot;&gt;&lt;img src=&quot;docs/public/sponsors/scipress.svg&quot; width=&quot;180&quot; alt=&quot;Scipress sponsor badge&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/pdfme/pdfme&quot;&gt;&lt;img src=&quot;docs/public/sponsors/pdfme.svg&quot; width=&quot;180&quot; alt=&quot;pdfme sponsor badge&quot; /&gt;&lt;/a&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[web-infra-dev/midscene]]></title>
            <link>https://github.com/web-infra-dev/midscene</link>
            <guid>https://github.com/web-infra-dev/midscene</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:21 GMT</pubDate>
            <description><![CDATA[Your AI Operator for Web, Android, Automation & Testing.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/web-infra-dev/midscene">web-infra-dev/midscene</a></h1>
            <p>Your AI Operator for Web, Android, Automation & Testing.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 9,400</p>
            <p>Forks: 626</p>
            <p>Stars today: 31 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;img alt=&quot;Midscene.js&quot;  width=&quot;260&quot; src=&quot;https://github.com/user-attachments/assets/f60de3c1-dd6f-4213-97a1-85bf7c6e79e4&quot;&gt;
&lt;/p&gt;

&lt;h1 align=&quot;center&quot;&gt;Midscene.js&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;

English | [ÁÆÄ‰Ωì‰∏≠Êñá](./README.zh.md)

&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
  Open-source AI Operator for Web, Android, Automation &amp; Testing
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://www.npmjs.com/package/@midscene/web&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@midscene/web?style=flat-square&amp;color=00a8f0&quot; alt=&quot;npm version&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://huggingface.co/ByteDance-Seed/UI-TARS-1.5-7B&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%A4%97-UI%20TARS%20Models-yellow&quot; alt=&quot;hugging face model&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://npm-compare.com/@midscene/web/#timeRange=THREE_YEARS&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/@midscene/web.svg?style=flat-square&amp;color=00a8f0&quot; alt=&quot;downloads&quot; /&gt;&lt;/a&gt;
  &lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg?style=flat-square&amp;color=00a8f0&quot; alt=&quot;License&quot; /&gt;
  &lt;a href=&quot;https://discord.gg/2JyBHxszE4&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1328277792730779648?style=flat-square&amp;color=7289DA&amp;label=Discord&amp;logo=discord&amp;logoColor=white&quot; alt=&quot;discord&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://x.com/midscene_ai&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/midscene_ai?style=flat-square&quot; alt=&quot;twitter&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://deepwiki.com/web-infra-dev/midscene&quot;&gt;
    &lt;img alt=&quot;Ask DeepWiki.com&quot; src=&quot;https://devin.ai/assets/deepwiki-badge.png&quot; style=&quot;height: 18px; vertical-align: middle;&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

## Showcases

| Instruction  | Video |
| :---:  | :---: |
| Use JS code to drive task orchestration, collect information about Jay Chou&#039;s concert, and write it into Google Docs (By UI-TARS model)   | &lt;video src=&quot;https://github.com/user-attachments/assets/75474138-f51f-4c54-b3cf-46d61d059999&quot; height=&quot;300&quot; /&gt;        |
| Control Maps App on Android (By Qwen-2.5-VL model)   | &lt;video src=&quot;https://github.com/user-attachments/assets/1f5bab0e-4c28-44e1-b378-a38809b05a00&quot; height=&quot;300&quot; /&gt;        |
| Using midscene mcp to browse the page (https://www.saucedemo.com/), perform login, add products, place orders, and finally generate test cases based on mcp execution steps and playwright example | &lt;video src=&quot;https://github.com/user-attachments/assets/a95ca353-e50c-4091-85ba-e542f576b6be&quot; height=&quot;300&quot; /&gt;   |

## üí° Features

### Write Automation with Natural Language
- Describe your goals and steps, and Midscene will plan and operate the user interface for you.
- Use Javascript SDK or YAML to write your automation script.

### Web &amp; Mobile App
- **Web Automation üñ•Ô∏è**: Either integrate with [Puppeteer](https://midscenejs.com/integrate-with-puppeteer.html), [Playwright](https://midscenejs.com/integrate-with-playwright.html) or use [Bridge Mode](https://midscenejs.com/bridge-mode-by-chrome-extension.html) to control your desktop browser.
- **Android Automation üì±**: Use [Javascript SDK](https://midscenejs.com/integrate-with-android.html) with adb to control your local Android device.

### Tools
- **Visual Reports for Debugging üéûÔ∏è**: Through our test reports and Playground, you can easily understand, replay and debug the entire process.
- [**Caching for Efficiency üîÑ**](https://midscenejs.com/caching.html): Replay your script with cache and get the result faster.
- [**MCP üîó**](https://midscenejs.com/mcp.html): Allows other MCP Clients to directly use Midscene&#039;s capabilities.

### Three kinds of APIs
- [Interaction API üîó](https://midscenejs.com/api.html#interaction-methods): interact with the user interface.
- [Data Extraction API üîó](https://midscenejs.com/api.html#data-extraction): extract data from the user interface and dom.
- [Utility API üîó](https://midscenejs.com/api.html#more-apis): utility functions like `aiAssert()`, `aiLocate()`, `aiWaitFor()`.

## üëâ Zero-code Quick Experience

- **[Chrome Extension](https://midscenejs.com/quick-experience.html)**: Start in-browser experience immediately through [the Chrome Extension](https://midscenejs.com/quick-experience.html), without writing any code.
- **[Android Playground](https://midscenejs.com/quick-experience-with-android.html)**: There is also a built-in Android playground to control your local Android device.

## ‚ú® Model Choices

Midscene.js supports both multimodal LLMs like `gpt-4o`, and visual-language models like `Qwen2.5-VL`, `Doubao-1.5-thinking-vision-pro`, `gemini-2.5-pro` and `UI-TARS`. 

Visual-language models are recommended for UI automation.

Read more about [Choose a model](https://midscenejs.com/choose-a-model)

## üí° Two Styles of Automation

### Auto Planning

Midscene will automatically plan the steps and execute them. It may be slower and heavily rely on the quality of the AI model.

```javascript
await aiAction(&#039;click all the records one by one. If one record contains the text &quot;completed&quot;, skip it&#039;);
```

### Workflow Style

Split complex logic into multiple steps to improve the stability of the automation code.

```javascript
const recordList = await agent.aiQuery(&#039;string[], the record list&#039;)
for (const record of recordList) {
  const hasCompleted = await agent.aiBoolean(`check if the record contains the text &quot;completed&quot;`)
  if (!hasCompleted) {
    await agent.aiTap(record)
  }
}
```

&gt; For more details about the workflow style, please refer to [Blog - Use JavaScript to Optimize the AI Automation Code](https://midscenejs.com/blog-programming-practice-using-structured-api.html)


## üëÄ Comparing to other projects

There are so many UI automation tools out there, and each one seems to be all-powerful. What&#039;s special about Midscene.js?

* **Debugging Experience**: You will soon realize that debugging and maintaining automation scripts is the real challenge. No matter how magical the demo looks, ensuring stability over time requires careful debugging. Midscene.js offers a visualized report file, a built-in playground, and a Chrome Extension to simplify the debugging process. These are the tools most developers truly need, and we&#039;re continually working to improve the debugging experience.

* **Open Source, Free, Deploy as you want**: Midscene.js is an open-source project. It&#039;s decoupled from any cloud service and model provider, you can choose either public or private deployment. There is always a suitable plan for your business.

* **Integrate with Javascript**: You can always bet on Javascript üòé

## üìÑ Resources 

* Home Page and Documentation: [https://midscenejs.com](https://midscenejs.com/)
* Sample Projects: [https://github.com/web-infra-dev/midscene-example](https://github.com/web-infra-dev/midscene-example)
* API Reference: [https://midscenejs.com/api.html](https://midscenejs.com/api.html)
* GitHub: [https://github.com/web-infra-dev/midscene](https://github.com/web-infra-dev/midscene)

## ü§ù Community

* [Discord](https://discord.gg/2JyBHxszE4)
* [Follow us on X](https://x.com/midscene_ai)
* [Lark Group(È£û‰π¶‰∫§ÊµÅÁæ§)](https://applink.larkoffice.com/client/chat/chatter/add_by_link?link_token=291q2b25-e913-411a-8c51-191e59aab14d)


## üìù Credits

We would like to thank the following projects:

- [Rsbuild](https://github.com/web-infra-dev/rsbuild) for the build tool.
- [UI-TARS](https://github.com/bytedance/ui-tars) for the open-source agent model UI-TARS.
- [Qwen2.5-VL](https://github.com/QwenLM/Qwen2.5-VL) for the open-source VL model Qwen2.5-VL.
- [scrcpy](https://github.com/Genymobile/scrcpy) and [yume-chan](https://github.com/yume-chan) allow us to control Android devices with browser.
- [appium-adb](https://github.com/appium/appium-adb) for the javascript bridge of adb.
- [YADB](https://github.com/ysbing/YADB) for the yadb tool which improves the performance of text input.
- [Puppeteer](https://github.com/puppeteer/puppeteer) for browser automation and control.
- [Playwright](https://github.com/microsoft/playwright) for browser automation and control and testing.

## üìù Citation

If you use Midscene.js in your research or project, please cite:

```bibtex
@software{Midscene.js,
  author = {Xiao Zhou, Tao Yu, YiBing Lin},
  title = {Midscene.js: Your AI Operator for Web, Android, Automation &amp; Testing.},
  year = {2025},
  publisher = {GitHub},
  url = {https://github.com/web-infra-dev/midscene}
}
```


## üìù License

Midscene.js is [MIT licensed](https://github.com/web-infra-dev/midscene/blob/main/LICENSE).

---

&lt;div align=&quot;center&quot;&gt;
  If this project helps you or inspires you, please give us a ‚≠êÔ∏è
&lt;/div&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[Effect-TS/effect]]></title>
            <link>https://github.com/Effect-TS/effect</link>
            <guid>https://github.com/Effect-TS/effect</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:20 GMT</pubDate>
            <description><![CDATA[Build production-ready applications in TypeScript]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/Effect-TS/effect">Effect-TS/effect</a></h1>
            <p>Build production-ready applications in TypeScript</p>
            <p>Language: TypeScript</p>
            <p>Stars: 9,869</p>
            <p>Forks: 347</p>
            <p>Stars today: 40 stars today</p>
            <h2>README</h2><pre># Effect Monorepo

&gt; An ecosystem of tools to build robust applications in TypeScript

## Introduction

Welcome to Effect, a powerful TypeScript framework that provides a fully-fledged functional effect system with a rich standard library.

Effect consists of several packages that work together to help build robust TypeScript applications. The core package, `effect`, serves as the foundation of the framework, offering primitives for managing side effects, ensuring type safety, and supporting concurrency.

## Monorepo Structure

The Effect monorepo is organized into multiple packages, each extending the core functionality. Below is an overview of the packages included:

| Package                           | Description                                                                                 |                                                                                                    |
| --------------------------------- | ------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |
| `effect`                          | Core package                                                                                | [README](https://github.com/Effect-TS/effect/blob/main/packages/effect/README.md)                  |
| `@effect/ai`                      | AI utilities                                                                                | [README](https://github.com/Effect-TS/effect/blob/main/packages/ai/ai/README.md)                   |
| `@effect/ai-openai`               | OpenAI utilities                                                                            | [README](https://github.com/Effect-TS/effect/blob/main/packages/ai/openai/README.md)               |
| `@effect/ai-anthropic`            | Anthropic utilities                                                                         | [README](https://github.com/Effect-TS/effect/blob/main/packages/ai/anthropic/README.md)            |
| `@effect/cli`                     | CLI utilities                                                                               | [README](https://github.com/Effect-TS/effect/blob/main/packages/cli/README.md)                     |
| `@effect/cluster`                 | Distributed computing tools                                                                 | [README](https://github.com/Effect-TS/effect/blob/main/packages/cluster/README.md)                 |
| `@effect/cluster-browser`         | Cluster utilities for the browser                                                           | [README](https://github.com/Effect-TS/effect/blob/main/packages/cluster-browser/README.md)         |
| `@effect/cluster-node`            | Cluster utilities for [Node.js](https://nodejs.org)                                         | [README](https://github.com/Effect-TS/effect/blob/main/packages/cluster-node/README.md)            |
| `@effect/cluster-workflow`        | Workflow management for clusters                                                            | [README](https://github.com/Effect-TS/effect/blob/main/packages/cluster-worflow/README.md)         |
| `@effect/experimental`            | Experimental features and APIs                                                              | [README](https://github.com/Effect-TS/effect/blob/main/packages/experimental/README.md)            |
| `@effect/opentelemetry`           | [OpenTelemetry](https://opentelemetry.io/) integration                                      | [README](https://github.com/Effect-TS/effect/blob/main/packages/opentelemetry/README.md)           |
| `@effect/platform`                | Cross-platform runtime utilities                                                            | [README](https://github.com/Effect-TS/effect/blob/main/packages/platform/README.md)                |
| `@effect/platform-browser`        | Platform utilities for the browser                                                          | [README](https://github.com/Effect-TS/effect/blob/main/packages/platform-browser/README.md)        |
| `@effect/platform-bun`            | Platform utilities for [Bun](https://bun.sh/)                                               | [README](https://github.com/Effect-TS/effect/blob/main/packages/platform-bun/README.md)            |
| `@effect/platform-node`           | Platform utilities for [Node.js](https://nodejs.org)                                        | [README](https://github.com/Effect-TS/effect/blob/main/packages/platform-node/README.md)           |
| `@effect/platform-node-shared`    | Shared utilities for [Node.js](https://nodejs.org)                                          | [README](https://github.com/Effect-TS/effect/blob/main/packages/platform-node-shared/README.md)    |
| `@effect/printer`                 | General-purpose printing utilities                                                          | [README](https://github.com/Effect-TS/effect/blob/main/packages/printer/README.md)                 |
| `@effect/printer-ansi`            | ANSI-compatible printing utilities                                                          | [README](https://github.com/Effect-TS/effect/blob/main/packages/printer-ansi/README.md)            |
| `@effect/rpc`                     | Remote procedure call (RPC) utilities                                                       | [README](https://github.com/Effect-TS/effect/blob/main/packages/rpc/README.md)                     |
| `@effect/rpc-http`                | HTTP-based RPC utilities                                                                    | [README](https://github.com/Effect-TS/effect/blob/main/packages/rpc-http/README.md)                |
| `@effect/sql`                     | SQL database utilities                                                                      | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql/README.md)                     |
| `@effect/sql-clickhouse`          | An `@effect/sql` implementation for [ClickHouse](https://clickhouse.com/).                  | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-clickhouse/README.md)          |
| `@effect/sql-d1`                  | An `@effect/sql` implementation for [Cloudflare D1](https://developers.cloudflare.com/d1/). | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-d1/README.md)                  |
| `@effect/sql-drizzle`             | An `@effect/sql` implementation for [Drizzle](https://orm.drizzle.team/).                   | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-drizzle/README.md)             |
| `@effect/sql-kysely`              | An `@effect/sql` implementation for [Kysely](https://kysely.dev/).                          | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-kysely/README.md)              |
| `@effect/sql-libsql`              | An `@effect/sql` implementation using the `@libsql/client` library.                         | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-libsql/README.md)              |
| `@effect/sql-mssql`               | An `@effect/sql` implementation using the mssql `tedious` library.                          | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-mssql/README.md)               |
| `@effect/sql-mysql2`              | An `@effect/sql` implementation using the `mysql2` library.                                 | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-mysql2/README.md)              |
| `@effect/sql-pg`                  | An `@effect/sql` implementation using the `postgres.js` library.                            | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-pg/README.md)                  |
| `@effect/sql-sqlite-bun`          | An `@effect/sql` implementation using the `bun:sqlite` library.                             | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-sqlite-bun/README.md)          |
| `@effect/sql-sqlite-do`           | An `@effect/sql` implementation for Cloudflare Durable Objects sqlite storage.              | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-sqlite-do/README.md)           |
| `@effect/sql-sqlite-node`         | An `@effect/sql` implementation using the `better-sqlite3` library.                         | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-sqlite-node/README.md)         |
| `@effect/sql-sqlite-react-native` | An `@effect/sql` implementation using the `react-native-quick-sqlite` library.              | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-sqlite-react-native/README.md) |
| `@effect/sql-sqlite-wasm`         | An `@effect/sql` implementation using the `@sqlite.org/sqlite-wasm` library.                | [README](https://github.com/Effect-TS/effect/blob/main/packages/sql-sqlite-wasm/README.md)         |
| `@effect/typeclass`               | Functional programming type classes                                                         | [README](https://github.com/Effect-TS/effect/blob/main/packages/typeclass/README.md)               |
| `@effect/vitest`                  | Testing utilities for [Vitest](https://vitest.dev/)                                         | [README](https://github.com/Effect-TS/effect/blob/main/packages/vitest/README.md)                  |

# Documentation

## Website

For detailed information and usage examples, visit the [Effect website](https://www.effect.website/).

## API Reference

For a complete API reference of the core package `effect`, see the [Effect API documentation](https://effect-ts.github.io/effect/).

## Introduction to Effect

Get started with Effect by watching our introductory video on YouTube. This video provides an overview of Effect and its key features:

[![Introduction to Effect](https://img.youtube.com/vi/ViSiXfBKElQ/maxresdefault.jpg)](https://youtu.be/ViSiXfBKElQ)

# Connect with Our Community

Join the Effect community on Discord to connect with other developers, ask questions, and share insights: [Join Effect&#039;s Discord Community](https://discord.gg/hdt7t7jpvn).

# Contributing via Pull Requests

We welcome contributions via pull requests! Here are some guidelines to help you get started:

## Setting Up Your Environment

Begin by forking the repository and clone it to your local machine.

Navigate into the cloned repository and create a new branch for your changes:

```bash
git checkout -b my-branch
```

Ensure all required dependencies are installed by running:

```bash
pnpm install  # Requires pnpm version 10.4.0
```

## Making Changes

### Implement Your Changes

Make the changes you propose to the codebase. If your changes impact functionality, please **add corresponding tests** to validate your updates.

### Validate Your Changes

Run the following commands to ensure your changes do not introduce any issues:

- `pnpm codegen` (optional): Re-generate the package entrypoints in case you have changed the structure of a package or introduced a new module.
- `pnpm check`: Confirm that the code compiles without errors.
- `pnpm test`: Execute all unit tests to ensure your changes haven&#039;t broken existing functionality.
- `pnpm circular`: Check for any circular dependencies in imports.
- `pnpm lint`: Ensure the code adheres to our coding standards.
  - If you encounter style issues, use `pnpm lint-fix` to automatically correct some of these.
- `pnpm test-types`: Run type-level tests. Tests are written using [tstyche](https://tstyche.org/).
- `pnpm docgen`: Ensure the documentation generates correctly and reflects any changes made.

### Document Your Changes

#### JSDoc Comments

When adding a new feature, it&#039;s important to document your code using JSDoc comments. This helps other developers understand the purpose and usage of your changes. Include at least the following in your JSDoc comments:

- **A Short Description**: Summarize the purpose and functionality of the feature.
- **Example**: Provide a usage example under the `@example` tag to demonstrate how to use the feature.
- **Since Version**: Use the `@since` tag to indicate the version in which the feature was introduced. If you&#039;re unsure about the version, please consult with a project maintainer.
- **Category (Optional)**: You can categorize the feature with the `@category` tag to help organize the documentation. If you&#039;re unsure about what category to assign, ask a project maintainer.

**Note**: A HTML utility file, [`code2jsdoc-example.html`](/scripts/jsdocs/code2jsdoc-example.html), has been added to assist with creating JSDoc `@example` comments. This web-based interface includes two text areas:

1. An input textarea for pasting example code.
2. An output textarea that dynamically generates formatted JSDoc `@example` comments.

This utility helps ensure consistent formatting and streamlines the process of documenting examples. See the following example of its usage:

Example Input:

```ts
import { Effect } from &quot;effect&quot;

console.log(Effect.runSyncExit(Effect.succeed(1)))
/*
Output:
{
  _id: &quot;Exit&quot;,
  _tag: &quot;Success&quot;,
  value: 1
}
*/
```

Output:

````
*
* @example
* ```ts
* import { Effect } from &quot;effect&quot;
*
* console.log(Effect.runSyncExit(Effect.succeed(1)))
* // Output:
* // {
* //   _id: &quot;Exit&quot;,
* //   _tag: &quot;Success&quot;,
* //   value: 1
* // }
* ```
*
````

By using this utility, you can save time and maintain consistency in your JSDoc comments, especially for complex examples.

#### Changeset Documentation

Before committing your changes, document them with a changeset. This process helps in tracking modifications and effectively communicating them to the project team and users:

```bash
pnpm changeset
```

During the changeset creation process, you will be prompted to select the appropriate level for your changes:

- **patch**: Opt for this if you are making small fixes or minor changes that do not affect the library&#039;s overall functionality.
- **minor**: Choose this for new features that enhance functionality but do not disrupt existing features.
- **major**: Select this for any changes that result in backward-incompatible modifications to the library.

## Finalizing Your Contribution

### Commit Your Changes

Once you have documented your changes with a changeset, it‚Äôs time to commit them to the repository. Use a clear and descriptive commit message, which could be the same message you used in your changeset:

```bash
git commit -am &#039;Add some feature&#039;
```

#### Linking to Issues

If your commit addresses an open issue, reference the issue number directly in your commit message. This helps to link your contribution clearly to specific tasks or bug reports. Additionally, if your commit resolves the issue, you can indicate this by adding a phrase like `&quot;, closes #&lt;issue-number&gt;&quot;`. For example:

```bash
git commit -am &#039;Add some feature, closes #123&#039;
```

This practice not only helps in tracking the progress of issues but also automatically closes the issue when the commit is merged, streamlining project management.

### Push to Your Fork

Push the changes up to your GitHub fork:

```bash
git push origin my-branch
```

### Create a Pull Request

Open a pull request against the appropriate branch on the original repository:

- `main` branch: For minor patches or bug fixes.
- `next-minor` branch: For new features that are non-breaking.
- `next-major` branch: For changes that introduce breaking modifications.

Please be patient! We will do our best to review your pull request as soon as possible.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[renovatebot/renovate]]></title>
            <link>https://github.com/renovatebot/renovate</link>
            <guid>https://github.com/renovatebot/renovate</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:19 GMT</pubDate>
            <description><![CDATA[Home of the Renovate CLI: Cross-platform Dependency Automation by Mend.io]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/renovatebot/renovate">renovatebot/renovate</a></h1>
            <p>Home of the Renovate CLI: Cross-platform Dependency Automation by Mend.io</p>
            <p>Language: TypeScript</p>
            <p>Stars: 19,251</p>
            <p>Forks: 2,632</p>
            <p>Stars today: 8 stars today</p>
            <h2>README</h2><pre>README not available. Either the repository does not have a README or it could not be accessed.</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[blakeblackshear/frigate]]></title>
            <link>https://github.com/blakeblackshear/frigate</link>
            <guid>https://github.com/blakeblackshear/frigate</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:18 GMT</pubDate>
            <description><![CDATA[NVR with realtime local object detection for IP cameras]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/blakeblackshear/frigate">blakeblackshear/frigate</a></h1>
            <p>NVR with realtime local object detection for IP cameras</p>
            <p>Language: TypeScript</p>
            <p>Stars: 23,535</p>
            <p>Forks: 2,197</p>
            <p>Stars today: 15 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;img align=&quot;center&quot; alt=&quot;logo&quot; src=&quot;docs/static/img/frigate.png&quot;&gt;
&lt;/p&gt;

# Frigate - NVR With Realtime Object Detection for IP Cameras

A complete and local NVR designed for [Home Assistant](https://www.home-assistant.io) with AI object detection. Uses OpenCV and Tensorflow to perform realtime object detection locally for IP cameras.

Use of a [Google Coral Accelerator](https://coral.ai/products/) is optional, but highly recommended. The Coral will outperform even the best CPUs and can process 100+ FPS with very little overhead.

- Tight integration with Home Assistant via a [custom component](https://github.com/blakeblackshear/frigate-hass-integration)
- Designed to minimize resource use and maximize performance by only looking for objects when and where it is necessary
- Leverages multiprocessing heavily with an emphasis on realtime over processing every frame
- Uses a very low overhead motion detection to determine where to run object detection
- Object detection with TensorFlow runs in separate processes for maximum FPS
- Communicates over MQTT for easy integration into other systems
- Records video with retention settings based on detected objects
- 24/7 recording
- Re-streaming via RTSP to reduce the number of connections to your camera
- WebRTC &amp; MSE support for low-latency live view

## Documentation

View the documentation at https://docs.frigate.video

## Donations

If you would like to make a donation to support development, please use [Github Sponsors](https://github.com/sponsors/blakeblackshear).

## Screenshots

### Live dashboard
&lt;div&gt;
&lt;img width=&quot;800&quot; alt=&quot;Live dashboard&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/5e713cb9-9db5-41dc-947a-6937c3bc376e&quot;&gt;
&lt;/div&gt;

### Streamlined review workflow
&lt;div&gt;
&lt;img width=&quot;800&quot; alt=&quot;Streamlined review workflow&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/6fed96e8-3b18-40e5-9ddc-31e6f3c9f2ff&quot;&gt;
&lt;/div&gt;

### Multi-camera scrubbing
&lt;div&gt;
&lt;img width=&quot;800&quot; alt=&quot;Multi-camera scrubbing&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/d6788a15-0eeb-4427-a8d4-80b93cae3d74&quot;&gt;
&lt;/div&gt;

### Built-in mask and zone editor
&lt;div&gt;
&lt;img width=&quot;800&quot; alt=&quot;Multi-camera scrubbing&quot; src=&quot;https://github.com/blakeblackshear/frigate/assets/569905/d7885fc3-bfe6-452f-b7d0-d957cb3e31f5&quot;&gt;
&lt;/div&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[grafana/grafana]]></title>
            <link>https://github.com/grafana/grafana</link>
            <guid>https://github.com/grafana/grafana</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:17 GMT</pubDate>
            <description><![CDATA[The open and composable observability and data visualization platform. Visualize metrics, logs, and traces from multiple sources like Prometheus, Loki, Elasticsearch, InfluxDB, Postgres and many more.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/grafana/grafana">grafana/grafana</a></h1>
            <p>The open and composable observability and data visualization platform. Visualize metrics, logs, and traces from multiple sources like Prometheus, Loki, Elasticsearch, InfluxDB, Postgres and many more.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 68,674</p>
            <p>Forks: 12,729</p>
            <p>Stars today: 19 stars today</p>
            <h2>README</h2><pre>![Grafana Logo (Light)](docs/logo-horizontal.png#gh-light-mode-only)
![Grafana Logo (Dark)](docs/logo-horizontal-dark.png#gh-dark-mode-only)

The open-source platform for monitoring and observability

[![License](https://img.shields.io/github/license/grafana/grafana)](LICENSE)
[![Drone](https://drone.grafana.net/api/badges/grafana/grafana/status.svg)](https://drone.grafana.net/grafana/grafana)
[![Go Report Card](https://goreportcard.com/badge/github.com/grafana/grafana)](https://goreportcard.com/report/github.com/grafana/grafana)

Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data-driven culture:

- **Visualizations:** Fast and flexible client side graphs with a multitude of options. Panel plugins offer many different ways to visualize metrics and logs.
- **Dynamic Dashboards:** Create dynamic &amp; reusable dashboards with template variables that appear as dropdowns at the top of the dashboard.
- **Explore Metrics:** Explore your data through ad-hoc queries and dynamic drilldown. Split view and compare different time ranges, queries and data sources side by side.
- **Explore Logs:** Experience the magic of switching from metrics to logs with preserved label filters. Quickly search through all your logs or streaming them live.
- **Alerting:** Visually define alert rules for your most important metrics. Grafana will continuously evaluate and send notifications to systems like Slack, PagerDuty, VictorOps, OpsGenie.
- **Mixed Data Sources:** Mix different data sources in the same graph! You can specify a data source on a per-query basis. This works for even custom datasources.

## Get started

- [Get Grafana](https://grafana.com/get)
- [Installation guides](https://grafana.com/docs/grafana/latest/setup-grafana/installation/)

Unsure if Grafana is for you? Watch Grafana in action on [play.grafana.org](https://play.grafana.org/)!

## Documentation

The Grafana documentation is available at [grafana.com/docs](https://grafana.com/docs/).

## Contributing

If you&#039;re interested in contributing to the Grafana project:

- Start by reading the [Contributing guide](https://github.com/grafana/grafana/blob/HEAD/CONTRIBUTING.md).
- Learn how to set up your local environment, in our [Developer guide](https://github.com/grafana/grafana/blob/HEAD/contribute/developer-guide.md).
- Explore our [beginner-friendly issues](https://github.com/grafana/grafana/issues?q=is%3Aopen+is%3Aissue+label%3A%22beginner+friendly%22).
- Look through our [style guide and Storybook](https://developers.grafana.com/ui/latest/index.html).

## Get involved

- Follow [@grafana on X (formerly Twitter)](https://x.com/grafana/).
- Read and subscribe to the [Grafana blog](https://grafana.com/blog/).
- If you have a specific question, check out our [discussion forums](https://community.grafana.com/).
- For general discussions, join us on the [official Slack](https://slack.grafana.com) team.

This project is tested with [BrowserStack](https://www.browserstack.com/).

## License

Grafana is distributed under [AGPL-3.0-only](LICENSE). For Apache-2.0 exceptions, see [LICENSING.md](https://github.com/grafana/grafana/blob/HEAD/LICENSING.md).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[cline/cline]]></title>
            <link>https://github.com/cline/cline</link>
            <guid>https://github.com/cline/cline</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:16 GMT</pubDate>
            <description><![CDATA[Autonomous coding agent right in your IDE, capable of creating/editing files, executing commands, using the browser, and more with your permission every step of the way.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/cline/cline">cline/cline</a></h1>
            <p>Autonomous coding agent right in your IDE, capable of creating/editing files, executing commands, using the browser, and more with your permission every step of the way.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 46,362</p>
            <p>Forks: 5,881</p>
            <p>Stars today: 104 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;&lt;sub&gt;
English | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/es/README.md&quot; target=&quot;_blank&quot;&gt;Espa√±ol&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/de/README.md&quot; target=&quot;_blank&quot;&gt;Deutsch&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/ja/README.md&quot; target=&quot;_blank&quot;&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/zh-cn/README.md&quot; target=&quot;_blank&quot;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/zh-tw/README.md&quot; target=&quot;_blank&quot;&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/a&gt; | &lt;a href=&quot;https://github.com/cline/cline/blob/main/locales/ko/README.md&quot; target=&quot;_blank&quot;&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;
&lt;/sub&gt;&lt;/div&gt;

# Cline ‚Äì \#1 on OpenRouter

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://media.githubusercontent.com/media/cline/cline/main/assets/docs/demo.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Download on VS Marketplace&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://discord.gg/cline&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://www.reddit.com/r/cline/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;r/cline&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://github.com/cline/cline/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Feature Requests&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;a href=&quot;https://docs.cline.bot/getting-started/for-new-coders&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

Meet Cline (pronounced /kla…™n/, like &quot;Klein&quot;), an AI assistant that can use your **CLI** a**N**d **E**ditor.

Thanks to¬†[Claude 3.7 Sonnet&#039;s agentic coding capabilities](https://www.anthropic.com/claude/sonnet),¬†Cline can handle complex software development tasks step-by-step. With tools that let him create &amp; edit files, explore large projects, use the browser, and execute terminal commands (after you grant permission), he can assist you in ways that go beyond code completion or tech support. Cline can even use the Model Context Protocol (MCP) to create new tools and extend his own capabilities. While autonomous AI scripts traditionally run in sandboxed environments, this extension provides a human-in-the-loop GUI to approve every file change and terminal command, providing a safe and accessible way to explore the potential of agentic AI.

1. Enter your task and add images to convert mockups into functional apps or fix bugs with screenshots.
2. Cline starts by analyzing your file structure &amp; source code ASTs, running regex searches, and reading relevant files to get up to speed in existing projects. By carefully managing what information is added to context, Cline can provide valuable assistance even for large, complex projects without overwhelming the context window.
3. Once Cline has the information he needs, he can:
    - Create and edit files + monitor linter/compiler errors along the way, letting him proactively fix issues like missing imports and syntax errors on his own.
    - Execute commands directly in your terminal and monitor their output as he works, letting him e.g., react to dev server issues after editing a file.
    - For web development tasks, Cline can launch the site in a headless browser, click, type, scroll, and capture screenshots + console logs, allowing him to fix runtime errors and visual bugs.
4. When a task is completed, Cline will present the result to you with a terminal command like¬†`open -a &quot;Google Chrome&quot; index.html`, which you run with a click of a button.

&gt; [!TIP]
&gt; Use the¬†`CMD/CTRL + Shift + P`¬†shortcut to open the command palette and type¬†&quot;Cline: Open In New Tab&quot;¬†to open the extension as a tab in your editor. This lets you use Cline side-by-side with your file explorer, and see how he changes your workspace more clearly.

---

&lt;img align=&quot;right&quot; width=&quot;340&quot; src=&quot;https://github.com/user-attachments/assets/3cf21e04-7ce9-4d22-a7b9-ba2c595e88a4&quot;&gt;

### Use any API and Model

Cline supports API providers like OpenRouter, Anthropic, OpenAI, Google Gemini, AWS Bedrock, Azure, GCP Vertex, and Cerebras. You can also configure any OpenAI compatible API, or use a local model through LM Studio/Ollama. If you&#039;re using OpenRouter, the extension fetches their latest model list, allowing you to use the newest models as soon as they&#039;re available.

The extension also keeps track of total tokens and API usage cost for the entire task loop and individual requests, keeping you informed of spend every step of the way.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;left&quot; width=&quot;370&quot; src=&quot;https://github.com/user-attachments/assets/81be79a8-1fdb-4028-9129-5fe055e01e76&quot;&gt;

### Run Commands in Terminal

Thanks to the new [shell integration updates in VSCode v1.93](https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api), Cline can execute commands directly in your terminal and receive the output. This allows him to perform a wide range of tasks, from installing packages and running build scripts to deploying applications, managing databases, and executing tests, all while adapting to your dev environment &amp; toolchain to get the job done right.

For long running processes like dev servers, use the &quot;Proceed While Running&quot; button to let Cline continue in the task while the command runs in the background. As Cline works he‚Äôll be notified of any new terminal output along the way, letting him react to issues that may come up, such as compile-time errors when editing files.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;right&quot; width=&quot;400&quot; src=&quot;https://github.com/user-attachments/assets/c5977833-d9b8-491e-90f9-05f9cd38c588&quot;&gt;

### Create and Edit Files

Cline can create and edit files directly in your editor, presenting you a diff view of the changes. You can edit or revert Cline&#039;s changes directly in the diff view editor, or provide feedback in chat until you&#039;re satisfied with the result. Cline also monitors linter/compiler errors (missing imports, syntax errors, etc.) so he can fix issues that come up along the way on his own.

All changes made by Cline are recorded in your file&#039;s Timeline, providing an easy way to track and revert modifications if needed.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;left&quot; width=&quot;370&quot; src=&quot;https://github.com/user-attachments/assets/bc2e85ba-dfeb-4fe6-9942-7cfc4703cbe5&quot;&gt;

### Use the Browser

With Claude 3.5 Sonnet&#039;s new [Computer Use](https://www.anthropic.com/news/3-5-models-and-computer-use) capability, Cline can launch a browser, click elements, type text, and scroll, capturing screenshots and console logs at each step. This allows for interactive debugging, end-to-end testing, and even general web use! This gives him autonomy to fixing visual bugs and runtime issues without you needing to handhold and copy-pasting error logs yourself.

Try asking Cline to &quot;test the app&quot;, and watch as he runs a command like `npm run dev`, launches your locally running dev server in a browser, and performs a series of tests to confirm that everything works. [See a demo here.](https://x.com/sdrzn/status/1850880547825823989)

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;right&quot; width=&quot;350&quot; src=&quot;https://github.com/user-attachments/assets/ac0efa14-5c1f-4c26-a42d-9d7c56f5fadd&quot;&gt;

### &quot;add a tool that...&quot;

Thanks to the [Model Context Protocol](https://github.com/modelcontextprotocol), Cline can extend his capabilities through custom tools. While you can use [community-made servers](https://github.com/modelcontextprotocol/servers), Cline can instead create and install tools tailored to your specific workflow. Just ask Cline to &quot;add a tool&quot; and he will handle everything, from creating a new MCP server to installing it into the extension. These custom tools then become part of Cline&#039;s toolkit, ready to use in future tasks.

-   &quot;add a tool that fetches Jira tickets&quot;: Retrieve ticket ACs and put Cline to work
-   &quot;add a tool that manages AWS EC2s&quot;: Check server metrics and scale instances up or down
-   &quot;add a tool that pulls the latest PagerDuty incidents&quot;: Fetch details and ask Cline to fix bugs

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;left&quot; width=&quot;360&quot; src=&quot;https://github.com/user-attachments/assets/7fdf41e6-281a-4b4b-ac19-020b838b6970&quot;&gt;

### Add Context

**`@url`:**¬†Paste in a URL for the extension to fetch and convert to markdown, useful when you want to give Cline the latest docs

**`@problems`:**¬†Add workspace errors and warnings (&#039;Problems&#039; panel) for Cline to fix

**`@file`:**¬†Adds a file&#039;s contents so you don&#039;t have to waste API requests approving read file (+ type to search files)

**`@folder`:**¬†Adds folder&#039;s files all at once to speed up your workflow even more

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

&lt;img align=&quot;right&quot; width=&quot;350&quot; src=&quot;https://github.com/user-attachments/assets/140c8606-d3bf-41b9-9a1f-4dbf0d4c90cb&quot;&gt;

### Checkpoints: Compare and Restore

As Cline works through a task, the extension takes a snapshot of your workspace at each step. You can use the &#039;Compare&#039; button to see a diff between the snapshot and your current workspace, and the &#039;Restore&#039; button to roll back to that point.

For example, when working with a local web server, you can use &#039;Restore Workspace Only&#039; to quickly test different versions of your app, then use &#039;Restore Task and Workspace&#039; when you find the version you want to continue building from. This lets you safely explore different approaches without losing progress.

&lt;!-- Transparent pixel to create line break after floating image --&gt;

&lt;img width=&quot;2000&quot; height=&quot;0&quot; src=&quot;https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929&quot;&gt;&lt;br&gt;

## Contributing

To contribute to the project, start with our [Contributing Guide](CONTRIBUTING.md) to learn the basics. You can also join our [Discord](https://discord.gg/cline) to chat with other contributors in the `#contributors` channel. If you&#039;re looking for full-time work, check out our open positions on our [careers page](https://cline.bot/join-us)!

## License

[Apache 2.0 ¬© 2025 Cline Bot Inc.](./LICENSE)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[wix/react-native-calendars]]></title>
            <link>https://github.com/wix/react-native-calendars</link>
            <guid>https://github.com/wix/react-native-calendars</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:15 GMT</pubDate>
            <description><![CDATA[React Native Calendar Components üóìÔ∏è üìÜ]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/wix/react-native-calendars">wix/react-native-calendars</a></h1>
            <p>React Native Calendar Components üóìÔ∏è üìÜ</p>
            <p>Language: TypeScript</p>
            <p>Stars: 9,966</p>
            <p>Forks: 3,037</p>
            <p>Stars today: 5 stars today</p>
            <h2>README</h2><pre>[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://stand-with-ukraine.pp.ua)

# React Native Calendars üóìÔ∏è üìÜ

## A declarative cross-platform React Native calendar component for iOS and Android.

[![Version](https://img.shields.io/npm/v/react-native-calendars.svg)](https://www.npmjs.com/package/react-native-calendars)
[![Build status](https://badge.buildkite.com/1a911fa39db2518a615b73f3dc18ec0938a66403f2ad66f79b.svg)](https://buildkite.com/wix-mobile-oss/react-native-calendars)
&lt;br&gt;

This module includes information on how to use this customizable **React Native** calendar component.

The package is compatible with both **Android** and **iOS**

&lt;br&gt;

&gt; ### **Official documentation**
&gt;
&gt; This README provides basic examples of how to get started with `react-native-calendars`. For detailed information, refer to the [official documentation site](https://wix.github.io/react-native-calendars/docs/Intro).

## Features ‚ú®

- Pure JS. No Native code required
- Date marking - dot, multi-dot, period, multi-period and custom marking
- Customization of style, content (days, months, etc) and dates
- Detailed documentation and examples
- Swipeable calendar with flexible custom rendering
- Scrolling to today, selecting dates, and more
- Allowing or blocking certain dates
- Accessibility support
- Automatic date formatting for different locales

## Try it out ‚ö°

You can run a sample module using these steps:

```
$ git clone git@github.com:wix/react-native-calendars.git

$ cd react-native-calendars

$ yarn install

$ cd ios &amp;&amp; pod install &amp;&amp; cd ..

$ react-native run-ios
```

You can check example screens source code in [example module screens](https://github.com/wix-private/wix-react-native-calendar/tree/master/example/src/screens)

This project is compatible with Expo/CRNA (without ejecting), and the examples have been [published on Expo](https://expo.io/@community/react-native-calendars-example)

## Getting Started üîß

Here&#039;s how to get started with react-native-calendars in your React Native project:

### Install the package:

```
$ yarn add react-native-calendars
```

**RN Calendars is implemented in JavaScript, so no native module linking is required.**

## Usage üöÄ

Basic usage examples of the library

##### **For detailed information on using this component, see the [official documentation site](https://wix.github.io/react-native-calendars/docs/Intro)**

### Importing the `Calendar` component

```javascript
import {Calendar, CalendarList, Agenda} from &#039;react-native-calendars&#039;;
```

### Use the `Calendar` component in your app:

```javascript
&lt;Calendar
  onDayPress={day =&gt; {
    console.log(&#039;selected day&#039;, day);
  }}
/&gt;
```

## Some Code Examples

Here are a few code snippets that demonstrate how to use some of the key features of react-native-calendars:

### Creating a basic calendar with default settings:

```javascript
import React, {useState} from &#039;react&#039;;
import {Calendar, LocaleConfig} from &#039;react-native-calendars&#039;;

const App = () =&gt; {
  const [selected, setSelected] = useState(&#039;&#039;);

  return (
    &lt;Calendar
      onDayPress={day =&gt; {
        setSelected(day.dateString);
      }}
      markedDates={{
        [selected]: {selected: true, disableTouchEvent: true, selectedDotColor: &#039;orange&#039;}
      }}
    /&gt;
  );
};

export default App;
```

### Customize the appearance of the calendar:

```javascript
&lt;Calendar
  // Customize the appearance of the calendar
  style={{
    borderWidth: 1,
    borderColor: &#039;gray&#039;,
    height: 350
  }}
  // Specify the current date
  current={&#039;2012-03-01&#039;}
  // Callback that gets called when the user selects a day
  onDayPress={day =&gt; {
    console.log(&#039;selected day&#039;, day);
  }}
  // Mark specific dates as marked
  markedDates={{
    &#039;2012-03-01&#039;: {selected: true, marked: true, selectedColor: &#039;blue&#039;},
    &#039;2012-03-02&#039;: {marked: true},
    &#039;2012-03-03&#039;: {selected: true, marked: true, selectedColor: &#039;blue&#039;}
  }}
/&gt;
```

### Configuring the locale:

```javascript
import {LocaleConfig} from &#039;react-native-calendars&#039;;
import React, {useState} from &#039;react&#039;;
import {Calendar, LocaleConfig} from &#039;react-native-calendars&#039;;

LocaleConfig.locales[&#039;fr&#039;] = {
  monthNames: [
    &#039;Janvier&#039;,
    &#039;F√©vrier&#039;,
    &#039;Mars&#039;,
    &#039;Avril&#039;,
    &#039;Mai&#039;,
    &#039;Juin&#039;,
    &#039;Juillet&#039;,
    &#039;Ao√ªt&#039;,
    &#039;Septembre&#039;,
    &#039;Octobre&#039;,
    &#039;Novembre&#039;,
    &#039;D√©cembre&#039;
  ],
  monthNamesShort: [&#039;Janv.&#039;, &#039;F√©vr.&#039;, &#039;Mars&#039;, &#039;Avril&#039;, &#039;Mai&#039;, &#039;Juin&#039;, &#039;Juil.&#039;, &#039;Ao√ªt&#039;, &#039;Sept.&#039;, &#039;Oct.&#039;, &#039;Nov.&#039;, &#039;D√©c.&#039;],
  dayNames: [&#039;Dimanche&#039;, &#039;Lundi&#039;, &#039;Mardi&#039;, &#039;Mercredi&#039;, &#039;Jeudi&#039;, &#039;Vendredi&#039;, &#039;Samedi&#039;],
  dayNamesShort: [&#039;Dim.&#039;, &#039;Lun.&#039;, &#039;Mar.&#039;, &#039;Mer.&#039;, &#039;Jeu.&#039;, &#039;Ven.&#039;, &#039;Sam.&#039;],
  today: &quot;Aujourd&#039;hui&quot;
};

LocaleConfig.defaultLocale = &#039;fr&#039;;

const App = () =&gt; {
  const [selected, setSelected] = useState(&#039;&#039;);

  return (
    &lt;Calendar
      onDayPress={day =&gt; {
        setSelected(day.dateString);
      }}
      markedDates={{
        [selected]: {selected: true, disableTouchEvent: true, selectedDotColor: &#039;orange&#039;}
      }}
    /&gt;
  );
};

export default App;
```

### Adding a global theme to the calendar:

```javascript
    &lt;Calendar
      style={{
        borderWidth: 1,
        borderColor: &#039;gray&#039;,
        height: 350,
      }}
      theme={{
        backgroundColor: &#039;#ffffff&#039;,
        calendarBackground: &#039;#ffffff&#039;,
        textSectionTitleColor: &#039;#b6c1cd&#039;,
        selectedDayBackgroundColor: &#039;#00adf5&#039;,
        selectedDayTextColor: &#039;#ffffff&#039;,
        todayTextColor: &#039;#00adf5&#039;,
        dayTextColor: &#039;#2d4150&#039;,
        textDisabledColor: &#039;#dd99ee&#039;
      }}
    /&gt;
```

## Customized Calendar Examples

### Calendar

  &lt;img src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/calendar.gif?raw=true&quot;&gt;

### Dot marking

  &lt;img height={50} src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking1.png?raw=true&quot;&gt;

### Multi-Dot marking

 &lt;img height=50 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking4.png?raw=true&quot;&gt;

### Period Marking

  &lt;img height=50 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking2.png?raw=true&quot;&gt;

  &lt;img height=50 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking3.png?raw=true&quot;&gt;

### Multi-Period marking

  &lt;img height=50 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking6.png?raw=true&quot;&gt;

### Custom marking

  &lt;img height=50 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking5.png?raw=true&quot;&gt;

  &lt;img height=350 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/multi-marking.png?raw=true&quot;&gt;

### Date loading indicator

  &lt;img height=50 src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/loader.png?raw=true&quot;&gt;

### Scrollable semi-infinite calendar

  &lt;img src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/calendar-list.gif?raw=true&quot;&gt;

### Horizontal calendar

  &lt;img src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/horizontal-calendar-list.gif?raw=true&quot;&gt;

### Agenda

  &lt;img src=&quot;https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/agenda.gif?raw=true&quot;&gt;

&lt;br&gt;

## Authors

- [Tautvilas Mecinskas](https://github.com/tautvilas/) - Initial code - [@tautvilas](https://twitter.com/Tautvilas)
- Katrin Zotchev - Initial design - [@katrin_zot](https://twitter.com/katrin_zot)

See also the list of [contributors](https://github.com/wix/react-native-calendar-components/contributors) who participated in this project.

## Contributing

We welcome contributions to react-native-calendars.

If you have an idea for a new feature or have discovered a bug, please open an issue.

Please `yarn test` and `yarn lint` before pushing changes.

Don&#039;t forget to add a **title** and a **description** explaining the issue you&#039;re trying to solve and your proposed solution.

Screenshots and Gifs are VERY helpful to add to the PR for reviews.

Please DO NOT format the files - we&#039;re trying to keep a unified syntax and keep the reviewing process fast and simple.

## License

React Native Calendars is MIT licensed
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[microsoft/playwright]]></title>
            <link>https://github.com/microsoft/playwright</link>
            <guid>https://github.com/microsoft/playwright</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:14 GMT</pubDate>
            <description><![CDATA[Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/microsoft/playwright">microsoft/playwright</a></h1>
            <p>Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 74,102</p>
            <p>Forks: 4,283</p>
            <p>Stars today: 62 stars today</p>
            <h2>README</h2><pre># üé≠ Playwright

[![npm version](https://img.shields.io/npm/v/playwright.svg)](https://www.npmjs.com/package/playwright) &lt;!-- GEN:chromium-version-badge --&gt;[![Chromium version](https://img.shields.io/badge/chromium-138.0.7204.35-blue.svg?logo=google-chrome)](https://www.chromium.org/Home)&lt;!-- GEN:stop --&gt; &lt;!-- GEN:firefox-version-badge --&gt;[![Firefox version](https://img.shields.io/badge/firefox-139.0-blue.svg?logo=firefoxbrowser)](https://www.mozilla.org/en-US/firefox/new/)&lt;!-- GEN:stop --&gt; &lt;!-- GEN:webkit-version-badge --&gt;[![WebKit version](https://img.shields.io/badge/webkit-18.5-blue.svg?logo=safari)](https://webkit.org/)&lt;!-- GEN:stop --&gt; [![Join Discord](https://img.shields.io/badge/join-discord-informational)](https://aka.ms/playwright/discord)

## [Documentation](https://playwright.dev) | [API reference](https://playwright.dev/docs/api/class-playwright)

Playwright is a framework for Web Testing and Automation. It allows testing [Chromium](https://www.chromium.org/Home), [Firefox](https://www.mozilla.org/en-US/firefox/new/) and [WebKit](https://webkit.org/) with a single API. Playwright is built to enable cross-browser web automation that is **ever-green**, **capable**, **reliable** and **fast**.

|          | Linux | macOS | Windows |
|   :---   | :---: | :---: | :---:   |
| Chromium &lt;!-- GEN:chromium-version --&gt;138.0.7204.35&lt;!-- GEN:stop --&gt; | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| WebKit &lt;!-- GEN:webkit-version --&gt;18.5&lt;!-- GEN:stop --&gt; | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| Firefox &lt;!-- GEN:firefox-version --&gt;139.0&lt;!-- GEN:stop --&gt; | :white_check_mark: | :white_check_mark: | :white_check_mark: |

Headless execution is supported for all browsers on all platforms. Check out [system requirements](https://playwright.dev/docs/intro#system-requirements) for details.

Looking for Playwright for [Python](https://playwright.dev/python/docs/intro), [.NET](https://playwright.dev/dotnet/docs/intro), or [Java](https://playwright.dev/java/docs/intro)?

## Installation

Playwright has its own test runner for end-to-end tests, we call it Playwright Test.

### Using init command

The easiest way to get started with Playwright Test is to run the init command.

```Shell
# Run from your project&#039;s root directory
npm init playwright@latest
# Or create a new project
npm init playwright@latest new-project
```

This will create a configuration file, optionally add examples, a GitHub Action workflow and a first test example.spec.ts. You can now jump directly to writing assertions section.

### Manually

Add dependency and install browsers.

```Shell
npm i -D @playwright/test
# install supported browsers
npx playwright install
```

You can optionally install only selected browsers, see [install browsers](https://playwright.dev/docs/cli#install-browsers) for more details. Or you can install no browsers at all and use existing [browser channels](https://playwright.dev/docs/browsers).

* [Getting started](https://playwright.dev/docs/intro)
* [API reference](https://playwright.dev/docs/api/class-playwright)

## Capabilities

### Resilient ‚Ä¢ No flaky tests

**Auto-wait**. Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - a primary cause of flaky tests.

**Web-first assertions**. Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.

**Tracing**. Configure test retry strategy, capture execution trace, videos and screenshots to eliminate flakes.

### No trade-offs ‚Ä¢ No limits

Browsers run web content belonging to different origins in different processes. Playwright is aligned with the architecture of the modern browsers and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.

**Multiple everything**. Test scenarios that span multiple tabs, multiple origins and multiple users. Create scenarios with different contexts for different users and run them against your server, all in one test.

**Trusted events**. Hover elements, interact with dynamic controls and produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.

Test frames, pierce Shadow DOM. Playwright selectors pierce shadow DOM and allow entering frames seamlessly.

### Full isolation ‚Ä¢ Fast execution

**Browser contexts**. Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.

**Log in once**. Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.

### Powerful Tooling

**[Codegen](https://playwright.dev/docs/codegen)**. Generate tests by recording your actions. Save them into any language.

**[Playwright inspector](https://playwright.dev/docs/inspector)**. Inspect page, generate selectors, step through the test execution, see click points and explore execution logs.

**[Trace Viewer](https://playwright.dev/docs/trace-viewer)**. Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source and many more.

Looking for Playwright for [TypeScript](https://playwright.dev/docs/intro), [JavaScript](https://playwright.dev/docs/intro), [Python](https://playwright.dev/python/docs/intro), [.NET](https://playwright.dev/dotnet/docs/intro), or [Java](https://playwright.dev/java/docs/intro)?

## Examples

To learn how to run these Playwright Test examples, check out our [getting started docs](https://playwright.dev/docs/intro).

#### Page screenshot

This code snippet navigates to Playwright homepage and saves a screenshot.

```TypeScript
import { test } from &#039;@playwright/test&#039;;

test(&#039;Page Screenshot&#039;, async ({ page }) =&gt; {
  await page.goto(&#039;https://playwright.dev/&#039;);
  await page.screenshot({ path: `example.png` });
});
```

#### Mobile and geolocation

This snippet emulates Mobile Safari on a device at given geolocation, navigates to maps.google.com, performs the action and takes a screenshot.

```TypeScript
import { test, devices } from &#039;@playwright/test&#039;;

test.use({
  ...devices[&#039;iPhone 13 Pro&#039;],
  locale: &#039;en-US&#039;,
  geolocation: { longitude: 12.492507, latitude: 41.889938 },
  permissions: [&#039;geolocation&#039;],
})

test(&#039;Mobile and geolocation&#039;, async ({ page }) =&gt; {
  await page.goto(&#039;https://maps.google.com&#039;);
  await page.getByText(&#039;Your location&#039;).click();
  await page.waitForRequest(/.*preview\/pwa/);
  await page.screenshot({ path: &#039;colosseum-iphone.png&#039; });
});
```

#### Evaluate in browser context

This code snippet navigates to example.com, and executes a script in the page context.

```TypeScript
import { test } from &#039;@playwright/test&#039;;

test(&#039;Evaluate in browser context&#039;, async ({ page }) =&gt; {
  await page.goto(&#039;https://www.example.com/&#039;);
  const dimensions = await page.evaluate(() =&gt; {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight,
      deviceScaleFactor: window.devicePixelRatio
    }
  });
  console.log(dimensions);
});
```

#### Intercept network requests

This code snippet sets up request routing for a page to log all network requests.

```TypeScript
import { test } from &#039;@playwright/test&#039;;

test(&#039;Intercept network requests&#039;, async ({ page }) =&gt; {
  // Log and continue all network requests
  await page.route(&#039;**&#039;, route =&gt; {
    console.log(route.request().url());
    route.continue();
  });
  await page.goto(&#039;http://todomvc.com&#039;);
});
```

## Resources

* [Documentation](https://playwright.dev)
* [API reference](https://playwright.dev/docs/api/class-playwright/)
* [Contribution guide](CONTRIBUTING.md)
* [Changelog](https://github.com/microsoft/playwright/releases)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[sadmann7/shadcn-table]]></title>
            <link>https://github.com/sadmann7/shadcn-table</link>
            <guid>https://github.com/sadmann7/shadcn-table</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:13 GMT</pubDate>
            <description><![CDATA[Shadcn table with server-side sorting, filtering, and pagination.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/sadmann7/shadcn-table">sadmann7/shadcn-table</a></h1>
            <p>Shadcn table with server-side sorting, filtering, and pagination.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 5,084</p>
            <p>Forks: 469</p>
            <p>Stars today: 6 stars today</p>
            <h2>README</h2><pre># [Shadcn Table](https://tablecn.com)

This is a shadcn table component with server-side sorting, filtering, and pagination. It is bootstrapped with `create-t3-app`.

[![Shadcn Table](./public/images/screenshot.png)](https://tablecn.com)

## Documentation

See the [documentation](https://diceui.com/docs/components/data-table) to get started.

## Tech Stack

- **Framework:** [Next.js](https://nextjs.org)
- **Styling:** [Tailwind CSS](https://tailwindcss.com)
- **UI Components:** [shadcn/ui](https://ui.shadcn.com)
- **Table package:** [TanStack/react-table](https://tanstack.com/table/latest)
- **Database:** [Neon](https://neon.tech)
- **ORM:** [Drizzle ORM](https://orm.drizzle.team)
- **Validation:** [Zod](https://zod.dev)

## Features

- [x] Server-side pagination, sorting, and filtering
- [x] Customizable columns
- [x] Auto generated filters from column definitions
- [x] Dynamic `Data-Table-Toolbar` with search, filters, and actions
- [x] `Notion/Airtable` like advanced filtering
- [x] `Linear` like filter menu for command palette filtering
- [x] Action bar on row selection

## Running Locally

1. Clone the repository

   ```bash
   git clone https://github.com/sadmann7/shadcn-table
   ```

2. Install dependencies using pnpm

   ```bash
   pnpm install
   ```

3. Copy the `.env.example` to `.env` and update the variables.

   ```bash
   cp .env.example .env
   ```

4. (Optional) Run database using docker-compose.yml file

   ```bash
   docker compose up
   ```

5. Push the database schema

   ```bash
   pnpm run db:push
   ```

6. Seed the database

   ```bash
   pnpm run db:seed
   ```

7. Start the development server

   ```bash
   pnpm run dev
   ```

## How do I deploy this?

Follow the deployment guides for [Vercel](https://create.t3.gg/en/deployment/vercel), [Netlify](https://create.t3.gg/en/deployment/netlify) and [Docker](https://create.t3.gg/en/deployment/docker) for more information.

## Credits

- [shadcn/ui](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/tasks) - For the initial implementation of the data table.
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[musistudio/claude-code-router]]></title>
            <link>https://github.com/musistudio/claude-code-router</link>
            <guid>https://github.com/musistudio/claude-code-router</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:12 GMT</pubDate>
            <description><![CDATA[Use Claude Code as the foundation for coding infrastructure, allowing you to decide how to interact with the model while enjoying updates from Anthropic.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/musistudio/claude-code-router">musistudio/claude-code-router</a></h1>
            <p>Use Claude Code as the foundation for coding infrastructure, allowing you to decide how to interact with the model while enjoying updates from Anthropic.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,980</p>
            <p>Forks: 128</p>
            <p>Stars today: 285 stars today</p>
            <h2>README</h2><pre># Claude Code Router

&gt; This is a tool for routing Claude Code requests to different models, and you can customize any request.

![](screenshoots/claude-code.png)

## Usage

1. Install Claude Code

```shell
npm install -g @anthropic-ai/claude-code
```

2. Install Claude Code Router

```shell
npm install -g @musistudio/claude-code-router
```

3. Start Claude Code by claude-code-router

```shell
ccr code
```

4. Configure routing[optional]  
   Set up your `~/.claude-code-router/config.json` file like this:

```json
{
  &quot;OPENAI_API_KEY&quot;: &quot;sk-xxx&quot;,
  &quot;OPENAI_BASE_URL&quot;: &quot;https://api.deepseek.com&quot;,
  &quot;OPENAI_MODEL&quot;: &quot;deepseek-chat&quot;,
  &quot;Providers&quot;: [
    {
      &quot;name&quot;: &quot;openrouter&quot;,
      &quot;api_base_url&quot;: &quot;https://openrouter.ai/api/v1&quot;,
      &quot;api_key&quot;: &quot;sk-xxx&quot;,
      &quot;models&quot;: [
        &quot;google/gemini-2.5-pro-preview&quot;,
        &quot;anthropic/claude-sonnet-4&quot;,
        &quot;anthropic/claude-3.5-sonnet&quot;,
        &quot;anthropic/claude-3.7-sonnet:thinking&quot;
      ]
    },
    {
      &quot;name&quot;: &quot;deepseek&quot;,
      &quot;api_base_url&quot;: &quot;https://api.deepseek.com&quot;,
      &quot;api_key&quot;: &quot;sk-xxx&quot;,
      &quot;models&quot;: [&quot;deepseek-reasoner&quot;]
    },
    {
      &quot;name&quot;: &quot;ollama&quot;,
      &quot;api_base_url&quot;: &quot;http://localhost:11434/v1&quot;,
      &quot;api_key&quot;: &quot;ollama&quot;,
      &quot;models&quot;: [&quot;qwen2.5-coder:latest&quot;]
    }
  ],
  &quot;Router&quot;: {
    &quot;background&quot;: &quot;ollama,qwen2.5-coder:latest&quot;,
    &quot;think&quot;: &quot;deepseek,deepseek-reasoner&quot;,
    &quot;longContext&quot;: &quot;openrouter,google/gemini-2.5-pro-preview&quot;
  }
}
```

- `background`  
  This model will be used to handle some background tasks([background-token-usage](https://docs.anthropic.com/en/docs/claude-code/costs#background-token-usage)). Based on my tests, it doesn‚Äôt require high intelligence. I‚Äôm using the qwen-coder-2.5:7b model running locally on my MacBook Pro M1 (32GB) via Ollama.
  If your computer can‚Äôt run Ollama, you can also use some free models, such as qwen-coder-2.5:3b.

- `think`  
  This model will be used when enabling Claude Code to perform reasoning. However, reasoning budget control has not yet been implemented (since the DeepSeek-R1 model does not support it), so there is currently no difference between using UltraThink and Think modes.
  It is worth noting that Plan Mode also use this model to achieve better planning results.  
  Note: The reasoning process via the official DeepSeek API may be very slow, so you may need to wait for an extended period of time.

- `longContext`  
  This model will be used when the context length exceeds 32K (this value may be modified in the future). You can route the request to a model that performs well with long contexts (I‚Äôve chosen google/gemini-2.5-pro-preview). This scenario has not been thoroughly tested yet, so if you encounter any issues, please submit an issue.

- model command  
  You can also switch models within Claude Code by using the `/model` command. The format is: `provider,model`, like this:  
  `/model openrouter,anthropic/claude-3.5-sonnet`  
  This will use the anthropic/claude-3.5-sonnet model provided by OpenRouter to handle all subsequent tasks.

## Features

- [x] Support change models
- [x] Github Actions
- [ ] More robust plugin support
- [ ] More detailed logs
- [ ] Support image
- [ ] Support web search

## Plugins
You can modify or enhance Claude Code‚Äôs functionality by installing plugins. The mechanism works by using middleware to modify request parameters ‚Äî this allows you to rewrite prompts or add/remove tools.

To use a plugin, place it in the ~/.claude-code-router/plugins/ directory and specify the plugin name in config.js using the `usePlugins` option.like this
```json
// ~/.claud-code-router/config.json
{
  ...,
  &quot;usePlugins&quot;: [&quot;notebook-tools-filter&quot;, &quot;toolcall-improvement&quot;]
}
```

Currently, the following plugins are available:


- **notebook-tools-filter**    
This plugin filters out tool calls related to Jupyter notebooks (.ipynb files). You can use it if your work does not involve Jupyter.


- **toolcall-improvement**    
If your LLM doesn‚Äôt handle tool usage well (for example, always returning code as plain text instead of modifying files ‚Äî such as with deepseek-v3), you can use this plugin.    
This plugin simply adds the following system prompt. If you have a better prompt, you can modify it.
```markdown
## **Important Instruction:**  
You must use tools as frequently and accurately as possible to help the user solve their problem.  
Prioritize tool usage whenever it can enhance accuracy, efficiency, or the quality of the response.
```


## Github Actions
You just need to install `Claude Code Actions` in your repository according to the [official documentation](https://docs.anthropic.com/en/docs/claude-code/github-actions). For `ANTHROPIC_API_KEY`, you can use any string. Then, modify your `.github/workflows/claude.yaml` file to include claude-code-router, like this:
```yaml
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == &#039;issue_comment&#039; &amp;&amp; contains(github.event.comment.body, &#039;@claude&#039;)) ||
      (github.event_name == &#039;pull_request_review_comment&#039; &amp;&amp; contains(github.event.comment.body, &#039;@claude&#039;)) ||
      (github.event_name == &#039;pull_request_review&#039; &amp;&amp; contains(github.event.review.body, &#039;@claude&#039;)) ||
      (github.event_name == &#039;issues&#039; &amp;&amp; (contains(github.event.issue.body, &#039;@claude&#039;) || contains(github.event.issue.title, &#039;@claude&#039;)))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Prepare Environment
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat &lt;&lt; &#039;EOF&#039; &gt; $HOME/.claude-code-router/config.json
          {
            &quot;log&quot;: true,
            &quot;OPENAI_API_KEY&quot;: &quot;${{ secrets.OPENAI_API_KEY }}&quot;,
            &quot;OPENAI_BASE_URL&quot;: &quot;https://api.deepseek.com&quot;,
            &quot;OPENAI_MODEL&quot;: &quot;deepseek-chat&quot;
          }
          EOF
        shell: bash
        
      - name: Start Claude Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &amp;
        shell: bash

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: &quot;test&quot;
```
You can modify the contents of `$HOME/.claude-code-router/config.json` as needed.
GitHub Actions support allows you to trigger Claude Code at specific times, which opens up some interesting possibilities.

For example, between 00:30 and 08:30 Beijing Time, using the official DeepSeek API:

- The cost of the `deepseek-v3` model is only 50% of the normal time.

- The `deepseek-r1` model is just 25% of the normal time.

So maybe in the future, I‚Äôll describe detailed tasks for Claude Code ahead of time and let it run during these discounted hours to reduce costs?


## Some tips:

Now you can use deepseek-v3 models directly without using any plugins.

If you‚Äôre using the DeepSeek API provided by the official website, you might encounter an ‚Äúexceeding context‚Äù error after several rounds of conversation (since the official API only supports a 64K context window). In this case, you‚Äôll need to discard the previous context and start fresh. Alternatively, you can use ByteDance‚Äôs DeepSeek API, which offers a 128K context window and supports KV cache.

![](screenshoots/contexterror.jpg)

Note: claude code consumes a huge amount of tokens, but thanks to DeepSeek‚Äôs low cost, you can use claude code at a fraction of Claude‚Äôs price, and you don‚Äôt need to subscribe to the Claude Max plan.

Some interesting points: Based on my testing, including a lot of context information can help narrow the performance gap between these LLM models. For instance, when I used Claude-4 in VSCode Copilot to handle a Flutter issue, it messed up the files in three rounds of conversation, and I had to roll everything back. However, when I used claude code with DeepSeek, after three or four rounds of conversation, I finally managed to complete my task‚Äîand the cost was less than 1 RMB!

## Some articles:

1. [Project Motivation and Principles](blog/en/project-motivation-and-how-it-works.md) ([‰∏≠ÊñáÁâàÁúãËøôÈáå](blog/zh/È°πÁõÆÂàùË°∑ÂèäÂéüÁêÜ.md))

## Buy me a coffee

If you find this project helpful, you can choose to sponsor the author with a cup of coffee. Please provide your GitHub information so I can add you to the sponsor list below.  

[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/F1F31GN2GM)

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;/blog/images/alipay.jpg&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
    &lt;td&gt;&lt;img src=&quot;/blog/images/wechat.jpg&quot; width=&quot;200&quot; /&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

## Sponsors

Thanks to the following sponsors:

@Simon Leischnig (If you see this, feel free to contact me and I can update it with your GitHub information)    
[@duanshuaimin](https://github.com/duanshuaimin)     
[@vrgitadmin](https://github.com/vrgitadmin)     
@*o   (ÂèØÈÄöËøá‰∏ªÈ°µÈÇÆÁÆ±ËÅîÁ≥ªÊàë‰øÆÊîπgithubÁî®Êà∑Âêç)     
[@ceilwoo](https://github.com/ceilwoo)      
@*ËØ¥  (ÂèØÈÄöËøá‰∏ªÈ°µÈÇÆÁÆ±ËÅîÁ≥ªÊàë‰øÆÊîπgithubÁî®Êà∑Âêç)     
@*Êõ¥  (ÂèØÈÄöËøá‰∏ªÈ°µÈÇÆÁÆ±ËÅîÁ≥ªÊàë‰øÆÊîπgithubÁî®Êà∑Âêç)  
@K*g  (ÂèØÈÄöËøá‰∏ªÈ°µÈÇÆÁÆ±ËÅîÁ≥ªÊàë‰øÆÊîπgithubÁî®Êà∑Âêç)         
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[microsoft/playwright-mcp]]></title>
            <link>https://github.com/microsoft/playwright-mcp</link>
            <guid>https://github.com/microsoft/playwright-mcp</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:11 GMT</pubDate>
            <description><![CDATA[Playwright MCP server]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/microsoft/playwright-mcp">microsoft/playwright-mcp</a></h1>
            <p>Playwright MCP server</p>
            <p>Language: TypeScript</p>
            <p>Stars: 13,157</p>
            <p>Forks: 904</p>
            <p>Stars today: 120 stars today</p>
            <h2>README</h2><pre>## Playwright MCP

A Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev). This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.

### Key Features

- **Fast and lightweight**. Uses Playwright&#039;s accessibility tree, not pixel-based input.
- **LLM-friendly**. No vision models needed, operates purely on structured data.
- **Deterministic tool application**. Avoids ambiguity common with screenshot-based approaches.

### Requirements
- Node.js 18 or newer
- VS Code, Cursor, Windsurf, Claude Desktop or any other MCP client

&lt;!--
// Generate using:
node utils/generate-links.js
--&gt;

### Getting started

First, install the Playwright MCP server with your client. A typical configuration looks like this:

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;
      ]
    }
  }
}
```

[&lt;img src=&quot;https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&amp;label=Install%20Server&amp;color=0098FF&quot; alt=&quot;Install in VS Code&quot;&gt;](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D) [&lt;img alt=&quot;Install in VS Code Insiders&quot; src=&quot;https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&amp;label=Install%20Server&amp;color=24bfa5&quot;&gt;](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)


&lt;details&gt;&lt;summary&gt;&lt;b&gt;Install in VS Code&lt;/b&gt;&lt;/summary&gt;

You can also install the Playwright MCP server using the VS Code CLI:

```bash
# For VS Code
code --add-mcp &#039;{&quot;name&quot;:&quot;playwright&quot;,&quot;command&quot;:&quot;npx&quot;,&quot;args&quot;:[&quot;@playwright/mcp@latest&quot;]}&#039;
```

After installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Install in Cursor&lt;/b&gt;&lt;/summary&gt;

#### Click the button to install:

[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=playwright&amp;config=eyJjb21tYW5kIjoibnB4IEBwbGF5d3JpZ2h0L21jcEBsYXRlc3QifQ%3D%3D)

#### Or install manually:

Go to `Cursor Settings` -&gt; `MCP` -&gt; `Add new MCP Server`. Name to your liking, use `command` type with the command `npx @playwright/mcp`. You can also verify config or add command like arguments via clicking `Edit`.

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;
      ]
    }
  }
}
```
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Install in Windsurf&lt;/b&gt;&lt;/summary&gt;

Follow Windsuff MCP [documentation](https://docs.windsurf.com/windsurf/cascade/mcp). Use following configuration:

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;
      ]
    }
  }
}
```
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Install in Claude Desktop&lt;/b&gt;&lt;/summary&gt;

Follow the MCP install [guide](https://modelcontextprotocol.io/quickstart/user), use following configuration:

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;
      ]
    }
  }
}
```
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Install in Claude Code&lt;/b&gt;&lt;/summary&gt;

Use the Claude Code CLI to add the Playwright MCP server:

```bash
claude mcp add playwright npx @playwright/mcp@latest
```
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Install in Qodo Gen&lt;/b&gt;&lt;/summary&gt;

Open [Qodo Gen](https://docs.qodo.ai/qodo-documentation/qodo-gen) chat panel in VSCode or IntelliJ ‚Üí Connect more tools ‚Üí + Add new MCP ‚Üí Paste the following configuration:

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;
      ]
    }
  }
}
```

Click &lt;code&gt;Save&lt;/code&gt;.
&lt;/details&gt;

### Configuration

Playwright MCP server supports following arguments. They can be provided in the JSON configuration above, as a part of the `&quot;args&quot;` list:

&lt;!--- Options generated by update-readme.js --&gt;

```
&gt; npx @playwright/mcp@latest --help
  --allowed-origins &lt;origins&gt;  semicolon-separated list of origins to allow the
                               browser to request. Default is to allow all.
  --blocked-origins &lt;origins&gt;  semicolon-separated list of origins to block the
                               browser from requesting. Blocklist is evaluated
                               before allowlist. If used without the allowlist,
                               requests not matching the blocklist are still
                               allowed.
  --block-service-workers      block service workers
  --browser &lt;browser&gt;          browser or chrome channel to use, possible
                               values: chrome, firefox, webkit, msedge.
  --browser-agent &lt;endpoint&gt;   Use browser agent (experimental).
  --caps &lt;caps&gt;                comma-separated list of capabilities to enable,
                               possible values: tabs, pdf, history, wait, files,
                               install. Default is all.
  --cdp-endpoint &lt;endpoint&gt;    CDP endpoint to connect to.
  --config &lt;path&gt;              path to the configuration file.
  --device &lt;device&gt;            device to emulate, for example: &quot;iPhone 15&quot;
  --executable-path &lt;path&gt;     path to the browser executable.
  --headless                   run browser in headless mode, headed by default
  --host &lt;host&gt;                host to bind server to. Default is localhost. Use
                               0.0.0.0 to bind to all interfaces.
  --ignore-https-errors        ignore https errors
  --isolated                   keep the browser profile in memory, do not save
                               it to disk.
  --image-responses &lt;mode&gt;     whether to send image responses to the client.
                               Can be &quot;allow&quot;, &quot;omit&quot;, or &quot;auto&quot;. Defaults to
                               &quot;auto&quot;, which sends images if the client can
                               display them.
  --no-sandbox                 disable the sandbox for all process types that
                               are normally sandboxed.
  --output-dir &lt;path&gt;          path to the directory for output files.
  --port &lt;port&gt;                port to listen on for SSE transport.
  --proxy-bypass &lt;bypass&gt;      comma-separated domains to bypass proxy, for
                               example &quot;.com,chromium.org,.domain.com&quot;
  --proxy-server &lt;proxy&gt;       specify proxy server, for example
                               &quot;http://myproxy:3128&quot; or &quot;socks5://myproxy:8080&quot;
  --save-trace                 Whether to save the Playwright Trace of the
                               session into the output directory.
  --storage-state &lt;path&gt;       path to the storage state file for isolated
                               sessions.
  --user-agent &lt;ua string&gt;     specify user agent string
  --user-data-dir &lt;path&gt;       path to the user data directory. If not
                               specified, a temporary directory will be created.
  --viewport-size &lt;size&gt;       specify browser viewport size in pixels, for
                               example &quot;1280, 720&quot;
  --vision                     Run server that uses screenshots (Aria snapshots
                               are used by default)
```

&lt;!--- End of options generated section --&gt;

### User profile

You can run Playwright MCP with persistent profile like a regular browser (default), or in the isolated contexts for the testing sessions.

**Persistent profile**

All the logged in information will be stored in the persistent profile, you can delete it between sessions if you&#039;d like to clear the offline state.
Persistent profile is located at the following locations and you can override it with the `--user-data-dir` argument.

```bash
# Windows
%USERPROFILE%\AppData\Local\ms-playwright\mcp-{channel}-profile

# macOS
- ~/Library/Caches/ms-playwright/mcp-{channel}-profile

# Linux
- ~/.cache/ms-playwright/mcp-{channel}-profile
```

**Isolated**

In the isolated mode, each session is started in the isolated profile. Every time you ask MCP to close the browser,
the session is closed and all the storage state for this session is lost. You can provide initial storage state
to the browser via the config&#039;s `contextOptions` or via the `--storage-state` argument. Learn more about the storage
state [here](https://playwright.dev/docs/auth).

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;,
        &quot;--isolated&quot;,
        &quot;--storage-state={path/to/storage.json}&quot;
      ]
    }
  }
}
```

### Configuration file

The Playwright MCP server can be configured using a JSON configuration file. You can specify the configuration file
using the `--config` command line option:

```bash
npx @playwright/mcp@latest --config path/to/config.json
```

&lt;details&gt;
&lt;summary&gt;Configuration file schema&lt;/summary&gt;

```typescript
{
  // Browser configuration
  browser?: {
    // Browser type to use (chromium, firefox, or webkit)
    browserName?: &#039;chromium&#039; | &#039;firefox&#039; | &#039;webkit&#039;;

    // Keep the browser profile in memory, do not save it to disk.
    isolated?: boolean;

    // Path to user data directory for browser profile persistence
    userDataDir?: string;

    // Browser launch options (see Playwright docs)
    // @see https://playwright.dev/docs/api/class-browsertype#browser-type-launch
    launchOptions?: {
      channel?: string;        // Browser channel (e.g. &#039;chrome&#039;)
      headless?: boolean;      // Run in headless mode
      executablePath?: string; // Path to browser executable
      // ... other Playwright launch options
    };

    // Browser context options
    // @see https://playwright.dev/docs/api/class-browser#browser-new-context
    contextOptions?: {
      viewport?: { width: number, height: number };
      // ... other Playwright context options
    };

    // CDP endpoint for connecting to existing browser
    cdpEndpoint?: string;

    // Remote Playwright server endpoint
    remoteEndpoint?: string;
  },

  // Server configuration
  server?: {
    port?: number;  // Port to listen on
    host?: string;  // Host to bind to (default: localhost)
  },

  // List of enabled capabilities
  capabilities?: Array&lt;
    &#039;core&#039; |    // Core browser automation
    &#039;tabs&#039; |    // Tab management
    &#039;pdf&#039; |     // PDF generation
    &#039;history&#039; | // Browser history
    &#039;wait&#039; |    // Wait utilities
    &#039;files&#039; |   // File handling
    &#039;install&#039; | // Browser installation
    &#039;testing&#039;   // Testing
  &gt;;

  // Enable vision mode (screenshots instead of accessibility snapshots)
  vision?: boolean;

  // Directory for output files
  outputDir?: string;

  // Network configuration
  network?: {
    // List of origins to allow the browser to request. Default is to allow all. Origins matching both `allowedOrigins` and `blockedOrigins` will be blocked.
    allowedOrigins?: string[];

    // List of origins to block the browser to request. Origins matching both `allowedOrigins` and `blockedOrigins` will be blocked.
    blockedOrigins?: string[];
  };
 
  /**
   * Do not send image responses to the client.
   */
  noImageResponses?: boolean;
}
```
&lt;/details&gt;

### Standalone MCP server

When running headed browser on system w/o display or from worker processes of the IDEs,
run the MCP server from environment with the DISPLAY and pass the `--port` flag to enable SSE transport.

```bash
npx @playwright/mcp@latest --port 8931
```

And then in MCP client config, set the `url` to the SSE endpoint:

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;url&quot;: &quot;http://localhost:8931/sse&quot;
    }
  }
}
```

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Docker&lt;/b&gt;&lt;/summary&gt;

**NOTE:** The Docker implementation only supports headless chromium at the moment.

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;docker&quot;,
      &quot;args&quot;: [&quot;run&quot;, &quot;-i&quot;, &quot;--rm&quot;, &quot;--init&quot;, &quot;--pull=always&quot;, &quot;mcr.microsoft.com/playwright/mcp&quot;]
    }
  }
}
```

You can build the Docker image yourself.

```
docker build -t mcr.microsoft.com/playwright/mcp .
```
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Programmatic usage&lt;/b&gt;&lt;/summary&gt;

```js
import http from &#039;http&#039;;

import { createConnection } from &#039;@playwright/mcp&#039;;
import { SSEServerTransport } from &#039;@modelcontextprotocol/sdk/server/sse.js&#039;;

http.createServer(async (req, res) =&gt; {
  // ...

  // Creates a headless Playwright MCP server with SSE transport
  const connection = await createConnection({ browser: { launchOptions: { headless: true } } });
  const transport = new SSEServerTransport(&#039;/messages&#039;, res);
  await connection.sever.connect(transport);

  // ...
});
```
&lt;/details&gt;

### Tools

The tools are available in two modes:

1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability
2. **Vision Mode**: Uses screenshots for visual-based interactions

To use Vision Mode, add the `--vision` flag when starting the server:

```js
{
  &quot;mcpServers&quot;: {
    &quot;playwright&quot;: {
      &quot;command&quot;: &quot;npx&quot;,
      &quot;args&quot;: [
        &quot;@playwright/mcp@latest&quot;,
        &quot;--vision&quot;
      ]
    }
  }
}
```

Vision Mode works best with the computer use models that are able to interact with elements using
X Y coordinate space, based on the provided screenshot.

&lt;!--- Tools generated by update-readme.js --&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Interactions&lt;/b&gt;&lt;/summary&gt;

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_snapshot**
  - Title: Page snapshot
  - Description: Capture accessibility snapshot of the current page, this is better than screenshot
  - Parameters: None
  - Read-only: **true**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_click**
  - Title: Click
  - Description: Perform click on a web page
  - Parameters:
    - `element` (string): Human-readable element description used to obtain permission to interact with the element
    - `ref` (string): Exact target element reference from the page snapshot
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_drag**
  - Title: Drag mouse
  - Description: Perform drag and drop between two elements
  - Parameters:
    - `startElement` (string): Human-readable source element description used to obtain the permission to interact with the element
    - `startRef` (string): Exact source element reference from the page snapshot
    - `endElement` (string): Human-readable target element description used to obtain the permission to interact with the element
    - `endRef` (string): Exact target element reference from the page snapshot
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_hover**
  - Title: Hover mouse
  - Description: Hover over element on page
  - Parameters:
    - `element` (string): Human-readable element description used to obtain permission to interact with the element
    - `ref` (string): Exact target element reference from the page snapshot
  - Read-only: **true**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_type**
  - Title: Type text
  - Description: Type text into editable element
  - Parameters:
    - `element` (string): Human-readable element description used to obtain permission to interact with the element
    - `ref` (string): Exact target element reference from the page snapshot
    - `text` (string): Text to type into the element
    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)
    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_select_option**
  - Title: Select option
  - Description: Select an option in a dropdown
  - Parameters:
    - `element` (string): Human-readable element description used to obtain permission to interact with the element
    - `ref` (string): Exact target element reference from the page snapshot
    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_press_key**
  - Title: Press a key
  - Description: Press a key on the keyboard
  - Parameters:
    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_wait_for**
  - Title: Wait for
  - Description: Wait for text to appear or disappear or a specified time to pass
  - Parameters:
    - `time` (number, optional): The time to wait in seconds
    - `text` (string, optional): The text to wait for
    - `textGone` (string, optional): The text to wait for to disappear
  - Read-only: **true**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_file_upload**
  - Title: Upload files
  - Description: Upload one or multiple files
  - Parameters:
    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_handle_dialog**
  - Title: Handle a dialog
  - Description: Handle a dialog
  - Parameters:
    - `accept` (boolean): Whether to accept the dialog.
    - `promptText` (string, optional): The text of the prompt in case of a prompt dialog.
  - Read-only: **false**

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Navigation&lt;/b&gt;&lt;/summary&gt;

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_navigate**
  - Title: Navigate to a URL
  - Description: Navigate to a URL
  - Parameters:
    - `url` (string): The URL to navigate to
  - Read-only: **false**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_navigate_back**
  - Title: Go back
  - Description: Go back to the previous page
  - Parameters: None
  - Read-only: **true**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_navigate_forward**
  - Title: Go forward
  - Description: Go forward to the next page
  - Parameters: None
  - Read-only: **true**

&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Resources&lt;/b&gt;&lt;/summary&gt;

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_take_screenshot**
  - Title: Take a screenshot
  - Description: Take a screenshot of the current page. You can&#039;t perform actions based on the screenshot, use browser_snapshot for actions.
  - Parameters:
    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.
    - `filename` (string, optional): File name to save the screenshot to. Defaults to `page-{timestamp}.{png|jpeg}` if not specified.
    - `element` (string, optional): Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.
    - `ref` (string, optional): Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.
  - Read-only: **true**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_pdf_save**
  - Title: Save as PDF
  - Description: Save page as PDF
  - Parameters:
    - `filename` (string, optional): File name to save the pdf to. Defaults to `page-{timestamp}.pdf` if not specified.
  - Read-only: **true**

&lt;!-- NOTE: This has been generated via update-readme.js --&gt;

- **browser_network_reque

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[groupultra/telegram-search]]></title>
            <link>https://github.com/groupultra/telegram-search</link>
            <guid>https://github.com/groupultra/telegram-search</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:10 GMT</pubDate>
            <description><![CDATA[üîç ‰∏Ä‰∏™ÂäüËÉΩÂº∫Â§ßÁöÑ Telegram ËÅäÂ§©ËÆ∞ÂΩïÊêúÁ¥¢Â∑•ÂÖ∑ÔºåÊîØÊåÅÂêëÈáèÊêúÁ¥¢ÂíåËØ≠‰πâÂåπÈÖç„ÄÇA powerful Telegram chat search tool with vector search and semantic matching capabilities.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/groupultra/telegram-search">groupultra/telegram-search</a></h1>
            <p>üîç ‰∏Ä‰∏™ÂäüËÉΩÂº∫Â§ßÁöÑ Telegram ËÅäÂ§©ËÆ∞ÂΩïÊêúÁ¥¢Â∑•ÂÖ∑ÔºåÊîØÊåÅÂêëÈáèÊêúÁ¥¢ÂíåËØ≠‰πâÂåπÈÖç„ÄÇA powerful Telegram chat search tool with vector search and semantic matching capabilities.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 2,503</p>
            <p>Forks: 174</p>
            <p>Stars today: 51 stars today</p>
            <h2>README</h2><pre>![preview](./docs/assets/preview.png)

&lt;h1 align=&quot;center&quot;&gt;Telegram Search&lt;/h1&gt;

&lt;p align=&quot;center&quot;&gt;
  [&lt;a href=&quot;https://discord.gg/NzYsmJSgCT&quot;&gt;Join Discord Server&lt;/a&gt;] [&lt;a href=&quot;https://github.com/GramSearch/telegram-search/blob/main/README_EN.md&quot;&gt;English&lt;/a&gt;]
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://deepwiki.com/GramSearch/telegram-search&quot;&gt;&lt;img src=&quot;https://deepwiki.com/badge.svg&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/GramSearch/telegram-search/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/GramSearch/telegram-search.svg?style=flat&amp;colorA=080f12&amp;colorB=1fa669&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://discord.gg/NzYsmJSgCT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscord.com%2Fapi%2Finvites%2FNzYsmJSgCT%3Fwith_counts%3Dtrue&amp;query=%24.approximate_member_count&amp;suffix=%20members&amp;logo=discord&amp;logoColor=white&amp;label=%20&amp;color=7389D8&amp;labelColor=6A7EC2&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://t.me/+Gs3SH2qAPeFhYmU9&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Telegram-%235AA9E6?logo=telegram&amp;labelColor=FFFFFF&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

&gt; ÂîØ‰∏ÄÂÆòÊñπÁΩëÁ´ô‰∏∫ `intentchat.app`ÔºåÂÖ∂‰ªñÁΩëÁ´ôÂùá‰∏∫ËØàÈ™ó„ÄÇ
&gt;
&gt; Êàë‰ª¨Êú™ÂèëË°å‰ªª‰ΩïËôöÊãüË¥ßÂ∏ÅÔºåËØ∑Âãø‰∏äÂΩìÂèóÈ™ó„ÄÇ
&gt;
&gt; Êú¨ËΩØ‰ª∂‰ªÖÂèØÂØºÂá∫ÊÇ®Ëá™Â∑±ÁöÑËÅäÂ§©ËÆ∞ÂΩï‰ª•‰æøÊêúÁ¥¢ÔºåËØ∑ÂãøÁî®‰∫éÈùûÊ≥ïÁî®ÈÄî„ÄÇ

&lt;a href=&quot;https://trendshift.io/repositories/13868&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/13868&quot; alt=&quot;groupultra%2Ftelegram-search | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;

‰∏Ä‰∏™ÂäüËÉΩÂº∫Â§ßÁöÑ Telegram ËÅäÂ§©ËÆ∞ÂΩïÊêúÁ¥¢Â∑•ÂÖ∑ÔºåÊîØÊåÅÂêëÈáèÊêúÁ¥¢ÂíåËØ≠‰πâÂåπÈÖç„ÄÇÂü∫‰∫é OpenAI ÁöÑËØ≠‰πâÂêëÈáèÊäÄÊúØÔºåËÆ©‰Ω†ÁöÑ Telegram Ê∂àÊÅØÊ£ÄÁ¥¢Êõ¥Êô∫ËÉΩ„ÄÅÊõ¥Á≤æÂáÜ„ÄÇ

- Ê¨¢Ëøé PR Ë¥°ÁåÆÔºÅ
- Áî±‰∫éÈ°πÁõÆÂ§Ñ‰∫éÂø´ÈÄüËø≠‰ª£Èò∂ÊÆµÔºåÂèØËÉΩ‰ºöÂá∫Áé∞Êï∞ÊçÆÂ∫ì‰∏çÂÖºÂÆπÁöÑÊÉÖÂÜµÔºåÂª∫ËÆÆÂÆöÊúüÂ§á‰ªΩÊï∞ÊçÆ„ÄÇ

## üíñ ËµûÂä©ËÄÖ

![Sponsors](https://github.com/luoling8192/luoling8192/raw/master/sponsorkit/sponsors.svg)

## üöÄ Âø´ÈÄüÂºÄÂßã

ËøôÊòØÂêØÂä® Telegram Search ÁöÑÊúÄÁÆÄ‰æøÁöÑÊñπÂºèÔºåÂÆÉ‰ºöÈÄöËøá Docker ÂêØÂä®ÊâÄÊúâÂøÖÈúÄÁöÑÊúçÂä°ÔºàÂåÖÊã¨Êï∞ÊçÆÂ∫ìÂíåÂ∫îÁî®ÊúçÂä°Âô®Ôºâ„ÄÇ

1.  **ÂÖãÈöÜ‰ªìÂ∫ìÔºö**

    ```bash
    git clone https://github.com/GramSearch/telegram-search.git
    cd telegram-search
    ```

2.  **ËÆæÂÆöÈÖçÁΩÆÔºö**
    Ê†πÊçÆÈúÄË¶ÅÔºå‰øÆÊîπ `config/config.yaml` ‰∏≠ÁöÑËÆæÁΩÆ„ÄÇ\
    Âä°ÂøÖ‰øÆÊîπÈÖçÁΩÆ‰∏≠ÁöÑ `database.host` ÁöÑÂÄº‰∏∫Êï∞ÊçÆÂ∫ìÂÆπÂô®ÁöÑÊúçÂä°ÂêçÁß∞ &quot;pgvector&quot;„ÄÇ
    ```bash
    cp config/config.example.yaml config/config.yaml
    ```

3.  **ÂêØÂä®ÊúçÂä°Ôºö**

    ```bash
    docker compose up -d
    ```

ËÆøÈóÆ `http://localhost:3333` Âç≥ÂèØÊâìÂºÄÊêúÁ¥¢ÁïåÈù¢„ÄÇ

## üíª Êú¨Âú∞ËøêË°å

1.  **ÂÖãÈöÜ‰ªìÂ∫ì**

    ```bash
    git clone https://github.com/GramSearch/telegram-search.git
    cd telegram-search
    ```

2.  **ÂÆâË£Ö‰æùËµñÔºö**

    ```bash
    pnpm install
    ```

3.  **ÈÖçÁΩÆÁéØÂ¢É**:

    ```bash
    cp config/config.example.yaml config/config.yaml
    ```

4.  **ÂêØÂä®Êï∞ÊçÆÂ∫ìÂÆπÂô®Ôºö**
    Âú®Êú¨Âú∞ÂºÄÂèëÊ®°Âºè‰∏ãÔºå Docker Âè™Áî®Êù•ÂêØÂä®Êï∞ÊçÆÂ∫ìÂÆπÂô®„ÄÇ

    ```bash
    docker compose up -d pgvector
    ```

5.  **ÂêåÊ≠•Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑÔºö**

    ```bash
    pnpm run db:migrate
    ```

6.  **ÂêØÂä®ÊúçÂä°Ôºö**

    ```bash
    # ÂêØÂä®ÂêéÁ´ØÊúçÂä°
    pnpm run dev:server

    # ÂêØÂä®ÂâçÁ´ØÁïåÈù¢
    pnpm run dev:frontend
    ```

ËÆøÈóÆ `http://localhost:3333` Âç≥ÂèØÊâìÂºÄÊêúÁ¥¢ÁïåÈù¢„ÄÇ

## üöÄ Activity

[![Star History Chart](https://api.star-history.com/svg?repos=luoling8192/telegram-search&amp;type=Date)](https://star-history.com/#luoling8192/telegram-search&amp;Date)
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[adobe/react-spectrum]]></title>
            <link>https://github.com/adobe/react-spectrum</link>
            <guid>https://github.com/adobe/react-spectrum</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:09 GMT</pubDate>
            <description><![CDATA[A collection of libraries and tools that help you build adaptive, accessible, and robust user experiences.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/adobe/react-spectrum">adobe/react-spectrum</a></h1>
            <p>A collection of libraries and tools that help you build adaptive, accessible, and robust user experiences.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 14,080</p>
            <p>Forks: 1,262</p>
            <p>Stars today: 11 stars today</p>
            <h2>README</h2><pre>#  [React Spectrum Libraries](https://react-spectrum.adobe.com/)

A collection of libraries and tools that help you build adaptive, accessible, and robust user experiences.

### React Spectrum

A React implementation of Spectrum, Adobe‚Äôs design system. Spectrum provides adaptive, accessible, and cohesive experiences for all Adobe applications.

[Explore React Spectrum](https://react-spectrum.adobe.com/react-spectrum/index.html)

### React Aria

A library of unstyled React components and hooks that helps you build accessible, high quality UI components for your application or design system.

[Learn more about React Aria](https://react-spectrum.adobe.com/react-aria/index.html)

### React Stately

A library of React Hooks that provides cross-platform state management for your design system.

[More information about React Stately](https://react-spectrum.adobe.com/react-stately/index.html)

### Internationalized

A collection of framework-agnostic internationalization libraries for the web.

[Internationalized Packages](https://react-spectrum.adobe.com/internationalized/index.html)

## Features

* ‚ôøÔ∏è **[Accessible](https://react-spectrum.adobe.com/react-aria/accessibility.html)** ‚Äì Accessibility and behavior is implemented according to [WAI-ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.2/), including full screen reader and keyboard navigation support. All components have been tested across a wide variety of screen readers and devices to ensure the best experience possible for all users.
* üì± **[Adaptive](https://react-spectrum.adobe.com/react-aria/interactions.html)** ‚Äì All components are designed to work with mouse, touch, and keyboard interactions. They‚Äôre built with responsive design principles to deliver a great experience, no matter the device.
* üåç **[International](https://react-spectrum.adobe.com/react-aria/internationalization.html)** ‚Äì Support over 30 languages is included out of the box, including support for right-to-left languages, date and number formatting, and more.
* üé® **[Customizable](https://react-spectrum.adobe.com/react-spectrum/theming.html)** ‚Äì React Spectrum components support custom themes, and automatically adapt for dark mode. For even more customizability, you can build your own components with your own DOM structure and styling using the [React Aria](https://react-spectrum.adobe.com/react-aria/index.html) and [React Stately](https://react-spectrum.adobe.com/react-stately/index.html) hooks to provide behavior, accessibility, and interactions.

## Getting started

React Spectrum includes several libraries, which you can choose depending on your usecase.

* [React Spectrum](https://react-spectrum.adobe.com/react-spectrum/getting-started.html) is an implementation of Adobe&#039;s design system. If you‚Äôre integrating with Adobe software or would like a complete component library to use in your project, look no further!
* [React Aria](https://react-spectrum.adobe.com/react-aria/getting-started.html) is a collection of unstyled React components and hooks that helps you build accessible, high quality UI components for your own application or design system. If you&#039;re building a component library for the web from scratch with your own styling, start here.
* [React Stately](https://react-spectrum.adobe.com/react-stately/getting-started.html) is a library of state management hooks for use in your component library. If you&#039;re using React Aria, you&#039;ll likely also use React Stately, but it can also be used independently (e.g. on other platforms like React Native).

[Read more about our architecture](https://react-spectrum.adobe.com/architecture.html).

## Contributing

One of the goals of the React Spectrum project is to make building design systems and component libraries as easy as possible, while maintaining high quality interactions and accessibility support. We aim to raise the bar for web applications. The best way to achieve that goal is **together**. We would love contributions from the community no matter how big or small. üòç

Read our [contributing guide](https://react-spectrum.adobe.com/contribute.html) to learn about how to propose bugfixes and improvements, and how the development process works. For detailed information about our architecture, and how all of the pieces fit together, read our [architecture docs](https://react-spectrum.adobe.com/architecture.html).
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[punkpeye/fastmcp]]></title>
            <link>https://github.com/punkpeye/fastmcp</link>
            <guid>https://github.com/punkpeye/fastmcp</guid>
            <pubDate>Fri, 27 Jun 2025 00:05:08 GMT</pubDate>
            <description><![CDATA[A TypeScript framework for building MCP servers.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/punkpeye/fastmcp">punkpeye/fastmcp</a></h1>
            <p>A TypeScript framework for building MCP servers.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 1,955</p>
            <p>Forks: 139</p>
            <p>Stars today: 12 stars today</p>
            <h2>README</h2><pre># FastMCP

A TypeScript framework for building [MCP](https://glama.ai/mcp) servers capable of handling client sessions.

&gt; [!NOTE]
&gt;
&gt; For a Python implementation, see [FastMCP](https://github.com/jlowin/fastmcp).

## Features

- Simple Tool, Resource, Prompt definition
- [Authentication](#authentication)
- [Passing headers through context](#passing-headers-through-context)
- [Sessions](#sessions)
- [Image content](#returning-an-image)
- [Audio content](#returning-an-audio)
- [Embedded](#embedded-resources)
- [Logging](#logging)
- [Error handling](#errors)
- [HTTP Streaming](#http-streaming) (with SSE compatibility)
- CORS (enabled by default)
- [Progress notifications](#progress)
- [Streaming output](#streaming-output)
- [Typed server events](#typed-server-events)
- [Prompt argument auto-completion](#prompt-argument-auto-completion)
- [Sampling](#requestsampling)
- [Configurable ping behavior](#configurable-ping-behavior)
- [Health-check endpoint](#health-check-endpoint)
- [Roots](#roots-management)
- CLI for [testing](#test-with-mcp-cli) and [debugging](#inspect-with-mcp-inspector)

## When to use FastMCP over the official SDK?

FastMCP is built on top of the official SDK.

The official SDK provides foundational blocks for building MCPs, but leaves many implementation details to you:

- [Initiating and configuring](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L664-L744) all the server components
- [Handling of connections](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L760-L850)
- [Handling of tools](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L1303-L1498)
- [Handling of responses](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L989-L1060)
- [Handling of resources](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L1151-L1242)
- Adding [prompts](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L760-L850), [resources](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L960-L962), [resource templates](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L964-L987)
- Embedding [resources](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L1569-L1643), [image](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L51-L111) and [audio](https://github.com/punkpeye/fastmcp/blob/06c2af7a3d7e3d8c638deac1964ce269ce8e518b/src/FastMCP.ts#L113-L173) content blocks

FastMCP eliminates this complexity by providing an opinionated framework that:

- Handles all the boilerplate automatically
- Provides simple, intuitive APIs for common tasks
- Includes built-in best practices and error handling
- Lets you focus on your MCP&#039;s core functionality

**When to choose FastMCP:** You want to build MCP servers quickly without dealing with low-level implementation details.

**When to use the official SDK:** You need maximum control or have specific architectural requirements. In this case, we encourage referencing FastMCP&#039;s implementation to avoid common pitfalls.

## Installation

```bash
npm install fastmcp
```

## Quickstart

&gt; [!NOTE]
&gt;
&gt; There are many real-world examples of using FastMCP in the wild. See the [Showcase](#showcase) for examples.

```ts
import { FastMCP } from &quot;fastmcp&quot;;
import { z } from &quot;zod&quot;; // Or any validation library that supports Standard Schema

const server = new FastMCP({
  name: &quot;My Server&quot;,
  version: &quot;1.0.0&quot;,
});

server.addTool({
  name: &quot;add&quot;,
  description: &quot;Add two numbers&quot;,
  parameters: z.object({
    a: z.number(),
    b: z.number(),
  }),
  execute: async (args) =&gt; {
    return String(args.a + args.b);
  },
});

server.start({
  transportType: &quot;stdio&quot;,
});
```

_That&#039;s it!_ You have a working MCP server.

You can test the server in terminal with:

```bash
git clone https://github.com/punkpeye/fastmcp.git
cd fastmcp

pnpm install
pnpm build

# Test the addition server example using CLI:
npx fastmcp dev src/examples/addition.ts
# Test the addition server example using MCP Inspector:
npx fastmcp inspect src/examples/addition.ts
```

If you are looking for a boilerplate repository to build your own MCP server, check out [fastmcp-boilerplate](https://github.com/punkpeye/fastmcp-boilerplate).

### Remote Server Options

FastMCP supports multiple transport options for remote communication, allowing an MCP hosted on a remote machine to be accessed over the network.

#### HTTP Streaming

[HTTP streaming](https://www.cloudflare.com/learning/video/what-is-http-live-streaming/) provides a more efficient alternative to SSE in environments that support it, with potentially better performance for larger payloads.

You can run the server with HTTP streaming support:

```ts
server.start({
  transportType: &quot;httpStream&quot;,
  httpStream: {
    port: 8080,
  },
});
```

This will start the server and listen for HTTP streaming connections on `http://localhost:8080/mcp`.

&gt; **Note:** You can also customize the endpoint path using the `httpStream.endpoint` option (default is `/mcp`).

You can connect to these servers using the appropriate client transport.

For HTTP streaming connections:

```ts
import { StreamableHTTPClientTransport } from &quot;@modelcontextprotocol/sdk/client/streamableHttp.js&quot;;

const client = new Client(
  {
    name: &quot;example-client&quot;,
    version: &quot;1.0.0&quot;,
  },
  {
    capabilities: {},
  },
);

const transport = new StreamableHTTPClientTransport(
  new URL(`http://localhost:8080/mcp`),
);

await client.connect(transport);
```

For SSE connections:

```ts
import { SSEClientTransport } from &quot;@modelcontextprotocol/sdk/client/sse.js&quot;;

const client = new Client(
  {
    name: &quot;example-client&quot;,
    version: &quot;1.0.0&quot;,
  },
  {
    capabilities: {},
  },
);

const transport = new SSEClientTransport(new URL(`http://localhost:8080/sse`));

await client.connect(transport);
```

## Core Concepts

### Tools

[Tools](https://modelcontextprotocol.io/docs/concepts/tools) in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions.

FastMCP uses the [Standard Schema](https://standardschema.dev) specification for defining tool parameters. This allows you to use your preferred schema validation library (like Zod, ArkType, or Valibot) as long as it implements the spec.

**Zod Example:**

```typescript
import { z } from &quot;zod&quot;;

server.addTool({
  name: &quot;fetch-zod&quot;,
  description: &quot;Fetch the content of a url (using Zod)&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return await fetchWebpageContent(args.url);
  },
});
```

**ArkType Example:**

```typescript
import { type } from &quot;arktype&quot;;

server.addTool({
  name: &quot;fetch-arktype&quot;,
  description: &quot;Fetch the content of a url (using ArkType)&quot;,
  parameters: type({
    url: &quot;string&quot;,
  }),
  execute: async (args) =&gt; {
    return await fetchWebpageContent(args.url);
  },
});
```

**Valibot Example:**

Valibot requires the peer dependency @valibot/to-json-schema.

```typescript
import * as v from &quot;valibot&quot;;

server.addTool({
  name: &quot;fetch-valibot&quot;,
  description: &quot;Fetch the content of a url (using Valibot)&quot;,
  parameters: v.object({
    url: v.string(),
  }),
  execute: async (args) =&gt; {
    return await fetchWebpageContent(args.url);
  },
});
```

#### Tools Without Parameters

When creating tools that don&#039;t require parameters, you have two options:

1. Omit the parameters property entirely:

   ```typescript
   server.addTool({
     name: &quot;sayHello&quot;,
     description: &quot;Say hello&quot;,
     // No parameters property
     execute: async () =&gt; {
       return &quot;Hello, world!&quot;;
     },
   });
   ```

2. Explicitly define empty parameters:

   ```typescript
   import { z } from &quot;zod&quot;;

   server.addTool({
     name: &quot;sayHello&quot;,
     description: &quot;Say hello&quot;,
     parameters: z.object({}), // Empty object
     execute: async () =&gt; {
       return &quot;Hello, world!&quot;;
     },
   });
   ```

&gt; [!NOTE]
&gt;
&gt; Both approaches are fully compatible with all MCP clients, including Cursor. FastMCP automatically generates the proper schema in both cases.

#### Returning a string

`execute` can return a string:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return &quot;Hello, world!&quot;;
  },
});
```

The latter is equivalent to:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return {
      content: [
        {
          type: &quot;text&quot;,
          text: &quot;Hello, world!&quot;,
        },
      ],
    };
  },
});
```

#### Returning a list

If you want to return a list of messages, you can return an object with a `content` property:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return {
      content: [
        { type: &quot;text&quot;, text: &quot;First message&quot; },
        { type: &quot;text&quot;, text: &quot;Second message&quot; },
      ],
    };
  },
});
```

#### Returning an image

Use the `imageContent` to create a content object for an image:

```js
import { imageContent } from &quot;fastmcp&quot;;

server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return imageContent({
      url: &quot;https://example.com/image.png&quot;,
    });

    // or...
    // return imageContent({
    //   path: &quot;/path/to/image.png&quot;,
    // });

    // or...
    // return imageContent({
    //   buffer: Buffer.from(&quot;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&quot;, &quot;base64&quot;),
    // });

    // or...
    // return {
    //   content: [
    //     await imageContent(...)
    //   ],
    // };
  },
});
```

The `imageContent` function takes the following options:

- `url`: The URL of the image.
- `path`: The path to the image file.
- `buffer`: The image data as a buffer.

Only one of `url`, `path`, or `buffer` must be specified.

The above example is equivalent to:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return {
      content: [
        {
          type: &quot;image&quot;,
          data: &quot;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&quot;,
          mimeType: &quot;image/png&quot;,
        },
      ],
    };
  },
});
```

#### Configurable Ping Behavior

FastMCP includes a configurable ping mechanism to maintain connection health. The ping behavior can be customized through server options:

```ts
const server = new FastMCP({
  name: &quot;My Server&quot;,
  version: &quot;1.0.0&quot;,
  ping: {
    // Explicitly enable or disable pings (defaults vary by transport)
    enabled: true,
    // Configure ping interval in milliseconds (default: 5000ms)
    intervalMs: 10000,
    // Set log level for ping-related messages (default: &#039;debug&#039;)
    logLevel: &quot;debug&quot;,
  },
});
```

By default, ping behavior is optimized for each transport type:

- Enabled for SSE and HTTP streaming connections (which benefit from keep-alive)
- Disabled for `stdio` connections (where pings are typically unnecessary)

This configurable approach helps reduce log verbosity and optimize performance for different usage scenarios.

### Health-check Endpoint

When you run FastMCP with the `httpStream` transport you can optionally expose a
simple HTTP endpoint that returns a plain-text response useful for load-balancer
or container orchestration liveness checks.

Enable (or customise) the endpoint via the `health` key in the server options:

```ts
const server = new FastMCP({
  name: &quot;My Server&quot;,
  version: &quot;1.0.0&quot;,
  health: {
    // Enable / disable (default: true)
    enabled: true,
    // Body returned by the endpoint (default: &#039;ok&#039;)
    message: &quot;healthy&quot;,
    // Path that should respond (default: &#039;/health&#039;)
    path: &quot;/healthz&quot;,
    // HTTP status code to return (default: 200)
    status: 200,
  },
});

await server.start({
  transportType: &quot;httpStream&quot;,
  httpStream: { port: 8080 },
});
```

Now a request to `http://localhost:8080/healthz` will return:

```
HTTP/1.1 200 OK
content-type: text/plain

healthy
```

The endpoint is ignored when the server is started with the `stdio` transport.

#### Roots Management

FastMCP supports [Roots](https://modelcontextprotocol.io/docs/concepts/roots) - Feature that allows clients to provide a set of filesystem-like root locations that can be listed and dynamically updated. The Roots feature can be configured or disabled in server options:

```ts
const server = new FastMCP({
  name: &quot;My Server&quot;,
  version: &quot;1.0.0&quot;,
  roots: {
    // Set to false to explicitly disable roots support
    enabled: false,
    // By default, roots support is enabled (true)
  },
});
```

This provides the following benefits:

- Better compatibility with different clients that may not support Roots
- Reduced error logs when connecting to clients that don&#039;t implement roots capability
- More explicit control over MCP server capabilities
- Graceful degradation when roots functionality isn&#039;t available

You can listen for root changes in your server:

```ts
server.on(&quot;connect&quot;, (event) =&gt; {
  const session = event.session;

  // Access the current roots
  console.log(&quot;Initial roots:&quot;, session.roots);

  // Listen for changes to the roots
  session.on(&quot;rootsChanged&quot;, (event) =&gt; {
    console.log(&quot;Roots changed:&quot;, event.roots);
  });
});
```

When a client doesn&#039;t support roots or when roots functionality is explicitly disabled, these operations will gracefully handle the situation without throwing errors.

### Returning an audio

Use the `audioContent` to create a content object for an audio:

```js
import { audioContent } from &quot;fastmcp&quot;;

server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return audioContent({
      url: &quot;https://example.com/audio.mp3&quot;,
    });

    // or...
    // return audioContent({
    //   path: &quot;/path/to/audio.mp3&quot;,
    // });

    // or...
    // return audioContent({
    //   buffer: Buffer.from(&quot;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&quot;, &quot;base64&quot;),
    // });

    // or...
    // return {
    //   content: [
    //     await audioContent(...)
    //   ],
    // };
  },
});
```

The `audioContent` function takes the following options:

- `url`: The URL of the audio.
- `path`: The path to the audio file.
- `buffer`: The audio data as a buffer.

Only one of `url`, `path`, or `buffer` must be specified.

The above example is equivalent to:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return {
      content: [
        {
          type: &quot;audio&quot;,
          data: &quot;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&quot;,
          mimeType: &quot;audio/mpeg&quot;,
        },
      ],
    };
  },
});
```

#### Return combination type

You can combine various types in this way and send them back to AI

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    return {
      content: [
        {
          type: &quot;text&quot;,
          text: &quot;Hello, world!&quot;,
        },
        {
          type: &quot;image&quot;,
          data: &quot;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&quot;,
          mimeType: &quot;image/png&quot;,
        },
        {
          type: &quot;audio&quot;,
          data: &quot;iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=&quot;,
          mimeType: &quot;audio/mpeg&quot;,
        },
      ],
    };
  },

  // or...
  // execute: async (args) =&gt; {
  //   const imgContent = await imageContent({
  //     url: &quot;https://example.com/image.png&quot;,
  //   });
  //   const audContent = await audioContent({
  //     url: &quot;https://example.com/audio.mp3&quot;,
  //   });
  //   return {
  //     content: [
  //       {
  //         type: &quot;text&quot;,
  //         text: &quot;Hello, world!&quot;,
  //       },
  //       imgContent,
  //       audContent,
  //     ],
  //   };
  // },
});
```

#### Logging

Tools can log messages to the client using the `log` object in the context object:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args, { log }) =&gt; {
    log.info(&quot;Downloading file...&quot;, {
      url,
    });

    // ...

    log.info(&quot;Downloaded file&quot;);

    return &quot;done&quot;;
  },
});
```

The `log` object has the following methods:

- `debug(message: string, data?: SerializableValue)`
- `error(message: string, data?: SerializableValue)`
- `info(message: string, data?: SerializableValue)`
- `warn(message: string, data?: SerializableValue)`

#### Errors

The errors that are meant to be shown to the user should be thrown as `UserError` instances:

```js
import { UserError } from &quot;fastmcp&quot;;

server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args) =&gt; {
    if (args.url.startsWith(&quot;https://example.com&quot;)) {
      throw new UserError(&quot;This URL is not allowed&quot;);
    }

    return &quot;done&quot;;
  },
});
```

#### Progress

Tools can report progress by calling `reportProgress` in the context object:

```js
server.addTool({
  name: &quot;download&quot;,
  description: &quot;Download a file&quot;,
  parameters: z.object({
    url: z.string(),
  }),
  execute: async (args, { reportProgress }) =&gt; {
    await reportProgress({
      progress: 0,
      total: 100,
    });

    // ...

    await reportProgress({
      progress: 100,
      total: 100,
    });

    return &quot;done&quot;;
  },
});
```

#### Streaming Output

FastMCP supports streaming partial results from tools while they&#039;re still executing, enabling responsive UIs and real-time feedback. This is particularly useful for:

- Long-running operations that generate content incrementally
- Progressive generation of text, images, or other media
- Operations where users benefit from seeing immediate partial results

To enable streaming for a tool, add the `streamingHint` annotation and use the `streamContent` method:

```js
server.addTool({
  name: &quot;generateText&quot;,
  description: &quot;Generate text incrementally&quot;,
  parameters: z.object({
    prompt: z.string(),
  }),
  annotations: {
    streamingHint: true, // Signals this tool uses streaming
    readOnlyHint: true,
  },
  execute: async (args, { streamContent }) =&gt; {
    // Send initial content immediately
    await streamContent({ type: &quot;text&quot;, text: &quot;Starting generation...\n&quot; });

    // Simulate incremental content generation
    const words = &quot;The quick brown fox jumps over the lazy dog.&quot;.split(&quot; &quot;);
    for (const word of words) {
      await streamContent({ type: &quot;text&quot;, text: word + &quot; &quot; });
      await new Promise((resolve) =&gt; setTimeout(resolve, 300)); // Simulate delay
    }

    // When using streamContent, you can:
    // 1. Return void (if all content was streamed)
    // 2. Return a final result (which will be appended to streamed content)

    // Option 1: All content was streamed, so return void
    return;

    // Option 2: Return final content that will be appended
    // return &quot;Generation complete!&quot;;
  },
});
```

Streaming works with all content types (text, image, audio) and can be combined with progress reporting:

```js
server.addTool

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
    </channel>
</rss>