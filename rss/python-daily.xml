<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>GitHub Trending Today for python - Python Daily</title>
        <link>https://github.com/trending</link>
        <description>The most popular GitHub repositories today for python.</description>
        <lastBuildDate>Sat, 19 Apr 2025 00:04:19 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>GitHub Trending RSS Generator</generator>
        <language>en</language>
        <copyright>All rights reserved 2025, GitHub</copyright>
        <item>
            <title><![CDATA[jlowin/fastmcp]]></title>
            <link>https://github.com/jlowin/fastmcp</link>
            <guid>https://github.com/jlowin/fastmcp</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:19 GMT</pubDate>
            <description><![CDATA[üöÄ The fast, Pythonic way to build MCP servers and clients]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/jlowin/fastmcp">jlowin/fastmcp</a></h1>
            <p>üöÄ The fast, Pythonic way to build MCP servers and clients</p>
            <p>Language: Python</p>
            <p>Stars: 5,743</p>
            <p>Forks: 291</p>
            <p>Stars today: 234 stars today</p>
            <h2>README</h2><pre>&lt;div align=&quot;center&quot;&gt;

&lt;!-- omit in toc --&gt;
# FastMCP v2 üöÄ
&lt;strong&gt;The fast, Pythonic way to build MCP servers and clients.&lt;/strong&gt;

[![Docs](https://img.shields.io/badge/docs-gofastmcp.com-blue)](https://gofastmcp.com)
[![PyPI - Version](https://img.shields.io/pypi/v/fastmcp.svg)](https://pypi.org/project/fastmcp)
[![Tests](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg)](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml)
[![License](https://img.shields.io/github/license/jlowin/fastmcp.svg)](https://github.com/jlowin/fastmcp/blob/main/LICENSE)

&lt;a href=&quot;https://trendshift.io/repositories/13266&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/13266&quot; alt=&quot;jlowin%2Ffastmcp | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/div&gt;

The [Model Context Protocol (MCP)](https://modelcontextprotocol.io) is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code.

```python
# server.py
from fastmcp import FastMCP

mcp = FastMCP(&quot;Demo üöÄ&quot;)

@mcp.tool()
def add(a: int, b: int) -&gt; int:
    &quot;&quot;&quot;Add two numbers&quot;&quot;&quot;
    return a + b

if __name__ == &quot;__main__&quot;:
    mcp.run()
```


Run the server locally:
```bash
fastmcp run server.py
```

FastMCP handles the complex protocol details and server management, letting you focus on building great tools and applications. It&#039;s designed to feel natural to Python developers.


&lt;!-- omit in toc --&gt;
## Table of Contents

- [What is MCP?](#what-is-mcp)
- [Why FastMCP?](#why-fastmcp)
- [Key Features](#key-features)
  - [Servers](#servers)
  - [Clients](#clients)
- [What&#039;s New in v2?](#whats-new-in-v2)
- [Documentation](#documentation)
  - [Installation](#installation)
  - [Quickstart](#quickstart)
- [Core Concepts](#core-concepts)
  - [The `FastMCP` Server](#the-fastmcp-server)
  - [Tools](#tools)
  - [Resources](#resources)
  - [Prompts](#prompts)
  - [Context](#context)
  - [Images](#images)
  - [MCP Clients](#mcp-clients)
    - [Client Methods](#client-methods)
    - [Transport Options](#transport-options)
    - [LLM Sampling](#llm-sampling)
    - [Roots Access](#roots-access)
- [Advanced Features](#advanced-features)
  - [Proxy Servers](#proxy-servers)
  - [Composing MCP Servers](#composing-mcp-servers)
  - [OpenAPI \&amp; FastAPI Generation](#openapi--fastapi-generation)
  - [Handling `stderr`](#handling-stderr)
- [Running Your Server](#running-your-server)
  - [Development Mode (Recommended for Building \&amp; Testing)](#development-mode-recommended-for-building--testing)
  - [Claude Desktop Integration (For Regular Use)](#claude-desktop-integration-for-regular-use)
  - [Direct Execution (For Advanced Use Cases)](#direct-execution-for-advanced-use-cases)
  - [Server Object Names](#server-object-names)
- [Examples](#examples)
- [Contributing](#contributing)
    - [Prerequisites](#prerequisites)
    - [Setup](#setup)
    - [Testing](#testing)
    - [Formatting \&amp; Linting](#formatting--linting)
    - [Pull Requests](#pull-requests)


## What is MCP?

The [Model Context Protocol (MCP)](https://modelcontextprotocol.io) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:

- Expose data through **Resources** (think GET endpoints; load info into context)
- Provide functionality through **Tools** (think POST/PUT endpoints; execute actions)
- Define interaction patterns through **Prompts** (reusable templates)
- And more!

FastMCP provides a high-level, Pythonic interface for building and interacting with these servers.

## Why FastMCP?

The MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It&#039;s designed to be high-level and Pythonic; in most cases, decorating a function is all you need.

FastMCP aims to be:


üöÄ **Fast:** High-level interface means less code and faster development

üçÄ **Simple:** Build MCP servers with minimal boilerplate

üêç **Pythonic:** Feels natural to Python developers

üîç **Complete:** FastMCP aims to provide a full implementation of the core MCP specification for both servers and clients

## Key Features

### Servers
- **Create** servers with minimal boilerplate using intuitive decorators
- **Proxy** existing servers to modify configuration or transport
- **Compose** servers by into complex applications
- **Generate** servers from OpenAPI specs or FastAPI objects

### Clients
- **Interact** with MCP servers programmatically
- **Connect** to any MCP server using any transport
- **Test** your servers without manual intervention
- **Innovate** with core MCP capabilities like LLM sampling


## What&#039;s New in v2?

FastMCP 1.0 made it so easy to build MCP servers that it&#039;s now part of the [official Model Context Protocol Python SDK](https://github.com/modelcontextprotocol/python-sdk)! For basic use cases, you can use the upstream version by importing `mcp.server.fastmcp.FastMCP` (or installing `fastmcp=1.0`). 

Based on how the MCP ecosystem is evolving, FastMCP 2.0 builds on that foundation to introduce a variety of new features (and more experimental ideas). It adds advanced features like proxying and composing MCP servers, as well as automatically generating them from OpenAPI specs or FastAPI objects. FastMCP 2.0 also introduces new client-side functionality like LLM sampling.


## Documentation

üìö FastMCP&#039;s documentation is available at [gofastmcp.com](https://gofastmcp.com).

---

### Installation

We strongly recommend installing FastMCP with [uv](https://docs.astral.sh/uv/), as it is required for deploying servers via the CLI:

```bash
uv pip install fastmcp
```

Note: on macOS, uv may need to be installed with Homebrew (`brew install uv`) in order to make it available to the Claude Desktop app.

For development, install with:
```bash
# Clone the repo first
git clone https://github.com/jlowin/fastmcp.git
cd fastmcp
# Install with dev dependencies
uv sync
```

### Quickstart

Let&#039;s create a simple MCP server that exposes a calculator tool and some data:

```python
# server.py
from fastmcp import FastMCP

# Create an MCP server
mcp = FastMCP(&quot;Demo&quot;)

# Add an addition tool
@mcp.tool()
def add(a: int, b: int) -&gt; int:
    &quot;&quot;&quot;Add two numbers&quot;&quot;&quot;
    return a + b

# Add a dynamic greeting resource
@mcp.resource(&quot;greeting://{name}&quot;)
def get_greeting(name: str) -&gt; str:
    &quot;&quot;&quot;Get a personalized greeting&quot;&quot;&quot;
    return f&quot;Hello, {name}!&quot;
```

You can install this server in [Claude Desktop](https://claude.ai/download) and interact with it right away by running:
```bash
fastmcp install server.py
```

![MCP Inspector](/docs/assets/demo-inspector.png)


## Core Concepts

These are the building blocks for creating MCP servers, using the familiar decorator-based approach.

### The `FastMCP` Server

The central object representing your MCP application. It handles connections, protocol details, and routing.

```python
from fastmcp import FastMCP

# Create a named server
mcp = FastMCP(&quot;My App&quot;)

# Specify dependencies needed when deployed via `fastmcp install`
mcp = FastMCP(&quot;My App&quot;, dependencies=[&quot;pandas&quot;, &quot;numpy&quot;])
```

### Tools

Tools allow LLMs to perform actions by executing your Python functions. They are ideal for tasks that involve computation, external API calls, or side effects.

Decorate synchronous or asynchronous functions with `@mcp.tool()`. FastMCP automatically generates the necessary MCP schema based on type hints and docstrings. Pydantic models can be used for complex inputs.

```python
import httpx
from pydantic import BaseModel

class UserInfo(BaseModel):
    user_id: int
    notify: bool = False

@mcp.tool()
async def send_notification(user: UserInfo, message: str) -&gt; dict:
    &quot;&quot;&quot;Sends a notification to a user if requested.&quot;&quot;&quot;
    if user.notify:
        # Simulate sending notification
        print(f&quot;Notifying user {user.user_id}: {message}&quot;)
        return {&quot;status&quot;: &quot;sent&quot;, &quot;user_id&quot;: user.user_id}
    return {&quot;status&quot;: &quot;skipped&quot;, &quot;user_id&quot;: user.user_id}

@mcp.tool()
def get_stock_price(ticker: str) -&gt; float:
    &quot;&quot;&quot;Gets the current price for a stock ticker.&quot;&quot;&quot;
    # Replace with actual API call
    prices = {&quot;AAPL&quot;: 180.50, &quot;GOOG&quot;: 140.20}
    return prices.get(ticker.upper(), 0.0)
```

### Resources

Resources expose data to LLMs. They should primarily provide information without significant computation or side effects (like GET requests).

Decorate functions with `@mcp.resource(&quot;your://uri&quot;)`. Use curly braces `{}` in the URI to define dynamic resources (templates) where parts of the URI become function parameters.

```python
# Static resource returning simple text
@mcp.resource(&quot;config://app-version&quot;)
def get_app_version() -&gt; str:
    &quot;&quot;&quot;Returns the application version.&quot;&quot;&quot;
    return &quot;v2.1.0&quot;

# Dynamic resource template expecting a &#039;user_id&#039; from the URI
@mcp.resource(&quot;db://users/{user_id}/email&quot;)
async def get_user_email(user_id: str) -&gt; str:
    &quot;&quot;&quot;Retrieves the email address for a given user ID.&quot;&quot;&quot;
    # Replace with actual database lookup
    emails = {&quot;123&quot;: &quot;alice@example.com&quot;, &quot;456&quot;: &quot;bob@example.com&quot;}
    return emails.get(user_id, &quot;not_found@example.com&quot;)

# Resource returning JSON data
@mcp.resource(&quot;data://product-categories&quot;)
def get_categories() -&gt; list[str]:
    &quot;&quot;&quot;Returns a list of available product categories.&quot;&quot;&quot;
    return [&quot;Electronics&quot;, &quot;Books&quot;, &quot;Home Goods&quot;]
```

### Prompts

Prompts define reusable templates or interaction patterns for the LLM. They help guide the LLM on how to use your server&#039;s capabilities effectively.

Decorate functions with `@mcp.prompt()`. The function should return the desired prompt content, which can be a simple string, a `Message` object (like `UserMessage` or `AssistantMessage`), or a list of these.

```python
from fastmcp.prompts.base import UserMessage, AssistantMessage

@mcp.prompt()
def ask_review(code_snippet: str) -&gt; str:
    &quot;&quot;&quot;Generates a standard code review request.&quot;&quot;&quot;
    return f&quot;Please review the following code snippet for potential bugs and style issues:\n```python\n{code_snippet}\n```&quot;

@mcp.prompt()
def debug_session_start(error_message: str) -&gt; list[Message]:
    &quot;&quot;&quot;Initiates a debugging help session.&quot;&quot;&quot;
    return [
        UserMessage(f&quot;I encountered an error:\n{error_message}&quot;),
        AssistantMessage(&quot;Okay, I can help with that. Can you provide the full traceback and tell me what you were trying to do?&quot;)
    ]
```

### Context

Gain access to MCP server capabilities *within* your tool or resource functions by adding a parameter type-hinted with `fastmcp.Context`.

```python
from fastmcp import Context, FastMCP

mcp = FastMCP(&quot;Context Demo&quot;)

@mcp.resource(&quot;system://status&quot;)
async def get_system_status(ctx: Context) -&gt; dict:
    &quot;&quot;&quot;Checks system status and logs information.&quot;&quot;&quot;
    await ctx.info(&quot;Checking system status...&quot;)
    # Perform checks
    await ctx.report_progress(1, 1) # Report completion
    return {&quot;status&quot;: &quot;OK&quot;, &quot;load&quot;: 0.5, &quot;client&quot;: ctx.client_id}

@mcp.tool()
async def process_large_file(file_uri: str, ctx: Context) -&gt; str:
    &quot;&quot;&quot;Processes a large file, reporting progress and reading resources.&quot;&quot;&quot;
    await ctx.info(f&quot;Starting processing for {file_uri}&quot;)
    # Read the resource using the context
    file_content_resource = await ctx.read_resource(file_uri)
    file_content = file_content_resource[0].content # Assuming single text content
    lines = file_content.splitlines()
    total_lines = len(lines)

    for i, line in enumerate(lines):
        # Process line...
        if (i + 1) % 100 == 0: # Report progress every 100 lines
            await ctx.report_progress(i + 1, total_lines)

    await ctx.info(f&quot;Finished processing {file_uri}&quot;)
    return f&quot;Processed {total_lines} lines.&quot;

```

The `Context` object provides:
*   Logging: `ctx.debug()`, `ctx.info()`, `ctx.warning()`, `ctx.error()`
*   Progress Reporting: `ctx.report_progress(current, total)`
*   Resource Access: `await ctx.read_resource(uri)`
*   Request Info: `ctx.request_id`, `ctx.client_id`
*   Sampling (Advanced): `await ctx.sample(...)` to ask the connected LLM client for completions.

### Images

Easily handle image input and output using the `fastmcp.Image` helper class.

```python
from fastmcp import FastMCP, Image
from PIL import Image as PILImage
import io

mcp = FastMCP(&quot;Image Demo&quot;)

@mcp.tool()
def create_thumbnail(image_data: Image) -&gt; Image:
    &quot;&quot;&quot;Creates a 100x100 thumbnail from the provided image.&quot;&quot;&quot;
    img = PILImage.open(io.BytesIO(image_data.data)) # Assumes image_data received as Image with bytes
    img.thumbnail((100, 100))
    buffer = io.BytesIO()
    img.save(buffer, format=&quot;PNG&quot;)
    # Return a new Image object with the thumbnail data
    return Image(data=buffer.getvalue(), format=&quot;png&quot;)

@mcp.tool()
def load_image_from_disk(path: str) -&gt; Image:
    &quot;&quot;&quot;Loads an image from the specified path.&quot;&quot;&quot;
    # Handles reading file and detecting format based on extension
    return Image(path=path)
```
FastMCP handles the conversion to/from the base64-encoded format required by the MCP protocol.


### MCP Clients

The `Client` class lets you interact with any MCP server (not just FastMCP ones) from Python code:

```python
from fastmcp import Client

async with Client(&quot;path/to/server&quot;) as client:
    # Call a tool
    result = await client.call_tool(&quot;weather&quot;, {&quot;location&quot;: &quot;San Francisco&quot;})
    print(result)
    
    # Read a resource
    res = await client.read_resource(&quot;db://users/123/profile&quot;)
    print(res)
```

You can connect to servers using any supported transport protocol (Stdio, SSE, FastMCP, etc.). If you don&#039;t specify a transport, the `Client` class automatically attempts to detect an appropriate one from your connection string or server object.

#### Client Methods

The `Client` class exposes several methods for interacting with MCP servers.

```python
async with Client(&quot;path/to/server&quot;) as client:
    # List available tools
    tools = await client.list_tools()
    
    # List available resources
    resources = await client.list_resources()
    
    # Call a tool with arguments
    result = await client.call_tool(&quot;generate_report&quot;, {&quot;user_id&quot;: 123})
    
    # Read a resource
    user_data = await client.read_resource(&quot;db://users/123/profile&quot;)
        
    # Get a prompt
    greeting = await client.get_prompt(&quot;welcome&quot;, {&quot;name&quot;: &quot;Alice&quot;})
    
    # Send progress updates
    await client.progress(&quot;task-123&quot;, 50, 100)  # 50% complete
    
    # Basic connectivity testing
    await client.ping()
```

These methods correspond directly to MCP protocol operations, making it easy to interact with any MCP-compatible server (not just FastMCP ones).

#### Transport Options

FastMCP supports various transport protocols for connecting to MCP servers:

```python
from fastmcp import Client
from fastmcp.client.transports import (
    SSETransport, 
    PythonStdioTransport, 
    FastMCPTransport
)

# Connect to a server over SSE (common for web-based MCP servers)
async with Client(SSETransport(&quot;http://localhost:8000/mcp&quot;)) as client:
    # Use client here...

# Connect to a Python script using stdio (useful for local tools)
async with Client(PythonStdioTransport(&quot;path/to/script.py&quot;)) as client:
    # Use client here...

# Connect directly to a FastMCP server object in the same process
from your_app import mcp_server
async with Client(FastMCPTransport(mcp_server)) as client:
    # Use client here...
```

Common transport options include:
- `SSETransport`: Connect to a server via Server-Sent Events (HTTP)
- `PythonStdioTransport`: Run a Python script and communicate via stdio
- `FastMCPTransport`: Connect directly to a FastMCP server object
- `WSTransport`: Connect via WebSockets

In addition, if you pass a connection string or `FastMCP` server object to the `Client` constructor, it will try to automatically detect the appropriate transport.

#### LLM Sampling

Sampling is an MCP feature that allows a server to request a completion from the client LLM, enabling sophisticated use cases while maintaining security and privacy on the server.

```python
import marvin  # Or any other LLM client
from fastmcp import Client, Context, FastMCP
from fastmcp.client.sampling import RequestContext, SamplingMessage, SamplingParams

# -- SERVER SIDE --
# Create a server that requests LLM completions from the client

mcp = FastMCP(&quot;Sampling Example&quot;)

@mcp.tool()
async def generate_poem(topic: str, context: Context) -&gt; str:
    &quot;&quot;&quot;Generate a short poem about the given topic.&quot;&quot;&quot;
    # The server requests a completion from the client LLM
    response = await context.sample(
        f&quot;Write a short poem about {topic}&quot;,
        system_prompt=&quot;You are a talented poet who writes concise, evocative verses.&quot;
    )
    return response.text

@mcp.tool()
async def summarize_document(document_uri: str, context: Context) -&gt; str:
    &quot;&quot;&quot;Summarize a document using client-side LLM capabilities.&quot;&quot;&quot;
    # First read the document as a resource
    doc_resource = await context.read_resource(document_uri)
    doc_content = doc_resource[0].content  # Assuming single text content
    
    # Then ask the client LLM to summarize it
    response = await context.sample(
        f&quot;Summarize the following document:\n\n{doc_content}&quot;,
        system_prompt=&quot;You are an expert summarizer. Create a concise summary.&quot;
    )
    return response.text

# -- CLIENT SIDE --
# Create a client that handles the sampling requests

async def sampling_handler(
    messages: list[SamplingMessage],
    params: SamplingParams,
    ctx: RequestContext,
) -&gt; str:
    &quot;&quot;&quot;Handle sampling requests from the server using your preferred LLM.&quot;&quot;&quot;
    # Extract the messages and system prompt
    prompt = [m.content.text for m in messages if m.content.type == &quot;text&quot;]
    system_instruction = params.systemPrompt or &quot;You are a helpful assistant.&quot;
    
    # Use your preferred LLM client to generate completions
    return await marvin.say_async(
        message=prompt,
        instructions=system_instruction,
    )

# Connect them together
async with Client(mcp, sampling_handler=sampling_handler) as client:
    result = await client.call_tool(&quot;generate_poem&quot;, {&quot;topic&quot;: &quot;autumn leaves&quot;})
    print(result.content[0].text)
```

This pattern is powerful because:
1. The server can delegate text generation to the client LLM
2. The server remains focused on business logic and data handling
3. The client maintains control over which LLM is used and how requests are handled
4. No sensitive data needs to be sent to external APIs 

#### Roots Access

FastMCP exposes the MCP roots functionality, allowing clients to specify which file system roots they can access. This creates a secure boundary for tools that need to work with files. Note that the server must account for client roots explicitly.

```python
from fastmcp import Client, RootsList

# Specify file roots that the client can access
roots = [&quot;file:///path/to/allowed/directory&quot;]

async with Client(mcp_server, roots=roots) as client:
    # Now tools in the MCP server can access files in the specified roots
    await client.call_tool(&quot;process_file&quot;, {&quot;filename&quot;: &quot;data.csv&quot;})
```

## Advanced Features

Building on the core concepts, FastMCP v2 introduces powerful features for more complex scenarios:


### Proxy Servers

Create a FastMCP server that acts as an intermediary, proxying requests to another MCP endpoint (which could be a server or another client connection).

**Use Cases:**

*   **Transport Conversion:** Expose a server running on Stdio (like many local tools) over SSE or WebSockets, making it accessible to web clients or Claude Desktop.
*   **Adding Functionality:** Wrap an existing server to add authentic

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[virattt/ai-hedge-fund]]></title>
            <link>https://github.com/virattt/ai-hedge-fund</link>
            <guid>https://github.com/virattt/ai-hedge-fund</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:18 GMT</pubDate>
            <description><![CDATA[An AI Hedge Fund Team]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/virattt/ai-hedge-fund">virattt/ai-hedge-fund</a></h1>
            <p>An AI Hedge Fund Team</p>
            <p>Language: Python</p>
            <p>Stars: 25,770</p>
            <p>Forks: 4,399</p>
            <p>Stars today: 785 stars today</p>
            <h2>README</h2><pre># AI Hedge Fund

This is a proof of concept for an AI-powered hedge fund.  The goal of this project is to explore the use of AI to make trading decisions.  This project is for **educational** purposes only and is not intended for real trading or investment.

This system employs several agents working together:

1. Ben Graham Agent - The godfather of value investing, only buys hidden gems with a margin of safety
2. Bill Ackman Agent - An activist investors, takes bold positions and pushes for change
3. Cathie Wood Agent - The queen of growth investing, believes in the power of innovation and disruption
4. Charlie Munger Agent - Warren Buffett&#039;s partner, only buys wonderful businesses at fair prices
5. Michael Burry Agent - The Big Short contrarian who hunts for deep value
6. Peter Lynch Agent - Practical investor who seeks &quot;ten-baggers&quot; in everyday businesses
7. Phil Fisher Agent - Meticulous growth investor who uses deep &quot;scuttlebutt&quot; research 
8. Stanley Druckenmiller Agent - Macro legend who hunts for asymmetric opportunities with growth potential
9. Warren Buffett Agent - The oracle of Omaha, seeks wonderful companies at a fair price
10. Valuation Agent - Calculates the intrinsic value of a stock and generates trading signals
11. Sentiment Agent - Analyzes market sentiment and generates trading signals
12. Fundamentals Agent - Analyzes fundamental data and generates trading signals
13. Technicals Agent - Analyzes technical indicators and generates trading signals
14. Risk Manager - Calculates risk metrics and sets position limits
15. Portfolio Manager - Makes final trading decisions and generates orders
    
&lt;img width=&quot;1042&quot; alt=&quot;Screenshot 2025-03-22 at 6 19 07‚ÄØPM&quot; src=&quot;https://github.com/user-attachments/assets/cbae3dcf-b571-490d-b0ad-3f0f035ac0d4&quot; /&gt;


**Note**: the system simulates trading decisions, it does not actually trade.

[![Twitter Follow](https://img.shields.io/twitter/follow/virattt?style=social)](https://twitter.com/virattt)

## Disclaimer

This project is for **educational and research purposes only**.

- Not intended for real trading or investment
- No warranties or guarantees provided
- Past performance does not indicate future results
- Creator assumes no liability for financial losses
- Consult a financial advisor for investment decisions

By using this software, you agree to use it solely for learning purposes.

## Table of Contents
- [Setup](#setup)
- [Usage](#usage)
  - [Running the Hedge Fund](#running-the-hedge-fund)
  - [Running the Backtester](#running-the-backtester)
- [Project Structure](#project-structure)
- [Contributing](#contributing)
- [Feature Requests](#feature-requests)
- [License](#license)

## Setup

Clone the repository:
```bash
git clone https://github.com/virattt/ai-hedge-fund.git
cd ai-hedge-fund
```

1. Install Poetry (if not already installed):
```bash
curl -sSL https://install.python-poetry.org | python3 -
```

2. Install dependencies:
```bash
poetry install
```

3. Set up your environment variables:
```bash
# Create .env file for your API keys
cp .env.example .env
```

4. Set your API keys:
```bash
# For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)
# Get your OpenAI API key from https://platform.openai.com/
OPENAI_API_KEY=your-openai-api-key

# For running LLMs hosted by groq (deepseek, llama3, etc.)
# Get your Groq API key from https://groq.com/
GROQ_API_KEY=your-groq-api-key

# For getting financial data to power the hedge fund
# Get your Financial Datasets API key from https://financialdatasets.ai/
FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key
```

**Important**: You must set `OPENAI_API_KEY`, `GROQ_API_KEY`, `ANTHROPIC_API_KEY`, or `DEEPSEEK_API_KEY` for the hedge fund to work.  If you want to use LLMs from all providers, you will need to set all API keys.

Financial data for AAPL, GOOGL, MSFT, NVDA, and TSLA is free and does not require an API key.

For any other ticker, you will need to set the `FINANCIAL_DATASETS_API_KEY` in the .env file.

## Usage

### Running the Hedge Fund
```bash
poetry run python src/main.py --ticker AAPL,MSFT,NVDA
```

**Example Output:**
&lt;img width=&quot;992&quot; alt=&quot;Screenshot 2025-01-06 at 5 50 17‚ÄØPM&quot; src=&quot;https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b&quot; /&gt;

You can also specify a `--ollama` flag to run the AI hedge fund using local LLMs.

```bash
poetry run python src/main.py --ticker AAPL,MSFT,NVDA --ollama
```

You can also specify a `--show-reasoning` flag to print the reasoning of each agent to the console.

```bash
poetry run python src/main.py --ticker AAPL,MSFT,NVDA --show-reasoning
```
You can optionally specify the start and end dates to make decisions for a specific time period.

```bash
poetry run python src/main.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 
```

### Running the Backtester

```bash
poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA
```

**Example Output:**
&lt;img width=&quot;941&quot; alt=&quot;Screenshot 2025-01-06 at 5 47 52‚ÄØPM&quot; src=&quot;https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47&quot; /&gt;


You can optionally specify the start and end dates to backtest over a specific time period.

```bash
poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01
```

You can also specify a `--ollama` flag to run the backtester using local LLMs.
```bash
poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --ollama
```


## Project Structure 
```
ai-hedge-fund/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ agents/                   # Agent definitions and workflow
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bill_ackman.py        # Bill Ackman agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fundamentals.py       # Fundamental analysis agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ portfolio_manager.py  # Portfolio management agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ risk_manager.py       # Risk management agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sentiment.py          # Sentiment analysis agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ technicals.py         # Technical analysis agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ valuation.py          # Valuation analysis agent
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ...                   # Other agents
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ warren_buffett.py     # Warren Buffett agent
‚îÇ   ‚îú‚îÄ‚îÄ tools/                    # Agent tools
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.py                # API tools
‚îÇ   ‚îú‚îÄ‚îÄ backtester.py             # Backtesting tools
‚îÇ   ‚îú‚îÄ‚îÄ main.py # Main entry point
‚îú‚îÄ‚îÄ pyproject.toml
‚îú‚îÄ‚îÄ ...
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

**Important**: Please keep your pull requests small and focused.  This will make it easier to review and merge.

## Feature Requests

If you have a feature request, please open an [issue](https://github.com/virattt/ai-hedge-fund/issues) and make sure it is tagged with `enhancement`.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[potpie-ai/potpie]]></title>
            <link>https://github.com/potpie-ai/potpie</link>
            <guid>https://github.com/potpie-ai/potpie</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:17 GMT</pubDate>
            <description><![CDATA[Prompt-To-Agent : Create custom engineering agents for your codebase]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/potpie-ai/potpie">potpie-ai/potpie</a></h1>
            <p>Prompt-To-Agent : Create custom engineering agents for your codebase</p>
            <p>Language: Python</p>
            <p>Stars: 3,753</p>
            <p>Forks: 354</p>
            <p>Stars today: 160 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://potpie.ai?utm_source=github&quot;&gt;
    &lt;img src=&quot;https://github.com/user-attachments/assets/1a0b9824-833b-4c0a-b56d-ede5623295ca&quot; width=&quot;318px&quot; alt=&quot;Potpie AI logo&quot; /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;br/&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://trendshift.io/repositories/12918&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/12918&quot; alt=&quot;potpie-ai%2Fpotpie | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/br&gt;
  &lt;br /&gt;
  &lt;a href=&quot;https://app.potpie.ai&quot; rel=&quot;dofollow&quot;&gt;App&lt;/a&gt; | &lt;a href=&quot;https://docs.potpie.ai&quot; rel=&quot;dofollow&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://docs.potpie.ai/open-source&quot;  rel=&quot;dofollow&quot;&gt;API Reference&lt;/a&gt; | &lt;a href=&quot;https://app.potpie.ai/newchat?repo=potpie-ai/potpie&amp;branch=main&quot; rel=&quot;dofollow&quot;&gt;Chat with ü•ß Repo&lt;/a&gt;
  &lt;br /&gt;

  &lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;

  &lt;a href=&quot;https://github.com/potpie-ai/potpie/blob/main/LICENSE&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/license/potpie-ai/potpie&quot; alt=&quot;Apache 2.0&quot;&gt;
  &lt;/a&gt;

  &lt;a href=&quot;https://github.com/potpie-ai/potpie&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/stars/potpie-ai/potpie&quot; alt=&quot;GitHub Repo stars&quot;&gt;
  &lt;/a&gt;

&lt;/br&gt;


&lt;a href=&quot;https://discord.gg/ryk5CMD5v6&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/badge/Join%20our-Discord-5865F2?style=for-the-badge&amp;logo=discord&amp;logoColor=white&quot; alt=&quot;Join our Discord&quot;&gt;
&lt;/a&gt;
&lt;/br&gt;
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PotpieAI.potpie-vscode-extension&quot;&gt;
    &lt;img src=&quot;https://custom-icon-badges.demolab.com/badge/Visual%20Studio%20Code-0078d7.svg?logo=vsc&amp;logoColor=white&quot; alt=&quot;VS Code Extension&quot;&gt;
&lt;/a&gt;
&lt;/br&gt;
&lt;a href=&quot;https://twitter.com/intent/tweet?text=I%20created%20custom%20engineering%20agents%20for%20my%20codebase%20in%20minutes%20with%20potpie.ai%20@potpiedotai%20!ü•ß&quot;&gt;
    &lt;img alt=&quot;tweet&quot; src=&quot;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&quot;&gt;
&lt;/a&gt;

&lt;/p&gt;

&lt;h1 align=&quot;center&quot;&gt;

Prompt-To-Agent: Create custom engineering agents for your code
&lt;/h1&gt;

Potpie is an open-source platform that creates AI agents specialized in your codebase, enabling automated code analysis, testing, and development tasks. By building a comprehensive knowledge graph of your code, Potpie&#039;s agents can understand complex relationships and assist with everything from debugging to feature development.

&lt;p align=&quot;center&quot;&gt;
&lt;img width=&quot;1506&quot; alt=&quot;Screenshot 2025-03-28 at 2 51 34‚ÄØPM&quot; src=&quot;https://github.com/user-attachments/assets/efa6b8ba-447b-474c-a62e-2c65940085ee&quot; /&gt;




## üìö Table of Contents
- [ü•ß Why Potpie?](#why-potpie)
- [ü§ñ Our Prebuilt Agents](#prebuilt-agents)
- [üõ†Ô∏è Tooling](#potpies-tooling-system)
- [üöÄ Getting Started](#getting-started)
- [üí° Use Cases](#use-cases)
- [üõ†Ô∏è Custom Agents](#custom-agents-upgrade)
- [üóùÔ∏è Accessing Agents via API Key](#accessing-agents-via-api-key)
- [üé® Make Potpie Your Own](#make-potpie-your-own)
- [ü§ù Contributing](#contributing)
- [üìú License](#license)
- [üí™ Contributors](#-thanks-to-all-contributors)


## ü•ß Why Potpie?
- üß† **Deep Code Understanding**: Built-in knowledge graph captures relationships between code components
- ü§ñ **Pre-built &amp; Custom Agents**: Ready-to-use agents for common tasks + build your own
- üîÑ **Seamless Integration**: Works with your existing development workflow
- üìà **Flexible**: Handles codebases of any size or language


## üîå VSCode Extension

Bring the power of Potpie&#039;s AI agents directly into your development environment with our VSCode extension:

- **Direct Integration**: Access all Potpie agents without leaving your editor
- **Quick Setup**: Install directly from the [VSCode Marketplace](https://marketplace.visualstudio.com/items?itemName=PotpieAI.potpie-vscode-extension)
- **Seamless Workflow**: Ask questions, get explanations, and implement suggestions right where you code


## ü§ñ Potpie&#039;s Prebuilt Agents

Potpie offers a suite of specialized codebase agents for automating and optimizing key aspects of software development:

- **Debugging Agent**: Automatically analyzes stacktraces and provides debugging steps specific to your codebase.
- **Codebase Q&amp;A Agent**: Answers questions about your codebase and explains functions, features, and architecture.
- **Code Changes Agent**: Analyzes code changes, identifies affected APIs, and suggests improvements before merging.
- **Integration Test Agent**: Generates integration test plans and code for flows to ensure components work together properly.
- **Unit Test Agent**: Automatically creates unit test plan and code for individual functions to enhance test coverage.
- **LLD Agent**: Creates a low level design for implementing a new feature by providing functional requirements to this agent.
- **Code Generation Agent**: Generates code for new features, refactors existing code, and suggests optimizations.

## üõ†Ô∏è Potpie&#039;s Tooling System

Potpie provides a set of tools that agents can use to interact with the knowledge graph and the underlying infrastructure:

- **get_code_from_probable_node_name**: Retrieves code snippets based on a probable node name.
- **get_code_from_node_id**: Fetches code associated with a specific node ID.
- **get_code_from_multiple_node_ids**: Retrieves code snippets for multiple node IDs simultaneously.
- **ask_knowledge_graph_queries**: Executes vector similarity searches to obtain relevant information.
- **get_nodes_from_tags**: Retrieves nodes tagged with specific keywords.
- **get_code_graph_from_node_id/name**: Fetches code graph structures for a specific node.
- **change_detection**: Detects changes in the current branch compared to the default branch.
- **get_code_file_structure**: Retrieves the file structure of the codebase.

## üöÄ Getting Started

### Prerequisites
- Docker installed and running
- Git installed (for repository access)
- Python 3.10.x

### Potpie UI
  An easy to use interface to interact with your Agents
  ## Initialize the UI Submodule
  To initialize the submodule:

  ```bash
  git submodule update --init
  ```

  ### 1. Navigate to the `potpie-ui` Directory

  ```bash
  cd potpie-ui
  ```

  ### 2. Update the Main Branch and Checkout

  ```bash
  git checkout main
  git pull origin main
  ```

  ### 3. Set Up the Environment

  Create a `.env` file in the `potpie-ui` directory and copy the required configuration from `.env.template`.

  ```bash
  cp .env.template .env
  ```

  ### 4. Build the Frontend

  ```bash
  pnpm build
  ```

  ### 5. Start the Application

  ```bash
  pnpm start
  ```


### Setup Steps

**Install Python 3.10**
   - Download and install Python 3.10 from the official Python website:
     https://www.python.org/downloads/release/python-3100/

1. **Prepare Your Environment**
   - Create a `.env` file based on the `.env.template`
   - Add the following required configurations:
      ```bash
      isDevelopmentMode=enabled
      ENV=development
      POSTGRES_SERVER=postgresql://postgres:mysecretpassword@localhost:5432/momentum
      NEO4J_URI=bolt://127.0.0.1:7687
      NEO4J_USERNAME=neo4j
      NEO4J_PASSWORD=mysecretpassword
      REDISHOST=127.0.0.1
      REDISPORT=6379
      BROKER_URL=redis://127.0.0.1:6379/0
      CELERY_QUEUE_NAME=dev
      defaultUsername=defaultuser
      PROJECT_PATH=projects #repositories will be downloaded/cloned to this path on your system.
      {PROVIDER}_API_KEY=sk-proj-your-key #your provider key e.g. ANTHROPIC_API_KEY for Anthropic
      INFERENCE_MODEL=ollama_chat/qwen2.5-coder:7b #provider model name
      CHAT_MODEL=ollama_chat/qwen2.5-coder:7b #provider model name
      ```
      **`INFERENCE_MODEL`** and **`CHAT_MODEL`** correspond to the models that will be used for generating knowledge graph and for agent reasoning respectively. These model names should be in the format of `provider/model_name` format or as expected by Litellm. For more information, refer to the [Litellm documentation](https://docs.litellm.ai/docs/providers).
      &lt;br&gt;
   -  Create a Virtual Environment using Python 3.10:
      ```
      python3.10 -m venv venv
      source venv/bin/activate

    - Install dependencies in your venv:
      ```bash
      pip install -r requirements.txt

2. **Start Potpie**

   ```bash
   chmod +x start.sh
   ./start.sh
   ```

   **Windows**
    ```powershell
    ./start.ps1
    ```

3. **Authentication Setup** (Skip this step in development mode)
   ```bash
   curl -X POST &#039;http://localhost:8001/api/v1/login&#039; \
     -H &#039;Content-Type: application/json&#039; \
     -d &#039;{
       &quot;email&quot;: &quot;your-email&quot;,
       &quot;password&quot;: &quot;your-password&quot;
     }&#039;
   # Save the bearer token from the response for subsequent requests

4. **Initialize Repository Parsing**
   ```bash
   # For development mode:
   curl -X POST &#039;http://localhost:8001/api/v1/parse&#039; \
     -H &#039;Content-Type: application/json&#039; \
     -d &#039;{
       &quot;repo_path&quot;: &quot;path/to/local/repo&quot;,
       &quot;branch_name&quot;: &quot;main&quot;
     }&#039;

   # For production mode:
   curl -X POST &#039;http://localhost:8001/api/v1/parse&#039; \
     -H &#039;Content-Type: application/json&#039; \
     -d &#039;{
       &quot;repo_name&quot;: &quot;owner/repo-name&quot;,
       &quot;branch_name&quot;: &quot;main&quot;
     }&#039;
   # Save the project_id from the response

5. **Monitor Parsing Status**
   ```bash
   curl -X GET &#039;http://localhost:8001/api/v1/parsing-status/your-project-id&#039;
   # Wait until parsing is complete

6. **View Available Agents**
   ```bash
   curl -X GET &#039;http://localhost:8001/api/v1/list-available-agents/?list_system_agents=true&#039;
   # Note down the agent_id you want to use
   ```

7. **Create a Conversation**
   ```bash
   curl -X POST &#039;http://localhost:8001/api/v1/conversations/&#039; \
     -H &#039;Content-Type: application/json&#039; \
     -d &#039;{
       &quot;user_id&quot;: &quot;your_user_id&quot;,
       &quot;title&quot;: &quot;My First Conversation&quot;,
       &quot;status&quot;: &quot;active&quot;,
       &quot;project_ids&quot;: [&quot;your-project-id&quot;],
       &quot;agent_ids&quot;: [&quot;chosen-agent-id&quot;]
     }&#039;
   # Save the conversation_id from the response

8. **Start Interacting with Your Agent**
   ```bash
   curl -X POST &#039;http://localhost:8001/api/v1/conversations/your-conversation-id/message/&#039; \
     -H &#039;Content-Type: application/json&#039; \
     -d &#039;{
       &quot;content&quot;: &quot;Your question or request here&quot;,
       &quot;node_ids&quot;:[]
     }&#039;
   ```

9. **View Conversation History** (Optional)
   ```bash
   curl -X GET &#039;http://localhost:8001/api/v1/conversations/your-conversation-id/messages/?start=0&amp;limit=10&#039;
   ```

## üí° Use Cases

- **Onboarding**: For developers new to a codebase, the codebase QnA agent helps them understand the codebase and get up to speed quickly. Ask it how to setup a new project, how to run the tests etc
&gt;We tried to onboard ourselves with Potpie to the [**AgentOps**](https://github.com/AgentOps-AI/AgentOps) codebase and it worked like a charm : Video [here](https://youtu.be/_mPixNDn2r8).

- **Codebase Understanding**: Answer questions about any library you&#039;re integrating, explain functions, features, and architecture.
&gt;We used the Q&amp;A agent to understand the underlying working of a feature of the [**CrewAI**](https://github.com/CrewAIInc/CrewAI) codebase that was not documented in official docs : Video [here](https://www.linkedin.com/posts/dhirenmathur_what-do-you-do-when-youre-stuck-and-even-activity-7256704603977613312-8X8G).

- **Low Level Design**: Get detailed implementation plans for new features or improvements before writing code.
&gt;We fed an open issue from the [**Portkey-AI/Gateway**](https://github.com/Portkey-AI/Gateway) project to this agent to generate a low level design for it: Video [here](https://www.linkedin.com/posts/dhirenmathur_potpie-ai-agents-vs-llms-i-am-extremely-activity-7255607456448286720-roOC).

- **Reviewing Code Changes**: Understand the functional impact of changes and compute the blast radius of modifications.

- **Debugging**: Get step-by-step debugging guidance based on stacktraces and codebase context.

- **Testing**: Generate contextually aware unit and integration test plans and test code that understand your codebase&#039;s structure and purpose.

## üõ†Ô∏è Custom Agents [Upgrade ‚ú®](https://potpie.ai/pricing)

With Custom Agents, you can design personalized tools that handle repeatable tasks with precision. Key components include:
- **System Instructions**: Define the agent&#039;s task, goal, and expected output
- **Agent Information**: Metadata about the agent&#039;s role and context
- **Tasks**: Individual steps for job completion
- **Tools**: Functions for querying the knowledge graph or retrieving code

## üóùÔ∏è Accessing Agents via API Key

You can access Potpie Agents through an API key, enabling integration into CI/CD workflows and other automated processes. For detailed instructions, please refer to the [Potpie API documentation](https://docs.potpie.ai/agents/api-access).

- **Generate an API Key**: Easily create an API key for secure access.
- **Parse Repositories**: Use the Parse API to analyze code repositories and obtain a project ID.
- **Monitor Parsing Status**: Check the status of your parsing requests.
- **Create Conversations**: Initiate conversations with specific agents using project and agent IDs adn get a conversation id.
- **Send Messages**: Communicate with agents by sending messages within a conversation.

## üé® Make Potpie Your Own

Potpie is designed to be flexible and customizable. Here are key areas to personalize your own deployment:

### **Effortless Agent Creation**:
Design custom agents tailored to your specific tasks using a single prompt. Utilize the following API to create your custom agents:

  ```bash
  curl -X POST &quot;http://localhost:8001/api/v1/custom-agents/agents/auto&quot; \
       -H &quot;Content-Type: application/json&quot; \
       -d &#039;{
             &quot;prompt&quot;: &quot;Aan agent that takes stacktrace as input and gives root cause analysis and proposed solution as output&quot;
           }&#039;
  ```

  Read more about other custom agent APIs to edit and delete your custom agents in our [documentation](https://docs.potpie.ai/open-source/agents/create-agent-from-prompt).

### Tool Integration
Edit or add tools in the `app/modules/intelligence/tools` directory for your custom agents.
Initialise the tools in the  `app/modules/intelligence/tools/tool_service.py` file and include them in your agent.

## ü§ù Contributing

We welcome contributions! To contribute:
1. Fork the repository
2. Create a new branch (`git checkout -b feature-branch`)
3. Make your changes
4. Commit (`git commit -m &#039;Add new feature&#039;`)
5. Push to the branch (`git push origin feature-branch`)
6. Open a Pull Request

See [Contributing Guide](./contributing.md) for more details.

## üìú License

This project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.

## üí™ Thanks To All Contributors

Thanks for spending your time helping build Potpie. Keep rocking ü•Ç

&lt;img src=&quot;https://contributors-img.web.app/image?repo=potpie-ai/potpie&quot; alt=&quot;Contributors&quot;/&gt;
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[All-Hands-AI/OpenHands]]></title>
            <link>https://github.com/All-Hands-AI/OpenHands</link>
            <guid>https://github.com/All-Hands-AI/OpenHands</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:16 GMT</pubDate>
            <description><![CDATA[üôå OpenHands: Code Less, Make More]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/All-Hands-AI/OpenHands">All-Hands-AI/OpenHands</a></h1>
            <p>üôå OpenHands: Code Less, Make More</p>
            <p>Language: Python</p>
            <p>Stars: 53,084</p>
            <p>Forks: 5,915</p>
            <p>Stars today: 80 stars today</p>
            <h2>README</h2><pre>&lt;a name=&quot;readme-top&quot;&gt;&lt;/a&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;./docs/static/img/logo.png&quot; alt=&quot;Logo&quot; width=&quot;200&quot;&gt;
  &lt;h1 align=&quot;center&quot;&gt;OpenHands: Code Less, Make More&lt;/h1&gt;
&lt;/div&gt;


&lt;div align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/All-Hands-AI/OpenHands/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/All-Hands-AI/OpenHands?style=for-the-badge&amp;color=blue&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/All-Hands-AI/OpenHands/stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/All-Hands-AI/OpenHands?style=for-the-badge&amp;color=blue&quot; alt=&quot;Stargazers&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://codecov.io/github/All-Hands-AI/OpenHands?branch=main&quot;&gt;&lt;img alt=&quot;CodeCov&quot; src=&quot;https://img.shields.io/codecov/c/github/All-Hands-AI/OpenHands?style=for-the-badge&amp;color=blue&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/All-Hands-AI/OpenHands/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/All-Hands-AI/OpenHands?style=for-the-badge&amp;color=blue&quot; alt=&quot;MIT License&quot;&gt;&lt;/a&gt;
  &lt;br/&gt;
  &lt;a href=&quot;https://join.slack.com/t/openhands-ai/shared_invite/zt-2ngejmfw6-9gW4APWOC9XUp1n~SiQ6iw&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Slack-Join%20Us-red?logo=slack&amp;logoColor=white&amp;style=for-the-badge&quot; alt=&quot;Join our Slack community&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://discord.gg/ESHStjSjD4&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Discord-Join%20Us-purple?logo=discord&amp;logoColor=white&amp;style=for-the-badge&quot; alt=&quot;Join our Discord community&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/All-Hands-AI/OpenHands/blob/main/CREDITS.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Project-Credits-blue?style=for-the-badge&amp;color=FFE165&amp;logo=github&amp;logoColor=white&quot; alt=&quot;Credits&quot;&gt;&lt;/a&gt;
  &lt;br/&gt;
  &lt;a href=&quot;https://docs.all-hands.dev/modules/usage/getting-started&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Documentation-000?logo=googledocs&amp;logoColor=FFE165&amp;style=for-the-badge&quot; alt=&quot;Check out the documentation&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://arxiv.org/abs/2407.16741&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paper%20on%20Arxiv-000?logoColor=FFE165&amp;logo=arxiv&amp;style=for-the-badge&quot; alt=&quot;Paper on Arxiv&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1wOUdFCMyY6Nt0AIqF705KN4JKOWgeI4wUGUP60krXXs/edit?gid=0#gid=0&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Benchmark%20score-000?logoColor=FFE165&amp;logo=huggingface&amp;style=for-the-badge&quot; alt=&quot;Evaluation Benchmark Score&quot;&gt;&lt;/a&gt;
  &lt;hr&gt;
&lt;/div&gt;

Welcome to OpenHands (formerly OpenDevin), a platform for software development agents powered by AI.

OpenHands agents can do anything a human developer can: modify code, run commands, browse the web,
call APIs, and yes‚Äîeven copy code snippets from StackOverflow.

Learn more at [docs.all-hands.dev](https://docs.all-hands.dev), or [sign up for OpenHands Cloud](https://app.all-hands.dev) to get started.

&gt; [!IMPORTANT]
&gt; Using OpenHands for work? We&#039;d love to chat! Fill out
&gt; [this short form](https://docs.google.com/forms/d/e/1FAIpQLSet3VbGaz8z32gW9Wm-Grl4jpt5WgMXPgJ4EDPVmCETCBpJtQ/viewform)
&gt; to join our Design Partner program, where you&#039;ll get early access to commercial features and the opportunity to provide input on our product roadmap.

![App screenshot](./docs/static/img/screenshot.png)

## ‚òÅÔ∏è OpenHands Cloud
The easiest way to get started with OpenHands is on [OpenHands Cloud](https://app.all-hands.dev),
which comes with $50 in free credits for new users.

## üíª Running OpenHands Locally

OpenHands can also run on your local system using Docker.
See the [Running OpenHands](https://docs.all-hands.dev/modules/usage/installation) guide for
system requirements and more information.

&gt; [!WARNING]
&gt; On a public network? See our [Hardened Docker Installation Guide](https://docs.all-hands.dev/modules/usage/runtimes/docker#hardened-docker-installation)
&gt; to secure your deployment by restricting network binding and implementing additional security measures.


```bash
docker pull docker.all-hands.dev/all-hands-ai/runtime:0.33-nikolaik

docker run -it --rm --pull=always \
    -e SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev/all-hands-ai/runtime:0.33-nikolaik \
    -e LOG_ALL_EVENTS=true \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v ~/.openhands-state:/.openhands-state \
    -p 3000:3000 \
    --add-host host.docker.internal:host-gateway \
    --name openhands-app \
    docker.all-hands.dev/all-hands-ai/openhands:0.33
```

You&#039;ll find OpenHands running at [http://localhost:3000](http://localhost:3000)!

When you open the application, you&#039;ll be asked to choose an LLM provider and add an API key.
[Anthropic&#039;s Claude 3.5 Sonnet](https://www.anthropic.com/api) (`anthropic/claude-3-5-sonnet-20241022`)
works best, but you have [many options](https://docs.all-hands.dev/modules/usage/llms).

## üí° Other ways to run OpenHands

&gt; [!CAUTION]
&gt; OpenHands is meant to be run by a single user on their local workstation.
&gt; It is not appropriate for multi-tenant deployments where multiple users share the same instance. There is no built-in authentication, isolation, or scalability.
&gt;
&gt; If you&#039;re interested in running OpenHands in a multi-tenant environment, please
&gt; [get in touch with us](https://docs.google.com/forms/d/e/1FAIpQLSet3VbGaz8z32gW9Wm-Grl4jpt5WgMXPgJ4EDPVmCETCBpJtQ/viewform)
&gt; for advanced deployment options.

You can also [connect OpenHands to your local filesystem](https://docs.all-hands.dev/modules/usage/runtimes/docker#connecting-to-your-filesystem),
run OpenHands in a scriptable [headless mode](https://docs.all-hands.dev/modules/usage/how-to/headless-mode),
interact with it via a [friendly CLI](https://docs.all-hands.dev/modules/usage/how-to/cli-mode),
or run it on tagged issues with [a github action](https://docs.all-hands.dev/modules/usage/how-to/github-action).

Visit [Running OpenHands](https://docs.all-hands.dev/modules/usage/installation) for more information and setup instructions.

If you want to modify the OpenHands source code, check out [Development.md](https://github.com/All-Hands-AI/OpenHands/blob/main/Development.md).

Having issues? The [Troubleshooting Guide](https://docs.all-hands.dev/modules/usage/troubleshooting) can help.

## üìñ Documentation

To learn more about the project, and for tips on using OpenHands,
check out our [documentation](https://docs.all-hands.dev/modules/usage/getting-started).

There you&#039;ll find resources on how to use different LLM providers,
troubleshooting resources, and advanced configuration options.

## ü§ù How to Join the Community

OpenHands is a community-driven project, and we welcome contributions from everyone. We do most of our communication
through Slack, so this is the best place to start, but we also are happy to have you contact us on Discord or Github:

- [Join our Slack workspace](https://join.slack.com/t/openhands-ai/shared_invite/zt-2ngejmfw6-9gW4APWOC9XUp1n~SiQ6iw) - Here we talk about research, architecture, and future development.
- [Join our Discord server](https://discord.gg/ESHStjSjD4) - This is a community-run server for general discussion, questions, and feedback.
- [Read or post Github Issues](https://github.com/All-Hands-AI/OpenHands/issues) - Check out the issues we&#039;re working on, or add your own ideas.

See more about the community in [COMMUNITY.md](./COMMUNITY.md) or find details on contributing in [CONTRIBUTING.md](./CONTRIBUTING.md).

## üìà Progress

See the monthly OpenHands roadmap [here](https://github.com/orgs/All-Hands-AI/projects/1) (updated at the maintainer&#039;s meeting at the end of each month).

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://star-history.com/#All-Hands-AI/OpenHands&amp;Date&quot;&gt;
    &lt;img src=&quot;https://api.star-history.com/svg?repos=All-Hands-AI/OpenHands&amp;type=Date&quot; width=&quot;500&quot; alt=&quot;Star History Chart&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

## üìú License

Distributed under the MIT License. See [`LICENSE`](./LICENSE) for more information.

## üôè Acknowledgements

OpenHands is built by a large number of contributors, and every contribution is greatly appreciated! We also build upon other open source projects, and we are deeply thankful for their work.

For a list of open source projects and licenses used in OpenHands, please see our [CREDITS.md](./CREDITS.md) file.

## üìö Cite

```
@misc{openhands,
      title={{OpenHands: An Open Platform for AI Software Developers as Generalist Agents}},
      author={Xingyao Wang and Boxuan Li and Yufan Song and Frank F. Xu and Xiangru Tang and Mingchen Zhuge and Jiayi Pan and Yueqi Song and Bowen Li and Jaskirat Singh and Hoang H. Tran and Fuqiang Li and Ren Ma and Mingzhang Zheng and Bill Qian and Yanjun Shao and Niklas Muennighoff and Yizhe Zhang and Binyuan Hui and Junyang Lin and Robert Brennan and Hao Peng and Heng Ji and Graham Neubig},
      year={2024},
      eprint={2407.16741},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2407.16741},
}
```
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[dataelement/bisheng]]></title>
            <link>https://github.com/dataelement/bisheng</link>
            <guid>https://github.com/dataelement/bisheng</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:15 GMT</pubDate>
            <description><![CDATA[BISHENG is an open LLM devops platform for next generation Enterprise AI applications. Powerful and comprehensive features include: GenAI workflow, RAG, Agent, Unified model management, Evaluation, SFT, Dataset Management, Enterprise-level System Management, Observability and more.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/dataelement/bisheng">dataelement/bisheng</a></h1>
            <p>BISHENG is an open LLM devops platform for next generation Enterprise AI applications. Powerful and comprehensive features include: GenAI workflow, RAG, Agent, Unified model management, Evaluation, SFT, Dataset Management, Enterprise-level System Management, Observability and more.</p>
            <p>Language: TypeScript</p>
            <p>Stars: 8,082</p>
            <p>Forks: 1,346</p>
            <p>Stars today: 12 stars today</p>
            <h2>README</h2><pre>**Proudly made by ChineseÔºåMay we, like the creators of Deepseek and Black Myth: Wukong, bring more wonder and greatness to the world.**

&gt; Ê∫êËá™‰∏≠ÂõΩÂå†ÂøÉÔºåÂ∏åÊúõÊàë‰ª¨ËÉΩÂÉè [Deepseek]„ÄÅ[ÈªëÁ•ûËØùÔºöÊÇüÁ©∫] Âõ¢Èòü‰∏ÄÊ†∑ÔºåÁªô‰∏ñÁïåÂ∏¶Êù•Êõ¥Â§öÁæéÂ•Ω„ÄÇ

&lt;img src=&quot;https://dataelem.com/bs/face.png&quot; alt=&quot;Bisheng banner&quot;&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://dataelem.feishu.cn/wiki/ZxW6wZyAJicX4WkG0NqcWsbynde&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-Wiki-brightgreen&quot;&gt;&lt;/a&gt;
    &lt;img src=&quot;https://img.shields.io/github/license/dataelement/bisheng&quot; alt=&quot;license&quot;/&gt;
    &lt;img src=&quot;https://img.shields.io/docker/pulls/dataelement/bisheng-frontend&quot; alt=&quot;docker-pull-count&quot; /&gt;
    &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/dataelement/bisheng&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;https://star-history.com/#dataelement/bisheng&amp;Timeline&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/dataelement/bisheng?color=yellow&quot;&gt;&lt;/a&gt; 
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;./README_CN.md&quot;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; |
  &lt;a href=&quot;./README.md&quot;&gt;English&lt;/a&gt; |
  &lt;a href=&quot;./README_JPN.md&quot;&gt;Êó•Êú¨Ë™û&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://trendshift.io/repositories/717&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/717&quot; alt=&quot;dataelement%2Fbisheng | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&quot;column&quot; align=&quot;middle&quot;&gt;
  &lt;!-- &lt;a href=&quot;https://bisheng.slack.com/join/shared_invite/&quot;&gt; --&gt;
    &lt;!-- &lt;img src=&quot;https://img.shields.io/badge/Join-Slack-orange&quot; alt=&quot;join-slack&quot;/&gt; --&gt;
  &lt;/a&gt;
  &lt;!-- &lt;img src=&quot;https://img.shields.io/github/license/bisheng-io/bisheng&quot; alt=&quot;license&quot;/&gt; --&gt;
  &lt;!-- &lt;img src=&quot;https://img.shields.io/docker/pulls/bisheng-io/bisheng&quot; alt=&quot;docker-pull-count&quot; /&gt; --&gt;
&lt;/div&gt;


BISHENG is an open LLM application devops platform, focusing on enterprise scenarios. It has been used by a large number of industry leading organizations and Fortune 500 companies.

&quot;Bi Sheng&quot; was the inventor of movable type printing, which played a vital role in promoting the transmission of human knowledge. We hope that BISHENG can also provide strong support for the widespread implementation of intelligent applications. Everyone is welcome to participate.


## Features 
1. Unique [BISHENG Workflow](https://dataelem.feishu.cn/wiki/R7HZwH5ZGiJUDrkHZXicA9pInif)
   - üß© **Independent and comprehensive application orchestration framework**: Enables the execution of various tasks within a single framework (while similar products rely on bot invocation or separate chatflow and workflow modules for different tasks).
   - üîÑ **Human in the loop**: Allows users to intervene and provide feedback during the execution of workflows (including multi-turn conversations), whereas similar products can only execute workflows from start to finish without intervention.
   - üí• **Powerful**: Supports loops, parallelism, batch processing, conditional logic, and free combination of all logic components. It also handles complex scenarios such as multi-type input/output, report generation, content review, and more.
   - üñêÔ∏è **User-friendly and intuitive**: Operations like loops, parallelism, and batch processing, which require specialized components in similar products, can be easily visualized in BISHENG as a &quot;flowchart&quot; (drawing a loop forms a loop, aligning elements creates parallelism, and selecting multiple items enables batch processing).
   &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://dataelem.com/bs/bisheng_workflow.png&quot; alt=&quot;sence0&quot;&gt;&lt;/p&gt;

2. &lt;b&gt;Designed for Enterprise Applications&lt;/b&gt;: Document review, fixed-layout report generation, multi-agent collaboration, policy update comparison, support ticket assistance, customer service assistance, meeting minutes generation, resume screening, call record analysis, unstructured data governance, knowledge mining, data analysis, and more. 

‚Äã	The platform supports the construction of &lt;b&gt;highly complex enterprise application scenarios&lt;/b&gt; and offers &lt;b&gt;deep optimization&lt;/b&gt; 	with hundreds of components and thousands of parameters.
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://dataelem.com/bs/chat.png&quot; alt=&quot;sence1&quot;&gt;&lt;/p&gt;

3. &lt;b&gt;Enterprise-grade&lt;/b&gt; features are the fundamental guarantee for application implementation: security review, RBAC, user group management, traffic control by group, SSO/LDAP, vulnerability scanning and patching, high availability deployment solutions, monitoring, statistics, and more.
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://dataelem.com/bs/pro.png&quot; alt=&quot;sence2&quot;&gt;&lt;/p&gt;

4. &lt;b&gt;High-Precision Document Parsing&lt;/b&gt;: Our high-precision document parsing model is trained on a vast amount of high-quality data accumulated over past 5 years. It includes high-precision printed text, handwritten text, and rare character recognition models, table recognition models, layout analysis models, and seal models., table recognition models, layout analysis models, and seal models. You can deploy it privately for free.
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://dataelem.com/bs/ocr.png&quot; alt=&quot;sence3&quot;&gt;&lt;/p&gt;

5. A community for sharing best practices across various enterprise scenarios: An open repository of application cases and best practices.
## Quick start 

Please ensure the following conditions are met before installing BISHENG:
- CPU &gt;= 8 Core
- RAM &gt;= 32 GB
- Docker 19.03.9+
- Docker Compose 1.25.1+
&gt; In addition to installing BISHENG, we will also install the following third-party components by default: ES, Milvus, and Onlyoffice.

Download BISHENG
```bash
git clone https://github.com/dataelement/bisheng.git
# Enter the installation directory
cd bisheng/docker

# If the system does not have the git command, you can download the BISHENG code as a zip file.
wget https://github.com/dataelement/bisheng/archive/refs/heads/main.zip
# Unzip and enter the installation directory
unzip main.zip &amp;&amp; cd bisheng-main/docker
```
Start BISHENG
```bash
docker-compose up -d
```
After the startup is complete, access http://IP:3001 in the browser. The login page will appear, proceed with user registration. 

By default, the first registered user will become the system admin. 

For more installation and deployment issues, refer to:Ôºö[Self-hosting](https://dataelem.feishu.cn/wiki/BSCcwKd4Yiot3IkOEC8cxGW7nPc)

## Acknowledgement 
This repo benefits from [langchain](https://github.com/langchain-ai/langchain) [langflow](https://github.com/logspace-ai/langflow) [unstructured](https://github.com/Unstructured-IO/unstructured) and [LLaMA-Factory](https://github.com/hiyouga/LLaMA-Factory) . Thanks for their wonderful works.

&lt;b&gt;Thank you to our contributorsÔºö&lt;/b&gt;

&lt;a href=&quot;https://github.com/dataelement/bisheng/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=dataelement/bisheng&quot; /&gt;
&lt;/a&gt;



## Community &amp; contact 
Welcome to join our discussion group

&lt;img src=&quot;https://www.dataelem.com/nstatic/qrcode.png&quot; alt=&quot;Wechat QR Code&quot;&gt;


&lt;!--
## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=dataelement/bisheng&amp;type=Date)](https://star-history.com/#dataelement/bisheng&amp;Date)
--&gt;
</pre>
          ]]></content:encoded>
            <category>TypeScript</category>
        </item>
        <item>
            <title><![CDATA[getsentry/sentry]]></title>
            <link>https://github.com/getsentry/sentry</link>
            <guid>https://github.com/getsentry/sentry</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:14 GMT</pubDate>
            <description><![CDATA[Developer-first error tracking and performance monitoring]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/getsentry/sentry">getsentry/sentry</a></h1>
            <p>Developer-first error tracking and performance monitoring</p>
            <p>Language: Python</p>
            <p>Stars: 40,608</p>
            <p>Forks: 4,321</p>
            <p>Stars today: 18 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;
  &lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://sentry.io/?utm_source=github&amp;utm_medium=logo&quot; target=&quot;_blank&quot;&gt;
      &lt;img src=&quot;https://sentry-brand.storage.googleapis.com/sentry-wordmark-dark-280x84.png&quot; alt=&quot;Sentry&quot; width=&quot;280&quot; height=&quot;84&quot; /&gt;
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;p align=&quot;center&quot;&gt;
    Users and logs provide clues. Sentry provides answers.
  &lt;/p&gt;
&lt;/p&gt;

# What&#039;s Sentry?

Sentry is a developer-first error tracking and performance monitoring platform that helps developers see what actually matters, solve quicker, and learn continuously about their applications.

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://github.com/getsentry/sentry/raw/master/.github/screenshots/projects.png&quot; width=&quot;270&quot; /&gt;
  &lt;img src=&quot;https://github.com/getsentry/sentry/raw/master/.github/screenshots/issue-details.png&quot; width=&quot;270&quot; /&gt;
  &lt;img src=&quot;https://github.com/getsentry/sentry/raw/master/.github/screenshots/transaction-summary.png&quot; width=&quot;270&quot; /&gt;
  &lt;img src=&quot;https://github.com/getsentry/sentry/raw/master/.github/screenshots/releases.png&quot; width=&quot;270&quot; /&gt;
&lt;/p&gt;

## Official Sentry SDKs

- [JavaScript](https://github.com/getsentry/sentry-javascript)
- [Electron](https://github.com/getsentry/sentry-electron/)
- [React-Native](https://github.com/getsentry/sentry-react-native)
- [Python](https://github.com/getsentry/sentry-python)
- [Ruby](https://github.com/getsentry/sentry-ruby)
- [PHP](https://github.com/getsentry/sentry-php)
- [Laravel](https://github.com/getsentry/sentry-laravel)
- [Go](https://github.com/getsentry/sentry-go)
- [Rust](https://github.com/getsentry/sentry-rust)
- [Java/Kotlin](https://github.com/getsentry/sentry-java)
- [Objective-C/Swift](https://github.com/getsentry/sentry-cocoa)
- [C\#/F\#](https://github.com/getsentry/sentry-dotnet)
- [C/C++](https://github.com/getsentry/sentry-native)
- [Dart](https://github.com/getsentry/sentry-dart)
- [Perl](https://github.com/getsentry/perl-raven)
- [Clojure](https://github.com/getsentry/sentry-clj/)
- [Elixir](https://github.com/getsentry/sentry-elixir)
- [Unity](https://github.com/getsentry/sentry-unity)
- [Unreal Engine](https://github.com/getsentry/sentry-unreal)
- [PowerShell](https://github.com/getsentry/sentry-powershell)

# Resources

- [Documentation](https://docs.sentry.io/)
- [Discussions](https://github.com/getsentry/sentry/discussions) (Bugs, feature requests,
  general questions)
- [Discord](https://discord.gg/PXa5Apfe7K)
- [Contributing](https://docs.sentry.io/internal/contributing/)
- [Bug Tracker](https://github.com/getsentry/sentry/issues)
- [Code](https://github.com/getsentry/sentry)
- [Transifex](https://www.transifex.com/getsentry/sentry/) (Translate
  Sentry\!)
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[lmnr-ai/index]]></title>
            <link>https://github.com/lmnr-ai/index</link>
            <guid>https://github.com/lmnr-ai/index</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:13 GMT</pubDate>
            <description><![CDATA[SOTA Open-Source Browser Agent for autonomously performing complex tasks on the web]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/lmnr-ai/index">lmnr-ai/index</a></h1>
            <p>SOTA Open-Source Browser Agent for autonomously performing complex tasks on the web</p>
            <p>Language: Python</p>
            <p>Stars: 1,479</p>
            <p>Forks: 69</p>
            <p>Stars today: 84 stars today</p>
            <h2>README</h2><pre>&lt;a href=&quot;https://www.ycombinator.com/companies/laminar-ai&quot;&gt;![Static Badge](https://img.shields.io/badge/Y%20Combinator-S24-orange)&lt;/a&gt;
&lt;a href=&quot;https://x.com/lmnrai&quot;&gt;![X (formerly Twitter) Follow](https://img.shields.io/twitter/follow/lmnrai)&lt;/a&gt;
&lt;a href=&quot;https://discord.gg/nNFUUDAKub&quot;&gt; ![Static Badge](https://img.shields.io/badge/Join_Discord-464646?&amp;logo=discord&amp;logoColor=5865F2) &lt;/a&gt;

# Index

Index is a state-of-the-art open-source browser agent that autonomously executes complex tasks on the web.

- [x] It is powered by Claude 3.7 Sonnet with extented thinking. More models will be supported in the future.
- [x] Index is also available as a [hosted API.](https://docs.lmnr.ai/laminar-index/introduction)
- [x] You can also try out Index via [hosted UI](https://docs.lmnr.ai/laminar-index/introduction#hosted-ui) or fully [self-host the UI](https://x.com/skull8888888888/status/1910763169489764374).
- [x] Supports advanced [browser agent observability](https://docs.lmnr.ai/laminar-index/observability) powered by [Laminar](https://lmnr.ai).

prompt: go to ycombinator.com. summarize first 3 companies in the W25 batch and make new spreadsheet in google sheets.

https://github.com/user-attachments/assets/2b46ee20-81b6-4188-92fb-4d97fe0b3d6a


## Index API

Index API is available as [hosted api](https://docs.lmnr.ai/laminar-index/introduction) on the [Laminar](https://lmnr.ai) platform. Index API manages remote browser sessions and agent infrastructure. Index API is the best way to run AI browser automation in production. To get started, [sign up](https://lmnr.ai/sign-in) and create project API key.

### Install Laminar
```bash
pip install lmnr
```

### Use Index via API
```python
from lmnr import Laminar, AsyncLaminarClient
# you can also set LMNR_PROJECT_API_KEY environment variable

# Initialize tracing
Laminar.initialize(project_api_key=&quot;your_api_key&quot;)

# Initialize the client
client = AsyncLaminarClient(api_key=&quot;your_api_key&quot;)

async def main():

    # Run a task
    response = await client.agent.run(
        prompt=&quot;Navigate to news.ycombinator.com, find a post about AI, and summarize it&quot;
    )

    # Print the result
    print(response.result)
    
if __name__ == &quot;__main__&quot;:
    asyncio.run(main())
```

When you call Index via API, you automatically get full browser agent observability on Laminar platform. Learn more about [Index browser observability](https://docs.lmnr.ai/laminar-index/introduction#tracing-with-laminar).

## Local Quick Start

### Install dependencies
```bash
pip install lmnr-index

# Install playwright
playwright install chromium
```

### Run the agent
```python
import asyncio
from index import Agent, AnthropicProvider

async def main():
    # Initialize the LLM provider
    llm = AnthropicProvider(
            model=&quot;claude-3-7-sonnet-20250219&quot;,
            enable_thinking=True, 
            thinking_token_budget=2048)
    
    # Create an agent with the LLM
    agent = Agent(llm=llm)
    
    # Run the agent with a task
    output = await agent.run(
        prompt=&quot;Navigate to news.ycombinator.com, find a post about AI, and summarize it&quot;
    )
    
    # Print the result
    print(output.result)
    
if __name__ == &quot;__main__&quot;:
    asyncio.run(main())
```

### Stream the agent&#039;s output
```python
from index import Agent, AnthropicProvider

agent = Agent(llm=AnthropicProvider(model=&quot;claude-3-7-sonnet-20250219&quot;))    

# Stream the agent&#039;s output
async for chunk in agent.run_stream(
    prompt=&quot;Navigate to news.ycombinator.com, find a post about AI, and summarize it&quot;):
    print(chunk)
``` 

### Enable browser agent observability

To trace Index agent&#039;s actions and record browser session you simply need to initialize Laminar tracing before running the agent.

```python
from lmnr import Laminar

Laminar.initialize(project_api_key=&quot;your_api_key&quot;)
```

Then you will get full observability on the agent&#039;s actions synced with the browser session in the Laminar platform.

&lt;picture&gt;
    &lt;img src=&quot;./static/traces.png&quot; alt=&quot;Index observability&quot; width=&quot;800&quot;/&gt;
&lt;/picture&gt;

### Run with remote CDP url
```python
import asyncio
from index import Agent, AnthropicProvider, BrowserConfig

async def main():
    # Configure browser to connect to an existing Chrome DevTools Protocol endpoint
    browser_config = BrowserConfig(
        cdp_url=&quot;&lt;cdp_url&gt;&quot;
    )
    
    # Initialize the LLM provider
    llm = AnthropicProvider(model=&quot;claude-3-7-sonnet-20250219&quot;, enable_thinking=True, thinking_token_budget=2048)
    
    # Create an agent with the LLM and browser
    agent = Agent(llm=llm, browser_config=browser_config)
    
    # Run the agent with a task
    output = await agent.run(
        prompt=&quot;Navigate to news.ycombinator.com and find the top story&quot;
    )
    
    # Print the result
    print(output.result)
    
if __name__ == &quot;__main__&quot;:
    asyncio.run(main())
```

### Customize browser window size
```python
import asyncio
from index import Agent, AnthropicProvider, BrowserConfig

async def main():
    # Configure browser with custom viewport size
    browser_config = BrowserConfig(
        viewport_size={&quot;width&quot;: 1200, &quot;height&quot;: 900}
    )
    
    # Initialize the LLM provider
    llm = AnthropicProvider(model=&quot;claude-3-7-sonnet-20250219&quot;)
    
    # Create an agent with the LLM and browser
    agent = Agent(llm=llm, browser_config=browser_config)
    
    # Run the agent with a task
    output = await agent.run(
        &quot;Navigate to a responsive website and capture how it looks in full HD resolution&quot;
    )
    
    # Print the result
    print(output.result)
    
if __name__ == &quot;__main__&quot;:
    asyncio.run(main())
```

---

Made with ‚ù§Ô∏è by the [Laminar team](https://lmnr.ai)
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[modelscope/ms-swift]]></title>
            <link>https://github.com/modelscope/ms-swift</link>
            <guid>https://github.com/modelscope/ms-swift</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:12 GMT</pubDate>
            <description><![CDATA[Use PEFT or Full-parameter to CPT/SFT/DPO/GRPO 500+ LLMs (Qwen2.5, Llama4, InternLM3, GLM4, Mistral, Yi1.5, DeepSeek-R1, ...) and 200+ MLLMs (Qwen2.5-VL, Qwen2.5-Omni, Qwen2-Audio, Ovis2, InternVL3, Llava, MiniCPM-V-2.6, GLM4v, Xcomposer2.5, DeepSeek-VL2, Phi4, GOT-OCR2, ...).]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/modelscope/ms-swift">modelscope/ms-swift</a></h1>
            <p>Use PEFT or Full-parameter to CPT/SFT/DPO/GRPO 500+ LLMs (Qwen2.5, Llama4, InternLM3, GLM4, Mistral, Yi1.5, DeepSeek-R1, ...) and 200+ MLLMs (Qwen2.5-VL, Qwen2.5-Omni, Qwen2-Audio, Ovis2, InternVL3, Llava, MiniCPM-V-2.6, GLM4v, Xcomposer2.5, DeepSeek-VL2, Phi4, GOT-OCR2, ...).</p>
            <p>Language: Python</p>
            <p>Stars: 7,023</p>
            <p>Forks: 599</p>
            <p>Stars today: 23 stars today</p>
            <h2>README</h2><pre># SWIFT (Scalable lightWeight Infrastructure for Fine-Tuning)

&lt;p align=&quot;center&quot;&gt;
    &lt;br&gt;
    &lt;img src=&quot;asset/banner.png&quot;/&gt;
    &lt;br&gt;
&lt;p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://modelscope.cn/home&quot;&gt;ModelScope Community Website&lt;/a&gt;
&lt;br&gt;
        &lt;a href=&quot;README_CN.md&quot;&gt;‰∏≠Êñá&lt;/a&gt; &amp;nbsp ÔΩú &amp;nbsp English &amp;nbsp
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://img.shields.io/badge/python-3.10-5be.svg&quot;&gt;
&lt;img src=&quot;https://img.shields.io/badge/pytorch-%E2%89%A52.0-orange.svg&quot;&gt;
&lt;a href=&quot;https://github.com/modelscope/modelscope/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/modelscope-%E2%89%A51.19-5D91D4.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://pypi.org/project/ms-swift/&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/ms-swift.svg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/modelscope/swift/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/modelscope/swift&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://pepy.tech/project/ms-swift&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/ms-swift&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/modelscope/swift/pulls&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PR-welcome-55EB99.svg&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://trendshift.io/repositories/6427&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://trendshift.io/api/badge/repositories/6427&quot; alt=&quot;modelscope%2Fswift | Trendshift&quot; style=&quot;width: 250px; height: 55px;&quot; width=&quot;250&quot; height=&quot;55&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;a href=&quot;https://arxiv.org/abs/2408.05517&quot;&gt;Paper&lt;/a&gt; &amp;nbsp ÔΩú &lt;a href=&quot;https://swift.readthedocs.io/en/latest/&quot;&gt;Swift3.x En Doc&lt;/a&gt; &amp;nbsp ÔΩú &amp;nbsp &lt;a href=&quot;https://swift.readthedocs.io/zh-cn/latest/&quot;&gt;Swift3.x‰∏≠ÊñáÊñáÊ°£&lt;/a&gt; &amp;nbsp
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;a href=&quot;https://swift2x-en.readthedocs.io/en/latest/&quot;&gt;Swift2.x En Doc&lt;/a&gt; &amp;nbsp ÔΩú &amp;nbsp &lt;a href=&quot;https://swift2x.readthedocs.io/zh-cn/latest/&quot;&gt;Swift2.x‰∏≠ÊñáÊñáÊ°£&lt;/a&gt; &amp;nbsp
&lt;/p&gt;


## üìñ Table of Contents
- [Groups](#-Groups)
- [Introduction](#-introduction)
- [News](#-news)
- [Installation](#%EF%B8%8F-installation)
- [Quick Start](#-quick-Start)
- [Usage](#-Usage)
- [License](#-License)
- [Citation](#-citation)


## ‚òé Groups

You can contact us and communicate with us by adding our group:


[Discord Group](https://discord.com/invite/D27yfEFVz5)              |  WeChat Group
:-------------------------:|:-------------------------:
&lt;img src=&quot;asset/discord_qr.jpg&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;  |  &lt;img src=&quot;asset/wechat.png&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;


## üìù Introduction
üç≤ ms-swift is an official framework provided by the ModelScope community for fine-tuning and deploying large language models and multi-modal large models. It currently supports the training (pre-training, fine-tuning, human alignment), inference, evaluation, quantization, and deployment of 450+ large models and 150+ multi-modal large models. These large language models (LLMs) include models such as Qwen2.5, InternLM3, GLM4, Mistral, DeepSeek-R1, Yi1.5, TeleChat2, Baichuan2, and Gemma2. The multi-modal LLMs include models such as Qwen2.5-VL, Qwen2-Audio, Llama3.4, Llava, InternVL2.5, MiniCPM-V-2.6, GLM4v, Xcomposer2.5, Yi-VL, DeepSeek-VL2, Phi3.5-Vision, and GOT-OCR2.

üçî Additionally, ms-swift incorporates the latest training technologies, including lightweight techniques such as LoRA, QLoRA, Llama-Pro, LongLoRA, GaLore, Q-GaLore, LoRA+, LISA, DoRA, FourierFt, ReFT, UnSloth, and Liger, as well as human alignment training methods like DPO, GRPO, RM, PPO, KTO, CPO, SimPO, and ORPO. ms-swift supports acceleration of inference, evaluation, and deployment modules using vLLM and LMDeploy, and it supports model quantization with technologies like GPTQ, AWQ, and BNB. Furthermore, ms-swift offers a Gradio-based Web UI and a wealth of best practices.

**Why choose ms-swift?**

- üçé **Model Types**: Supports 450+ pure text large models, **150+ multi-modal large models**, as well as All-to-All multi-modal models, sequence classification models, and embedding models, **covering the entire process from training to deployment**.
- **Dataset Types**: Comes with 150+ pre-training, fine-tuning, human alignment, multi-modal datasets, and supports custom datasets.
- **Hardware Support**: Compatible with CPU, RTX series, T4/V100, A10/A100/H100, Ascend NPU, MPS, etc.
- üçä **Lightweight Training**: Supports lightweight fine-tuning methods like LoRA, QLoRA, DoRA, LoRA+, ReFT, RS-LoRA, LLaMAPro, Adapter, GaLore, Q-Galore, LISA, UnSloth, Liger-Kernel.
- **Distributed Training**: Supports distributed data parallel (DDP), device_map simple model parallelism, DeepSpeed ZeRO2/ZeRO3, FSDP, and other distributed training techniques.
- **Quantization Training**: Supports training quantized models like BNB, AWQ, GPTQ, AQLM, HQQ, EETQ.
- **RLHF Training**: Supports human alignment training methods such as DPO, GRPO, RM, PPO, KTO, CPO, SimPO, ORPO for both pure text and multi-modal large models.
- üçì **Multi-Modal Training**: Supports training on different modalities like images, videos, and audio, for tasks like VQA, captioning, OCR, and grounding.
- **Interface Training**: Provides capabilities for training, inference, evaluation, quantization through an interface, completing the whole large model pipeline.
- **Plugin and Extension**: Supports custom model and dataset extensions, as well as customization of components like loss, metric, trainer, loss-scale, callback, optimizer.
- üçâ **Toolbox Capabilities**: Offers not only training support for large models and multi-modal large models but also covers the entire process of inference, evaluation, quantization, and deployment.
- **Inference Acceleration**: Supports inference acceleration engines like PyTorch, vLLM, LmDeploy, and provides OpenAI API for accelerating inference, deployment, and evaluation modules.
- **Model Evaluation**: Uses EvalScope as the evaluation backend and supports evaluation on 100+ datasets for both pure text and multi-modal models.
- **Model Quantization**: Supports AWQ, GPTQ, and BNB quantized exports, with models that can use vLLM/LmDeploy for inference acceleration and continue training.


## üéâ News
- üéÅ 2025.04.15: SWIFT paper has been accepted by AAAI 2025, you can find the paper [here](https://ojs.aaai.org/index.php/AAAI/article/view/35383).
- üéÅ 2025.03.23: SWIFT supports multi round GRPO, this is used to construct multi turn conversations(use cases like agent tool calling), check script [here](examples/train/grpo/train_multi_round.sh).
- üéÅ 2025.03.16: SWIFT supports training with Megatron&#039;s parallel technology. Please refer to the [Megatron-SWIFT Training Documentation](https://swift.readthedocs.io/en/latest/Instruction/Megatron-SWIFT-Training.html).
- üéÅ 2025.03.15: SWIFT support the fine-tuning of gme(multi-modal) embedding modelsÔºåplease check the [training script](examples/train/embedding/train_gme.sh)„ÄÇ
- üéÅ 2025.03.13: We provide a script of GRPO to train a 72B model with only 4 GPUs(4*80G), please check [here](examples/train/grpo/train_72b_4gpu.sh)
- üéÅ 2025.03.05: We support the hybrid mode of GRPO(rollout and actor on the same GPU, rollout sleep when actor training), meanwhile tensor parallel for GRPO, check [training script here](examples/train/grpo/multi_gpu_mp_colocate.sh)
- üéÅ 2025.02.21: We test the speed performance of GRPOÔºåand with some tricks to [speed up to 300%](examples/train/grpo/full_lmdeploy.sh). WanDB charts can be found [here](https://wandb.ai/tastelikefeet/grpo_perf_test?nw=nwuseryuzezyz)
- üéÅ 2025.02.21: Support distill from LLM APIÔºåPlease check [this example](examples/sampler/distill/distill.sh)
- üéÅ 2025.02.17: Support SwanLab, just add [a few of arguments](docs/source_en/Instruction/Command-line-parameters.md#swanlab) you can use swanlab to analysis your training results
- üéÅ 2025.02.16: Support LMDeploy in GRPO, use `--use_lmdeploy true`. Please check [this script](examples/train/grpo/full_lmdeploy.sh)
- üî• 2025.02.12: Support for GRPO(Group Relative Policy Optimization) algorithm for llm and mllm, document can be found in [here](docs/source_en/Instruction/GRPO.md)
- üéÅ 2025.02.10: SWIFT support the fine-tuning of embedding modelsÔºåplease check the [training script](examples/train/embedding/train_gte.sh)„ÄÇ
- üéÅ 2025.01.23: SWIFT support the `sample` command, this is a very important feature for complex CoT and RFT. Meanwhile, we support an [Reinforced Fine-tuning script](docs/source_en/Instruction/Reinforced_Fine_tuning.md).
- üéÅ 2024.12.04: **SWIFT3.0** major version update. Please check the [Release Notes and Changes](https://swift.readthedocs.io/en/latest/Instruction/ReleaseNote3.0.html).
- üéâ 2024.08.12: The SWIFT paper has been published on arXiv, and you can read it [here](https://arxiv.org/abs/2408.05517).
- üî• 2024.08.05: Support for using [evalscope](https://github.com/modelscope/evalscope/) as a backend for evaluating large models and multimodal models.
- üî• 2024.07.29: Support for using [vllm](https://github.com/vllm-project/vllm) and [lmdeploy](https://github.com/InternLM/lmdeploy) to accelerate inference for large models and multimodal models. When performing infer/deploy/eval, you can specify `--infer_backend vllm/lmdeploy`.
- üî• 2024.07.24: Support for human preference alignment training for multimodal large models, including DPO/ORPO/SimPO/CPO/KTO/RM/PPO.
- üî• 2024.02.01: Support for Agent training! The training algorithm is derived from [this paper](https://arxiv.org/pdf/2309.00986.pdf).


## üõ†Ô∏è Installation
To install using pip:
```shell
pip install ms-swift -U
```

To install from source:
```shell
# pip install git+https://github.com/modelscope/ms-swift.git

git clone https://github.com/modelscope/ms-swift.git
cd ms-swift
pip install -e .
```

Running Environment:

|              | Range        | Recommended | Notes                                     |
| ------------ |--------------| ----------- | ----------------------------------------- |
| python       | &gt;=3.9        | 3.10        |                                           |
| cuda         |              | cuda12      | No need to install if using CPU, NPU, MPS |
| torch        | &gt;=2.0        |             |                                           |
| transformers | &gt;=4.33       | 4.51      |                                           |
| modelscope   | &gt;=1.19       |             |                                           |
| peft | &gt;=0.11,&lt;0.16 | ||
| trl | &gt;=0.13,&lt;0.17 | 0.16 |RLHF|
| deepspeed    | &gt;=0.14       | 0.14.5 | Training                                  |
| vllm         | &gt;=0.5.1      | 0.7.3/0.8.3       | Inference/Deployment/Evaluation           |
| lmdeploy     | &gt;=0.5        | 0.7.2.post1       | Inference/Deployment/Evaluation           |
| evalscope | &gt;=0.11       |  | Evaluation |

For more optional dependencies, you can refer to [here](https://github.com/modelscope/ms-swift/blob/main/requirements/install_all.sh).


## üöÄ Quick Start

10 minutes of self-cognition fine-tuning of Qwen2.5-7B-Instruct on a single 3090 GPU:

### Command Line Interface

```shell
# 22GB
CUDA_VISIBLE_DEVICES=0 \
swift sft \
    --model Qwen/Qwen2.5-7B-Instruct \
    --train_type lora \
    --dataset &#039;AI-ModelScope/alpaca-gpt4-data-zh#500&#039; \
              &#039;AI-ModelScope/alpaca-gpt4-data-en#500&#039; \
              &#039;swift/self-cognition#500&#039; \
    --torch_dtype bfloat16 \
    --num_train_epochs 1 \
    --per_device_train_batch_size 1 \
    --per_device_eval_batch_size 1 \
    --learning_rate 1e-4 \
    --lora_rank 8 \
    --lora_alpha 32 \
    --target_modules all-linear \
    --gradient_accumulation_steps 16 \
    --eval_steps 50 \
    --save_steps 50 \
    --save_total_limit 2 \
    --logging_steps 5 \
    --max_length 2048 \
    --output_dir output \
    --system &#039;You are a helpful assistant.&#039; \
    --warmup_ratio 0.05 \
    --dataloader_num_workers 4 \
    --model_author swift \
    --model_name swift-robot
```

Tips:

- If you want to train with a custom dataset, you can refer to [this guide](https://swift.readthedocs.io/en/latest/Customization/Custom-dataset.html) to organize your dataset format and specify `--dataset &lt;dataset_path&gt;`.
- The `--model_author` and `--model_name` parameters are only effective when the dataset includes `swift/self-cognition`.
- To train with a different model, simply modify `--model &lt;model_id/model_path&gt;`.
- By default, ModelScope is used for downloading models and datasets. If you want to use HuggingFace, simply specify `--use_hf true`.

After training is complete, use the following command to infer with the trained weights:

- Here, `--adapters` should be replaced with the last checkpoint folder generated during training. Since the adapters folder contains the training parameter file `args.json`, there is no need to specify `--model`, `--system` separately; Swift will automatically read these parameters. To disable this behavior, you can set `--load_args false`.

```shell
# Using an interactive command line for inference.
CUDA_VISIBLE_DEVICES=0 \
swift infer \
    --adapters output/vx-xxx/checkpoint-xxx \
    --stream true \
    --temperature 0 \
    --max_new_tokens 2048

# merge-lora and use vLLM for inference acceleration
CUDA_VISIBLE_DEVICES=0 \
swift infer \
    --adapters output/vx-xxx/checkpoint-xxx \
    --stream true \
    --merge_lora true \
    --infer_backend vllm \
    --max_model_len 8192 \
    --temperature 0 \
    --max_new_tokens 2048
```

Finally, use the following command to push the model to ModelScope:

```shell
CUDA_VISIBLE_DEVICES=0 \
swift export \
    --adapters output/vx-xxx/checkpoint-xxx \
    --push_to_hub true \
    --hub_model_id &#039;&lt;your-model-id&gt;&#039; \
    --hub_token &#039;&lt;your-sdk-token&gt;&#039; \
    --use_hf false
```


### Web-UI
The Web-UI is a **zero-threshold** training and deployment interface solution based on Gradio interface technology. For more details, you can check [here](https://swift.readthedocs.io/en/latest/GetStarted/Web-UI.html).

```shell
SWIFT_UI_LANG=en swift web-ui
```

![image.png](./docs/resources/web-ui-en.jpg)

### Using Python

ms-swift also supports training and inference using Python. Below is pseudocode for training and inference. For more details, you can refer to [here](https://github.com/modelscope/ms-swift/blob/main/examples/notebook/qwen2_5-self-cognition/self-cognition-sft.ipynb).

Training:

```python
# Retrieve the model and template, and add a trainable LoRA module
model, tokenizer = get_model_tokenizer(model_id_or_path, ...)
template = get_template(model.model_meta.template, tokenizer, ...)
model = Swift.prepare_model(model, lora_config)

# Download and load the dataset, and encode the text into tokens
train_dataset, val_dataset = load_dataset(dataset_id_or_path, ...)
train_dataset = EncodePreprocessor(template=template)(train_dataset, num_proc=num_proc)
val_dataset = EncodePreprocessor(template=template)(val_dataset, num_proc=num_proc)

# Train the model
trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    data_collator=template.data_collator,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    template=template,
)
trainer.train()
```
Inference:

```python
# Perform inference using the native PyTorch engine
engine = PtEngine(model_id_or_path, adapters=[lora_checkpoint])
infer_request = InferRequest(messages=[{&#039;role&#039;: &#039;user&#039;, &#039;content&#039;: &#039;who are you?&#039;}])
request_config = RequestConfig(max_tokens=max_new_tokens, temperature=temperature)

resp_list = engine.infer([infer_request], request_config)
print(f&#039;response: {resp_list[0].choices[0].message.content}&#039;)
```

## ‚ú® Usage
Here is a minimal example of training to deployment using ms-swift. For more details, you can check the [examples](https://github.com/modelscope/ms-swift/tree/main/examples).

- If you want to use other models or datasets (including multimodal models and datasets), you only need to modify `--model` to specify the corresponding model&#039;s ID or path, and modify `--dataset` to specify the corresponding dataset&#039;s ID or path.
- By default, ModelScope is used for downloading models and datasets. If you want to use HuggingFace, simply specify `--use_hf true`.

|   Useful Links |
| ------ |
|   [üî•Command Line Parameters](https://swift.readthedocs.io/en/latest/Instruction/Command-line-parameters.html)   |
|   [Supported Models and Datasets](https://swift.readthedocs.io/en/latest/Instruction/Supported-models-and-datasets.html)   |
|   [Custom Models](https://swift.readthedocs.io/en/latest/Customization/Custom-model.html), [üî•Custom Datasets](https://swift.readthedocs.io/en/latest/Customization/Custom-dataset.html)   |
|   [LLM Tutorial](https://github.com/modelscope/modelscope-classroom/tree/main/LLM-tutorial)   |

### Training

Supported Training Methods:

| Method                             | Full-Parameter                                               | LoRA                                                                                        | QLoRA                                                        | Deepspeed                                                    | Multi-Node                                                   | Multi-Modal                                                                                  |
|------------------------------------|--------------------------------------------------------------|---------------------------------------------------------------------------------------------|--------------------------------------------------------------|--------------------------------------------------------------|--------------------------------------------------------------|----------------------------------------------------------------------------------------------|
| Pre-training                       | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/pretrain/train.sh) | ‚úÖ                                                                                           | ‚úÖ                                                            | ‚úÖ                                                            | ‚úÖ                                                            | ‚úÖ                                                                                            |
| Instruction Supervised Fine-tuning | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/full/train.sh) | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/lora_sft.sh)            | [‚úÖ](https://github.com/modelscope/ms-swift/tree/main/examples/train/qlora) | [‚úÖ](https://github.com/modelscope/ms-swift/tree/main/examples/train/multi-gpu/deepspeed) | [‚úÖ](https://github.com/modelscope/ms-swift/tree/main/examples/train/multi-node)                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/tree/main/examples/train/multimodal)              |
| DPO Training                       | ‚úÖ                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/rlhf/dpo.sh)            | ‚úÖ                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/rlhf/dpo.sh) | ‚úÖ                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/multimodal/rlhf/dpo.sh)  |
| GRPO Training                      | [‚úÖ]((https://github.com/modelscope/ms-swift/blob/main/examples/train/grpo/grpo_zero2.sh)) | ‚úÖ                                                                                           | ‚úÖ                                                            | ‚úÖ                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/grpo/multi_node)                                    | ‚úÖ                                                                                            |
| Reward Model Training              | ‚úÖ                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/rlhf/rm.sh)             | ‚úÖ                                                            | [‚úÖ](https://github.com/modelscope/ms-swift/blob/main/examples/train/rlhf/rm.sh) | ‚úÖ 

... [README content truncated due to size. Visit the repository for the complete README] ...</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[microsoft/Codex-CLI]]></title>
            <link>https://github.com/microsoft/Codex-CLI</link>
            <guid>https://github.com/microsoft/Codex-CLI</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:11 GMT</pubDate>
            <description><![CDATA[CLI tool that uses Codex to turn natural language commands into their Bash/ZShell/PowerShell equivalents]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/microsoft/Codex-CLI">microsoft/Codex-CLI</a></h1>
            <p>CLI tool that uses Codex to turn natural language commands into their Bash/ZShell/PowerShell equivalents</p>
            <p>Language: Python</p>
            <p>Stars: 2,125</p>
            <p>Forks: 191</p>
            <p>Stars today: 20 stars today</p>
            <h2>README</h2><pre># Codex CLI - Natural Language Command Line Interface

This project uses [GPT-3 Codex](https://openai.com/blog/openai-codex/) to convert natural language commands into commands in PowerShell, Z shell and Bash.

![Codex Cli GIF](codex_cli.gif)


The Command Line Interface (CLI) was the first major User Interface we used to interact with machines. It&#039;s incredibly powerful, you can do almost anything with a CLI, but it requires the user to express their intent extremely precisely. The user needs to _know the language of the computer_. 

With the advent of Large Language Models (LLMs), particularly those that have been trained on code, it&#039;s possible to interact with a CLI using Natural Language (NL). In effect, these models understand natural language _and_ code well enough that they can translate from one to another. 

This project aims to offer a cross-shell NL-&gt;Code experience to allow users to interact with their favorite CLI using NL. The user enters a command, like &quot;what&#039;s my IP address&quot;, hits `Ctrl + G` and gets a suggestion for a command idiomatic to the shell they&#039;re using. The project uses the GPT-3 Codex model off-the-shelf, meaning the model has not been explicitly trained for the task. Instead we rely on a discipline called prompt engineering (see [section](#prompt-engineering-and-context-files) below) to coax the right commands from Codex. 

**Note: The model can still make mistakes! Don&#039;t run a command if you don&#039;t understand it. If you&#039;re not sure what a command does, hit `Ctrl + C` to cancel it**.

This project took technical inspiration from the [zsh_codex](https://github.com/tom-doerr/zsh_codex) project, extending its functionality to span multiple shells and to customize the prompts passed to the model (see prompt engineering section below).

## Statement of Purpose
This repository aims to grow the understanding of using Codex in applications by providing an example of implementation and references to support the [Microsoft Build conference in 2022](https://mybuild.microsoft.com/). It is not intended to be a released product. Therefore, this repository is not for discussing OpenAI API or requesting new features.

## Requirements
* [Python 3.7.1+](https://www.python.org/downloads/)
    * \[Windows\]: Python is added to PATH.
* An [OpenAI account](https://openai.com/api/)
    * [OpenAI API Key](https://beta.openai.com/account/api-keys).
    * [OpenAI Organization Id](https://beta.openai.com/account/org-settings). If you have multiple organizations, please update your [default organization](https://beta.openai.com/account/api-keys) to the one that has access to codex engines before getting the organization Id.
    * [OpenAI Engine Id](https://beta.openai.com/docs/engines/codex-series-private-beta). It provides access to a model. For example, `code-davinci-002` or `code-cushman-001`. See [here](#what-openai-engines-are-available-to-me) for checking available engines.

## Installation

Please follow the installation instructions for PowerShell, bash or zsh from [here](./Installation.md).

## Usage

Once configured for your shell of preference, you can use the Codex CLI by writing a comment (starting with `#`) into your shell, and then hitting `Ctrl + G`.

The Codex CLI supports two primary modes: single-turn and multi-turn.

By default, multi-turn mode is off. It can be toggled on and off using the `# start multi-turn` and `# stop multi-turn` commands.

If the multi-turn mode is on, the Codex CLI will &quot;remember&quot; past interactions with the model, allowing you to refer back to previous actions and entities. If, for example, you asked the Codex CLI to change your time zone to mountain, and then said &quot;change it back to pacific&quot;, the model would have the context from the previous interaction to know that &quot;it&quot; is the user&#039;s timezone:

```powershell
# change my timezone to mountain
tzutil /s &quot;Mountain Standard Time&quot;

# change it back to pacific
tzutil /s &quot;Pacific Standard Time&quot;
```

The tool creates a `current_context.txt` file that keeps track of past interactions, and passes them to the model on each subsequent command. 

When multi-turn mode is off, this tool will not keep track of interaction history. There are tradeoffs to using multi-turn mode - though it enables compelling context resolution, it also increases overhead. If, for example, the model produces the wrong script for the job, the user will want to remove that from the context, otherwise future conversation turns will be more likely to produce the wrong script again. With multi-turn mode off, the model will behave completely deterministically - the same command will always produce the same output. 

Any time the model seems to output consistently incorrect commands, you can use the `# stop multi-turn` command to stop the model from remembering past interactions and load in your default context. Alternatively, the `# default context` command does the same while preserving the multi-turn mode as on.

## Commands

| Command | Description |
|--|--|
| `start multi-turn` | Starts a multi-turn experience |
| `stop multi-turn` | Stops a multi-turn experience and loads default context |
| `load context &lt;filename&gt;` | Loads the context file from `contexts` folder |
| `default context` | Loads default shell context |
| `view context` | Opens the context file in a text editor |
| `save context &lt;filename&gt;` | Saves the context file to `contexts` folder, if name not specified, uses current date-time |
| `show config` | Shows the current configuration of your interaction with the model |
| `set &lt;config-key&gt; &lt;config-value&gt;` | Sets the configuration of your interaction with the model |


Feel free to improve your experience by changing the token limit, engine id and temperature using the set command. For example, `# set engine cushman-codex`, `# set temperature 0.5`, `# set max_tokens 50`.

## Prompt Engineering and Context Files

This project uses a discipline called _prompt engineering_ to coax GPT-3 Codex to generate commands from natural language. Specifically, we pass the model a series of examples of NL-&gt;Commands, to give it a sense of the kind of code it should be writing, and also to nudge it towards generating commands idiomatic to the shell you&#039;re using. These examples live in the `contexts` directory. See snippet from the PowerShell context below:

```powershell
# what&#039;s the weather in New York?
(Invoke-WebRequest -uri &quot;wttr.in/NewYork&quot;).Content

# make a git ignore with node modules and src in it
&quot;node_modules
src&quot; | Out-File .gitignore

# open it in notepad
notepad .gitignore
```

Note that this project models natural language commands as comments, and provide examples of the kind of PowerShell scripts we expect the model to write. These examples include single line completions, multi-line completions, and multi-turn completions (the &quot;open it in notepad&quot; example refers to the `.gitignore` file generated on the previous turn). 

When a user enters a new command (say &quot;what&#039;s my IP address&quot;), we simple append that command onto the context (as a comment) and ask Codex to generate the code that should follow it. Having seen the examples above, Codex will know that it should write a short PowerShell script that satisfies the comment. 

## Building your own Contexts

This project comes pre-loaded with contexts for each shell, along with some bonus contexts with other capabilities. Beyond these, you can build your own contexts to coax other behaviors out of the model. For example, if you want the Codex CLI to produce Kubernetes scripts, you can create a new context with examples of commands and the `kubectl` script the model might produce:

```bash
# make a K8s cluster IP called my-cs running on 5678:8080
kubectl create service clusterip my-cs --tcp=5678:8080
```

Add your context to the `contexts` folder and run `load context &lt;filename&gt;` to load it. You can also change the default context from to your context file inside `src\prompt_file.py`.

Note that Codex will often produce correct scripts without any examples. Having been trained on a large corpus of code, it frequently knows how to produce specific commands. That said, building your own contexts helps coax the specific kind of script you&#039;re looking for - whether it&#039;s long or short, whether it declares variables or not, whether it refers back to previous commands, etc. You can also provide examples of your own CLI commands and scripts, to show Codex other tools it should consider using.

One important thing to consider is that if you add a new context, keep the multi-turn mode on to avoid our automatic defaulting (which was added to keep faulty contexts from breaking your experience).

We have added a [cognitive services context](./contexts/CognitiveServiceContext.md) which uses the cognitive services API to provide text to speech type responses as an example.

## Troubleshooting

Use `DEBUG_MODE` to use a terminal input instead of the stdin and debug the code. This is useful when adding new commands and understanding why the tool is unresponsive.

Sometimes the `openai` package will throws errors that aren&#039;t caught by the tool, you can add a catch block at the end of `codex_query.py` for that exception and print a custom error message.

## FAQ
### What OpenAI engines are available to me?
You might have access to different [OpenAI engines](https://beta.openai.com/docs/api-reference/engines) per OpenAI organization. To check what engines are available to you, one can query the [List engines API](https://beta.openai.com/docs/api-reference/engines/list) for available engines. See the following commands:

* Shell
    ```
    curl https://api.openai.com/v1/engines \
      -H &#039;Authorization: Bearer YOUR_API_KEY&#039; \
      -H &#039;OpenAI-Organization: YOUR_ORG_ID&#039;
    ```

* PowerShell

    PowerShell v5 (The default one comes with Windows)
    ```powershell
    (Invoke-WebRequest -Uri https://api.openai.com/v1/engines -Headers @{&quot;Authorization&quot; = &quot;Bearer YOUR_API_KEY&quot;; &quot;OpenAI-Organization&quot; = &quot;YOUR_ORG_ID&quot;}).Content
    ```

    PowerShell v7
    ```powershell
    (Invoke-WebRequest -Uri https://api.openai.com/v1/engines -Authentication Bearer -Token (ConvertTo-SecureString &quot;YOUR_API_KEY&quot; -AsPlainText -Force) -Headers @{&quot;OpenAI-Organization&quot; = &quot;YOUR_ORG_ID&quot;}).Content
    ```

### Can I run the sample on Azure?
The sample code can be currently be used with Codex on OpenAI‚Äôs API. In the coming months, the sample will be updated so you can also use it with the [Azure OpenAI Service](https://aka.ms/azure-openai). 
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[thuml/Time-Series-Library]]></title>
            <link>https://github.com/thuml/Time-Series-Library</link>
            <guid>https://github.com/thuml/Time-Series-Library</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:10 GMT</pubDate>
            <description><![CDATA[A Library for Advanced Deep Time Series Models.]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/thuml/Time-Series-Library">thuml/Time-Series-Library</a></h1>
            <p>A Library for Advanced Deep Time Series Models.</p>
            <p>Language: Python</p>
            <p>Stars: 8,643</p>
            <p>Forks: 1,373</p>
            <p>Stars today: 20 stars today</p>
            <h2>README</h2><pre># Time Series Library (TSLib)
TSLib is an open-source library for deep learning researchers, especially for deep time series analysis.

We provide a neat code base to evaluate advanced deep time series models or develop your model, which covers five mainstream tasks: **long- and short-term forecasting, imputation, anomaly detection, and classification.**

:triangular_flag_on_post:**News** (2024.10) We have included [[TimeXer]](https://arxiv.org/abs/2402.19072), which defined a practical forecasting paradigm: Forecasting with Exogenous Variables. Considering both practicability and computation efficiency, we believe the new forecasting paradigm defined in TimeXer can be the &quot;right&quot; task for future research.

:triangular_flag_on_post:**News** (2024.10) Our lab has open-sourced [[OpenLTM]](https://github.com/thuml/OpenLTM), which provides a distinct pretrain-finetuning paradigm compared to TSLib. If you are interested in Large Time Series Models, you may find this repository helpful.

:triangular_flag_on_post:**News** (2024.07) We wrote a comprehensive survey of [[Deep Time Series Models]](https://arxiv.org/abs/2407.13278) with a rigorous benchmark based on TSLib. In this paper, we summarized the design principles of current time series models supported by insightful experiments, hoping to be helpful to future research.

:triangular_flag_on_post:**News** (2024.04) Many thanks for the great work from [frecklebars](https://github.com/thuml/Time-Series-Library/pull/378). The famous sequential model [Mamba](https://arxiv.org/abs/2312.00752) has been included in our library. See [this file](https://github.com/thuml/Time-Series-Library/blob/main/models/Mamba.py), where you need to install `mamba_ssm` with pip at first.

:triangular_flag_on_post:**News** (2024.03) Given the inconsistent look-back length of various papers, we split the long-term forecasting in the leaderboard into two categories: Look-Back-96 and Look-Back-Searching. We recommend researchers read [TimeMixer](https://openreview.net/pdf?id=7oLshfEIC2), which includes both look-back length settings in experiments for scientific rigor.

:triangular_flag_on_post:**News** (2023.10) We add an implementation to [iTransformer](https://arxiv.org/abs/2310.06625), which is the state-of-the-art model for long-term forecasting. The official code and complete scripts of iTransformer can be found [here](https://github.com/thuml/iTransformer).

:triangular_flag_on_post:**News** (2023.09) We added a detailed [tutorial](https://github.com/thuml/Time-Series-Library/blob/main/tutorial/TimesNet_tutorial.ipynb) for [TimesNet](https://openreview.net/pdf?id=ju_Uqw384Oq) and this library, which is quite friendly to beginners of deep time series analysis.

:triangular_flag_on_post:**News** (2023.02) We release the TSlib as a comprehensive benchmark and code base for time series models, which is extended from our previous GitHub repository [Autoformer](https://github.com/thuml/Autoformer).

## Leaderboard for Time Series Analysis

Till March 2024, the top three models for five different tasks are:

| Model&lt;br&gt;Ranking | Long-term&lt;br&gt;Forecasting&lt;br&gt;Look-Back-96              | Long-term&lt;br/&gt;Forecasting&lt;br/&gt;Look-Back-Searching     | Short-term&lt;br&gt;Forecasting                                    | Imputation                                                   | Classification                                               | Anomaly&lt;br&gt;Detection                               |
| ---------------- | ----------------------------------------------------- | ----------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | -------------------------------------------------- |
| ü•á 1st            | [TimeXer](https://arxiv.org/abs/2402.19072)      | [TimeMixer](https://openreview.net/pdf?id=7oLshfEIC2) | [TimesNet](https://arxiv.org/abs/2210.02186)                 | [TimesNet](https://arxiv.org/abs/2210.02186)                 | [TimesNet](https://arxiv.org/abs/2210.02186)                 | [TimesNet](https://arxiv.org/abs/2210.02186)       |
| ü•à 2nd            | [iTransformer](https://arxiv.org/abs/2310.06625) | [PatchTST](https://github.com/yuqinie98/PatchTST)     | [Non-stationary&lt;br/&gt;Transformer](https://github.com/thuml/Nonstationary_Transformers) | [Non-stationary&lt;br/&gt;Transformer](https://github.com/thuml/Nonstationary_Transformers) | [Non-stationary&lt;br/&gt;Transformer](https://github.com/thuml/Nonstationary_Transformers) | [FEDformer](https://github.com/MAZiqing/FEDformer) |
| ü•â 3rd            | [TimeMixer](https://openreview.net/pdf?id=7oLshfEIC2)          | [DLinear](https://arxiv.org/pdf/2205.13504.pdf)       | [FEDformer](https://github.com/MAZiqing/FEDformer)           | [Autoformer](https://github.com/thuml/Autoformer)            | [Informer](https://github.com/zhouhaoyi/Informer2020)        | [Autoformer](https://github.com/thuml/Autoformer)  |


**Note: We will keep updating this leaderboard.** If you have proposed advanced and awesome models, you can send us your paper/code link or raise a pull request. We will add them to this repo and update the leaderboard as soon as possible.

**Compared models of this leaderboard.** ‚òë means that their codes have already been included in this repo.
  - [x] **TimeXer** - TimeXer: Empowering Transformers for Time Series Forecasting with Exogenous Variables [[NeurIPS 2024]](https://arxiv.org/abs/2402.19072) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/TimeXer.py)
  - [x] **TimeMixer** - TimeMixer: Decomposable Multiscale Mixing for Time Series Forecasting [[ICLR 2024]](https://openreview.net/pdf?id=7oLshfEIC2) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/TimeMixer.py).
  - [x] **TSMixer** - TSMixer: An All-MLP Architecture for Time Series Forecasting [[arXiv 2023]](https://arxiv.org/pdf/2303.06053.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/TSMixer.py)
  - [x] **iTransformer** - iTransformer: Inverted Transformers Are Effective for Time Series Forecasting [[ICLR 2024]](https://arxiv.org/abs/2310.06625) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/iTransformer.py).
  - [x] **PatchTST** - A Time Series is Worth 64 Words: Long-term Forecasting with Transformers [[ICLR 2023]](https://openreview.net/pdf?id=Jbdc0vTOcol) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/PatchTST.py).
  - [x] **TimesNet** - TimesNet: Temporal 2D-Variation Modeling for General Time Series Analysis [[ICLR 2023]](https://openreview.net/pdf?id=ju_Uqw384Oq) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/TimesNet.py).
  - [x] **DLinear** - Are Transformers Effective for Time Series Forecasting? [[AAAI 2023]](https://arxiv.org/pdf/2205.13504.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/DLinear.py).
  - [x] **LightTS** - Less Is More: Fast Multivariate Time Series Forecasting with Light Sampling-oriented MLP Structures [[arXiv 2022]](https://arxiv.org/abs/2207.01186) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/LightTS.py).
  - [x] **ETSformer** - ETSformer: Exponential Smoothing Transformers for Time-series Forecasting [[arXiv 2022]](https://arxiv.org/abs/2202.01381) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/ETSformer.py).
  - [x] **Non-stationary Transformer** - Non-stationary Transformers: Exploring the Stationarity in Time Series Forecasting [[NeurIPS 2022]](https://openreview.net/pdf?id=ucNDIDRNjjv) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Nonstationary_Transformer.py).
  - [x] **FEDformer** - FEDformer: Frequency Enhanced Decomposed Transformer for Long-term Series Forecasting [[ICML 2022]](https://proceedings.mlr.press/v162/zhou22g.html) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/FEDformer.py).
  - [x] **Pyraformer** - Pyraformer: Low-complexity Pyramidal Attention for Long-range Time Series Modeling and Forecasting [[ICLR 2022]](https://openreview.net/pdf?id=0EXmFzUn5I) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Pyraformer.py).
  - [x] **Autoformer** - Autoformer: Decomposition Transformers with Auto-Correlation for Long-Term Series Forecasting [[NeurIPS 2021]](https://openreview.net/pdf?id=I55UqU-M11y) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Autoformer.py).
  - [x] **Informer** - Informer: Beyond Efficient Transformer for Long Sequence Time-Series Forecasting [[AAAI 2021]](https://ojs.aaai.org/index.php/AAAI/article/view/17325/17132) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Informer.py).
  - [x] **Reformer** - Reformer: The Efficient Transformer [[ICLR 2020]](https://openreview.net/forum?id=rkgNKkHtvB) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Reformer.py).
  - [x] **Transformer** - Attention is All You Need [[NeurIPS 2017]](https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Transformer.py).

See our latest paper [[TimesNet]](https://arxiv.org/abs/2210.02186) for the comprehensive benchmark. We will release a real-time updated online version soon.

**Newly added baselines.** We will add them to the leaderboard after a comprehensive evaluation.
  - [x] **MultiPatchFormer** - A multiscale model for multivariate time series forecasting [[Scientific Reports 2025]](https://www.nature.com/articles/s41598-024-82417-4) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/MultiPatchFormer.py)
  - [x] **WPMixer** - WPMixer: Efficient Multi-Resolution Mixing for Long-Term Time Series Forecasting [[AAAI 2025]](https://arxiv.org/abs/2412.17176) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/WPMixer.py)
  - [x] **PAttn** - Are Language Models Actually Useful for Time Series Forecasting? [[NeurIPS 2024]](https://arxiv.org/pdf/2406.16964) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/PAttn.py)
  - [x] **Mamba** - Mamba: Linear-Time Sequence Modeling with Selective State Spaces [[arXiv 2023]](https://arxiv.org/abs/2312.00752) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Mamba.py)
  - [x] **SegRNN** - SegRNN: Segment Recurrent Neural Network for Long-Term Time Series Forecasting [[arXiv 2023]](https://arxiv.org/abs/2308.11200.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/SegRNN.py).
  - [x] **Koopa** - Koopa: Learning Non-stationary Time Series Dynamics with Koopman Predictors [[NeurIPS 2023]](https://arxiv.org/pdf/2305.18803.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Koopa.py).
  - [x] **FreTS** - Frequency-domain MLPs are More Effective Learners in Time Series Forecasting [[NeurIPS 2023]](https://arxiv.org/pdf/2311.06184.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/FreTS.py).
  - [x] **MICN** - MICN: Multi-scale Local and Global Context Modeling for Long-term Series Forecasting [[ICLR 2023]](https://openreview.net/pdf?id=zt53IDUR1U)[[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/MICN.py).
  - [x] **Crossformer** - Crossformer: Transformer Utilizing Cross-Dimension Dependency for Multivariate Time Series Forecasting [[ICLR 2023]](https://openreview.net/pdf?id=vSVLM2j9eie)[[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/Crossformer.py).
  - [x] **TiDE** - Long-term Forecasting with TiDE: Time-series Dense Encoder [[arXiv 2023]](https://arxiv.org/pdf/2304.08424.pdf) [[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/TiDE.py).
  - [x] **SCINet** - SCINet: Time Series Modeling and Forecasting with Sample Convolution and Interaction [[NeurIPS 2022]](https://openreview.net/pdf?id=AyajSjTAzmg)[[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/SCINet.py).
  - [x] **FiLM** - FiLM: Frequency improved Legendre Memory Model for Long-term Time Series Forecasting [[NeurIPS 2022]](https://openreview.net/forum?id=zTQdHSQUQWc)[[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/FiLM.py).
  - [x] **TFT** - Temporal Fusion Transformers for Interpretable Multi-horizon Time Series Forecasting [[arXiv 2019]](https://arxiv.org/abs/1912.09363)[[Code]](https://github.com/thuml/Time-Series-Library/blob/main/models/TemporalFusionTransformer.py). 
 
## Usage

1. Install Python 3.8. For convenience, execute the following command.

```
pip install -r requirements.txt
```

2. Prepare Data. You can obtain the well pre-processed datasets from [[Google Drive]](https://drive.google.com/drive/folders/13Cg1KYOlzM5C7K8gK8NfC-F3EYxkM3D2?usp=sharing) or¬†[[Baidu Drive]](https://pan.baidu.com/s/1r3KhGd0Q9PJIUZdfEYoymg?pwd=i9iy), Then place the downloaded data in the folder`./dataset`. Here is a summary of supported datasets.

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;.\pic\dataset.png&quot; height = &quot;200&quot; alt=&quot;&quot; align=center /&gt;
&lt;/p&gt;

3. Train and evaluate model. We provide the experiment scripts for all benchmarks under the folder `./scripts/`. You can reproduce the experiment results as the following examples:

```
# long-term forecast
bash ./scripts/long_term_forecast/ETT_script/TimesNet_ETTh1.sh
# short-term forecast
bash ./scripts/short_term_forecast/TimesNet_M4.sh
# imputation
bash ./scripts/imputation/ETT_script/TimesNet_ETTh1.sh
# anomaly detection
bash ./scripts/anomaly_detection/PSM/TimesNet.sh
# classification
bash ./scripts/classification/TimesNet.sh
```

4. Develop your own model.

- Add the model file to the folder `./models`. You can follow the `./models/Transformer.py`.
- Include the newly added model in the `Exp_Basic.model_dict` of  `./exp/exp_basic.py`.
- Create the corresponding scripts under the folder `./scripts`.

Note: 

(1) About classification: Since we include all five tasks in a unified code base, the accuracy of each subtask may fluctuate but the average performance can be reproduced (even a bit better). We have provided the reproduced checkpoints [here](https://github.com/thuml/Time-Series-Library/issues/494).

(2) About anomaly detection: Some discussion about the adjustment strategy in anomaly detection can be found [here](https://github.com/thuml/Anomaly-Transformer/issues/14). The key point is that the adjustment strategy corresponds to an event-level metric.

## Citation

If you find this repo useful, please cite our paper.

```
@inproceedings{wu2023timesnet,
  title={TimesNet: Temporal 2D-Variation Modeling for General Time Series Analysis},
  author={Haixu Wu and Tengge Hu and Yong Liu and Hang Zhou and Jianmin Wang and Mingsheng Long},
  booktitle={International Conference on Learning Representations},
  year={2023},
}

@article{wang2024tssurvey,
  title={Deep Time Series Models: A Comprehensive Survey and Benchmark},
  author={Yuxuan Wang and Haixu Wu and Jiaxiang Dong and Yong Liu and Mingsheng Long and Jianmin Wang},
  booktitle={arXiv preprint arXiv:2407.13278},
  year={2024},
}
```

## Contact
If you have any questions or suggestions, feel free to contact our maintenance team:

Current:
- Haixu Wu (Ph.D. student, wuhx23@mails.tsinghua.edu.cn)
- Yong Liu (Ph.D. student, liuyong21@mails.tsinghua.edu.cn)
- Yuxuan Wang (Ph.D. student, wangyuxu22@mails.tsinghua.edu.cn)
- Huikun Weng (Undergraduate, wenghk22@mails.tsinghua.edu.cn)

Previous:
- Tengge Hu (Master student, htg21@mails.tsinghua.edu.cn)
- Haoran Zhang (Master student, z-hr20@mails.tsinghua.edu.cn)
- Jiawei Guo (Undergraduate, guo-jw21@mails.tsinghua.edu.cn)

Or describe it in Issues.

## Acknowledgement

This project is supported by the National Key R&amp;D Program of China (2021YFB1715200).

This library is constructed based on the following repos:

- Forecasting: https://github.com/thuml/Autoformer.

- Anomaly Detection: https://github.com/thuml/Anomaly-Transformer.

- Classification: https://github.com/thuml/Flowformer.

All the experiment datasets are public, and we obtain them from the following links:

- Long-term Forecasting and Imputation: https://github.com/thuml/Autoformer.

- Short-term Forecasting: https://github.com/ServiceNow/N-BEATS.

- Anomaly Detection: https://github.com/thuml/Anomaly-Transformer.

- Classification: https://www.timeseriesclassification.com/.

## All Thanks To Our Contributors

&lt;a href=&quot;https://github.com/thuml/Time-Series-Library/graphs/contributors&quot;&gt;
  &lt;img src=&quot;https://contrib.rocks/image?repo=thuml/Time-Series-Library&quot; /&gt;
&lt;/a&gt;
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[geekan/MetaGPT]]></title>
            <link>https://github.com/geekan/MetaGPT</link>
            <guid>https://github.com/geekan/MetaGPT</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:09 GMT</pubDate>
            <description><![CDATA[üåü The Multi-Agent Framework: First AI Software Company, Towards Natural Language Programming]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/geekan/MetaGPT">geekan/MetaGPT</a></h1>
            <p>üåü The Multi-Agent Framework: First AI Software Company, Towards Natural Language Programming</p>
            <p>Language: Python</p>
            <p>Stars: 54,734</p>
            <p>Forks: 6,502</p>
            <p>Stars today: 35 stars today</p>
            <h2>README</h2><pre>
# MetaGPT: The Multi-Agent Framework

&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;docs/resources/MetaGPT-new-log.png&quot; alt=&quot;MetaGPT logo: Enable GPT to work in a software company, collaborating to tackle more complex tasks.&quot; width=&quot;150px&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
[ &lt;b&gt;En&lt;/b&gt; |
&lt;a href=&quot;docs/README_CN.md&quot;&gt;‰∏≠&lt;/a&gt; |
&lt;a href=&quot;docs/README_FR.md&quot;&gt;Fr&lt;/a&gt; |
&lt;a href=&quot;docs/README_JA.md&quot;&gt;Êó•&lt;/a&gt; ]
&lt;b&gt;Assign different roles to GPTs to form a collaborative entity for complex tasks.&lt;/b&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg&quot; alt=&quot;License: MIT&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://discord.gg/DYn29wFk9z&quot;&gt;&lt;img src=&quot;https://dcbadge.vercel.app/api/server/DYn29wFk9z?style=flat&quot; alt=&quot;Discord Follow&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/MetaGPT_&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/MetaGPT?style=social&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h4 align=&quot;center&quot;&gt;
    
&lt;/h4&gt;

## News

üöÄ Mar. 10, 2025: üéâ [mgx.dev](https://mgx.dev/) is the #1 Product of the Week on @ProductHunt! üèÜ

üöÄ Mar. &amp;nbsp; 4, 2025: üéâ [mgx.dev](https://mgx.dev/) is the #1 Product of the Day on @ProductHunt! üèÜ

üöÄ Feb. 19, 2025: Today we are officially launching our natural language programming product: [MGX (MetaGPT X)](https://mgx.dev/) - the world&#039;s first AI agent development team. More details on [Twitter](https://x.com/MetaGPT_/status/1892199535130329356).

üöÄ Feb. 17, 2025: We introduced two papers: [SPO](https://arxiv.org/pdf/2502.06855) and [AOT](https://arxiv.org/pdf/2502.12018), check the [code](examples)!

üöÄ Jan. 22, 2025: Our paper [AFlow: Automating Agentic Workflow Generation](https://openreview.net/forum?id=z5uVAKwmjf) accepted for **oral presentation (top 1.8%)** at ICLR 2025, **ranking #2** in the LLM-based Agent category.

üëâüëâ [Earlier news](docs/NEWS.md) 

## Software Company as Multi-Agent System

1. MetaGPT takes a **one line requirement** as input and outputs **user stories / competitive analysis / requirements / data structures / APIs / documents, etc.**
2. Internally, MetaGPT includes **product managers / architects / project managers / engineers.** It provides the entire process of a **software company along with carefully orchestrated SOPs.**
   1. `Code = SOP(Team)` is the core philosophy. We materialize SOP and apply it to teams composed of LLMs.

![A software company consists of LLM-based roles](docs/resources/software_company_cd.jpeg)

&lt;p align=&quot;center&quot;&gt;Software Company Multi-Agent Schematic (Gradually Implementing)&lt;/p&gt;

## Get Started

### Installation

&gt; Ensure that Python 3.9 or later, but less than 3.12, is installed on your system. You can check this by using: `python --version`.  
&gt; You can use conda like this: `conda create -n metagpt python=3.9 &amp;&amp; conda activate metagpt`

```bash
pip install --upgrade metagpt
# or `pip install --upgrade git+https://github.com/geekan/MetaGPT.git`
# or `git clone https://github.com/geekan/MetaGPT &amp;&amp; cd MetaGPT &amp;&amp; pip install --upgrade -e .`
```

**Install [node](https://nodejs.org/en/download) and [pnpm](https://pnpm.io/installation#using-npm) before actual use.**

For detailed installation guidance, please refer to [cli_install](https://docs.deepwisdom.ai/main/en/guide/get_started/installation.html#install-stable-version)
 or [docker_install](https://docs.deepwisdom.ai/main/en/guide/get_started/installation.html#install-with-docker)

### Configuration

You can init the config of MetaGPT by running the following command, or manually create `~/.metagpt/config2.yaml` file:
```bash
# Check https://docs.deepwisdom.ai/main/en/guide/get_started/configuration.html for more details
metagpt --init-config  # it will create ~/.metagpt/config2.yaml, just modify it to your needs
```

You can configure `~/.metagpt/config2.yaml` according to the [example](https://github.com/geekan/MetaGPT/blob/main/config/config2.example.yaml) and [doc](https://docs.deepwisdom.ai/main/en/guide/get_started/configuration.html):

```yaml
llm:
  api_type: &quot;openai&quot;  # or azure / ollama / groq etc. Check LLMType for more options
  model: &quot;gpt-4-turbo&quot;  # or gpt-3.5-turbo
  base_url: &quot;https://api.openai.com/v1&quot;  # or forward url / other llm url
  api_key: &quot;YOUR_API_KEY&quot;
```

### Usage

After installation, you can use MetaGPT at CLI

```bash
metagpt &quot;Create a 2048 game&quot;  # this will create a repo in ./workspace
```

or use it as library

```python
from metagpt.software_company import generate_repo
from metagpt.utils.project_repo import ProjectRepo

repo: ProjectRepo = generate_repo(&quot;Create a 2048 game&quot;)  # or ProjectRepo(&quot;&lt;path&gt;&quot;)
print(repo)  # it will print the repo structure with files
```

You can also use [Data Interpreter](https://github.com/geekan/MetaGPT/tree/main/examples/di) to write code:

```python
import asyncio
from metagpt.roles.di.data_interpreter import DataInterpreter

async def main():
    di = DataInterpreter()
    await di.run(&quot;Run data analysis on sklearn Iris dataset, include a plot&quot;)

asyncio.run(main())  # or await main() in a jupyter notebook setting
```


### QuickStart &amp; Demo Video
- Try it on [MetaGPT Huggingface Space](https://huggingface.co/spaces/deepwisdom/MetaGPT-SoftwareCompany)
- [Matthew Berman: How To Install MetaGPT - Build A Startup With One Prompt!!](https://youtu.be/uT75J_KG_aY)
- [Official Demo Video](https://github.com/geekan/MetaGPT/assets/2707039/5e8c1062-8c35-440f-bb20-2b0320f8d27d)

https://github.com/user-attachments/assets/888cb169-78c3-4a42-9d62-9d90ed3928c9

## Tutorial

- üóí [Online Document](https://docs.deepwisdom.ai/main/en/)
- üíª [Usage](https://docs.deepwisdom.ai/main/en/guide/get_started/quickstart.html)  
- üîé [What can MetaGPT do?](https://docs.deepwisdom.ai/main/en/guide/get_started/introduction.html)
- üõ† How to build your own agents? 
  - [MetaGPT Usage &amp; Development Guide | Agent 101](https://docs.deepwisdom.ai/main/en/guide/tutorials/agent_101.html)
  - [MetaGPT Usage &amp; Development Guide | MultiAgent 101](https://docs.deepwisdom.ai/main/en/guide/tutorials/multi_agent_101.html)
- üßë‚Äçüíª Contribution
  - [Develop Roadmap](docs/ROADMAP.md)
- üîñ Use Cases
  - [Data Interpreter](https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/interpreter/intro.html)
  - [Debate](https://docs.deepwisdom.ai/main/en/guide/use_cases/multi_agent/debate.html)
  - [Researcher](https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/researcher.html)
  - [Receipt Assistant](https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/receipt_assistant.html)
- ‚ùì [FAQs](https://docs.deepwisdom.ai/main/en/guide/faq.html)

## Support

### Discord Join US

üì¢ Join Our [Discord Channel](https://discord.gg/ZRHeExS6xv)! Looking forward to seeing you there! üéâ

### Contributor form

üìù [Fill out the form](https://airtable.com/appInfdG0eJ9J4NNL/pagK3Fh1sGclBvVkV/form) to become a contributor. We are looking forward to your participation!

### Contact Information

If you have any questions or feedback about this project, please feel free to contact us. We highly appreciate your suggestions!

- **Email:** alexanderwu@deepwisdom.ai
- **GitHub Issues:** For more technical inquiries, you can also create a new issue in our [GitHub repository](https://github.com/geekan/metagpt/issues).

We will respond to all questions within 2-3 business days.

## Citation

To stay updated with the latest research and development, follow [@MetaGPT_](https://twitter.com/MetaGPT_) on Twitter. 

To cite [MetaGPT](https://openreview.net/forum?id=VtmBAGCN7o) in publications, please use the following BibTeX entries.   

```bibtex
@inproceedings{hong2024metagpt,
      title={Meta{GPT}: Meta Programming for A Multi-Agent Collaborative Framework},
      author={Sirui Hong and Mingchen Zhuge and Jonathan Chen and Xiawu Zheng and Yuheng Cheng and Jinlin Wang and Ceyao Zhang and Zili Wang and Steven Ka Shing Yau and Zijuan Lin and Liyang Zhou and Chenyu Ran and Lingfeng Xiao and Chenglin Wu and J{\&quot;u}rgen Schmidhuber},
      booktitle={The Twelfth International Conference on Learning Representations},
      year={2024},
      url={https://openreview.net/forum?id=VtmBAGCN7o}
}
```

For more work, please refer to [Academic Work](docs/ACADEMIC_WORK.md).
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[SigmaHQ/sigma]]></title>
            <link>https://github.com/SigmaHQ/sigma</link>
            <guid>https://github.com/SigmaHQ/sigma</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:08 GMT</pubDate>
            <description><![CDATA[Main Sigma Rule Repository]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/SigmaHQ/sigma">SigmaHQ/sigma</a></h1>
            <p>Main Sigma Rule Repository</p>
            <p>Language: Python</p>
            <p>Stars: 9,031</p>
            <p>Forks: 2,314</p>
            <p>Stars today: 91 stars today</p>
            <h2>README</h2><pre># Sigma - Generic Signature Format for SIEM Systems

&lt;a href=&quot;https://sigmahq.io/&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;br /&gt;
&lt;picture&gt;
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./images/sigma_logo_dark.png&quot;&gt;
  &lt;img width=&quot;454&quot; alt=&quot;Sigma Logo&quot; src=&quot;./images/sigma_logo_light.png&quot;&gt;
&lt;/picture&gt;
&lt;/p&gt;
&lt;/a&gt;
&lt;br /&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://github.com/SigmaHQ/sigma/actions?query=branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/SigmaHQ/sigma/actions/workflows/sigma-test.yml/badge.svg?branch=master&quot; alt=&quot;Sigma Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sigmahq.io/&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/SigmaHQ/sigmahq.github.io@master/images/Sigma%20Official%20Badge.svg&quot; alt=&quot;Sigma Official Badge&quot;&gt;&lt;/a&gt; &lt;img alt=&quot;GitHub Repo stars&quot; src=&quot;https://img.shields.io/github/stars/SigmaHQ/sigma&quot;&gt;
&lt;img alt=&quot;GitHub all releases&quot; src=&quot;https://img.shields.io/github/downloads/SigmaHq/Sigma/total&quot;&gt;
&lt;br /&gt;
&lt;a href=&quot;https://opensourcesecurityindex.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
&lt;img style=&quot;width: 170px;&quot; src=&quot;https://opensourcesecurityindex.io/badge.svg&quot; alt=&quot;Open Source Security Index - Fastest Growing Open Source Security Projects&quot; width=&quot;170&quot; /&gt;
&lt;/a&gt;
&lt;/p&gt;

Welcome to the Sigma main rule repository. The place where detection engineers, threat hunters and all defensive security practitioners collaborate on detection rules. The repository offers more than 3000 detection rules of different type and aims to make reliable detections accessible to all at no cost.

Currently the repository offers three types of rules:

* [Generic Detection Rules](./rules/) - Are threat agnostic, their aim is to detect a behavior or an implementation of a technique or procedure that was, can or will be used by a potential threat actor.
* [Threat Hunting Rules](./rules-threat-hunting/) - Are broader in scope and are meant to give the analyst a starting point to hunt for potential suspicious or malicious activity
* [Emerging Threat Rules](./rules-emerging-threats/) - Are rules that cover specific threats, that are timely and relevant for certain periods of time. These threats include specific APT campaigns, exploitation of Zero-Day vulnerabilities, specific malware used during an attack,...etc.

## Explore Sigma

To start exploring the Sigma ecosystem, please visit the official website [sigmahq.io](https://sigmahq.io)

### What is Sigma

Sigma is a generic and open signature format that allows you to describe relevant log events in a straightforward manner. The rule format is very flexible, easy to write and applicable to any type of log file.

The main purpose of this project is to provide a structured form in which researchers or analysts can describe their once developed detection methods and make them shareable with others.

Sigma is for log files what [Snort](https://www.snort.org/) is for network traffic and [YARA](https://github.com/VirusTotal/yara) is for files.

&lt;picture&gt;
  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;./images/Sigma_description_dark.png&quot;&gt;
  &lt;img alt=&quot;Sigma Description - A diagram showing Yaml Files (Sigma Rules) moving through a Sigma Convertor, and coming out as many SIEM logos, showing how Sigma rules can be converted to many different available SIEM query languages&quot; src=&quot;./images/Sigma_description_light.png&quot;&gt;
&lt;/picture&gt;

### Why Sigma

Today, everyone collects log data for analysis. People start working on their own, processing numerous white papers, blog posts and log analysis guidelines, extracting the necessary information and build their own searches and dashboard. Some of their searches and correlations are great and very useful but they lack a standardized format in which they can share their work with others.

Others provide excellent analyses, include IOCs and YARA rules to detect the malicious files and network connections, but have no way to describe a specific or generic detection method in log events. Sigma is meant to be an open standard in which such detection mechanisms can be defined, shared and collected in order to improve the detection capabilities for everyone.

### üåü Key Features

* A continuously growing list of detection and hunting rules, peer reviewed by a community of professional Detection Engineers.
* Vendor agnostic detection rules.
* Easily shareable across communities and reports

## üèóÔ∏è Rule Creation

To start writing Sigma rules please check the following guides:

* [Rule Creation Guide](https://github.com/SigmaHQ/sigma/wiki/Rule-Creation-Guide)
* [How to Write Sigma Rules - Nextron Systems](https://www.nextron-systems.com/2018/02/10/write-sigma-rules/)

## üîé Contributing &amp; Making PRs

Please refer to the [CONTRIBUTING](./CONTRIBUTING.md) guide for detailed instructions on how you can start contributing new rules.

## üì¶ Rule Packages

You can download the latest rule packages from the [release page](https://github.com/SigmaHQ/sigma/releases/latest) and start leveraging Sigma rules today.

## üß¨ Rule Usage and Conversion

* You can start converting Sigma rules today using [Sigma CLI](https://github.com/SigmaHQ/sigma-cli) or [sigconverter.io](https://sigconverter.io) the GUI interface

* To integrate Sigma rules in your own toolchain or products use [pySigma](https://github.com/SigmaHQ/pySigma).

## üö® Reporting False Positives or New Rule Ideas

If you find a false positive or would like to propose a new detection rule idea but do not have the time to create one, please create a new issue on the [GitHub repository](https://github.com/SigmaHQ/sigma/issues/new/choose) by selecting one of the available templates.

## üìö Resources &amp; Further Reading

* [Hack.lu 2017 Sigma - Generic Signatures for Log Events by Thomas Patzke](https://www.youtube.com/watch?v=OheVuE9Ifhs)
* [MITRE ATT&amp;CK¬Æ and Sigma Alerting SANS Webcast Recording](https://www.sans.org/webcasts/mitre-att-ck-sigma-alerting-110010 &quot;MITRE ATT&amp;CK¬Æ and Sigma Alerting&quot;)
* [Sigma - Generic Signatures for SIEM Systems by Florian Roth](https://www.slideshare.net/secret/gvgxeXoKblXRcA)

## Projects or Products that use or integrate Sigma rules

* [alterix](https://github.com/mtnmunuklu/alterix) - Converts Sigma rules to the query language of CRYPTTECH&#039;s SIEM
* [AttackIQ](https://www.attackiq.com/2024/01/10/sigmaiq-attackiqs-latest-innovation-for-actionable-detections/) - Sigma Rules integrated in AttackIQ&#039;s platform, and [SigmAIQ](https://github.com/AttackIQ/SigmAIQ) for Sigma rule conversion and LLM apps
* [Atomic Threat Coverage](https://github.com/atc-project/atomic-threat-coverage) (Since December 2018)
* [AttackRuleMap - Mapping of Atomic Red Team tests and Sigma Rules](https://attackrulemap.com/)
* [Confluent Sigma](https://github.com/confluentinc/confluent-sigma) - Kafka Streams supported Sigma rules
* [IBM QRadar](https://community.ibm.com/community/user/security/blogs/gladys-koskas1/2023/08/02/qradar-natively-supports-sigma-for-rules-creation)
* [Impede Detection Platform](https://impede.ai/)
* [Joe Sandbox](https://www.joesecurity.org/blog/8225577975210857708)
* [LimaCharlie](https://limacharlie.io/)
* [MISP](http://www.misp-project.org/2017/03/26/MISP.2.4.70.released.html) (Since Version 2.4.70, March 2017)
* [Nextron&#039;s Aurora Agent](https://www.nextron-systems.com/aurora/)
* [Nextron&#039;s THOR Scanner](https://www.nextron-systems.com/thor/) - Scan with Sigma rules on endpoints
* [RANK VASA](https://globenewswire.com/news-release/2019/03/04/1745907/0/en/RANK-Software-to-Help-MSSPs-Scale-Cybersecurity-Offerings.html)
* [Security Onion](https://docs.securityonion.net/en/latest/sigma.html)
* [Sekoia.io XDR](https://www.sekoia.io) - XDR supporting Sigma and Sigma Correlation rules languages
* [sigma2stix](https://github.com/muchdogesec/sigma2stix) - Converts the entire SigmaHQ Ruleset into STIX 2.1 Objects.
  * A versioned archive of sigma2stix STIX 2.1 data is also available to [download here](https://github.com/muchdogesec/cti_knowledge_base_store/tree/main/sigma-rules).
* [SIŒ£GMA](https://github.com/3CORESec/SIEGMA) - SIEM consumable generator that utilizes Sigma for query conversion
* [SOC Prime](https://tdm.socprime.com/sigma/)
* [TA-Sigma-Searches](https://github.com/dstaulcu/TA-Sigma-Searches) (Splunk App)
* [TimeSketch](https://github.com/google/timesketch/commit/0c6c4b65a6c0f2051d074e87bbb2da2424fa6c35)
* [ypsilon](https://github.com/P4T12ICK/ypsilon) - Automated Use Case Testing

## üìú Maintainers

* [Nasreddine Bencherchali (@nas_bench)](https://twitter.com/nas_bench)
* [Florian Roth (@cyb3rops)](https://twitter.com/cyb3rops)
* [Christian Burkard (@phantinuss)](https://twitter.com/phantinuss)
* [Fran√ßois Hubaut (@frack113)](https://twitter.com/frack113)
* [Thomas Patzke (@blubbfiction)](https://twitter.com/blubbfiction)

## Credits

This project would&#039;ve never reached this height without the help of the hundreds of contributors. Thanks to all past and present contributors for their help.

## Licenses

The content of this repository is released under the [Detection Rule License (DRL) 1.1](https://github.com/SigmaHQ/Detection-Rule-License).
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[hiroi-sora/Umi-OCR]]></title>
            <link>https://github.com/hiroi-sora/Umi-OCR</link>
            <guid>https://github.com/hiroi-sora/Umi-OCR</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:07 GMT</pubDate>
            <description><![CDATA[OCR software, free and offline. ÂºÄÊ∫ê„ÄÅÂÖçË¥πÁöÑÁ¶ªÁ∫øOCRËΩØ‰ª∂„ÄÇÊîØÊåÅÊà™Â±è/ÊâπÈáèÂØºÂÖ•ÂõæÁâáÔºåPDFÊñáÊ°£ËØÜÂà´ÔºåÊéíÈô§Ê∞¥Âç∞/È°µÁúâÈ°µËÑöÔºåÊâ´Êèè/ÁîüÊàê‰∫åÁª¥Á†Å„ÄÇÂÜÖÁΩÆÂ§öÂõΩËØ≠Ë®ÄÂ∫ì„ÄÇ]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/hiroi-sora/Umi-OCR">hiroi-sora/Umi-OCR</a></h1>
            <p>OCR software, free and offline. ÂºÄÊ∫ê„ÄÅÂÖçË¥πÁöÑÁ¶ªÁ∫øOCRËΩØ‰ª∂„ÄÇÊîØÊåÅÊà™Â±è/ÊâπÈáèÂØºÂÖ•ÂõæÁâáÔºåPDFÊñáÊ°£ËØÜÂà´ÔºåÊéíÈô§Ê∞¥Âç∞/È°µÁúâÈ°µËÑöÔºåÊâ´Êèè/ÁîüÊàê‰∫åÁª¥Á†Å„ÄÇÂÜÖÁΩÆÂ§öÂõΩËØ≠Ë®ÄÂ∫ì„ÄÇ</p>
            <p>Language: Python</p>
            <p>Stars: 32,267</p>
            <p>Forks: 3,258</p>
            <p>Stars today: 64 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;left&quot;&gt;
    &lt;span&gt;
        &lt;b&gt;‰∏≠Êñá&lt;/b&gt;
    &lt;/span&gt;
    &lt;span&gt; ‚Ä¢ &lt;/span&gt;
    &lt;a href=&quot;README_en.md&quot;&gt;
        English
    &lt;/a&gt;
    &lt;span&gt; ‚Ä¢ &lt;/span&gt;
    &lt;a href=&quot;README_ja.md&quot;&gt;
        Êó•Êú¨Ë™û
    &lt;/a&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/hiroi-sora/Umi-OCR&quot;&gt;
    &lt;img width=&quot;200&quot; height=&quot;128&quot; src=&quot;https://tupian.li/images/2022/10/27/icon---256.png&quot; alt=&quot;Umi-OCR&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1 align=&quot;center&quot;&gt;Umi-OCR ÊñáÂ≠óËØÜÂà´Â∑•ÂÖ∑&lt;/h1&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/hiroi-sora/Umi-OCR/releases/latest&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/v/release/hiroi-sora/Umi-OCR?style=flat-square&quot; alt=&quot;Umi-OCR&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/hiroi-sora/Umi-OCR/blob/main/LICENSE&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/license/hiroi-sora/Umi-OCR?style=flat-square&quot; alt=&quot;LICENSE&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;#‰∏ãËΩΩÂèëË°åÁâà&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/downloads/hiroi-sora/Umi-OCR/total?style=flat-square&quot; alt=&quot;forks&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://star-history.com/#hiroi-sora/Umi-OCR&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/stars/hiroi-sora/Umi-OCR?style=flat-square&quot; alt=&quot;stars&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/hiroi-sora/Umi-OCR/forks&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/forks/hiroi-sora/Umi-OCR?style=flat-square&quot; alt=&quot;forks&quot;&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://hosted.weblate.org/engage/umi-ocr/&quot;&gt;
    &lt;img src=&quot;https://hosted.weblate.org/widget/umi-ocr/svg-badge.svg&quot; alt=&quot;ÁøªËØëÁä∂ÊÄÅ&quot;&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;h3&gt;
    &lt;a href=&quot;#ÁõÆÂΩï&quot;&gt;
      ‰ΩøÁî®ËØ¥Êòé
    &lt;/a&gt;
    &lt;span&gt; ‚Ä¢ &lt;/span&gt;
    &lt;a href=&quot;#‰∏ãËΩΩÂèëË°åÁâà&quot;&gt;
      ‰∏ãËΩΩÂú∞ÂùÄ
    &lt;/a&gt;
    &lt;span&gt; ‚Ä¢ &lt;/span&gt;
    &lt;a href=&quot;CHANGE_LOG.md&quot;&gt;
      Êõ¥Êñ∞Êó•Âøó
    &lt;/a&gt;
    &lt;span&gt; ‚Ä¢ &lt;/span&gt;
    &lt;a href=&quot;https://github.com/hiroi-sora/Umi-OCR/issues&quot;&gt;
      Êèê‰∫§Bug
    &lt;/a&gt;
  &lt;/h3&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;strong&gt;ÂÖçË¥πÔºåÂºÄÊ∫êÔºåÂèØÊâπÈáèÁöÑÁ¶ªÁ∫øOCRËΩØ‰ª∂&lt;/strong&gt;&lt;br&gt;
  &lt;sub&gt;ÈÄÇÁî®‰∫é Windows7 x64 „ÄÅLinux x64
&lt;/div&gt;&lt;br&gt;

- **ÂÖçË¥π**ÔºöÊú¨È°πÁõÆÊâÄÊúâ‰ª£Á†ÅÂºÄÊ∫êÔºåÂÆåÂÖ®ÂÖçË¥π„ÄÇ
- **Êñπ‰æø**ÔºöËß£ÂéãÂç≥Áî®ÔºåÁ¶ªÁ∫øËøêË°åÔºåÊó†ÈúÄÁΩëÁªú„ÄÇ
- **È´òÊïà**ÔºöËá™Â∏¶È´òÊïàÁéáÁöÑÁ¶ªÁ∫øOCRÂºïÊìéÔºåÂÜÖÁΩÆÂ§öÁßçËØ≠Ë®ÄËØÜÂà´Â∫ì„ÄÇ
- **ÁÅµÊ¥ª**ÔºöÊîØÊåÅÂëΩ‰ª§Ë°å„ÄÅHTTPÊé•Âè£Á≠âÂ§ñÈÉ®Ë∞ÉÁî®ÊñπÂºè„ÄÇ
- **ÂäüËÉΩ**ÔºöÊà™ÂõæOCR / ÊâπÈáèOCR / PDFËØÜÂà´ / ‰∫åÁª¥Á†Å / ÂÖ¨ÂºèËØÜÂà´

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/65599097ab5f4.png&quot; alt=&quot;1-Ê†áÈ¢ò-1.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

![1-Ê†áÈ¢ò-2.png](https://tupian.li/images/2023/11/19/6559909fdeeba.png)

## ÁõÆÂΩï

- [Êà™ÂõæËØÜÂà´](#Êà™ÂõæOCR)
  - [ÊéíÁâàËß£Êûê](#ÊñáÊú¨ÂêéÂ§ÑÁêÜ) - ËØÜÂà´‰∏çÂêåÊéíÁâàÔºåÊåâÊ≠£Á°ÆÈ°∫Â∫èËæìÂá∫ÊñáÂ≠ó
- [ÊâπÈáèËØÜÂà´](#ÊâπÈáèOCR)
  - [ÂøΩÁï•Âå∫Âüü](#ÂøΩÁï•Âå∫Âüü) - ÊéíÈô§Êà™ÂõæÊ∞¥Âç∞Â§ÑÁöÑÊñáÂ≠ó
- [‰∫åÁª¥Á†Å](#‰∫åÁª¥Á†Å) ÊîØÊåÅÊâ´Á†ÅÊàñÁîüÊàê‰∫åÁª¥Á†ÅÂõæÁâá
- [ÊñáÊ°£ËØÜÂà´](#ÊñáÊ°£ËØÜÂà´) ‰ªéPDFÊâ´Êèè‰ª∂‰∏≠ÊèêÂèñÊñáÊú¨ÔºåÊàñËΩ¨‰∏∫ÂèåÂ±ÇÂèØÊêúÁ¥¢PDF
- [ÂÖ®Â±ÄËÆæÁΩÆ](#ÂÖ®Â±ÄËÆæÁΩÆ)
- [ÂëΩ‰ª§Ë°åË∞ÉÁî®](docs/README_CLI.md)
- [HTTPÊé•Âè£](docs/http/README.md)
- [ÊûÑÂª∫È°πÁõÆÔºàWindows„ÄÅLinuxÔºâ](#ÊûÑÂª∫È°πÁõÆ)

## ‰ΩøÁî®Ê∫êÁ†Å

ÂºÄÂèëËÄÖËØ∑Âä°ÂøÖÈòÖËØª [ÊûÑÂª∫È°πÁõÆ](#ÊûÑÂª∫È°πÁõÆ) „ÄÇ

## ‰∏ãËΩΩÂèëË°åÁâà

‰ª•‰∏ãÂèëÂ∏ÉÈìæÊé•ÂùáÈïøÊúüÁª¥Êä§ÔºåÊèê‰æõÁ®≥ÂÆöÁâàÊú¨ÁöÑ‰∏ãËΩΩ„ÄÇ

- **ËìùÂ•è‰∫ë** https://hiroi-sora.lanzoul.com/s/umi-ocr ÔºàÂõΩÂÜÖÊé®ËçêÔºåÂÖçÊ≥®ÂÜå/Êó†ÈôêÈÄüÔºâ
- **GitHub** https://github.com/hiroi-sora/Umi-OCR/releases/latest
- **Source Forge** https://sourceforge.net/projects/umi-ocr


&lt;details&gt;
&lt;summary&gt;&lt;b&gt;‚Ä¢&amp;nbsp;&amp;nbsp;Scoop Installer&lt;/b&gt;ÔºàÁÇπÂáªÂ±ïÂºÄÔºâ&lt;/summary&gt;

[Scoop](https://scoop.sh/) ÊòØ‰∏ÄÊ¨æWindows‰∏ãÁöÑÂëΩ‰ª§Ë°åÂÆâË£ÖÁ®ãÂ∫èÔºåÂèØÊñπ‰æøÂú∞ÁÆ°ÁêÜÂ§ö‰∏™Â∫îÁî®„ÄÇÊÇ®ÂèØ‰ª•ÂÖàÂÆâË£Ö Scoop ÔºåÂÜç‰ΩøÁî®‰ª•‰∏ãÊåá‰ª§ÂÆâË£Ö `Umi-OCR` Ôºö

- Ê∑ªÂä† `extras` Ê°∂Ôºö
```
scoop bucket add extras
```

- ÔºàÂèØÈÄâ1ÔºâÂÆâË£Ö Umi-OCRÔºàËá™Â∏¶ `Rapid-OCR` ÂºïÊìéÔºåÂÖºÂÆπÊÄßÂ•ΩÔºâÔºö
```
scoop install extras/umi-ocr
```

- ÔºàÂèØÈÄâ2ÔºâÂÆâË£Ö Umi-OCRÔºàËá™Â∏¶ `Paddle-OCR` ÂºïÊìéÔºåÈÄüÂ∫¶Á®çÂø´ÔºâÔºö
```
scoop install extras/umi-ocr-paddle
```

- ‰∏çË¶ÅÂêåÊó∂ÂÆâË£Ö‰∫åËÄÖÔºåÂø´Êç∑ÊñπÂºèÂèØËÉΩ‰ºöË¢´Ë¶ÜÁõñ„ÄÇ‰ΩÜÊÇ®ÂèØ‰ª•È¢ùÂ§ñÂØºÂÖ• [Êèí‰ª∂](https://github.com/hiroi-sora/Umi-OCR_plugins) ÔºåÈöèÊó∂ÂàáÊç¢‰∏çÂêåOCRÂºïÊìé„ÄÇ

&lt;/details&gt;
&lt;/br&gt;

## ÂºÄÂßã‰ΩøÁî®

ËΩØ‰ª∂ÂèëÂ∏ÉÂåÖ‰∏ãËΩΩ‰∏∫ `.7z` ÂéãÁº©ÂåÖÊàñ `.7z.exe` Ëá™Ëß£ÂéãÂåÖ„ÄÇËá™Ëß£ÂéãÂåÖÂèØÂú®Ê≤°ÊúâÂÆâË£ÖÂéãÁº©ËΩØ‰ª∂ÁöÑÁîµËÑë‰∏äÔºåËß£ÂéãÊñá‰ª∂„ÄÇ

Êú¨ËΩØ‰ª∂Êó†ÈúÄÂÆâË£Ö„ÄÇËß£ÂéãÂêéÔºåÁÇπÂáª `Umi-OCR.exe` Âç≥ÂèØÂêØÂä®Á®ãÂ∫è„ÄÇ

ÈÅáÂà∞‰ªª‰ΩïÈóÆÈ¢òÔºåËØ∑Êèê [Issue](https://github.com/hiroi-sora/Umi-OCR/issues) ÔºåÊàë‰ºöÂ∞ΩÂèØËÉΩÂ∏ÆÂä©‰Ω†„ÄÇ

## ÁïåÈù¢ËØ≠Ë®Ä

Umi-OCR ÊîØÊåÅÁöÑÁïåÈù¢Â§öÂõΩËØ≠Ë®Ä„ÄÇÂú®Á¨¨‰∏ÄÊ¨°ÊâìÂºÄËΩØ‰ª∂Êó∂ÔºåÂ∞Ü‰ºöÊåâÁÖß‰Ω†ÁöÑÁîµËÑëÁöÑÁ≥ªÁªüËÆæÁΩÆÔºåËá™Âä®ÂàáÊç¢ËØ≠Ë®Ä„ÄÇ

Â¶ÇÊûúÈúÄË¶ÅÊâãÂä®ÂàáÊç¢ËØ≠Ë®ÄÔºåËØ∑ÂèÇËÄÉ‰∏ãÂõæÔºå`ÂÖ®Â±ÄËÆæÁΩÆ`‚Üí`ËØ≠Ë®Ä/Language` „ÄÇ

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/65599c3f9e600.png&quot; alt=&quot;1-Ê†áÈ¢ò-1.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

## Ê†áÁ≠æÈ°µ

Umi-OCR v2 Áî±‰∏ÄÁ≥ªÂàóÁÅµÊ¥ªÂ•ΩÁî®ÁöÑ**Ê†áÁ≠æÈ°µ**ÁªÑÊàê„ÄÇÊÇ®ÂèØÊåâÁÖßËá™Â∑±ÁöÑÂñúÂ•ΩÔºåÊâìÂºÄÈúÄË¶ÅÁöÑÊ†áÁ≠æÈ°µ„ÄÇ

Ê†áÁ≠æÊ†èÂ∑¶‰∏äËßíÂèØ‰ª•ÂàáÊç¢**Á™óÂè£ÁΩÆÈ°∂**„ÄÇÂè≥‰∏äËßíËÉΩÂ§ü**ÈîÅÂÆöÊ†áÁ≠æÈ°µ**Ôºå‰ª•Èò≤Ê≠¢Êó•Â∏∏‰ΩøÁî®‰∏≠ËØØËß¶ÂÖ≥Èó≠Ê†áÁ≠æÈ°µ„ÄÇ

### Êà™ÂõæOCR

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/65599097aba8e.png&quot; alt=&quot;2-Êà™Âõæ-1.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

**Êà™ÂõæOCR**ÔºöÊâìÂºÄËøô‰∏ÄÈ°µÂêéÔºåÂ∞±ÂèØ‰ª•Áî®Âø´Êç∑ÈîÆÂî§Ëµ∑Êà™ÂõæÔºåËØÜÂà´Âõæ‰∏≠ÁöÑÊñáÂ≠ó„ÄÇ
- Â∑¶‰æßÁöÑÂõæÁâáÈ¢ÑËßàÊ†èÔºåÂèØÁõ¥Êé•Áî®Èº†Ê†áÂàíÈÄâÂ§çÂà∂„ÄÇ
- Âè≥‰æßÁöÑËØÜÂà´ËÆ∞ÂΩïÊ†èÔºåÂèØ‰ª•ÁºñËæëÊñáÂ≠óÔºåÂÖÅËÆ∏ÂàíÈÄâÂ§ö‰∏™ËÆ∞ÂΩïÂ§çÂà∂„ÄÇ
- ‰πüÊîØÊåÅÂú®Âà´Â§ÑÂ§çÂà∂ÂõæÁâáÔºåÁ≤òË¥¥Âà∞Umi-OCRËøõË°åËØÜÂà´„ÄÇ
- ÂÖ≥‰∫é [ÂÖ¨ÂºèËØÜÂà´](https://github.com/hiroi-sora/Umi-OCR/issues/254) ÂäüËÉΩ

#### ÊñáÊú¨ÂêéÂ§ÑÁêÜ

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/6559909f3e378.png&quot; alt=&quot;2-Êà™Âõæ-2.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

ÂÖ≥‰∫é **OCRÊñáÊú¨ÂêéÂ§ÑÁêÜ - ÊéíÁâàËß£ÊûêÊñπÊ°à**Ôºö ÂèØ‰ª•Êï¥ÁêÜOCRÁªìÊûúÁöÑÊéíÁâàÂíåÈ°∫Â∫èÔºå‰ΩøÊñáÊú¨Êõ¥ÈÄÇÂêàÈòÖËØªÂíå‰ΩøÁî®„ÄÇÈ¢ÑËÆæÊñπÊ°àÔºö
- `Â§öÊ†è-ÊåâËá™ÁÑ∂ÊÆµÊç¢Ë°å`ÔºöÈÄÇÂêàÂ§ßÈÉ®ÂàÜÊÉÖÊôØÔºåËá™Âä®ËØÜÂà´Â§öÊ†èÂ∏ÉÂ±ÄÔºåÊåâËá™ÁÑ∂ÊÆµËßÑÂàôËøõË°åÊç¢Ë°å„ÄÇ
- `Â§öÊ†è-ÊÄªÊòØÊç¢Ë°å`ÔºöÊØèÊÆµËØ≠Âè•ÈÉΩËøõË°åÊç¢Ë°å„ÄÇ
- `Â§öÊ†è-Êó†Êç¢Ë°å`ÔºöÂº∫Âà∂Â∞ÜÊâÄÊúâËØ≠Âè•ÂêàÂπ∂Âà∞Âêå‰∏ÄË°å„ÄÇ
- `ÂçïÊ†è-ÊåâËá™ÁÑ∂ÊÆµÊç¢Ë°å`/`ÊÄªÊòØÊç¢Ë°å`/`Êó†Êç¢Ë°å`Ôºö‰∏é‰∏äËø∞Á±ª‰ººÔºå‰∏çËøá ‰∏çÂå∫ÂàÜÂ§öÊ†èÂ∏ÉÂ±Ä„ÄÇ
- `ÂçïÊ†è-‰øùÁïôÁº©Ëøõ`ÔºöÈÄÇÁî®‰∫éËß£Êûê‰ª£Á†ÅÊà™ÂõæÔºå‰øùÁïôË°åÈ¶ñÁº©ËøõÂíåË°å‰∏≠Á©∫Ê†º„ÄÇ
- `‰∏çÂÅöÂ§ÑÁêÜ`ÔºöOCRÂºïÊìéÁöÑÂéüÂßãËæìÂá∫ÔºåÈªòËÆ§ÊØèÊÆµËØ≠Âè•ÈÉΩËøõË°åÊç¢Ë°å„ÄÇ

‰∏äËø∞ÊñπÊ°àÔºåÂùáËÉΩËá™Âä®Â§ÑÁêÜÊ®™ÊéíÂíåÁ´ñÊéíÔºà‰ªéÂè≥Âà∞Â∑¶ÔºâÁöÑÊéíÁâà„ÄÇÔºàÁ´ñÊéíÊñáÂ≠óËøòÈúÄË¶ÅOCRÂºïÊìéÊú¨Ë∫´ÊîØÊåÅÔºâ

---

### ÊâπÈáèOCR

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/655990a2511e0.png&quot; alt=&quot;3-ÊâπÈáè-1.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

**ÊâπÈáèOCR**ÔºöËøô‰∏ÄÈ°µÁî®‰∫éÊâπÈáèÂØºÂÖ•Êú¨Âú∞ÂõæÁâáËøõË°åËØÜÂà´„ÄÇ
- ÊîØÊåÅÊ†ºÂºèÔºö`jpg, jpe, jpeg, jfif, png, webp, bmp, tif, tiff`„ÄÇ
- ‰øùÂ≠òËØÜÂà´ÁªìÊûúÁöÑÊîØÊåÅÊ†ºÂºèÔºö`txt, jsonl, md, csv(Excel)`„ÄÇ
- ‰∏éÊà™ÂõæOCR‰∏ÄÊ†∑ÔºåÊîØÊåÅ`ÊñáÊú¨ÂêéÂ§ÑÁêÜ`ÂäüËÉΩÔºåÊï¥ÁêÜOCRÊñáÊú¨ÁöÑÊéíÁâàÂíåÈ°∫Â∫è„ÄÇ
- Ê≤°ÊúâÊï∞Èáè‰∏äÈôêÔºåÂèØ‰∏ÄÊ¨°ÊÄßÂØºÂÖ•Âá†ÁôæÂº†ÂõæÁâáËøõË°å‰ªªÂä°„ÄÇ
- ÊîØÊåÅ‰ªªÂä°ÂÆåÊàêÂêéËá™Âä®ÂÖ≥Êú∫/ÂæÖÊú∫„ÄÇ
- Â¶ÇÊûúË¶ÅËØÜÂà´ÂÉèÁ¥†Ë∂ÖÂ§ßÁöÑÈïøÂõæÊàñÂ§ßÂõæÔºåËØ∑Ë∞ÉÊï¥Ôºö**È°µÈù¢ÁöÑËÆæÁΩÆ‚ÜíÊñáÂ≠óËØÜÂà´‚ÜíÈôêÂà∂ÂõæÂÉèËæπÈïø‚Üí„ÄêË∞ÉÈ´òÊï∞ÂÄº„Äë**„ÄÇ
- Êã•ÊúâÁâπÊÆäÂäüËÉΩ `ÂøΩÁï•Âå∫Âüü` „ÄÇ

#### ÂøΩÁï•Âå∫Âüü

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/6559911d28be7.png&quot; alt=&quot;3-ÊâπÈáè-2.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

ÂÖ≥‰∫é **OCRÊñáÊú¨ÂêéÂ§ÑÁêÜ - ÂøΩÁï•Âå∫Âüü**Ôºö ÊâπÈáèOCR‰∏≠ÁöÑ‰∏ÄÁßçÁâπÊÆäÂäüËÉΩÔºåÈÄÇÁî®‰∫éÊéíÈô§ÂõæÁâá‰∏≠ÁöÑ‰∏çÊÉ≥Ë¶ÅÁöÑÊñáÂ≠ó„ÄÇ
- Âú®ÊâπÈáèËØÜÂà´È°µÁöÑÂè≥Ê†èËÆæÁΩÆ‰∏≠ÂèØËøõÂÖ•ÂøΩÁï•Âå∫ÂüüÁºñËæëÂô®„ÄÇ
- Â¶Ç‰∏äÊñπÊ†∑‰æãÔºåÂõæÁâáÈ°∂ÈÉ®ÂíåÂè≥‰∏ãËßíÂ≠òÂú®Â§ö‰∏™Ê∞¥Âç∞ / LOGO„ÄÇÂ¶ÇÊûúÊâπÈáèËØÜÂà´ËøôÁ±ªÂõæÁâáÔºåÊ∞¥Âç∞‰ºöÂØπËØÜÂà´ÁªìÊûúÈÄ†ÊàêÂπ≤Êâ∞„ÄÇ
- Êåâ‰ΩèÂè≥ÈîÆÔºåÁªòÂà∂Â§ö‰∏™Áü©ÂΩ¢Ê°Ü„ÄÇËøô‰∫õÂå∫ÂüüÂÜÖÁöÑÊñáÂ≠óÂ∞ÜÂú®‰ªªÂä°‰∏≠Ë¢´ÂøΩÁï•„ÄÇ
- ËØ∑Â∞ΩÈáèÂ∞ÜÁü©ÂΩ¢Ê°ÜÁîªÂæóÂ§ß‰∏Ä‰∫õÔºåÂÆåÂÖ®ÂåÖË£π‰ΩèÊ∞¥Âç∞ÊâÄÊúâÂèØËÉΩÂá∫Áé∞ÁöÑ‰ΩçÁΩÆ„ÄÇ
- Ê≥®ÊÑèÔºåÂè™ÊúâÂ§Ñ‰∫éÂøΩÁï•Âå∫ÂüüÊ°ÜÂÜÖÈÉ®ÁöÑÊï¥‰∏™ÊñáÊú¨ÂùóÔºàËÄå‰∏çÊòØÂçï‰∏™Â≠óÁ¨¶Ôºâ‰ºöË¢´ÂøΩÁï•„ÄÇÂ¶Ç‰∏ãÂõæÊâÄÁ§∫ÔºåÈªÑËâ≤ËæπÊ°ÜÁöÑÊ∑±Ëâ≤Áü©ÂΩ¢ÊòØ‰∏Ä‰∏™ÂøΩÁï•Âå∫Âüü„ÄÇÈÇ£‰πàÂè™Êúâ`key_mouse`Êâç‰ºöË¢´ÂøΩÁï•„ÄÇ`pubsub_connector.py`„ÄÅ`pubsub_service.py` Ëøô‰∏§‰∏™ÊñáÊú¨ÂùóÂæó‰ª•‰øùÁïô„ÄÇ
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2024/05/30/66587bf03ae15.png&quot; alt=&quot;ÂøΩÁï•Âå∫ÂüüËåÉÂõ¥Á§∫‰æã.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

---

### ÊñáÊ°£ËØÜÂà´

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/hiroi-sora/Umi-OCR/assets/56373419/fc2266ee-b9b7-4079-8b10-6610e6da6cf5&quot; alt=&quot;&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

**ÊñáÊ°£ËØÜÂà´**Ôºö
- ÊîØÊåÅÊ†ºÂºèÔºö`pdf, xps, epub, mobi, fb2, cbz`„ÄÇ
- ÂØπÊâ´Êèè‰ª∂ËøõË°åOCRÔºåÊàñÊèêÂèñÂéüÊúâÊñáÊú¨„ÄÇÂèØËæìÂá∫‰∏∫ **ÂèåÂ±ÇÂèØÊêúÁ¥¢PDF** „ÄÇ
- ÊîØÊåÅËÆæÂÆö **ÂøΩÁï•Âå∫Âüü** ÔºåÂèØÁî®‰∫éÊéíÈô§È°µÁúâÈ°µËÑöÁöÑÊñáÂ≠ó„ÄÇ
- ÂèØËÆæÁΩÆ‰ªªÂä°ÂÆåÊàêÂêé **Ëá™Âä®ÂÖ≥Êú∫/‰ºëÁú†** „ÄÇ

---

### ‰∫åÁª¥Á†Å

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/655991268d6b1.png&quot; alt=&quot;4-‰∫åÁª¥Á†Å-1.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

**Êâ´Á†Å**Ôºö
- Êà™Âõæ/Á≤òË¥¥/ÊãñÂÖ•Êú¨Âú∞ÂõæÁâáÔºåËØªÂèñÂÖ∂‰∏≠ÁöÑ‰∫åÁª¥Á†Å„ÄÅÊù°ÂΩ¢Á†Å„ÄÇ
- ÊîØÊåÅ‰∏ÄÂõæÂ§öÁ†Å„ÄÇ
- ÊîØÊåÅ19ÁßçÂçèËÆÆÔºåÂ¶Ç‰∏ãÔºö

`Aztec`,`Codabar`,`Code128`,`Code39`,`Code93`,`DataBar`,`DataBarExpanded`,`DataMatrix`,`EAN13`,`EAN8`,`ITF`,`LinearCodes`,`MatrixCodes`,`MaxiCode`,`MicroQRCode`,`PDF417`,`QRCode`,`UPCA`,`UPCE`

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/6559911cda737.png&quot; alt=&quot;4-‰∫åÁª¥Á†Å-2.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

**ÁîüÊàêÁ†Å**Ôºö
- ËæìÂÖ•ÊñáÊú¨ÔºåÁîüÊàê‰∫åÁª¥Á†ÅÂõæÁâá„ÄÇ
- ÊîØÊåÅ19ÁßçÂçèËÆÆÂíå**Á∫†ÈîôÁ≠âÁ∫ß**Á≠âÂèÇÊï∞„ÄÇ

---

### ÂÖ®Â±ÄËÆæÁΩÆ

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://tupian.li/images/2023/11/19/655991252e780.png&quot; alt=&quot;5-ÂÖ®Â±ÄËÆæÁΩÆ-1.png&quot; style=&quot;width: 80%;&quot;&gt;&lt;/p&gt;

**ÂÖ®Â±ÄËÆæÁΩÆ**ÔºöÂú®ËøôÈáåÂèØ‰ª•Ë∞ÉÊï¥ËΩØ‰ª∂ÁöÑÂÖ®Â±ÄÂèÇÊï∞„ÄÇÂ∏∏Áî®ÂäüËÉΩÂ¶Ç‰∏ãÔºö
- ‰∏ÄÈîÆÊ∑ªÂä†Âø´Êç∑ÊñπÂºèÊàñËÆæÁΩÆÂºÄÊú∫Ëá™ÂêØ„ÄÇ
- Êõ¥ÊîπÁïåÈù¢**ËØ≠Ë®Ä**„ÄÇUmiÊîØÊåÅÁπÅ‰∏≠„ÄÅËã±ËØ≠„ÄÅÊó•ËØ≠Á≠âËØ≠Ë®Ä„ÄÇ
- ÂàáÊç¢ÁïåÈù¢**‰∏ªÈ¢ò**„ÄÇUmiÊã•ÊúâÂ§ö‰∏™‰∫Æ/Êöó‰∏ªÈ¢ò„ÄÇ
- Ë∞ÉÊï¥ÁïåÈù¢**ÊñáÂ≠óÁöÑÂ§ßÂ∞è**Âíå**Â≠ó‰Ωì**„ÄÇ
- ÂàáÊç¢OCRÊèí‰ª∂„ÄÇ
- **Ê∏≤ÊüìÂô®**ÔºöËΩØ‰ª∂ÁïåÈù¢ÈªòËÆ§ÊîØÊåÅÊòæÂç°Âä†ÈÄüÊ∏≤Êüì„ÄÇÂ¶ÇÊûúÂú®‰Ω†ÁöÑÊú∫Âô®‰∏äÂá∫Áé∞Êà™Â±èÈó™ÁÉÅ„ÄÅUIÈîô‰ΩçÁöÑÊÉÖÂÜµÔºåËØ∑Ë∞ÉÊï¥`ÁïåÈù¢ÂíåÂ§ñËßÇ` ‚Üí `Ê∏≤ÊüìÂô®` ÔºåÂ∞ùËØïÂàáÊç¢Âà∞‰∏çÂêåÊ∏≤ÊüìÊñπÊ°àÔºåÊàñÂÖ≥Èó≠Á°¨‰ª∂Âä†ÈÄü„ÄÇ

## Ë∞ÉÁî®Êé•Âè£Ôºö

- [ÂëΩ‰ª§Ë°åÊâãÂÜå](docs/README_CLI.md)
- [HTTPÊé•Âè£ÊâãÂÜå](docs/http/README.md)

---

## ÂÖ≥‰∫éÈ°πÁõÆÁªìÊûÑ

### ÂêÑ‰ªìÂ∫ìÔºö

- [‰∏ª‰ªìÂ∫ì](https://github.com/hiroi-sora/Umi-OCR) üëà
- [Êèí‰ª∂Â∫ì](https://github.com/hiroi-sora/Umi-OCR_plugins)
- [Windows ËøêË°åÂ∫ì](https://github.com/hiroi-sora/Umi-OCR_runtime_windows)
- [Linux ËøêË°åÂ∫ì](https://github.com/hiroi-sora/Umi-OCR_runtime_linux)

### Â∑•Á®ãÁªìÊûÑÔºö

`**` ÂêéÁºÄË°®Á§∫Êú¨‰ªìÂ∫ì(`‰∏ª‰ªìÂ∫ì`)ÂåÖÂê´ÁöÑÂÜÖÂÆπ„ÄÇ

```
Umi-OCR
‚îú‚îÄ Umi-OCR.exe
‚îú‚îÄ umi-ocr.sh
‚îî‚îÄ UmiOCR-data
   ‚îú‚îÄ main.py **
   ‚îú‚îÄ version.py **
   ‚îú‚îÄ qt_res **
   ‚îÇ  ‚îî‚îÄ È°πÁõÆqtËµÑÊ∫êÔºåÂåÖÊã¨ÂõæÊ†áÂíåqmlÊ∫êÁ†Å
   ‚îú‚îÄ py_src **
   ‚îÇ  ‚îî‚îÄ È°πÁõÆpythonÊ∫êÁ†Å
   ‚îú‚îÄ plugins
   ‚îÇ  ‚îî‚îÄ Êèí‰ª∂
   ‚îî‚îÄ i18n **
      ‚îî‚îÄ ÁøªËØëÊñá‰ª∂
```

ÊîØÊåÅÁöÑÁ¶ªÁ∫øOCRÂºïÊìéÔºö

- [PaddleOCR-json](https://github.com/hiroi-sora/PaddleOCR-json)
- [RapidOCR-json](https://github.com/hiroi-sora/RapidOCR-json)

ËøêË°åÁéØÂ¢ÉÊ°ÜÊû∂Ôºö

- [PyStand](https://github.com/skywind3000/PyStand) ÂÆöÂà∂Áâà

## ÊûÑÂª∫È°πÁõÆ

ËØ∑Ë∑≥ËΩ¨‰∏ãËø∞‰ªìÂ∫ìÔºåÂÆåÊàêÂØπÂ∫îÂπ≥Âè∞ÁöÑÂºÄÂèë/ËøêË°åÁéØÂ¢ÉÈÉ®ÁΩ≤„ÄÇ

- [Windows](https://github.com/hiroi-sora/Umi-OCR_runtime_windows)
- [Linux](https://github.com/hiroi-sora/Umi-OCR_runtime_linux)

--- 

## ËΩØ‰ª∂Êú¨Âú∞ÂåñÁøªËØëÔºö

Êú¨È°πÁõÆ‰ΩøÁî® Weblate Âπ≥Âè∞ËøõË°åUIÁïåÈù¢ÁöÑÊú¨Âú∞ÂåñÁøªËØëÂçè‰Ωú„ÄÇÊàë‰ª¨Ê¨¢Ëøé‰ªª‰ΩïËØëËÄÖÂèÇ‰∏éÁøªËØëÂ∑•‰ΩúÔºåÊÇ®ÂèØËøõÂÖ•Ê≠§ÈìæÊé• [Weblate: Umi-OCR](https://hosted.weblate.org/engage/umi-ocr/) ÔºåÂú®Á∫øÊ†°ÂØπ„ÄÅË°•ÂÖÖÁé∞ÊúâËØ≠Ë®ÄÔºåÊàñÊ∑ªÂä†Êñ∞ËØ≠Ë®Ä„ÄÇ

ÊÑüË∞¢‰ª•‰∏ãËØëËÄÖÔºå‰∏∫ Umi-OCR Ë¥°ÁåÆ‰∫ÜÊú¨Âú∞ÂåñÁøªËØëÂ∑•‰ΩúÔºö

| ËØëËÄÖ                                                                                 | Ë¥°ÁåÆËØ≠Ë®Ä                  |
| ------------------------------------------------------------------------------------ | ------------------------- |
| [bob](https://hosted.weblate.org/user/q021)                                          | English, ÁπÅÈ´î‰∏≠Êñá, Êó•Êú¨Ë™û |
| [Qingzheng Gao](https://github.com/QZGao)                                            | English, ÁπÅÈ´î‰∏≠Êñá         |
| [Weng, Chia-Ling](https://hosted.weblate.org/user/ChiaLingWeng)                      | English, ÁπÅÈ´î‰∏≠Êñá         |
| [linzow](https://hosted.weblate.org/user/linzow)                                     | English, ÁπÅÈ´î‰∏≠Êñá         |
| [Marcos i](https://hosted.weblate.org/user/ultramarkorj9)                            | English, Portugu√™s        |
| [Eric Guo](https://hosted.weblate.org/user/qwedc001)                                 | English                   |
| [steven0081](https://hosted.weblate.org/user/steven0081)                             | English                   |
| [Brandon Cagle](https://hosted.weblate.org/user/random4t4x14)                        | English                   |
| [plum7x](https://hosted.weblate.org/user/plum7x)                                     | ÁπÅÈ´î‰∏≠Êñá                  |
| [hugoalh](https://hosted.weblate.org/user/hugoalh)                                   | ÁπÅÈ´î‰∏≠Êñá                  |
| [Anarkiisto](https://hosted.weblate.org/user/Anarkiisto)                             | ÁπÅÈ´î‰∏≠Êñá                  |
| [„Éâ„Ç≥„É¢ÂÖâ](https://hosted.weblate.org/user/umren190402)                              | Êó•Êú¨Ë™û                    |
| [Êù®Èπè](https://hosted.weblate.org/user/ypf)                                          | Portugu√™s                 |
| [–í—è—á–µ—Å–ª–∞–≤ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á –ú–∞–ª—ã—à–µ–≤](https://hosted.weblate.org/user/1969)                 | –†—É—Å—Å–∫–∏–π                   |
| [Muhammadyusuf Kurbonov](https://hosted.weblate.org/user/muhammadyusuf.kurbonov2002) | –†—É—Å—Å–∫–∏–π                   |
| [‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç](https://hosted.weblate.org/user/TamilNeram/)                                | ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç                       |

Â¶ÇÊûúÊúâ‰ø°ÊÅØÈîôËØØÊàñ‰∫∫ÂëòÁº∫ÊºèÔºåËØ∑Âú® [Ëøô‰∏™ËÆ®ËÆ∫](https://github.com/hiroi-sora/Umi-OCR/discussions/449) ‰∏≠ÂõûÂ§ç„ÄÇ

---

## ËµûÂä©

Umi-OCR È°πÁõÆ‰∏ªË¶ÅÁî±‰ΩúËÄÖ [hiroi-sora](https://github.com/hiroi-sora) Áî®‰∏ö‰ΩôÊó∂Èó¥Âú®ÂºÄÂèëÂíåÁª¥Êä§„ÄÇÂ¶ÇÊûúÊÇ®ÂñúÊ¨¢ËøôÊ¨æËΩØ‰ª∂ÔºåÊ¨¢ËøéËµûÂä©„ÄÇ

- ÂõΩÂÜÖÁî®Êà∑ÂèØÈÄöËøá [Áà±ÂèëÁîµ](https://afdian.com/a/hiroi-sora) ËµûÂä©‰ΩúËÄÖ„ÄÇ

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=hiroi-sora/Umi-OCR&amp;type=Date)](https://star-history.com/#hiroi-sora/Umi-OCR&amp;Date)

## [Êõ¥Êñ∞Êó•Âøó](CHANGE_LOG.md)

## ÂºÄÂèëËÆ°Âàí

&lt;details&gt;
&lt;summary&gt;Â∑≤ÂÆåÊàêÁöÑÂ∑•‰Ωú&lt;/summary&gt;

- Ê†áÁ≠æÈ°µÊ°ÜÊû∂„ÄÇ
- OCR APIÊéßÂà∂Âô®„ÄÇ
- OCR ‰ªªÂä°ÊéßÂà∂Âô®„ÄÇ
- ‰∏ªÈ¢òÁÆ°ÁêÜÂô®ÔºåÊîØÊåÅÂàáÊç¢ÊµÖËâ≤/Ê∑±Ëâ≤‰∏ªÈ¢ò‰∏ªÈ¢ò„ÄÇ
- ÂÆûÁé∞ **ÊâπÈáèOCR**„ÄÇ
- ÂÆûÁé∞ **Êà™ÂõæOCR**„ÄÇ
- Âø´Êç∑ÈîÆÊú∫Âà∂„ÄÇ
- Á≥ªÁªüÊâòÁõòËèúÂçï„ÄÇ
- ÊñáÊú¨ÂùóÂêéÂ§ÑÁêÜÔºàÊéíÁâà‰ºòÂåñÔºâ„ÄÇ
- ÂºïÊìéÂÜÖÂ≠òÊ∏ÖÁêÜ„ÄÇ
- ËΩØ‰ª∂ÁïåÈù¢Â§öÂõΩËØ≠Ë®Ä„ÄÇ
- ÂëΩ‰ª§Ë°åÊ®°Âºè„ÄÇ
- Win7ÂÖºÂÆπ„ÄÇ
- ExcelÔºàcsvÔºâËæìÂá∫Ê†ºÂºè„ÄÇ
- `Esc`‰∏≠Êñ≠Êà™ÂõæÊìç‰Ωú
- Â§ñÁΩÆ‰∏ªÈ¢òÊñá‰ª∂
- Â≠ó‰ΩìÂàáÊç¢
- Âä†ËΩΩÂä®Áîª
- ÂøΩÁï•Âå∫Âüü„ÄÇ
- ‰∫åÁª¥Á†ÅËØÜÂà´„ÄÇ
- ÊâπÈáèËØÜÂà´È°µÈù¢ÁöÑÂõæÁâáÈ¢ÑËßàÁ™óÂè£„ÄÇ
- PDFËØÜÂà´„ÄÇ
- Ë∞ÉÁî®Êú¨Âú∞ÂõæÁâáÊµèËßàÂô®ÊâìÂºÄÂõæÁâá„ÄÇ [#335](https://github.com/hiroi-sora/Umi-OCR/issues/335)
- ÈáçÂ§ç‰∏ä‰∏ÄÊ¨°Êà™Âõæ„ÄÇ [#357](https://github.com/hiroi-sora/Umi-OCR/issues/357)
- ‰øÆBugÔºöÊñáÊ°£ËØÜÂà´Âú®Windows7Á≥ªÁªüÁöÑÂÖºÂÆπÊÄßÈóÆÈ¢ò„ÄÇ
- HTTP/ÂëΩ‰ª§Ë°åÊé•Âè£Ê∑ªÂä†‰∫åÁª¥Á†ÅËØÜÂà´/ÁîüÊàêÂäüËÉΩ„ÄÇ (#423)
- ‰∫åÁª¥Á†ÅÊé•Âè£ÁöÑÊñáÊ°£„ÄÇ
- Linux Âπ≥Âè∞ÁßªÊ§ç„ÄÇ
- HTTP ÊñáÊ°£ËØÜÂà´Êé•Âè£„ÄÇ

&lt;/details&gt;

&lt;!-- ##### Ê≠£Âú®ËøõË°åÁöÑÂ∑•‰Ωú --&gt;

##### ËøúÊúüËÆ°Âàí

&lt;details&gt;
&lt;summary&gt;Â±ïÂºÄ&lt;/summary&gt;

Ëøô‰∫õÊòØÈ¢ÑÊÉ≥‰∏≠ÁöÑÂäüËÉΩÔºåÂú®ÂºÄÂèëÂàùÊúüÂ∑≤È¢ÑÁïôÂ•ΩÊé•Âè£ÔºåÂ∞ÜÂú®ËøúÊúüÊÖ¢ÊÖ¢ÂÆûÁé∞„ÄÇ

‰ΩÜÂºÄÂèëÈÄî‰∏≠ÂèóÈôê‰∫éÂÆûÈôÖÊÉÖÂÜµÔºåÂèØËÉΩÊõ¥ÊîπÂäüËÉΩËÆæËÆ°„ÄÅÊñ∞Â¢ûÂèäÂèñÊ∂àÂäüËÉΩ„ÄÇ

- [ ] ÈáçÊûÑÂ∫ïÂ±ÇÊèí‰ª∂Êú∫Âà∂„ÄÇ
- [ ] Âú®Á∫ø OCR API Êèí‰ª∂„ÄÇ
- [ ] Áã¨Á´ãÁöÑÊï∞Â≠¶ÂÖ¨ÂºèËØÜÂà´Êèí‰ª∂„ÄÇ
- [ ] ‚ÄúÊï∞Â≠¶ÂÖ¨Âºè‚ÄùÊ†áÁ≠æÈ°µÔºåÊèê‰æõÁã¨Á´ãÁöÑÊï∞Â≠¶ÂÖ¨ÂºèËØÜÂà´/LatexÊ∏≤Êüì„ÄÇ
- [ ] Ê£ÄÊü•Êõ¥Êñ∞Êú∫Âà∂„ÄÇ
- [ ] ÊéíÁâàËß£Êûê‰πãÂ§ñÁöÑÊñáÊú¨ÂêéÂ§ÑÁêÜÊ®°ÂùóÔºàÂ¶Ç‰øùÁïôÊï∞Â≠ó„ÄÅÂçäÂÖ®ËßíÂ≠óÁ¨¶ËΩ¨Êç¢„ÄÅÊñáÊú¨Á∫†ÈîôÔºâ„ÄÇ
- [ ] ÂÖ≥ÈîÆÊé•Âè£ÂáΩÊï∞Ê∑ªÂä†‰∫ã‰ª∂Ëß¶ÂèëÊñπÂºè„ÄÇ

- Âü∫‰∫éGPUÁöÑÁ¶ªÁ∫øOCR„ÄÇ
- ÂõæÁâáÁøªËØë
- Á¶ªÁ∫øÁøªËØë„ÄÇ
- Âõ∫ÂÆöÂå∫ÂüüËØÜÂà´„ÄÇ
- ËØÜÂà´Ë°®Ê†ºÂõæÁâáÔºåËæìÂá∫‰∏∫Excel„ÄÇ
- ÂéÜÂè≤ËÆ∞ÂΩïÁ≥ªÁªü„ÄÇ
- ÂÖºÂÆπ MacOS / Ubuntu Á≠âÂπ≥Âè∞„ÄÇ

&lt;/details&gt;
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
        <item>
            <title><![CDATA[zhayujie/chatgpt-on-wechat]]></title>
            <link>https://github.com/zhayujie/chatgpt-on-wechat</link>
            <guid>https://github.com/zhayujie/chatgpt-on-wechat</guid>
            <pubDate>Sat, 19 Apr 2025 00:04:06 GMT</pubDate>
            <description><![CDATA[Âü∫‰∫éÂ§ßÊ®°ÂûãÊê≠Âª∫ÁöÑËÅäÂ§©Êú∫Âô®‰∫∫ÔºåÂêåÊó∂ÊîØÊåÅ ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°Â∫îÁî®„ÄÅÈ£û‰π¶„ÄÅÈíâÈíâ Á≠âÊé•ÂÖ•ÔºåÂèØÈÄâÊã©GPT4.1/GPT-4o/GPT-o1/ DeepSeek/Claude/ÊñáÂøÉ‰∏ÄË®Ä/ËÆØÈ£ûÊòüÁÅ´/ÈÄö‰πâÂçÉÈóÆ/ Gemini/GLM-4/Kimi/LinkAIÔºåËÉΩÂ§ÑÁêÜÊñáÊú¨„ÄÅËØ≠Èü≥ÂíåÂõæÁâáÔºåËÆøÈóÆÊìç‰ΩúÁ≥ªÁªüÂíå‰∫íËÅîÁΩëÔºåÊîØÊåÅÂü∫‰∫éËá™ÊúâÁü•ËØÜÂ∫ìËøõË°åÂÆöÂà∂‰ºÅ‰∏öÊô∫ËÉΩÂÆ¢Êúç„ÄÇ]]></description>
            <content:encoded><![CDATA[
            <h1><a href="https://github.com/zhayujie/chatgpt-on-wechat">zhayujie/chatgpt-on-wechat</a></h1>
            <p>Âü∫‰∫éÂ§ßÊ®°ÂûãÊê≠Âª∫ÁöÑËÅäÂ§©Êú∫Âô®‰∫∫ÔºåÂêåÊó∂ÊîØÊåÅ ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°Â∫îÁî®„ÄÅÈ£û‰π¶„ÄÅÈíâÈíâ Á≠âÊé•ÂÖ•ÔºåÂèØÈÄâÊã©GPT4.1/GPT-4o/GPT-o1/ DeepSeek/Claude/ÊñáÂøÉ‰∏ÄË®Ä/ËÆØÈ£ûÊòüÁÅ´/ÈÄö‰πâÂçÉÈóÆ/ Gemini/GLM-4/Kimi/LinkAIÔºåËÉΩÂ§ÑÁêÜÊñáÊú¨„ÄÅËØ≠Èü≥ÂíåÂõæÁâáÔºåËÆøÈóÆÊìç‰ΩúÁ≥ªÁªüÂíå‰∫íËÅîÁΩëÔºåÊîØÊåÅÂü∫‰∫éËá™ÊúâÁü•ËØÜÂ∫ìËøõË°åÂÆöÂà∂‰ºÅ‰∏öÊô∫ËÉΩÂÆ¢Êúç„ÄÇ</p>
            <p>Language: Python</p>
            <p>Stars: 36,386</p>
            <p>Forks: 9,103</p>
            <p>Stars today: 25 stars today</p>
            <h2>README</h2><pre>&lt;p align=&quot;center&quot;&gt;&lt;img src= &quot;https://github.com/user-attachments/assets/31fb4eab-3be4-477d-aa76-82cf62bfd12c&quot; alt=&quot;Chatgpt-on-Wechat&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;a href=&quot;https://github.com/zhayujie/chatgpt-on-wechat/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/zhayujie/chatgpt-on-wechat&quot; alt=&quot;Latest release&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/zhayujie/chatgpt-on-wechat/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/zhayujie/chatgpt-on-wechat&quot; alt=&quot;License: MIT&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/zhayujie/chatgpt-on-wechat&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/zhayujie/chatgpt-on-wechat?style=flat-square&quot; alt=&quot;Stars&quot;&gt;&lt;/a&gt; &lt;br/&gt;
&lt;/p&gt;

chatgpt-on-wechatÔºàÁÆÄÁß∞CoWÔºâÈ°πÁõÆÊòØÂü∫‰∫éÂ§ßÊ®°ÂûãÁöÑÊô∫ËÉΩÂØπËØùÊú∫Âô®‰∫∫ÔºåÊîØÊåÅÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°Â∫îÁî®„ÄÅÈ£û‰π¶„ÄÅÈíâÈíâÊé•ÂÖ•ÔºåÂèØÈÄâÊã©GPT3.5/GPT4.0/Claude/Gemini/LinkAI/ChatGLM/KIMI/ÊñáÂøÉ‰∏ÄË®Ä/ËÆØÈ£ûÊòüÁÅ´/ÈÄö‰πâÂçÉÈóÆ/LinkAI/ModelScopeÔºåËÉΩÂ§ÑÁêÜÊñáÊú¨„ÄÅËØ≠Èü≥ÂíåÂõæÁâáÔºåÈÄöËøáÊèí‰ª∂ËÆøÈóÆÊìç‰ΩúÁ≥ªÁªüÂíå‰∫íËÅîÁΩëÁ≠âÂ§ñÈÉ®ËµÑÊ∫êÔºåÊîØÊåÅÂü∫‰∫éËá™ÊúâÁü•ËØÜÂ∫ìÂÆöÂà∂‰ºÅ‰∏öAIÂ∫îÁî®„ÄÇ

# ÁÆÄ‰ªã

ÊúÄÊñ∞ÁâàÊú¨ÊîØÊåÅÁöÑÂäüËÉΩÂ¶Ç‰∏ãÔºö

-  ‚úÖ   **Â§öÁ´ØÈÉ®ÁΩ≤Ôºö** ÊúâÂ§öÁßçÈÉ®ÁΩ≤ÊñπÂºèÂèØÈÄâÊã©‰∏îÂäüËÉΩÂÆåÂ§áÔºåÁõÆÂâçÂ∑≤ÊîØÊåÅÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°Â∫îÁî®„ÄÅÈ£û‰π¶„ÄÅÈíâÈíâÁ≠âÈÉ®ÁΩ≤ÊñπÂºè
-  ‚úÖ   **Âü∫Á°ÄÂØπËØùÔºö** ÁßÅËÅäÂèäÁæ§ËÅäÁöÑÊ∂àÊÅØÊô∫ËÉΩÂõûÂ§çÔºåÊîØÊåÅÂ§öËΩÆ‰ºöËØù‰∏ä‰∏ãÊñáËÆ∞ÂøÜÔºåÊîØÊåÅ GPT-4oÁ≥ªÂàó, GPT-4.1Á≥ªÂàó, Claude, Gemini, ÊñáÂøÉ‰∏ÄË®Ä, ËÆØÈ£ûÊòüÁÅ´, ÈÄö‰πâÂçÉÈóÆÔºåChatGLM-4ÔºåKimi, MiniMax, GiteeAI, ModelScope
-  ‚úÖ   **ËØ≠Èü≥ËÉΩÂäõÔºö** ÂèØËØÜÂà´ËØ≠Èü≥Ê∂àÊÅØÔºåÈÄöËøáÊñáÂ≠óÊàñËØ≠Èü≥ÂõûÂ§çÔºåÊîØÊåÅ azure, baidu, google, openai(whisper/tts) Á≠âÂ§öÁßçËØ≠Èü≥Ê®°Âûã
-  ‚úÖ   **ÂõæÂÉèËÉΩÂäõÔºö** ÊîØÊåÅÂõæÁâáÁîüÊàê„ÄÅÂõæÁâáËØÜÂà´„ÄÅÂõæÁîüÂõæÔºàÂ¶ÇÁÖßÁâá‰øÆÂ§çÔºâÔºåÂèØÈÄâÊã© Dall-E-3, stable diffusion, replicate, midjourney, CogView-3, visionÊ®°Âûã
-  ‚úÖ   **‰∏∞ÂØåÊèí‰ª∂Ôºö** ÊîØÊåÅ‰∏™ÊÄßÂåñÊèí‰ª∂Êâ©Â±ïÔºåÂ∑≤ÂÆûÁé∞Â§öËßíËâ≤ÂàáÊç¢„ÄÅÊñáÂ≠óÂÜíÈô©„ÄÅÊïèÊÑüËØçËøáÊª§„ÄÅËÅäÂ§©ËÆ∞ÂΩïÊÄªÁªì„ÄÅÊñáÊ°£ÊÄªÁªìÂíåÂØπËØù„ÄÅËÅîÁΩëÊêúÁ¥¢Á≠âÊèí‰ª∂
-  ‚úÖ   **Áü•ËØÜÂ∫ìÔºö** ÈÄöËøá‰∏ä‰º†Áü•ËØÜÂ∫ìÊñá‰ª∂Ëá™ÂÆö‰πâ‰∏ìÂ±ûÊú∫Âô®‰∫∫ÔºåÂèØ‰Ωú‰∏∫Êï∞Â≠óÂàÜË∫´„ÄÅÊô∫ËÉΩÂÆ¢Êúç„ÄÅÁßÅÂüüÂä©Êâã‰ΩøÁî®ÔºåÂü∫‰∫é [LinkAI](https://link-ai.tech) ÂÆûÁé∞

## Â£∞Êòé

1. Êú¨È°πÁõÆÈÅµÂæ™ [MITÂºÄÊ∫êÂçèËÆÆ](/LICENSE)Ôºå‰ªÖÁî®‰∫éÊäÄÊúØÁ†îÁ©∂ÂíåÂ≠¶‰π†Ôºå‰ΩøÁî®Êú¨È°πÁõÆÊó∂ÈúÄÈÅµÂÆàÊâÄÂú®Âú∞Ê≥ïÂæãÊ≥ïËßÑ„ÄÅÁõ∏ÂÖ≥ÊîøÁ≠ñ‰ª•Âèä‰ºÅ‰∏öÁ´†Á®ãÔºåÁ¶ÅÊ≠¢Áî®‰∫é‰ªª‰ΩïËøùÊ≥ïÊàñ‰æµÁäØ‰ªñ‰∫∫ÊùÉÁõäÁöÑË°å‰∏∫
2. Â¢ÉÂÜÖ‰ΩøÁî®ËØ•È°πÁõÆÊó∂ÔºåËØ∑‰ΩøÁî®ÂõΩÂÜÖÂéÇÂïÜÁöÑÂ§ßÊ®°ÂûãÊúçÂä°ÔºåÂπ∂ËøõË°åÂøÖË¶ÅÁöÑÂÜÖÂÆπÂÆâÂÖ®ÂÆ°Ê†∏ÂèäËøáÊª§
3. Êú¨È°πÁõÆ‰∏ªË¶ÅÊé•ÂÖ•ÂçèÂêåÂäûÂÖ¨Âπ≥Âè∞ÔºåÊé®Ëçê‰ΩøÁî®ÂÖ¨‰ºóÂè∑„ÄÅ‰ºÅÂæÆËá™Âª∫Â∫îÁî®„ÄÅÈíâÈíâ„ÄÅÈ£û‰π¶Á≠âÊé•ÂÖ•ÈÄöÈÅìÔºåÂÖ∂‰ªñÈÄöÈÅì‰∏∫ÂéÜÂè≤‰∫ßÁâ©Â∑≤‰∏çÁª¥Êä§
4. ‰ªª‰Ωï‰∏™‰∫∫„ÄÅÂõ¢ÈòüÂíå‰ºÅ‰∏öÔºåÊó†ËÆ∫‰ª•‰ΩïÁßçÊñπÂºè‰ΩøÁî®ËØ•È°πÁõÆ„ÄÅÂØπ‰ΩïÂØπË±°Êèê‰æõÊúçÂä°ÔºåÊâÄ‰∫ßÁîüÁöÑ‰∏ÄÂàáÂêéÊûúÔºåÊú¨È°πÁõÆÂùá‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª

## ÊºîÁ§∫

DEMOËßÜÈ¢ëÔºöhttps://cdn.link-ai.tech/doc/cow_demo.mp4

## Á§æÂå∫

Ê∑ªÂä†Â∞èÂä©ÊâãÂæÆ‰ø°Âä†ÂÖ•ÂºÄÊ∫êÈ°πÁõÆ‰∫§ÊµÅÁæ§Ôºö

&lt;img width=&quot;160&quot; src=&quot;https://img-1317903499.cos.ap-guangzhou.myqcloud.com/docs/open-community.png&quot;&gt;

&lt;br&gt;

# ‰ºÅ‰∏öÊúçÂä°

&lt;a href=&quot;https://link-ai.tech&quot; target=&quot;_blank&quot;&gt;&lt;img width=&quot;800&quot; src=&quot;https://cdn.link-ai.tech/image/link-ai-intro.jpg&quot;&gt;&lt;/a&gt;

&gt; [LinkAI](https://link-ai.tech/) ÊòØÈù¢Âêë‰ºÅ‰∏öÂíåÂºÄÂèëËÄÖÁöÑ‰∏ÄÁ´ôÂºèAIÂ∫îÁî®Âπ≥Âè∞ÔºåËÅöÂêàÂ§öÊ®°ÊÄÅÂ§ßÊ®°Âûã„ÄÅÁü•ËØÜÂ∫ì„ÄÅAgent Êèí‰ª∂„ÄÅÂ∑•‰ΩúÊµÅÁ≠âËÉΩÂäõÔºåÊîØÊåÅ‰∏ÄÈîÆÊé•ÂÖ•‰∏ªÊµÅÂπ≥Âè∞Âπ∂ËøõË°åÁÆ°ÁêÜÔºåÊîØÊåÅSaaS„ÄÅÁßÅÊúâÂåñÈÉ®ÁΩ≤Â§öÁßçÊ®°Âºè„ÄÇ
&gt;
&gt; LinkAI ÁõÆÂâç Â∑≤Âú®ÁßÅÂüüËøêËê•„ÄÅÊô∫ËÉΩÂÆ¢Êúç„ÄÅ‰ºÅ‰∏öÊïàÁéáÂä©ÊâãÁ≠âÂú∫ÊôØÁßØÁ¥Ø‰∫Ü‰∏∞ÂØåÁöÑ AI Ëß£ÂÜ≥ÊñπÊ°àÔºå Âú®ÁîµÂïÜ„ÄÅÊñáÊïô„ÄÅÂÅ•Â∫∑„ÄÅÊñ∞Ê∂àË¥π„ÄÅÁßëÊäÄÂà∂ÈÄ†Á≠âÂêÑË°å‰∏öÊ≤âÊ∑Ä‰∫ÜÂ§ßÊ®°ÂûãËêΩÂú∞Â∫îÁî®ÁöÑÊúÄ‰Ω≥ÂÆûË∑µÔºåËá¥Âäõ‰∫éÂ∏ÆÂä©Êõ¥Â§ö‰ºÅ‰∏öÂíåÂºÄÂèëËÄÖÊã•Êä± AI Áîü‰∫ßÂäõ„ÄÇ

**‰ºÅ‰∏öÊúçÂä°Âíå‰∫ßÂìÅÂí®ËØ¢** ÂèØËÅîÁ≥ª‰∫ßÂìÅÈ°æÈóÆÔºö

&lt;img width=&quot;160&quot; src=&quot;https://cdn.link-ai.tech/consultant-s.jpg&quot;&gt;

&lt;br&gt;

# üè∑ Êõ¥Êñ∞Êó•Âøó
&gt;**2025.04.11Ôºö** [1.7.5ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.7.5) Êñ∞Â¢ûÊîØÊåÅ [wechatferry](https://github.com/zhayujie/chatgpt-on-wechat/pull/2562) ÂçèËÆÆ„ÄÅÊñ∞Â¢û deepseek Ê®°Âûã„ÄÅÊñ∞Â¢ûÊîØÊåÅËÖæËÆØ‰∫ëËØ≠Èü≥ËÉΩÂäõ„ÄÅÊñ∞Â¢ûÊîØÊåÅ ModelScope Âíå Gitee-AI APIÊé•Âè£

&gt;**2024.12.13Ôºö** [1.7.4ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.7.4) Êñ∞Â¢û Gemini 2.0 Ê®°Âûã„ÄÅÊñ∞Â¢ûweb channel„ÄÅËß£ÂÜ≥ÂÜÖÂ≠òÊ≥ÑÊºèÈóÆÈ¢ò„ÄÅËß£ÂÜ≥ `#reloadp` ÂëΩ‰ª§ÈáçËΩΩ‰∏çÁîüÊïàÈóÆÈ¢ò

&gt;**2024.10.31Ôºö** [1.7.3ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.7.3) Á®ãÂ∫èÁ®≥ÂÆöÊÄßÊèêÂçá„ÄÅÊï∞ÊçÆÂ∫ìÂäüËÉΩ„ÄÅClaudeÊ®°Âûã‰ºòÂåñ„ÄÅlinkaiÊèí‰ª∂‰ºòÂåñ„ÄÅÁ¶ªÁ∫øÈÄöÁü•

&gt;**2024.09.26Ôºö** [1.7.2ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.7.2)  Âíå [1.7.1ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.7.1) ÊñáÂøÉÔºåËÆØÈ£ûÁ≠âÊ®°Âûã‰ºòÂåñ„ÄÅo1 Ê®°Âûã„ÄÅÂø´ÈÄüÂÆâË£ÖÂíåÁÆ°ÁêÜËÑöÊú¨

&gt;**2024.08.02Ôºö** [1.7.0ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.7.0) Êñ∞Â¢û ËÆØÈ£û4.0 Ê®°Âûã„ÄÅÁü•ËØÜÂ∫ìÂºïÁî®Êù•Ê∫êÂ±ïÁ§∫„ÄÅÁõ∏ÂÖ≥Êèí‰ª∂‰ºòÂåñ

&gt;**2024.07.19Ôºö** [1.6.9ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.6.9) Êñ∞Â¢û gpt-4o-mini Ê®°Âûã„ÄÅÈòøÈáåËØ≠Èü≥ËØÜÂà´„ÄÅ‰ºÅÂæÆÂ∫îÁî®Ê∏†ÈÅìË∑ØÁî±‰ºòÂåñ

&gt;**2024.07.05Ôºö** [1.6.8ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.6.8) Âíå [1.6.7ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.6.7)ÔºåClaude3.5, Gemini 1.5 Pro, MiniMaxÊ®°Âûã„ÄÅÂ∑•‰ΩúÊµÅÂõæÁâáËæìÂÖ•„ÄÅÊ®°ÂûãÂàóË°®ÂÆåÂñÑ

&gt;**2024.06.04Ôºö** [1.6.6ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.6.6) Âíå [1.6.5ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.6.5)Ôºågpt-4oÊ®°Âûã„ÄÅÈíâÈíâÊµÅÂºèÂç°Áâá„ÄÅËÆØÈ£ûËØ≠Èü≥ËØÜÂà´/ÂêàÊàê

&gt;**2024.04.26Ôºö** [1.6.0ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.6.0)ÔºåÊñ∞Â¢û Kimi Êé•ÂÖ•„ÄÅgpt-4-turboÁâàÊú¨ÂçáÁ∫ß„ÄÅÊñá‰ª∂ÊÄªÁªìÂíåËØ≠Èü≥ËØÜÂà´ÈóÆÈ¢ò‰øÆÂ§ç

&gt;**2024.03.26Ôºö** [1.5.8ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.8) Âíå [1.5.7ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.7)ÔºåÊñ∞Â¢û GLM-4„ÄÅClaude-3 Ê®°ÂûãÔºåedge-tts ËØ≠Èü≥ÊîØÊåÅ

&gt;**2024.01.26Ôºö** [1.5.6ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.6) Âíå [1.5.5ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.5)ÔºåÈíâÈíâÊé•ÂÖ•ÔºåtoolÊèí‰ª∂ÂçáÁ∫ßÔºå4-turboÊ®°ÂûãÊõ¥Êñ∞

&gt;**2023.11.11Ôºö** [1.5.3ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.3) Âíå [1.5.4ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.4)ÔºåÊñ∞Â¢ûÈÄö‰πâÂçÉÈóÆÊ®°Âûã„ÄÅGoogle Gemini

&gt;**2023.11.10Ôºö** [1.5.2ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.2)ÔºåÊñ∞Â¢ûÈ£û‰π¶ÈÄöÈÅì„ÄÅÂõæÂÉèËØÜÂà´ÂØπËØù„ÄÅÈªëÂêçÂçïÈÖçÁΩÆ

&gt;**2023.11.10Ôºö** [1.5.0ÁâàÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/releases/tag/1.5.0)ÔºåÊñ∞Â¢û `gpt-4-turbo`, `dall-e-3`, `tts` Ê®°ÂûãÊé•ÂÖ•ÔºåÂÆåÂñÑÂõæÂÉèÁêÜËß£&amp;ÁîüÊàê„ÄÅËØ≠Èü≥ËØÜÂà´&amp;ÁîüÊàêÁöÑÂ§öÊ®°ÊÄÅËÉΩÂäõ

&gt;**2023.10.16Ôºö** ÊîØÊåÅÈÄöËøáÊÑèÂõæËØÜÂà´‰ΩøÁî®LinkAIËÅîÁΩëÊêúÁ¥¢„ÄÅÊï∞Â≠¶ËÆ°ÁÆó„ÄÅÁΩëÈ°µËÆøÈóÆÁ≠âÊèí‰ª∂ÔºåÂèÇËÄÉ[Êèí‰ª∂ÊñáÊ°£](https://docs.link-ai.tech/platform/plugins)

&gt;**2023.09.26Ôºö** Êèí‰ª∂Â¢ûÂä† Êñá‰ª∂/ÊñáÁ´†ÈìæÊé• ‰∏ÄÈîÆÊÄªÁªìÂíåÂØπËØùÁöÑÂäüËÉΩÔºå‰ΩøÁî®ÂèÇËÄÉÔºö[Êèí‰ª∂ËØ¥Êòé](https://github.com/zhayujie/chatgpt-on-wechat/tree/master/plugins/linkai#3%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E5%AF%B9%E8%AF%9D%E5%8A%9F%E8%83%BD)

&gt;**2023.08.08Ôºö** Êé•ÂÖ•ÁôæÂ∫¶ÊñáÂøÉ‰∏ÄË®ÄÊ®°ÂûãÔºåÈÄöËøá [Êèí‰ª∂](https://github.com/zhayujie/chatgpt-on-wechat/tree/master/plugins/linkai) ÊîØÊåÅ Midjourney ÁªòÂõæ

&gt;**2023.06.12Ôºö** Êé•ÂÖ• [LinkAI](https://link-ai.tech/console) Âπ≥Âè∞ÔºåÂèØÂú®Á∫øÂàõÂª∫È¢ÜÂüüÁü•ËØÜÂ∫ìÔºåÊâìÈÄ†‰∏ìÂ±ûÂÆ¢ÊúçÊú∫Âô®‰∫∫„ÄÇ‰ΩøÁî®ÂèÇËÄÉ [Êé•ÂÖ•ÊñáÊ°£](https://link-ai.tech/platform/link-app/wechat)„ÄÇ

Êõ¥Êó©Êõ¥Êñ∞Êó•ÂøóÊü•Áúã: [ÂΩíÊ°£Êó•Âøó](/docs/version/old-version.md)

&lt;br&gt;

# üöÄ Âø´ÈÄüÂºÄÂßã

- Âø´ÈÄüÂºÄÂßãËØ¶ÁªÜÊñáÊ°£Ôºö[È°πÁõÆÊê≠Âª∫ÊñáÊ°£](https://docs.link-ai.tech/cow/quick-start)

- Âø´ÈÄüÂÆâË£ÖËÑöÊú¨ÔºåËØ¶ÁªÜ‰ΩøÁî®ÊåáÂØºÔºö[‰∏ÄÈîÆÂÆâË£ÖÂêØÂä®ËÑöÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/wiki/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC)
```bash
bash &lt;(curl -sS https://cdn.link-ai.tech/code/cow/install.sh)
```
- È°πÁõÆÁÆ°ÁêÜËÑöÊú¨ÔºåËØ¶ÁªÜ‰ΩøÁî®ÊåáÂØºÔºö[È°πÁõÆÁÆ°ÁêÜËÑöÊú¨](https://github.com/zhayujie/chatgpt-on-wechat/wiki/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%84%9A%E6%9C%AC)
## ‰∏Ä„ÄÅÂáÜÂ§á

### 1. Ë¥¶Âè∑Ê≥®ÂÜå

È°πÁõÆÈªòËÆ§‰ΩøÁî®OpenAIÊé•Âè£ÔºåÈúÄÂâçÂæÄ [OpenAIÊ≥®ÂÜåÈ°µÈù¢](https://beta.openai.com/signup) ÂàõÂª∫Ë¥¶Âè∑ÔºåÂàõÂª∫ÂÆåË¥¶Âè∑ÂàôÂâçÂæÄ [APIÁÆ°ÁêÜÈ°µÈù¢](https://beta.openai.com/account/api-keys) ÂàõÂª∫‰∏Ä‰∏™ API Key Âπ∂‰øùÂ≠ò‰∏ãÊù•ÔºåÂêéÈù¢ÈúÄË¶ÅÂú®È°πÁõÆ‰∏≠ÈÖçÁΩÆËøô‰∏™key„ÄÇÊé•Âè£ÈúÄË¶ÅÊµ∑Â§ñÁΩëÁªúËÆøÈóÆÂèäÁªëÂÆö‰ø°Áî®Âç°ÊîØ‰ªò„ÄÇ

&gt; ÈªòËÆ§ÂØπËØùÊ®°ÂûãÊòØ openai ÁöÑ gpt-3.5-turboÔºåËÆ°Ë¥πÊñπÂºèÊòØÁ∫¶ÊØè 1000tokens (Á∫¶750‰∏™Ëã±ÊñáÂçïËØç Êàñ 500Ê±âÂ≠óÔºåÂåÖÂê´ËØ∑Ê±ÇÂíåÂõûÂ§ç) Ê∂àËÄó $0.002ÔºåÂõæÁâáÁîüÊàêÊòØDell EÊ®°ÂûãÔºåÊØèÂº†Ê∂àËÄó $0.016„ÄÇ

È°πÁõÆÂêåÊó∂‰πüÊîØÊåÅ‰ΩøÁî® LinkAI Êé•Âè£ÔºåÊó†ÈúÄ‰ª£ÁêÜÔºåÂèØ‰ΩøÁî® Kimi„ÄÅÊñáÂøÉ„ÄÅËÆØÈ£û„ÄÅGPT-3.5„ÄÅGPT-4o Á≠âÊ®°ÂûãÔºåÊîØÊåÅ ÂÆöÂà∂ÂåñÁü•ËØÜÂ∫ì„ÄÅËÅîÁΩëÊêúÁ¥¢„ÄÅMJÁªòÂõæ„ÄÅÊñáÊ°£ÊÄªÁªì„ÄÅÂ∑•‰ΩúÊµÅÁ≠âËÉΩÂäõ„ÄÇ‰øÆÊîπÈÖçÁΩÆÂç≥ÂèØ‰∏ÄÈîÆ‰ΩøÁî®ÔºåÂèÇËÄÉ [Êé•ÂÖ•ÊñáÊ°£](https://link-ai.tech/platform/link-app/wechat)„ÄÇ

### 2.ËøêË°åÁéØÂ¢É

ÊîØÊåÅ Linux„ÄÅMacOS„ÄÅWindows Á≥ªÁªüÔºàÂèØÂú®LinuxÊúçÂä°Âô®‰∏äÈïøÊúüËøêË°å)ÔºåÂêåÊó∂ÈúÄÂÆâË£Ö `Python`„ÄÇ
&gt; Âª∫ËÆÆPythonÁâàÊú¨Âú® 3.7.1~3.9.X ‰πãÈó¥ÔºåÊé®Ëçê3.8ÁâàÊú¨Ôºå3.10Âèä‰ª•‰∏äÁâàÊú¨Âú® MacOS ÂèØÁî®ÔºåÂÖ∂‰ªñÁ≥ªÁªü‰∏ä‰∏çÁ°ÆÂÆöËÉΩÂê¶Ê≠£Â∏∏ËøêË°å„ÄÇ

&gt; Ê≥®ÊÑèÔºöDocker Êàñ Railway ÈÉ®ÁΩ≤Êó†ÈúÄÂÆâË£ÖpythonÁéØÂ¢ÉÂíå‰∏ãËΩΩÊ∫êÁ†ÅÔºåÂèØÁõ¥Êé•Âø´ËøõÂà∞‰∏ã‰∏ÄËäÇ„ÄÇ

**(1) ÂÖãÈöÜÈ°πÁõÆ‰ª£Á†ÅÔºö**

```bash
git clone https://github.com/zhayujie/chatgpt-on-wechat
cd chatgpt-on-wechat/
```

Ê≥®: Â¶ÇÈÅáÂà∞ÁΩëÁªúÈóÆÈ¢òÂèØÈÄâÊã©ÂõΩÂÜÖÈïúÂÉè https://gitee.com/zhayujie/chatgpt-on-wechat

**(2) ÂÆâË£ÖÊ†∏ÂøÉ‰æùËµñ (ÂøÖÈÄâ)Ôºö**
&gt; ËÉΩÂ§ü‰ΩøÁî®`itchat`ÂàõÂª∫Êú∫Âô®‰∫∫ÔºåÂπ∂ÂÖ∑ÊúâÊñáÂ≠ó‰∫§ÊµÅÂäüËÉΩÊâÄÈúÄÁöÑÊúÄÂ∞è‰æùËµñÈõÜÂêà„ÄÇ
```bash
pip3 install -r requirements.txt
```

**(3) ÊãìÂ±ï‰æùËµñ (ÂèØÈÄâÔºåÂª∫ËÆÆÂÆâË£Ö)Ôºö**

```bash
pip3 install -r requirements-optional.txt
```
&gt; Â¶ÇÊûúÊüêÈ°π‰æùËµñÂÆâË£ÖÂ§±Ë¥•ÂèØÊ≥®ÈáäÊéâÂØπÂ∫îÁöÑË°åÂÜçÁªßÁª≠

## ‰∫å„ÄÅÈÖçÁΩÆ

ÈÖçÁΩÆÊñá‰ª∂ÁöÑÊ®°ÊùøÂú®Ê†πÁõÆÂΩïÁöÑ`config-template.json`‰∏≠ÔºåÈúÄÂ§çÂà∂ËØ•Ê®°ÊùøÂàõÂª∫ÊúÄÁªàÁîüÊïàÁöÑ `config.json` Êñá‰ª∂Ôºö

```bash
  cp config-template.json config.json
```

ÁÑ∂ÂêéÂú®`config.json`‰∏≠Â°´ÂÖ•ÈÖçÁΩÆÔºå‰ª•‰∏ãÊòØÂØπÈªòËÆ§ÈÖçÁΩÆÁöÑËØ¥ÊòéÔºåÂèØÊ†πÊçÆÈúÄË¶ÅËøõË°åËá™ÂÆö‰πâ‰øÆÊîπÔºàÊ≥®ÊÑèÂÆûÈôÖ‰ΩøÁî®Êó∂ËØ∑ÂéªÊéâÊ≥®ÈáäÔºå‰øùËØÅJSONÊ†ºÂºèÁöÑÂÆåÊï¥ÔºâÔºö

```bash
# config.jsonÊñá‰ª∂ÂÜÖÂÆπÁ§∫‰æã
{
  &quot;model&quot;: &quot;gpt-4o-mini&quot;,                                     # Ê®°ÂûãÂêçÁß∞, ÊîØÊåÅ gpt-4o-mini, gpt-4.1, gpt-4o, wenxin, xunfei, glm-4, claude-3-7-sonnet-latest, moonshotÁ≠â
  &quot;open_ai_api_key&quot;: &quot;YOUR API KEY&quot;,                          # Â¶ÇÊûú‰ΩøÁî®openAIÊ®°ÂûãÂàôÂ°´ÂÖ•‰∏äÈù¢ÂàõÂª∫ÁöÑ OpenAI API KEY
  &quot;open_ai_api_base&quot;: &quot;https://api.openai.com/v1&quot;,            # OpenAIÊé•Âè£‰ª£ÁêÜÂú∞ÂùÄ
  &quot;proxy&quot;: &quot;&quot;,                                                # ‰ª£ÁêÜÂÆ¢Êà∑Á´ØÁöÑipÂíåÁ´ØÂè£ÔºåÂõΩÂÜÖÁéØÂ¢ÉÂºÄÂêØ‰ª£ÁêÜÁöÑÈúÄË¶ÅÂ°´ÂÜôËØ•È°πÔºåÂ¶Ç &quot;127.0.0.1:7890&quot;
  &quot;single_chat_prefix&quot;: [&quot;bot&quot;, &quot;@bot&quot;],                      # ÁßÅËÅäÊó∂ÊñáÊú¨ÈúÄË¶ÅÂåÖÂê´ËØ•ÂâçÁºÄÊâçËÉΩËß¶ÂèëÊú∫Âô®‰∫∫ÂõûÂ§ç
  &quot;single_chat_reply_prefix&quot;: &quot;[bot] &quot;,                       # ÁßÅËÅäÊó∂Ëá™Âä®ÂõûÂ§çÁöÑÂâçÁºÄÔºåÁî®‰∫éÂå∫ÂàÜÁúü‰∫∫
  &quot;group_chat_prefix&quot;: [&quot;@bot&quot;],                              # Áæ§ËÅäÊó∂ÂåÖÂê´ËØ•ÂâçÁºÄÂàô‰ºöËß¶ÂèëÊú∫Âô®‰∫∫ÂõûÂ§ç
  &quot;group_name_white_list&quot;: [&quot;ChatGPTÊµãËØïÁæ§&quot;, &quot;ChatGPTÊµãËØïÁæ§2&quot;], # ÂºÄÂêØËá™Âä®ÂõûÂ§çÁöÑÁæ§ÂêçÁß∞ÂàóË°®
  &quot;group_chat_in_one_session&quot;: [&quot;ChatGPTÊµãËØïÁæ§&quot;],              # ÊîØÊåÅ‰ºöËØù‰∏ä‰∏ãÊñáÂÖ±‰∫´ÁöÑÁæ§ÂêçÁß∞  
  &quot;image_create_prefix&quot;: [&quot;Áîª&quot;, &quot;Áúã&quot;, &quot;Êâæ&quot;],                   # ÂºÄÂêØÂõæÁâáÂõûÂ§çÁöÑÂâçÁºÄ
  &quot;conversation_max_tokens&quot;: 1000,                            # ÊîØÊåÅ‰∏ä‰∏ãÊñáËÆ∞ÂøÜÁöÑÊúÄÂ§öÂ≠óÁ¨¶Êï∞
  &quot;speech_recognition&quot;: false,                                # ÊòØÂê¶ÂºÄÂêØËØ≠Èü≥ËØÜÂà´
  &quot;group_speech_recognition&quot;: false,                          # ÊòØÂê¶ÂºÄÂêØÁæ§ÁªÑËØ≠Èü≥ËØÜÂà´
  &quot;voice_reply_voice&quot;: false,                                 # ÊòØÂê¶‰ΩøÁî®ËØ≠Èü≥ÂõûÂ§çËØ≠Èü≥
  &quot;character_desc&quot;: &quot;‰Ω†ÊòØÂü∫‰∫éÂ§ßËØ≠Ë®ÄÊ®°ÂûãÁöÑAIÊô∫ËÉΩÂä©ÊâãÔºåÊó®Âú®ÂõûÁ≠îÂπ∂Ëß£ÂÜ≥‰∫∫‰ª¨ÁöÑ‰ªª‰ΩïÈóÆÈ¢òÔºåÂπ∂‰∏îÂèØ‰ª•‰ΩøÁî®Â§öÁßçËØ≠Ë®Ä‰∏é‰∫∫‰∫§ÊµÅ„ÄÇ&quot;,  # ‰∫∫Ê†ºÊèèËø∞
  # ËÆ¢ÈòÖÊ∂àÊÅØÔºåÂÖ¨‰ºóÂè∑Âíå‰ºÅ‰∏öÂæÆ‰ø°channel‰∏≠ËØ∑Â°´ÂÜôÔºåÂΩìË¢´ËÆ¢ÈòÖÊó∂‰ºöËá™Âä®ÂõûÂ§çÔºåÂèØ‰ΩøÁî®ÁâπÊÆäÂç†‰ΩçÁ¨¶„ÄÇÁõÆÂâçÊîØÊåÅÁöÑÂç†‰ΩçÁ¨¶Êúâ{trigger_prefix}ÔºåÂú®Á®ãÂ∫è‰∏≠ÂÆÉ‰ºöËá™Âä®ÊõøÊç¢ÊàêbotÁöÑËß¶ÂèëËØç„ÄÇ
  &quot;subscribe_msg&quot;: &quot;ÊÑüË∞¢ÊÇ®ÁöÑÂÖ≥Ê≥®ÔºÅ\nËøôÈáåÊòØChatGPTÔºåÂèØ‰ª•Ëá™Áî±ÂØπËØù„ÄÇ\nÊîØÊåÅËØ≠Èü≥ÂØπËØù„ÄÇ\nÊîØÊåÅÂõæÁâáËæìÂá∫ÔºåÁîªÂ≠óÂºÄÂ§¥ÁöÑÊ∂àÊÅØÂ∞ÜÊåâË¶ÅÊ±ÇÂàõ‰ΩúÂõæÁâá„ÄÇ\nÊîØÊåÅËßíËâ≤ÊâÆÊºîÂíåÊñáÂ≠óÂÜíÈô©Á≠â‰∏∞ÂØåÊèí‰ª∂„ÄÇ\nËæìÂÖ•{trigger_prefix}#help Êü•ÁúãËØ¶ÁªÜÊåá‰ª§„ÄÇ&quot;,
  &quot;use_linkai&quot;: false,                                        # ÊòØÂê¶‰ΩøÁî®LinkAIÊé•Âè£ÔºåÈªòËÆ§ÂÖ≥Èó≠ÔºåÂºÄÂêØÂêéÂèØÂõΩÂÜÖËÆøÈóÆÔºå‰ΩøÁî®Áü•ËØÜÂ∫ìÂíåMJ
  &quot;linkai_api_key&quot;: &quot;&quot;,                                       # LinkAI Api Key
  &quot;linkai_app_code&quot;: &quot;&quot;                                       # LinkAI Â∫îÁî®ÊàñÂ∑•‰ΩúÊµÅcode
}
```
**ÈÖçÁΩÆËØ¥ÊòéÔºö**

**1.‰∏™‰∫∫ËÅäÂ§©**

+ ‰∏™‰∫∫ËÅäÂ§©‰∏≠ÔºåÈúÄË¶Å‰ª• &quot;bot&quot;Êàñ&quot;@bot&quot; ‰∏∫ÂºÄÂ§¥ÁöÑÂÜÖÂÆπËß¶ÂèëÊú∫Âô®‰∫∫ÔºåÂØπÂ∫îÈÖçÁΩÆÈ°π `single_chat_prefix` (Â¶ÇÊûú‰∏çÈúÄË¶Å‰ª•ÂâçÁºÄËß¶ÂèëÂèØ‰ª•Â°´ÂÜô  `&quot;single_chat_prefix&quot;: [&quot;&quot;]`)
+ Êú∫Âô®‰∫∫ÂõûÂ§çÁöÑÂÜÖÂÆπ‰ºö‰ª• &quot;[bot] &quot; ‰Ωú‰∏∫ÂâçÁºÄÔºå ‰ª•Âå∫ÂàÜÁúü‰∫∫ÔºåÂØπÂ∫îÁöÑÈÖçÁΩÆÈ°π‰∏∫ `single_chat_reply_prefix` (Â¶ÇÊûú‰∏çÈúÄË¶ÅÂâçÁºÄÂèØ‰ª•Â°´ÂÜô `&quot;single_chat_reply_prefix&quot;: &quot;&quot;`)

**2.Áæ§ÁªÑËÅäÂ§©**

+ Áæ§ÁªÑËÅäÂ§©‰∏≠ÔºåÁæ§ÂêçÁß∞ÈúÄÈÖçÁΩÆÂú® `group_name_white_list ` ‰∏≠ÊâçËÉΩÂºÄÂêØÁæ§ËÅäËá™Âä®ÂõûÂ§ç„ÄÇÂ¶ÇÊûúÊÉ≥ÂØπÊâÄÊúâÁæ§ËÅäÁîüÊïàÔºåÂèØ‰ª•Áõ¥Êé•Â°´ÂÜô `&quot;group_name_white_list&quot;: [&quot;ALL_GROUP&quot;]`
+ ÈªòËÆ§Âè™Ë¶ÅË¢´‰∫∫ @ Â∞±‰ºöËß¶ÂèëÊú∫Âô®‰∫∫Ëá™Âä®ÂõûÂ§çÔºõÂè¶Â§ñÁæ§ËÅäÂ§©‰∏≠Âè™Ë¶ÅÊ£ÄÊµãÂà∞‰ª• &quot;@bot&quot; ÂºÄÂ§¥ÁöÑÂÜÖÂÆπÔºåÂêåÊ†∑‰ºöËá™Âä®ÂõûÂ§çÔºàÊñπ‰æøËá™Â∑±Ëß¶ÂèëÔºâÔºåËøôÂØπÂ∫îÈÖçÁΩÆÈ°π `group_chat_prefix`
+ ÂèØÈÄâÈÖçÁΩÆ: `group_name_keyword_white_list`ÈÖçÁΩÆÈ°πÊîØÊåÅÊ®°Á≥äÂåπÈÖçÁæ§ÂêçÁß∞Ôºå`group_chat_keyword`ÈÖçÁΩÆÈ°πÂàôÊîØÊåÅÊ®°Á≥äÂåπÈÖçÁæ§Ê∂àÊÅØÂÜÖÂÆπÔºåÁî®Ê≥ï‰∏é‰∏äËø∞‰∏§‰∏™ÈÖçÁΩÆÈ°πÁõ∏Âêå„ÄÇÔºàContributed by [evolay](https://github.com/evolay))
+ `group_chat_in_one_session`Ôºö‰ΩøÁæ§ËÅäÂÖ±‰∫´‰∏Ä‰∏™‰ºöËØù‰∏ä‰∏ãÊñáÔºåÈÖçÁΩÆ `[&quot;ALL_GROUP&quot;]` Âàô‰ΩúÁî®‰∫éÊâÄÊúâÁæ§ËÅä

**3.ËØ≠Èü≥ËØÜÂà´**

+ Ê∑ªÂä† `&quot;speech_recognition&quot;: true` Â∞ÜÂºÄÂêØËØ≠Èü≥ËØÜÂà´ÔºåÈªòËÆ§‰ΩøÁî®openaiÁöÑwhisperÊ®°ÂûãËØÜÂà´‰∏∫ÊñáÂ≠óÔºåÂêåÊó∂‰ª•ÊñáÂ≠óÂõûÂ§çÔºåËØ•ÂèÇÊï∞‰ªÖÊîØÊåÅÁßÅËÅä (Ê≥®ÊÑèÁî±‰∫éËØ≠Èü≥Ê∂àÊÅØÊó†Ê≥ïÂåπÈÖçÂâçÁºÄÔºå‰∏ÄÊó¶ÂºÄÂêØÂ∞ÜÂØπÊâÄÊúâËØ≠Èü≥Ëá™Âä®ÂõûÂ§çÔºåÊîØÊåÅËØ≠Èü≥Ëß¶ÂèëÁîªÂõæ)Ôºõ
+ Ê∑ªÂä† `&quot;group_speech_recognition&quot;: true` Â∞ÜÂºÄÂêØÁæ§ÁªÑËØ≠Èü≥ËØÜÂà´ÔºåÈªòËÆ§‰ΩøÁî®openaiÁöÑwhisperÊ®°ÂûãËØÜÂà´‰∏∫ÊñáÂ≠óÔºåÂêåÊó∂‰ª•ÊñáÂ≠óÂõûÂ§çÔºåÂèÇÊï∞‰ªÖÊîØÊåÅÁæ§ËÅä (‰ºöÂåπÈÖçgroup_chat_prefixÂíågroup_chat_keyword, ÊîØÊåÅËØ≠Èü≥Ëß¶ÂèëÁîªÂõæ)Ôºõ
+ Ê∑ªÂä† `&quot;voice_reply_voice&quot;: true` Â∞ÜÂºÄÂêØËØ≠Èü≥ÂõûÂ§çËØ≠Èü≥ÔºàÂêåÊó∂‰ΩúÁî®‰∫éÁßÅËÅäÂíåÁæ§ËÅäÔºâ

**4.ÂÖ∂‰ªñÈÖçÁΩÆ**

+ `model`: Ê®°ÂûãÂêçÁß∞ÔºåÁõÆÂâçÊîØÊåÅ `gpt-4o-mini`, `gpt-4.1`, `gpt-4o`, `gpt-3.5-turbo`, `wenxin` , `claude` , `gemini`, `glm-4`,  `xunfei`, `moonshot`Á≠âÔºåÂÖ®ÈÉ®Ê®°ÂûãÂêçÁß∞ÂèÇËÄÉ[common/const.py](https://github.com/zhayujie/chatgpt-on-wechat/blob/master/common/const.py)Êñá‰ª∂
+ `temperature`,`frequency_penalty`,`presence_penalty`: Chat APIÊé•Âè£ÂèÇÊï∞ÔºåËØ¶ÊÉÖÂèÇËÄÉ[OpenAIÂÆòÊñπÊñáÊ°£„ÄÇ](https://platform.openai.com/docs/api-reference/chat)
+ `proxy`ÔºöÁî±‰∫éÁõÆÂâç `openai` Êé•Âè£ÂõΩÂÜÖÊó†Ê≥ïËÆøÈóÆÔºåÈúÄÈÖçÁΩÆ‰ª£ÁêÜÂÆ¢Êà∑Á´ØÁöÑÂú∞ÂùÄÔºåËØ¶ÊÉÖÂèÇËÄÉ  [#351](https://github.com/zhayujie/chatgpt-on-wechat/issues/351)
+ ÂØπ‰∫éÂõæÂÉèÁîüÊàêÔºåÂú®Êª°Ë∂≥‰∏™‰∫∫ÊàñÁæ§ÁªÑËß¶ÂèëÊù°‰ª∂Â§ñÔºåËøòÈúÄË¶ÅÈ¢ùÂ§ñÁöÑÂÖ≥ÈîÆËØçÂâçÁºÄÊù•Ëß¶ÂèëÔºåÂØπÂ∫îÈÖçÁΩÆ `image_create_prefix `
+ ÂÖ≥‰∫éOpenAIÂØπËØùÂèäÂõæÁâáÊé•Âè£ÁöÑÂèÇÊï∞ÈÖçÁΩÆÔºàÂÜÖÂÆπËá™Áî±Â∫¶„ÄÅÂõûÂ§çÂ≠óÊï∞ÈôêÂà∂„ÄÅÂõæÁâáÂ§ßÂ∞èÁ≠âÔºâÔºåÂèØ‰ª•ÂèÇËÄÉ [ÂØπËØùÊé•Âè£](https://beta.openai.com/docs/api-reference/completions) Âíå [ÂõæÂÉèÊé•Âè£](https://beta.openai.com/docs/api-reference/completions)  ÊñáÊ°£ÔºåÂú®[`config.py`](https://github.com/zhayujie/chatgpt-on-wechat/blob/master/config.py)‰∏≠Ê£ÄÊü•Âì™‰∫õÂèÇÊï∞Âú®Êú¨È°πÁõÆ‰∏≠ÊòØÂèØÈÖçÁΩÆÁöÑ„ÄÇ
+ `conversation_max_tokens`ÔºöË°®Á§∫ËÉΩÂ§üËÆ∞ÂøÜÁöÑ‰∏ä‰∏ãÊñáÊúÄÂ§ßÂ≠óÊï∞Ôºà‰∏ÄÈóÆ‰∏ÄÁ≠î‰∏∫‰∏ÄÁªÑÂØπËØùÔºåÂ¶ÇÊûúÁ¥ØÁßØÁöÑÂØπËØùÂ≠óÊï∞Ë∂ÖÂá∫ÈôêÂà∂ÔºåÂ∞±‰ºö‰ºòÂÖàÁßªÈô§ÊúÄÊó©ÁöÑ‰∏ÄÁªÑÂØπËØùÔºâ
+ `rate_limit_chatgpt`Ôºå`rate_limit_dalle`ÔºöÊØèÂàÜÈíüÊúÄÈ´òÈóÆÁ≠îÈÄüÁéá„ÄÅÁîªÂõæÈÄüÁéáÔºåË∂ÖÈÄüÂêéÊéíÈòüÊåâÂ∫èÂ§ÑÁêÜ„ÄÇ
+ `clear_memory_commands`: ÂØπËØùÂÜÖÊåá‰ª§Ôºå‰∏ªÂä®Ê∏ÖÁ©∫ÂâçÊñáËÆ∞ÂøÜÔºåÂ≠óÁ¨¶‰∏≤Êï∞ÁªÑÂèØËá™ÂÆö‰πâÊåá‰ª§Âà´Âêç„ÄÇ
+ `hot_reload`: Á®ãÂ∫èÈÄÄÂá∫ÂêéÔºåÊöÇÂ≠òÁ≠â‰∫éÁä∂ÊÄÅÔºåÈªòËÆ§ÂÖ≥Èó≠„ÄÇ
+ `character_desc` ÈÖçÁΩÆ‰∏≠‰øùÂ≠òÁùÄ‰Ω†ÂØπÊú∫Âô®‰∫∫ËØ¥ÁöÑ‰∏ÄÊÆµËØùÔºå‰ªñ‰ºöËÆ∞‰ΩèËøôÊÆµËØùÂπ∂‰Ωú‰∏∫‰ªñÁöÑËÆæÂÆöÔºå‰Ω†ÂèØ‰ª•‰∏∫‰ªñÂÆöÂà∂‰ªª‰Ωï‰∫∫Ê†º      (ÂÖ≥‰∫é‰ºöËØù‰∏ä‰∏ãÊñáÁöÑÊõ¥Â§öÂÜÖÂÆπÂèÇËÄÉËØ• [issue](https://github.com/zhayujie/chatgpt-on-wechat/issues/43))
+ `subscribe_msg`ÔºöËÆ¢ÈòÖÊ∂àÊÅØÔºåÂÖ¨‰ºóÂè∑Âíå‰ºÅ‰∏öÂæÆ‰ø°channel‰∏≠ËØ∑Â°´ÂÜôÔºåÂΩìË¢´ËÆ¢ÈòÖÊó∂‰ºöËá™Âä®ÂõûÂ§çÔºå ÂèØ‰ΩøÁî®ÁâπÊÆäÂç†‰ΩçÁ¨¶„ÄÇÁõÆÂâçÊîØÊåÅÁöÑÂç†‰ΩçÁ¨¶Êúâ{trigger_prefix}ÔºåÂú®Á®ãÂ∫è‰∏≠ÂÆÉ‰ºöËá™Âä®ÊõøÊç¢ÊàêbotÁöÑËß¶ÂèëËØç„ÄÇ

**5.LinkAIÈÖçÁΩÆ (ÂèØÈÄâ)**

+ `use_linkai`: ÊòØÂê¶‰ΩøÁî®LinkAIÊé•Âè£ÔºåÂºÄÂêØÂêéÂèØÂõΩÂÜÖËÆøÈóÆÔºå‰ΩøÁî®Áü•ËØÜÂ∫ìÂíå `Midjourney` ÁªòÁîª, ÂèÇËÄÉ [ÊñáÊ°£](https://link-ai.tech/platform/link-app/wechat)
+ `linkai_api_key`: LinkAI Api KeyÔºåÂèØÂú® [ÊéßÂà∂Âè∞](https://link-ai.tech/console/interface) ÂàõÂª∫
+ `linkai_app_code`: LinkAI Â∫îÁî®ÊàñÂ∑•‰ΩúÊµÅÁöÑcodeÔºåÈÄâÂ°´

**Êú¨ËØ¥ÊòéÊñáÊ°£ÂèØËÉΩ‰ºöÊú™ÂèäÊó∂Êõ¥Êñ∞ÔºåÂΩìÂâçÊâÄÊúâÂèØÈÄâÁöÑÈÖçÁΩÆÈ°πÂùáÂú®ËØ•[`config.py`](https://github.com/zhayujie/chatgpt-on-wechat/blob/master/config.py)‰∏≠ÂàóÂá∫„ÄÇ**

## ‰∏â„ÄÅËøêË°å

### 1.Êú¨Âú∞ËøêË°å

Â¶ÇÊûúÊòØÂºÄÂèëÊú∫ **Êú¨Âú∞ËøêË°å**ÔºåÁõ¥Êé•Âú®È°πÁõÆÊ†πÁõÆÂΩï‰∏ãÊâßË°åÔºö

```bash
python3 app.py                                    # windowsÁéØÂ¢É‰∏ãËØ•ÂëΩ‰ª§ÈÄöÂ∏∏‰∏∫ python app.py
```

ÁªàÁ´ØËæìÂá∫‰∫åÁª¥Á†ÅÂêéÔºåËøõË°åÊâ´Á†ÅÁôªÂΩïÔºåÂΩìËæìÂá∫ &quot;Start auto replying&quot; Êó∂Ë°®Á§∫Ëá™Âä®ÂõûÂ§çÁ®ãÂ∫èÂ∑≤ÁªèÊàêÂäüËøêË°å‰∫ÜÔºàÊ≥®ÊÑèÔºöÁî®‰∫éÁôªÂΩïÁöÑË¥¶Âè∑ÈúÄË¶ÅÂú®ÊîØ‰ªòÂ§ÑÂ∑≤ÂÆåÊàêÂÆûÂêçËÆ§ËØÅÔºâ„ÄÇÊâ´Á†ÅÁôªÂΩïÂêé‰Ω†ÁöÑË¥¶Âè∑Â∞±Êàê‰∏∫Êú∫Âô®‰∫∫‰∫ÜÔºåÂèØ‰ª•Âú®ÊâãÊú∫Á´ØÈÄöËøáÈÖçÁΩÆÁöÑÂÖ≥ÈîÆËØçËß¶ÂèëËá™Âä®ÂõûÂ§ç (‰ªªÊÑèÂ•ΩÂèãÂèëÈÄÅÊ∂àÊÅØÁªô‰Ω†ÔºåÊàñÊòØËá™Â∑±ÂèëÊ∂àÊÅØÁªôÂ•ΩÂèã)ÔºåÂèÇËÄÉ[#142](https://github.com/zhayujie/chatgpt-on-wechat/issues/142)„ÄÇ

### 2.ÊúçÂä°Âô®ÈÉ®ÁΩ≤

‰ΩøÁî®nohupÂëΩ‰ª§Âú®ÂêéÂè∞ËøêË°åÁ®ãÂ∫èÔºö

```bash
nohup python3 app.py &amp; tail -f nohup.out          # Âú®ÂêéÂè∞ËøêË°åÁ®ãÂ∫èÂπ∂ÈÄöËøáÊó•ÂøóËæìÂá∫‰∫åÁª¥Á†Å
```
Êâ´Á†ÅÁôªÂΩïÂêéÁ®ãÂ∫èÂç≥ÂèØËøêË°å‰∫éÊúçÂä°Âô®ÂêéÂè∞ÔºåÊ≠§Êó∂ÂèØÈÄöËøá `ctrl+c` ÂÖ≥Èó≠Êó•ÂøóÔºå‰∏ç‰ºöÂΩ±ÂìçÂêéÂè∞Á®ãÂ∫èÁöÑËøêË°å„ÄÇ‰ΩøÁî® `ps -ef | grep app.py | grep -v grep` ÂëΩ‰ª§ÂèØÊü•ÁúãËøêË°å‰∫éÂêéÂè∞ÁöÑËøõÁ®ãÔºåÂ¶ÇÊûúÊÉ≥Ë¶ÅÈáçÊñ∞ÂêØÂä®Á®ãÂ∫èÂèØ‰ª•ÂÖà `kill` ÊéâÂØπÂ∫îÁöÑËøõÁ®ã„ÄÇÊó•ÂøóÂÖ≥Èó≠ÂêéÂ¶ÇÊûúÊÉ≥Ë¶ÅÂÜçÊ¨°ÊâìÂºÄÂè™ÈúÄËæìÂÖ•¬†`tail -f nohup.out`„ÄÇÊ≠§Â§ñÔºå`scripts` ÁõÆÂΩï‰∏ãÊúâ‰∏ÄÈîÆËøêË°å„ÄÅÂÖ≥Èó≠Á®ãÂ∫èÁöÑËÑöÊú¨‰æõ‰ΩøÁî®„ÄÇ

&gt; **Â§öË¥¶Âè∑ÊîØÊåÅÔºö** Â∞ÜÈ°πÁõÆÂ§çÂà∂Â§ö‰ªΩÔºåÂàÜÂà´ÂêØÂä®Á®ãÂ∫èÔºåÁî®‰∏çÂêåË¥¶Âè∑Êâ´Á†ÅÁôªÂΩïÂç≥ÂèØÂÆûÁé∞ÂêåÊó∂ËøêË°å„ÄÇ

&gt; **ÁâπÊÆäÊåá‰ª§Ôºö** Áî®Êà∑ÂêëÊú∫Âô®‰∫∫ÂèëÈÄÅ **#reset** Âç≥ÂèØÊ∏ÖÁ©∫ËØ•Áî®Êà∑ÁöÑ‰∏ä‰∏ãÊñáËÆ∞ÂøÜ„ÄÇ


### 3.DockerÈÉ®ÁΩ≤

&gt; ‰ΩøÁî®dockerÈÉ®ÁΩ≤Êó†ÈúÄ‰∏ãËΩΩÊ∫êÁ†ÅÂíåÂÆâË£Ö‰æùËµñÔºåÂè™ÈúÄË¶ÅËé∑Âèñ docker-compose.yml ÈÖçÁΩÆÊñá‰ª∂Âπ∂ÂêØÂä®ÂÆπÂô®Âç≥ÂèØ„ÄÇ

&gt; ÂâçÊèêÊòØÈúÄË¶ÅÂÆâË£ÖÂ•Ω `docker` Âèä `docker-compose`ÔºåÂÆâË£ÖÊàêÂäüÁöÑË°®Áé∞ÊòØÊâßË°å `docker -v` Âíå `docker-compose version` (Êàñ docker compose version) ÂèØ‰ª•Êü•ÁúãÂà∞ÁâàÊú¨Âè∑ÔºåÂèØÂâçÂæÄ [dockerÂÆòÁΩë](https://docs.docker.com/engine/install/) ËøõË°å‰∏ãËΩΩ„ÄÇ

**(1) ‰∏ãËΩΩ docker-compose.yml Êñá‰ª∂**

```bash
wget https://open-1317903499.cos.ap-guangzhou.myqcloud.com/docker-compose.yml
```

‰∏ãËΩΩÂÆåÊàêÂêéÊâìÂºÄ `docker-compose.yml` ‰øÆÊîπÊâÄÈúÄÈÖçÁΩÆÔºåÂ¶Ç `OPEN_AI_API_KEY` Âíå `GROUP_NAME_WHITE_LIST` Á≠â„ÄÇ

**(2) ÂêØÂä®ÂÆπÂô®**

Âú® `docker-compose.yml` ÊâÄÂú®ÁõÆÂΩï‰∏ãÊâßË°å‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä®ÂÆπÂô®Ôºö

```bash
sudo docker compose up -d
```

ËøêË°å `sudo docker ps` ËÉΩÊü•ÁúãÂà∞ NAMES ‰∏∫ chatgpt-on-wechat ÁöÑÂÆπÂô®Âç≥Ë°®Á§∫ËøêË°åÊàêÂäü„ÄÇ

Ê≥®ÊÑèÔºö

 - Â¶ÇÊûú `docker-compose` ÊòØ 1.X ÁâàÊú¨ ÂàôÈúÄË¶ÅÊâßË°å `sudo  docker-compose up -d` Êù•ÂêØÂä®ÂÆπÂô®
 - ËØ•ÂëΩ‰ª§‰ºöËá™Âä®Âéª [docker hub](https://hub.docker.com/r/zhayujie/chatgpt-on-wechat) ÊãâÂèñ latest ÁâàÊú¨ÁöÑÈïúÂÉèÔºålatest ÈïúÂÉè‰ºöÂú®ÊØèÊ¨°È°πÁõÆ release Êñ∞ÁöÑÁâàÊú¨Êó∂ÁîüÊàê

ÊúÄÂêéËøêË°å‰ª•‰∏ãÂëΩ‰ª§ÂèØÊü•ÁúãÂÆπÂô®ËøêË°åÊó•ÂøóÔºåÊâ´ÊèèÊó•Âøó‰∏≠ÁöÑ‰∫åÁª¥Á†ÅÂç≥ÂèØÂÆåÊàêÁôªÂΩïÔºö

```bash
sudo docker logs -f chatgpt-on-wechat
```

**(3) Êèí‰ª∂‰ΩøÁî®**

Â¶ÇÊûúÈúÄË¶ÅÂú®dockerÂÆπÂô®‰∏≠‰øÆÊîπÊèí‰ª∂ÈÖçÁΩÆÔºåÂèØÈÄöËøáÊåÇËΩΩÁöÑÊñπÂºèÂÆåÊàêÔºåÂ∞Ü [Êèí‰ª∂ÈÖçÁΩÆÊñá‰ª∂](https://github.com/zhayujie/chatgpt-on-wechat/blob/master/plugins/config.json.template)
ÈáçÂëΩÂêç‰∏∫ `config.json`ÔºåÊîæÁΩÆ‰∫é `docker-compose.yml` Áõ∏ÂêåÁõÆÂΩï‰∏ãÔºåÂπ∂Âú® `docker-compose.yml` ‰∏≠ÁöÑ `chatgpt-on-wechat` ÈÉ®ÂàÜ‰∏ãÊ∑ªÂä† `volumes` Êò†Â∞Ñ:

```
volumes:
  - ./config.json:/app/plugins/config.json
```
**Ê≥®**ÔºöÈááÁî®dockerÊñπÂºèÈÉ®ÁΩ≤ÁöÑËØ¶ÁªÜÊïôÁ®ãÂèØ‰ª•ÂèÇËÄÉÔºö[dockerÈÉ®ÁΩ≤CoWÈ°πÁõÆ](https://www.wangpc.cc/ai/docker-deploy-cow/)
### 4. RailwayÈÉ®ÁΩ≤

&gt; Railway ÊØèÊúàÊèê‰æõ5ÂàÄÂíåÊúÄÂ§ö500Â∞èÊó∂ÁöÑÂÖçË¥πÈ¢ùÂ∫¶„ÄÇ (07.11Êõ¥Êñ∞: ÁõÆÂâçÂ§ßÈÉ®ÂàÜË¥¶Âè∑Â∑≤Êó†Ê≥ïÂÖçË¥πÈÉ®ÁΩ≤)

1. ËøõÂÖ• [Railway](https://railway.app/template/qApznZ?referralCode=RC3znh)
2. ÁÇπÂáª `Deploy Now` ÊåâÈíÆ„ÄÇ
3. ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÊù•ÈáçËΩΩÁ®ãÂ∫èËøêË°åÁöÑÂèÇÊï∞Ôºå‰æãÂ¶Ç`open_ai_api_key`, `character_desc`„ÄÇ

**‰∏ÄÈîÆÈÉ®ÁΩ≤:**
  
  [![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/qApznZ?referralCode=RC3znh)

&lt;br&gt;

# üîé Â∏∏ËßÅÈóÆÈ¢ò

FAQsÔºö &lt;https://github.com/zhayujie/chatgpt-on-wechat/wiki/FAQs&gt;

ÊàñÁõ¥Êé•Âú®Á∫øÂí®ËØ¢ [È°πÁõÆÂ∞èÂä©Êâã](https://link-ai.tech/app/Kv2fXJcH)  (ËØ≠ÊñôÊåÅÁª≠ÂÆåÂñÑ‰∏≠ÔºåÂõûÂ§ç‰ªÖ‰æõÂèÇËÄÉ)

# üõ†Ô∏è ÂºÄÂèë

Ê¨¢ËøéÊé•ÂÖ•Êõ¥Â§öÂ∫îÁî®ÔºåÂèÇËÄÉ [Terminal‰ª£Á†Å](https://github.com/zhayujie/chatgpt-on-wechat/blob/master/channel/terminal/terminal_channel.py) ÂÆûÁé∞Êé•Êî∂ÂíåÂèëÈÄÅÊ∂àÊÅØÈÄªËæëÂç≥ÂèØÊé•ÂÖ•„ÄÇ ÂêåÊó∂Ê¨¢ËøéÂ¢ûÂä†Êñ∞ÁöÑÊèí‰ª∂ÔºåÂèÇËÄÉ [Êèí‰ª∂ËØ¥ÊòéÊñáÊ°£](https://github.com/zhayujie/chatgpt-on-wechat/tree/master/plugins)„ÄÇ

# ‚úâ ËÅîÁ≥ª

Ê¨¢ËøéÊèê‰∫§PR„ÄÅIssuesÔºå‰ª•ÂèäStarÊîØÊåÅ‰∏Ä‰∏ã„ÄÇÁ®ãÂ∫èËøêË°åÈÅáÂà∞ÈóÆÈ¢òÂèØ‰ª•Êü•Áúã [Â∏∏ËßÅÈóÆÈ¢òÂàóË°®](https://github.com/zhayujie/chatgpt-on-wechat/wiki/FAQs) ÔºåÂÖ∂Ê¨°ÂâçÂæÄ [Issues](https://github.com/zhayujie/chatgpt-on-wechat/issues) ‰∏≠ÊêúÁ¥¢„ÄÇ‰∏™‰∫∫ÂºÄÂèëËÄÖÂèØÂä†ÂÖ•ÂºÄÊ∫ê‰∫§ÊµÅÁæ§ÂèÇ‰∏éÊõ¥Â§öËÆ®ËÆ∫Ôºå‰ºÅ‰∏öÁî®Êà∑ÂèØËÅîÁ≥ª[‰∫ßÂìÅÈ°æÈóÆ](https://img-1317903499.cos.ap-guangzhou.myqcloud.com/docs/product-manager-qrcode.jpg)Âí®ËØ¢„ÄÇ

# üåü Ë¥°ÁåÆËÄÖ

![cow contributors](https://contrib.rocks/image?repo=zhayujie/chatgpt-on-wechat&amp;max=1000)
</pre>
          ]]></content:encoded>
            <category>Python</category>
        </item>
    </channel>
</rss>